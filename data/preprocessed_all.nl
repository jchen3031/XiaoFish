$ cat 1	<MISSING>
$ file /bin/bash	<MISSING>
"$ find . -name ""*mp3"" -print0 | xargs -0 mid3iconv -e <source-encoding> -d"	<MISSING>
"$ find . -name ""*mp3"" -print0 | xargs -0 mid3iconv -e eur-kr -d"	<MISSING>
$ find . \( -name d -prune \) -o -name hi.dat	<MISSING>
$ find other -maxdepth 1	<MISSING>
$ join -j 2 -o 1.1 1.2 2.1 <(sort 1) <(sort -k2 2)	<MISSING>
$ ls	<MISSING>
$ ls -fltr	<MISSING>
"$ ls -fltr ""./my dir"" ""./anotherdir"""	<MISSING>
$ ls -fltr $var	<MISSING>
$ ls -fltr *	<MISSING>
$ my_temp_dir=$(mktemp -d --tmpdir=$temp_dir -t $template)	<MISSING>
$ tar xvfj filename.tar.xz	<MISSING>
$(cat myfile)	<MISSING>
$(dirname $(readlink -e ../../../../etc/passwd))	<MISSING>
$(dirname $(readlink -f $bash_source))	<MISSING>
$(dirname $0)	<MISSING>
"$(readlink -f $(dirname ""$0""))"	<MISSING>
$@ | tee $file	<MISSING>
$dig -x 8.8.8.8 | grep  ptr | grep -o google.*	<MISSING>
$sudo chown root file.sh	<MISSING>
( awk 'nr % 2' input; awk 'nr % 2 == 0' input ) | paste - - - | column -s'   ' -t	<MISSING>
( cd /tmp; mycommand )	<MISSING>
( cd ~/mydir && mycommand )	<MISSING>
"( find . -iname ""dl-aster-full-20131102*"" -exec grep ""processed files"" {} \;) | cut -d"":"" -f2"	<MISSING>
( find . -name '*.txt' -exec cat {} ';' ) | sed 's/ /\n/g' | grep '^aaa$' | wc -l	<MISSING>
( find . \( -name '*.h' -o -name '*.cpp' \) -print0 | xargs -0 cat ) | wc -l	<MISSING>
( find ./ -name '*.php' -print0 | xargs -0 cat ) | wc -l	<MISSING>
(bsd specific) display process information twice, waiting one second between each, filtering out the header line.	
(cd a && find .) > tmp.txt	<MISSING>
(cd ~/bin/filesdvorak/; find . -maxdepth 1 | sort > b)	<MISSING>
(chromium --user-data-dir=$(mktemp -d) &)	<MISSING>
(find $dir/tmp/daily/ -name *.tar.gz | sort -n | head -2	<MISSING>
(find . -type f -ctime $ftime && find . -type f -atime $ftime && find . -type f -mtime $ftime) | sort | uniq	<MISSING>
(find /boot | sed s'/^/stdout:/' ) 3>&1 1>&2 2>&3 | sed 's/^/stderr:/'	<MISSING>
(gnu specific) calculte and output amount of cpu load taken by all processes belonging to user 'abc'.	
(gnu specific) display cumulative cpu usage over 5 seconds.	
(gnu specific) display info on most cpu-intensive processes once and exit.	
(gnu specific) display information about number of processes in various states.	
(gnu specific) display information on cpu usage.	
(gnu specific) display numbers of processes in following states: running, sleeping, stopped, and defunct (zombie).	
(gnu specific) display process information (batch mode, display once) with full command lines.	
"(gnu specific) display process information for all processes whose command line contains ""processname""."	
"(gnu specific) display process information once, adding ""__custom_line_marker"" at the end of each line."	
(gnu specific) display the percentage of cpu usage allocated to user processes.	
(gnu specific) display various information about process currently taking the most cpu time.	
(gnu specific) find the process currently taking the most cpu time.	
(gnu specific) monitor all processes belonging to user 'abc' in batch mode (not accepting user input) and displaying info each 30 seconds up to 10 times.	
(gnu specific) monitor all processes whose command contains 'http'.	
(gnu specific) monitor all processes whose command includes 'java'.	
(gnu specific) monitor all processes whose command includes 'process-name'.	
(gnu specific) monitor only processes whose command contains string_to_match_in_cmd_line.	
"(gnu specific) monitor process activity, starting with the last remembered ""c"" state reversed: typing ""c"" toggles between using process names or full command lines."	
(gnu specific) set variable line to full process info of process currently taking the most cpu time, squeezing multiple consecutive spaces into one.	
(gnu specific) set variable output to full process info of process currently taking the most cpu time.	
(gnu specific) use 'top' to monitor one process.	
(gnu specific) use 'top' to monitor process 'a.out'	
(gnu specific) use 'top' to monitor process 'a.out', printing information 100 times.	
(gnu specific) use 'top' to monitor the newest instance of programname.	
(gnu specific) use 'top' to monitor the oldest instance of programname.	
"(gnu specific: top) send e-mail to ""your_email@domain.com"" with subject ""any subject"" containing process statistics output by the gnu version of 'top'."	
"(ifs=$'\n'; for t in `find -type f -name ""*txt*"" | sed 's|.*/||'`; do ln -s $t ../folder2/$t; done)"	<MISSING>
"(linux specific) copy loadable kernel module ""mymodule.ko"" to the drivers in modules directory matchig current kernel."	
"(linux specific) display all lines containing ""ip_mroute"" in the current kernel's compile-time config file."	
(linux specific) display current running kernel's compile-time config file.	
"(linux specific) find all loadable modules for current kernel, whose name includes ""perf"""	
"(linux specific) look for any instance of ""highmem"" in the current kernel's compile-time config file."	
"(linux specific) search for command ""tail"" in the maps of the process with pid 2671"	
"(linux specific) use midnight commander's ""view"" mode to interactively display the current kernel's compile-time config file."	
(linux-specific) display a tree-like view of usb devices, letting the user page through it with the arrow keys, with the q key to quit.	
(linux-specific) display all lines containing probes in the current kernel's compile-time config file.	
(linux-specific) display all lines containing utrace in the current kernel's compile-time config file.	
"(linux-specific) look for any instance of ""ds1337"" in the modules.alias file matching current kernel release"	
(linux-specific) page through extended usb information.	
(ls -t|head -n x;ls)|sort|uniq -u|xargs rm	<MISSING>
"(mac osx specific) collect process information and display only lines containing pattern specified by variable ""app_name""."	
(mac osx specific) show the internal memory size used by process whose pid is specified by variable pid.	
(mac osx specific) show the private address space used by process whose pid is specified by variable pid.	
"(rsync -rcn --out-format=""%n"" old/ new/ && rsync -rcn --out-format=""%n"" new/ old/) | sort | uniq"	<MISSING>
(time ls) > ls_results 2> time_results	<MISSING>
(time ls) > outfile 2>&1	<MISSING>
... | column -s$'\t' -t	<MISSING>
... | paste -sd+ - | bc	<MISSING>
"...| awk '{print $5""\t\t"" $3""\t""$4}'|column -t"	<MISSING>
./a.out 2>&1 | tee output	<MISSING>
./a.out |& tee output	<MISSING>
./aaa.sh 2>&1 | tee -a log	<MISSING>
./aaa.sh |& tee -a log	<MISSING>
./hw | sleep 1000	<MISSING>
./myprogram | more	<MISSING>
./program | tee a.txt	<MISSING>
./script.sh | sort -u	<MISSING>
./series.bc | tr -d '\n' | sed 's.\\..g'	<MISSING>
./yourscript.ksh | sort | uniq	<MISSING>
"/bin/find -name ""core"" — exec rm {} \;"	<MISSING>
"/bin/sh -c ""/bin/true $(seq 1 100000)"""	<MISSING>
"/bin/sh -c ""/bin/true $(seq 1 99999)"""	<MISSING>
"/bin/true ""$(seq 1 100000)"""	<MISSING>
/bin/true $(seq 1 100000)	<MISSING>
/sbin/ifconfig  | sed -ne $'/127.0.0.1/ ! { s/^[ \t]*inet[ \t]\\{1,99\\}\\(addr:\\)\\{0,1\\}\\([0-9.]*\\)[ \t\/].*$/\\2/p; }'	<MISSING>
/sbin/ifconfig $(netstat -nr | tail -1 | awk '{print $nf}') | awk -f: '/inet /{print $2}' | cut -f1 -d ' '	<MISSING>
/usr/bin/find $*	<MISSING>
/usr/bin/find $dir -maxdepth 1 -ipath $tmp_dir -print -quit	<MISSING>
/usr/bin/find ./ $*	<MISSING>
"/usr/bin/find /home/user/series/ -iname ""*sample*"" -exec rm {} \;"	<MISSING>
/usr/bin/ifconfig eth0 | grep --word-regexp inet | awk '{print $2}'	<MISSING>
/usr/bin/sudo -u `whoami` `which program`	<MISSING>
/usr/bin/time -f%e ls >/dev/null	<MISSING>
/usr/sbin/host `hostname`	<MISSING>
"1 down vote wc -cl `find . -name ""*.php"" -type f`"	<MISSING>
<files.txt  xargs stat -c %s | paste -sd+ - | bc	<MISSING>
[ $(find your/dir -prune -empty) = your/dir ]	<MISSING>
"[ -z ""$(find aaa/ -maxdepth 1 -type f)"" ] && echo ""empty"""	<MISSING>
[ `md5sum $(which c++) | cut -d' ' -f1` == `md5sum $(which g++) | cut -d' ' -f1` ] && echo yes, equal content || echo no, unequal content	<MISSING>
"[[ ! -z `find 'dir/' -name 'something'` ]] && echo ""found"" || echo ""not found"""	<MISSING>
"[[ ! -z `find 'your_dir/' -name 'something'` ]] && echo ""found"" || echo ""not found"""	<MISSING>
"[[ ""$(find . -maxdepth 1 -cmin +60 -name file)"" = """" ]] && echo ""old"""	<MISSING>
[[ $(find /path/to/file -type f -size +51200c 2>/dev/null) ]] && echo true || echo false	<MISSING>
"\time -f ""%e real,%u user,%s sys"" ls -fs"	<MISSING>
\time -f%e sleep 1	<MISSING>
\time -o time.log command	<MISSING>
\w	<MISSING>
`dirname $0`	<MISSING>
`sudo chown -r mongodb:mongodb /data/*`	<MISSING>
"`which find` ""$@"" -print0;"	<MISSING>
"`which parallel` ""$@"""	<MISSING>
a no-op on filename with sed	
a=$( df -h )	<MISSING>
a=$(echo $each | wc -c)	<MISSING>
a=$(false)	<MISSING>
a=`w|cut -d' ' -f1`;	<MISSING>
ab=`ps -ef | grep -v grep | grep -wc processname`	<MISSING>
abort the shell or script on the first failed command	
"absolute_path=""$(cd ""$(dirname ""${bash_source[0]}"")"" && pwd)/$(basename ""${bash_source[0]}"")"""	<MISSING>
absolute_path=$(readlink -m /home/nohsib/dvc/../bop)	<MISSING>
abspath=$(readlink -e $path)	<MISSING>
abspath=$(readlink -f $path)	<MISSING>
abspath=$(readlink -m $path)	<MISSING>
"actual_path=$(readlink -f ""${bash_source[0]}"")"	<MISSING>
"add ""a new line"" on top of each *.py files under current directory"	
"add ""added line"" on top of each *.py files under current directory"	
"add ""execute"" to the permissions of all directories in the home directory tree"	
"add ""line of text here"" on top of each *.py files under current directory"	
"add ""new."" to the beginning of the name of ""original.filename"", renaming it to ""new.original.filename""."	
"add ""prefix"" to every non-blank line in ""file.txt"""	
"add ""prefix_"" to every non-blank line in ""a.txt"""	
add '.avi' extension to all files/directories with '.mkv' extension under '/volume1/uploads' directory tree	
"add a cron job to existing list, without removing existing ones, ro tun ""scripty.sh"" at 2:01 am, 3rd day of april (4th month), if that day happens to be a friday (5th day of the week starting with sunday=0)."	
"add a date time stamp to every line of output in ""ping google.com"""	
"add a date time stamp to every line of output in ""ping host"""	
"add a line number to every line in ""infile"""	
"add a line number to every line in ""long-file"""	
"add a number prefix followed by ')' to each line in ""$string"""	
"add content of ""filename"" to the existing cron jobs of user ""user"", without removing the previously existing cron jobs."	
"add cron lists from ""file1"" and ""file2"" to list of cron jobs, giving errors for any lines that cannot be parsed by crontab."	
"add cron lists from ""filename"" to list of cron jobs, giving errors for any lines that cannot be parsed by crontab."	
"add directory ""$home/pictures"" to the directory stack"	
"add executable permission to ""java_ee_sdk-6u2-jdk-linux-x64.sh"""	
"add executable permission to ""pretty-print"""	
"add executable permission to ""rr.sh"""	
"add execute permission to ""computedate"", ""col"", and ""printdirections"" for all users"	
"add execute permission to all files ending in "".sh"""	
"add group write permission to all files and directories in the current directory including hidden files and excluding "".."""	
add group write permission to all files in the current directory	
"add group write permission to all files matching ""*"" or ""...*"""	
"add line numbers to each non-blank line in ""file"" starting with number 1000001"	
add newline before all 2nd and consequent occurrences of '3d3d' in file 'temp' and write each line from the output to files with prefix 'temp' and numeric suffixes	
"add prefix ""prefix_"" to all "".jpg"" files in the current directory"	
"add prefix like number and ""^m${logfile}> "" to every non-blank line received on standard input"	
"add read and execute permission to command ""node"""	
add read and execute permission to every directory under the current directory	
add read permission for 'other' for all files/directories named 'rc.conf' under current directory tree	
"add read permission to others for the files in the current folder having the name ""rc.conf"" in their name."	
add read,write permissions to all the files in the current folder which have the permission 600	
add the .abc suffix to the names of all *.txt regular files in the current directory tree	
add the execute and read permission for all and the write permission for the user to the dir_data directory and all of its sub-directories.	
add variable 'v' with value '5' to a temporary environment, list this environment using 'less' to interactively view it.	
"add variable testvar with value ""bbb"" to a temporary environment, and search for testvar in all variables and their values in the resulting environment."	
address=$(dig +short google.com | grep -e '^[0-9.]+$' | head -n 1)	<MISSING>
adds %pathname% to the dirs stack (windows format).	
adds execution permissions on a script ./etc/bash_completion within homebrew home folder path.	
adjust the timestamp of 'filename' by subtracting 2 hours from it.	
adjust the timestamp of file $filename by subtracting 2 hours from it	
alias	<MISSING>
"alias ""cd $(history -p !!:1)"" as ""cd-"""	
"alias -g vv=""$(date)"""	<MISSING>
"alias -g x2=""| cut -d' ' -f2"""	<MISSING>
"alias -g x=""| cut -d' ' -f2"""	<MISSING>
alias -p | cut -d= -f1 | cut -d' ' -f2	<MISSING>
alias -s ps='screen -d -m okular'	<MISSING>
alias -s py=$editor	<MISSING>
alias ..='cd ..'	<MISSING>
alias 12np='ssh mydomain\\stephencheng@userxyz@host.com'	<MISSING>
alias :='xargs -i{}'	<MISSING>
"alias c1=""awk '{print \$1}'"""	<MISSING>
alias cats='konqueror http:'//icanhazcheezburger.com''	<MISSING>
alias cd-='cd $(history -p !!:1)'	<MISSING>
alias cd-='cd ${${(z)$(fc -l -1)}[3]}'	<MISSING>
"alias cdl='cd -- ""$(ls -t | head -n 1)""'"	<MISSING>
"alias clean='rm -rf ""#""* "".""*~ *~ *.bak *.dvi *.aux *.log'"	<MISSING>
alias cleanup='rm -rf -- foo bar baz'	<MISSING>
alias cleanup='rm -rf `pwd`/{foo,bar,baz}'	<MISSING>
alias current='cd $(cur -g)'	<MISSING>
alias devn='cat > /dev/null'	<MISSING>
alias dosetit='eval `setit-sh`'	<MISSING>
alias ff=find . -name $1	<MISSING>
"alias foo=""printf"""	<MISSING>
alias foo=$'echo a \'*\' is born at $(date)'	<MISSING>
alias foo='bar=baz'	<MISSING>
alias foo=bar=baz	<MISSING>
alias git-root='cd $(git rev-parse --show-cdup)'	<MISSING>
"alias git-root='if [ ""`git rev-parse --show-cdup`"" != """" ]; then cd `git rev-parse --show-cdup`; fi'"	<MISSING>
alias go='gopath=$(infer-gopath.sh) go'	<MISSING>
alias go='ssh $(pbpaste) -l pete'	<MISSING>
alias h='history'	<MISSING>
"alias histgrep=""history | grep"""	<MISSING>
alias itmstransporter='`xcode-select --print-path`/../applications/application\ loader.app/contents/macos/itms/bin/itmstransporter'	<MISSING>
alias j7='java_home=`/usr/libexec/java_home -v 1.7`'	<MISSING>
"alias jump=""cd $(myscript.sh)"""	<MISSING>
"alias killaf=""kill -9 `psu|grep mf1pp|grep -v grep|awk '{print $2}'`"""	<MISSING>
alias la='ls -a -l'	<MISSING>
"alias logspace=""find /apps/ /opt/ -type f -size +100m -exec ls -lh {} \; | awk '{print $5, $9 }'"""	<MISSING>
alias logspace='find /apps/ /opt/ -type f -size +100m -exec ls -lh {} \; |  awk '\''{print $5, $9 }'\'''	<MISSING>
alias ls='ls -lrta'	<MISSING>
"alias lvim=""vim -c \""normal '0\"""""	<MISSING>
"alias m=""mplayer -novideo -loop 0"""	<MISSING>
"alias memu=""ps -u $(whoami) -o pid,rss,command | awk '{print \$0}{sum+=\$2} end {print \""total\"", sum/1024, \""mb\""}'"""	<MISSING>
alias mkcd='_(){ mkdir $1; cd $1; }; _'	<MISSING>
alias mkcd='_(){ mkdir -pv $1; cd $1; }; _'	<MISSING>
alias mkdir=¨mkdir -p¨	<MISSING>
"alias my_command=""$oldalias --fail-if-command-contains=$bad_string"""	<MISSING>
"alias my_command=""$oldalias -option 3"""	<MISSING>
"alias mycd=""cd `echo $1`"""	<MISSING>
alias no=ls -f	<MISSING>
alias prettify_json=php -e '$o = json_decode($argn); print json_encode($o, json_pretty_print);'	<MISSING>
alias prettyjson='python -m json.tool'	<MISSING>
"alias psgrep=""ps -ef | grep"""	<MISSING>
alias pwd='/bin/pwd | pbcopy'	<MISSING>
alias pwd='echo -n $(/bin/pwd) | pbcopy'	<MISSING>
alias pwd='echo -n `pwd` | pbcopy'	<MISSING>
alias py='python2.5 -o'	<MISSING>
alias restart_rails='kill -9 `cat tmp/pids/server.pid`; rails server -d'	<MISSING>
"alias rm100m=""find / -type f -name *.tar -size +100m -exec rm -i {} \;"""	<MISSING>
"alias rm1g=""find / -type f -name *.tar -size +1g -exec rm -i {} \;"""	<MISSING>
"alias rm2g=""find / -type f -name *.tar -size +2g -exec rm -i {} \;"""	<MISSING>
"alias rm5g=""find / -type f -name *.tar -size +5g -exec rm -i {} \;"""	<MISSING>
"alias rmc=""find . -iname core -exec rm {} \;"""	<MISSING>
"alias s='it=$($(history | tail -2 | head -1 | cut -d"" "" -f4-))'"	<MISSING>
"alias subs=""du -sch `find ./ -maxdepth 1 -type d`"""	<MISSING>
alias te='tail -f /var/log/apache2/error_log | perl -ne '\''...'\'''	<MISSING>
"alias unix=""date +%s"""	<MISSING>
alias unix='echo $(date +%s)'	<MISSING>
alias unsetvar='source /your/path/to/the/script/unsetvar'	<MISSING>
alias vimrc='$editor ~/.vimrc'	<MISSING>
alias webshare='python -m simplehttpserver'	<MISSING>
alias your_env='source ~/scripts/your_env.sh'	<MISSING>
"alias | awk '/^alias /{print substr($2,1,index($2,""="")-1)}'"	<MISSING>
alias | grep my_previous_alias	<MISSING>
alias | grep xlogs	<MISSING>
all .jpg or .png images modified in the past week	
all the files that end with .mp3 and end with .jpg	
"allocate a pseudo-terminal and execute ""screen -r -x ls"" which executes ""ls"" within the screen session on host ""example.com"""	
"allocate a pseudo-terminal and execute ""screen -r"" followed by ""ls"" on host ""example.com"""	
"allocate a pseudo-terminal and execute ""screen -r"" on host ""example.com"""	
"allow all users to execute ""myscript.sh"""	
"allow all users to execute '$pathtoshell""myshell.sh""'"	
"allow anyone to run command ""xvfb"" as the owner of ""xvfb"""	
"allow ssh from 127.0.0.1 on port ""someport"" through ""proxy.host"" to ""host.in.the.remote.net"" on port 22"	
"always answer ""no"" to any prompt from ""<command>"""	
"amv=$(mount -l | grep ""\[$vlabel\]"")"	<MISSING>
"answer ""1"" repeatedly until ""command"" exits"	
"answer ""n"" to any prompts in the interactive recursive removal of ""dir1"", ""dir2"", and ""dir3"""	
"answer ""y"" to all ""are you sure?"" prompts from command ""cp * /tmp"""	
"answer ""y"" to all prompts of ""rm -rf foo"""	
"answer ""y"" to any prompts in the interactive recursive removal of ""dir1"", ""dir2"", and ""dir3"""	
ant 2>&1|tee build.log	<MISSING>
any_command_what_produces_relative_path_names | cpio -pamvd /new/parent/dir	<MISSING>
"append "" | country"" to every line in ""file"""	
"append ""& bytes"" to the end of every line in ""$tempfile"" and format the result as a table"	
"append "".txt"" to all filenames in the current directory tree"	
"append ""<br/>"" to the end of each line in ""1\n2\n3"""	
"append ""\r"" on each line of file ""input"" and display the printable characters"	
"append ""deb blah ... blah"" to ""/etc/apt/sources.list"" as root"	
"append ""foo"" and ""bar"" column in file ""file"" with values dependent on the current table contents"	
append *.java files from the current directory tree to tar archive `myfile.tar'	
append all *.mp3 files modified within the last 180 days to tar archive `music.tar'	
append all png and jpg files to tar archive 'images.tar'	
"append all regular files modified in the last 24 hours to the ""$archive.tar"" tar archive"	
append history lines from this session to the history list	
"append the contents of "".cwdhist"" file to the current in-memory history list"	
"append the contents of ""file.txt"" to the current in-memory history list"	
append the current date in '%d%m%y-%h-%m' format, '_' and the current username, then save it in 'name' variable	
append the current date in '%y%m%d_%h%m' format with the basename of $0 and save it to variable 'logname'	
append the current date to variable 'lbuffer'	
append the current user to the server access control list for x	
"append the date and command ran to ""/tmp/trace"" after every command"	
append the last modification time of file $arg as the seconds since epoch with a preceding space to the variable 'key'	
append the parent directory name with a space in all 'text.txt' files in all sub directories of current directory	
apply script 'script.ksh' to all files matching pattern 'image\*.jpg' under the directory tree 'dir'	
apply script ./group.sed with option --separate to all regular files of the current directory tree	
"apply script rename.sh to all files from the current directory tree whose names match regular expression ""xxx-xxx_[a-za-z]+_[0-9]+_[0-9]+\.jpg$"""	
apropos	<MISSING>
apropos -r '.*'	<MISSING>
apropos -r '^std' | vi -	<MISSING>
apropos -s 3 .	<MISSING>
apropos -s 3 . | grep ^[a-z]	<MISSING>
apropos disk	<MISSING>
apropos postscript | grep -i png	<MISSING>
"architecture=""$(uname -m)"""	<MISSING>
"archive ""./dir"" to ""user@host:/path"" via ssh on port 2222 and display progress"	
"archive ""./htmlguide"" to ""~/src/"" with resolved symbolic links and delete any extraneous files from ""~/src/"" not found in ""./htmlguide"""	
"archive ""/home/abc/*"" to ""/mnt/windowsabc"" with human readable output"	
"archive ""/home/path"" to ""path"" on host ""server"" showing progress and statistics and remove files in the destination not found in the source"	
"archive ""/home/user1"" to ""wobgalaxy02:/home/user1"" excluding hidden files"	
"archive ""/local/path/some_file"" to ""/some/path"" on host ""server.com"" authenticating as user ""usr"", compress data during transmission, show progress details."	
"archive ""/media/10001/music/"" on host ""server"" to local directory ""/media/incoming/music/"" and skip files that are newer in the destination, delete any files in the destination not in the source, and compress data during transmission"	
"archive ""/media/incoming/music/"" to ""/media/10001/music/"" on host ""server"" and skip files that are newer in the destination, delete any files in the destination not in the source, and compress data during transmission"	
"archive ""/my/dir"" on host ""server"" as user ""user"" to the current local directory excluding files ending in "".svn"""	
"archive ""/path/to/application.ini"" on host ""source_host"" to current directory."	
"archive ""/path/to/copy"" on host ""remote"" as user ""user"" to ""/local/path"" via ssh on port ""$portnumber"""	
"archive ""/path/to/copy"" on host ""remote.host"" as user ""user"" to ""/path/to/local/storage"" updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission"	
"archive ""/path/to/copy"" to ""/path/to/local/storage"" on host ""host.remoted.from"" as user ""user"" updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission"	
"archive ""/path/to/files"" on host ""remotemachine"" authentifying as user ""user"" and compressing data during transmission, copy symlinks as symlinks."	
"archive ""/path/to/files"" to ""/path"" on host ""user@targethost"" with elevated permission on the remote host"	
"archive ""/path/to/files"" to ""user@targethost:/path"""	
"archive ""/path/to/files/source"" to ""user@remoteip:/path/to/files/destination"" via ssh on port 2121"	
"archive ""/path/to/sfolder"" to ""name@remote.server:/path/to/remote/dfolder"" compressing the data during transmission"	
"archive ""/path/to/sfolder"" to ""name@remote.server:/path/to/remote/dfolder"" preserving hard links and compressing the data during transmission"	
"archive ""/path/to/sfolder/"" to ""name@remote.server:/path/to/remote/dfolder"" preserving hard links and compressing the data during transmission"	
"archive ""/source"" and all files under ""folder/"" to ""/dstfolder/"" on host ""remoteserver"" as user ""user"" without copying files that already exist"	
"archive ""/source/backup"" to ""/destination"" with compression during transfer"	
"archive ""/top/a/b/c/d"" to host ""remote"" using relative path names"	
"archive ""/usr/local/"" to ""/backup/usr/local/"" on host ""xxx.xxx.xxx.xxx"" via ssh and show progress"	
"archive ""/var/www/test/"" to ""/var/www/test"" on host ""231.210.24.48"" as user ""ubuntu"" via ssh using identity file ""/home/test/pkey_new.pem"""	
"archive ""<source_dir>"" to ""rsyncuser@192.168.1.110:/srv/www/prj112/myfolder"""	
"archive ""_vim/"" to ""~/.vim"" suppressing non-error messages and compressing data during transmission"	
"archive ""_vimrc"" to ""~/.vimrc"" suppressing non-error messages and compressing data during transmission"	
"archive ""blanktest/"" to ""test/"" deleting any files in the destination not found in the source"	
"archive ""directory"" preserving hard links from host ""remote"" to the current local directory and keep partial files, handle sparse files efficiently, and itemize changes made"	
"archive ""filetocopy"" to ""/some/nonexisting/dirtocopyto"" on host ""ssh.myhost.net"" via ssh"	
"archive ""foo/bar/baz.c"" to ""remote:/tmp/"" preserving the relative path of ""foo/bar/baz.c"""	
"archive ""myfile"" to ""/foo/bar/"" and create directory ""/foo/bar/"" if ""/foo/"" exists"	
"archive ""path/subfolder"" to ""path"", skipping files that are newer at the destination."	
"archive ""path/to/working/copy"" to ""path/to/export"" excluding files or directories named "".svn"""	
"archive ""somedir/./foo/bar/baz.c"" to ""remote:/tmp/"" preserving the relative path of ""foo/bar/baz.c"""	
"archive ""source"" to ""destination"" via ssh on port ""port_number"""	
"archive ""source"" to ""destination"" via ssh with ""rwx"" permissions"	
"archive ""source"" to ""root@remote_server_name:/opt/backups"" via ssh on port 3382 and compress data during transmission"	
"archive ""src"" to ""dest"" via ssh with permissions set to 755"	
"archive ""src"" to ""dst"" updating files existing in ""dst"""	
"archive ""src"" to ""dst"" without overwriting existing files in ""dst"""	
"archive ""src-dir"" to ""dest-dir"" on ""remote-user@remote-host"" and delete any files in ""dest-dir"" not found in ""src-dir"""	
"archive ""src/bar"" on host ""foo"" to local directory ""/data/tmp"""	
"archive ""user@host1:/directory/"" to ""user@host2:/directory2/"" via ssh and compressing data during transmission"	
"archive ""user@remoteip:/path/to/files/"" to ""/local/path"" via ssh on port ""$portnumber"" and compressing data during transmission"	
archive a file named '{}' (literal) residing in current directory  into  '{}.tar.gz' and save it inside /var/www/	
"archive all "".txt"" files in the current directory to ""/path/to/dest"" keeping partially transferred files"	
archive all *.1 files/directories to each filename.tgz files and remove the original source	
archive all *.xml files under current directory tree to xml.tar excluding the files that match '/workspace/' in their paths	
archive all *html files using tar.	
archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension	
archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension transforming the full paths to relative paths	
archive all filepattern-*2009* files/directories under data/ into 2009.tar	
"archive all files (not directories) in ""folder1"" to ""copy_of_folder1"" specifying to include files info.txt and data.zip"	
"archive all files beginning with .env or .bash in current directory to user's home directory on host ""app1"", preserving timestamps and skipping files that are newer on ""app1"""	
archive all files in a current directory modified in the last 30 days	
"archive all files specified on standard input under ""/path/to/files"" to ""/path"" on host ""targethost"" as user ""user"" with escalated privileges"	
archive all files/directories under data/ into archive.tar	
archive all non-hidden files in the current directory and its sub-directories in the file arch.cpio	
archive all the normal/regular files in the current directory which have been modified in the last 24 hours.	
"archive and compress all files in ""data"" directory into ""data.tar.gz"""	
"archive any files changed in the last day from ""remote_host"" to ""local_dir"""	
"archive current directory to ""/some/path"" on localhost, using ssh to authentify as user ""me"", only update files that are newer in the source directory."	
"archive directory ""."" to ""server2::sharename/b"""	
"archive directory ""/mnt/data"" to ""/media/wd_disk_1/current_working_data/"", deleting any extraneous files in destination, compress data during copy."	
"archive directory ""symdir"" to ""symdir_output"" preserving symbolic links."	
"archive directory ""tata"" to directory ""tata2"", compressing data during copy."	
"archive directory specified by variable ""i"" to ""/iscsi"" preserving relative paths."	
"archive directory specified by variable ""myfolder"" to current directory."	
archive file 'file' with bzip2 tool, store compressed data to a file 'logfile' and also print to screen	
"archive files (not directories) in ""sorce_dir"" to ""target_dir"""	
"archive files in ""/mnt/source-tmp"" to ""/media/destination"""	
archive key.pub to directory .ssh in user's home directory on host specified by first parameter to function or script, using ssh to connect on port specified by second parameter to function or script, compress data during transmission.	
archive present working directory excluding several files and directories	
"archive preserving permissions and ownership files in ""/var/www/"" on host ""user@10.1.1.2"" to local ""/var/www/"""	
"archive showing progress ""sourcefolder"" to ""/destinationfolder"" excluding ""thefoldertoexclude"""	
"archive showing progress all files in ""/media/2tb\ data/data/music/"" to ""/media/wd/network_sync/music/"" excluding files matching ""*.vob"", ""*.avi"", ""*.mkv"", ""*.ts"", ""*.mpg"", ""*.iso"", ""*ar"", ""*.vob"", ""*.bup"", ""*.cdi"", ""*.iso"", ""*.shn"", ""*.mpg"", ""*.avi"", ""*.dat"", ""*.img"", ""*.nrg"", ""*.cdr"", ""*.bin"", ""*.mov"", ""*.goutputs*"", ""*.flv"", ""*.mov"", ""*.m2ts"", ""*.cdg"", ""*.ifo"", ""*.asf"", and ""*.ite"""	
archive the directory structure under .. directory into dirstructure.tar	
archive the directory structure under backup directory into directory-structure.tar	
archive the directory structure under current directory into /somewhereelse/whatever-dirsonly.tar	
archive the directory structure under current directory into directory-structure.tar	
archive the directory structure under current directory into dirstructure.tar	
archive the entire file system into tarfile.tar.bz2	
archive the list of 1st level subdirectories in /fss/fin to /fss/fi/outfile.tar.gz	
"args=""--ignore `echo ${to_ignore[@]} | tr ' ' ','`"""	<MISSING>
"arr=$( $line | tr "" "" ""\n"")"	<MISSING>
"as root, edit the cron job list of user ""apache"" using the editor specified by editor environment variable, or default /usr/bin/editor if this variable is not set."	
"as root, find from / all files called ""file.txt"""	
ask user confirmation and delete all the files in the directory /mydir which have not been accessed in the last 100*24 hours	
assign a name when starting a screen session	
assign permissions 644 to files in the current directory tree	
assign permissions 755 to directories in the current directory tree	
assign the alias rm100m to a find command that removes any .tar file larger than 100m.	
assign the alias rm1g to a find command that removes any .tar file larger than a gigabyte.	
assign the alias rm2g to a find command that removes any .tar file larger than 2 gigabytes.	
assign the alias rm5g to a find command that removes any .tar file larger than 5 gigabytes.	
assign the alias rmc to a find command that deletes all core dump files in the currenty directory and below.	
assigns mac address 00:80:48:ba:d1:30 to interface eth0.	
attach to a not detached screen session. (multi display mode).	
attaches to 'test1' tmux session.	
attaches to a 'session name' tmux session.	
attempt to connect as root to localhost and copy /home/reportuser/dailyreport.doc to directory /root/dailyreports/20150105/ - this will normally fail because ssh won't accept root connections by default.	
"attempt to connect as root via ssh to host ""ip"" and copy /root/k to local machine, passing option ""stricthostkeychecking=no"" to the ssh backend - this will normally fail because ssh servers by default don't (and shouldn't) accept root logins."	
attempt to connect as root via ssh to host whose ip address or hostname is specified by environment variable ipaddress - this will normally fail because ssh servers normally don't accept root logins.	
"automatically log into ""some_site.com"" as user ""your_username"" using password ""your_password"""	
"automatically log into ""some_site.com"" on port 2400 as user ""your_username"" using password ""your_password"""	
"automatically send ""y"" to ""sudo rpm -uvh https://mirror.webtatic.com/yum/el6/latest.rpm"" to automate installation"	
"automatically spell check file ""text.txt"" using ""aspell"" command"	
"automatically spell check file ""text.txt"" using ""ispell"" command"	
"automatically spell check file ""text.txt"" using ""ispell"" command and log the output to ""out.txt"""	
awk '!/^[[:space:]]*$/{++x} end{print x}' filename	<MISSING>
"awk 'begin{srand();} {printf ""%06d %s\n"", rand()*1000000, $0;}' | sort -n | cut -c8-"	<MISSING>
"awk 'fnr==nr { array[$1]++; next } { n = asorti(array,sort); for (i=1; i<=n; i++) if (sort[i] <= $1 + 10 && sort[i] >= $1 - 10 && $1 != sort[i]) line = (line ? line "","" : line) sort[i]; print $0, line; line = """" }' file.txt{,} | column -t"	<MISSING>
awk 'fnr==nr { for(i=2;i<=nf;i++) a[$1][i]=$i; next } { for(j=2;j<=nf;j++) $j-=a[$1][j] }1' file2 file1 | rev | column -t | rev	<MISSING>
"awk 'nr==1 { print; next } { print $0, ($1 == a && $2 == b) ? ""equal"" : ""not_equal""; a = $1; b = $3 }' file | column -t"	<MISSING>
"awk 'nr==1 {print $0, ""foo"", ""bar""; next} {print $0, ($2==""x""?""-"":""x""), ($4==""x""?""-"":""x"")}' file | column -t"	<MISSING>
awk 'nr==16224, nr==16482' file	<MISSING>
awk 'nr==16224, nr==16482-1; nr==16482 {print; exit}' file	<MISSING>
"awk 'nr==fnr{m[$1]=$2"" ""$3; next} {print $0, m[$1]}' file2 file1 | column -t"	<MISSING>
awk '{ ... }' <(gzip -dc input1.vcf.gz) <(gzip -dc input2.vcf.gz)	<MISSING>
awk '{for(i=3;i<=nf;i++){print $1,$2,$i}}' file | column -t	<MISSING>
"awk '{gsub(/-/,""0"",$4);gsub(/-/,""0"",$5)}1' test.in | column -t"	<MISSING>
"awk '{gsub(/^[ \t]+|[ \t]+$/,""""); print;}' in.txt | hexdump -c | less"	<MISSING>
"awk '{if (nr!=1) {print}}' $in_file | split -d -a 5 -l 100000 - $in_file""_"""	<MISSING>
"awk '{print ""result ="",$0}' <(rev file)"	<MISSING>
awk '{print $1}' file.txt | xargs dig +short	<MISSING>
awk '{print $1}' file2 | comm -1 -3 file1 - | join file2 -	<MISSING>
awk '{print $2}' < file.txt | paste -s -d, -	<MISSING>
awk '{print $nf}' file.txt | paste -sd, | sed 's/,/, /g'	<MISSING>
"awk '{print(nr""\t""$0)}' file_name | sort -t$'\t' -k2,2 | uniq --skip-fields 1 | sort -k1,1 -t$'\t' | cut -f2 -d$'\t'"	<MISSING>
"awk '{print(nr""\t""$0)}' file_name | sort -t$'\t' -k2,2 | uniq -u --skip-fields 1 | sort -k1,1 -t$'\t' | cut -f2 -d$'\t'"	<MISSING>
"awk '{printf ""%s "", $0} end {printf ""\n""}' inputfile"	<MISSING>
"awk '{printf ""%s "", $0}' inputfile"	<MISSING>
"awk '{printf ""%s|"", $0} end {printf ""\n""}' inputfile"	<MISSING>
awk '{s+=$1} end {print s}' mydatafile	<MISSING>
"awk '{s+=$1} end {printf ""%.0f"", s}' mydatafile"	<MISSING>
awk -f '\t' '{print $2}' * | sort | uniq -c | sort -nr	<MISSING>
awk -f `which script.awk` arg1	<MISSING>
awk -f script.awk file	<MISSING>
awk -f script.awk file.txt{,} | column -t	<MISSING>
awk -f script.awk file2 file1 | rev | column -t | rev	<MISSING>
awk -f script.awk file{,} | column -t	<MISSING>
"awk -f""\t"" 'nf>1' file"	<MISSING>
awk -f'\t' 'nr==fnr{a[$5];next} $5 in a' <(zcat file2.txt) <(zcat file1.txt)	<MISSING>
"awk -f, 'begin {ofs = "",""} {gsub(""-([0-9.]+)"", ""("" substr($3, 2) "")"", $3); print}' inputfile"	<MISSING>
"awk -f, 'nr==1 {gsub(/""/,"""",$3);print $3}' ""$(dirname $(readlink -f $(which erl)))/../releases/releases"""	<MISSING>
"awk -f, '{ if (nr == 1)print}{if($3 == ""f"")print}' input | column -t -s,"	<MISSING>
awk 1 ors=' ' file	<MISSING>
"b=`echo ""$a"" | awk '{ print tolower($1) }'`"	<MISSING>
"b=`echo ""$a"" | awk '{ print toupper($1) }'`"	<MISSING>
"b=`echo ""$a"" | sed 's/./\l&/g'`"	<MISSING>
"b=`echo ""$a"" | sed 's/./\u&/g'`"	<MISSING>
b=`w|cut -d' ' -f1`;	<MISSING>
back up all *.txt files/directories in new files/directories with a .bak extension in their names under /etc directory	
backup a directory with a zenity progress bar	
backup all of the java files in the current directory tree by copying them and appending the suffix .bk to each	
backup all php files under the current directory tree	
"backup mysql database ""database"" with ""username"" and ""pswd"", compress with gzip and add the time stamp before emailing to ""me@domain.com"""	
backup permissions of the files in the current directory tree	
bar file1 | wc -l	<MISSING>
bar=$(cat foo.txt | { read bat;echo $bat;})	<MISSING>
base=$(dirname $(readlink $file))	<MISSING>
"basedir=$(cygpath -am ""$(dirname ""$0"")"")"	<MISSING>
"basedir=$(cygpath -m ""$(dirname ""$0"")"")"	<MISSING>
"basedir=$(dirname ""$(echo ""$0"" | sed -e 's,\\,/,g')"")"	<MISSING>
basedir=$(pwd -l)	<MISSING>
"basename ""$(pwd)"""	<MISSING>
"basename ""$file"" | cut -d'.' -f-1"	<MISSING>
"basename ""`pwd`"""	<MISSING>
"basename ""some/unknown/amount/of/sub/folder/file.txt"""	<MISSING>
"basename $(echo ""a:b:c:d:e"" | tr ':' '/')"	<MISSING>
basename $(pwd)	<MISSING>
basename $0	<MISSING>
basename -- $0	<MISSING>
"basename -a ""${alpha[@]}"""	<MISSING>
basename /ebf/directivefiles/data_report_pd_import_script_abf1_6	<MISSING>
basename /foo/bar/stuff	<MISSING>
basename /home/jsmith/base.wiki .wiki	<MISSING>
basename /path/to/dir/filename.txt .txt	<MISSING>
basename /usr/local/svn/repos/example	<MISSING>
basename `pwd`	<MISSING>
basename testfile.txt.1 .1	<MISSING>
"bash -c ""test -h /proc/4129/ns/pid && test '$(readlink /proc/4129/ns/pid)' != '$(readlink /proc/1/ns/pid)'"""	<MISSING>
bash myscript.sh 2>&1 | tee output.log	<MISSING>
bash | tee /var/log/bash.out.log	<MISSING>
beginning at the end of the file, prints lines matching /2012/ and exits after first non-matching line	
bg	<MISSING>
bg %	<MISSING>
bg %  so it wont die when you logoff	<MISSING>
bg %1 [puts the job in the background]	<MISSING>
"bgxjobs="" $(jobs -pr | tr '\n' ' ')"""	<MISSING>
"big_lines=`cat foo.txt | grep -c ""$expression""`"	<MISSING>
"bind ""\c-i"" to ""complete"" function"	
"bind $'""\x61""':self-insert"	<MISSING>
"bind '""\c-i"":complete'"	<MISSING>
"bind '""\e[24~"":""\c-k \c-upwd\n""'"	<MISSING>
"bind '""\e[24~"":""foobar""'"	<MISSING>
"bind '""\e[24~"":""pwd\n""'"	<MISSING>
"bind '""\ey"": ""\e2\e.""'"	<MISSING>
"bind '""e"":self-insert'"	<MISSING>
bind -f ~/.inputrc	<MISSING>
bind -l | grep /	<MISSING>
"bind -m vi-insert '""{"" ""\c-v{}\ei""'"	<MISSING>
bind -p	<MISSING>
"bind -p | grep $'""\x61""'"	<MISSING>
bind -p | grep '\\e\\c-k'	<MISSING>
bind -p | grep --fixed-strings ' can be found on ' | perl -pe 's/((?<!\\)(?:\\\\)*)\\c/\1ctrl/g;s/((?<!\\)(?:\\\\)*)\\e/\1esc,/g'	<MISSING>
bind -p | grep -a forward	<MISSING>
"bind -p|grep -i '""[pe]""'"	<MISSING>
bind -q complete	<MISSING>
bind -r '\e'	<MISSING>
"bind -x '""\ew"":""who""'"	<MISSING>
"bind key ""\x61"" to insert itself"	
"bind mount ""/dev/random"" on ""/tmp/fakerandom"""	
"bind mount ""/original/path"" on ""/new/path"""	
"bind mount ""/something"" on ""/new_something"""	
"bind word ""foobar"" to key code ""\e[24~"""	
"bind word ""pwd\n"" to key code ""\e[24~"""	
brew --prefix	<MISSING>
brew doctor	<MISSING>
brew info grc	<MISSING>
brew install git bash-completion	<MISSING>
brew link --overwrite python	<MISSING>
brew link bash-completion	<MISSING>
brew outdated | wc -l	<MISSING>
brew reinstall git	<MISSING>
brew unlink bash-completion	<MISSING>
brew update	<MISSING>
brings down network interface eth0.	
"build an ""svn hotcopy"" command for each subdirectory of /usr/local/svn/repos/"	
bunzip2 -c bigfile.bz2 | wc -c	<MISSING>
bunzip2 -c compressedfile.bz2 | yourfilterprogram	<MISSING>
bunzip2 file.bz2	<MISSING>
"bypass all prompts by sending return to the install script downloaded from ""https://raw.github.com/homebrew/homebrew/go/install"""	
bzip2 *	<MISSING>
bzip2 -c file | tee -a logfile	<MISSING>
bzip2 -d /tmp/itunes20140618.tbz	<MISSING>
bzip2 -dc archive.tbz | tar xvf - filename	<MISSING>
"bzip2 -dc input1.vcf.bz2 input2.vcf.bz2 | awk 'fnr==nr { array[$1,$2]=$8; next } ($1,$2) in array { print $0 "";"" array[$1,$2] }'"	<MISSING>
bzip2 -dc xac.bz2	<MISSING>
bzip2 -k example.log	<MISSING>
bzip2 -kv */*	<MISSING>
bzip2 -kv */*/*	<MISSING>
bzip2 -kv */*/*/*	<MISSING>
bzip2 -kv */*/*/*/*	<MISSING>
bzip2 -kv */*/*/*/*/*	<MISSING>
bzip2 -kv */*/*/*/*/*/*	<MISSING>
bzip2 -kv */*/*/*/*/*/*/*	<MISSING>
bzip2 -t file.bz2	<MISSING>
bzip2 file | tee -a logfile	<MISSING>
bzip2_cmd=`which bzip2`	<MISSING>
cal	<MISSING>
"cal $(date +""%m %y"") | awk 'nf {days = $nf}; end {print days}'"	<MISSING>
"cal $m $y | sed -e '1,2d' -e 's/^/ /' -e ""s/ \([0-9]\)/ $m\/\1/g"""	<MISSING>
cal $month $year | awk -v day=$day -f cal.awk	<MISSING>
cal -3	<MISSING>
cal -3 12 2120	<MISSING>
cal -h	<MISSING>
cal -h 02 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2	<MISSING>
cal -h | cut -c 4-17	<MISSING>
cal -h | cut -c 4-17 | tail -n +3	<MISSING>
cal -h | cut -c 4-17 | tail -n +3  | wc -w	<MISSING>
cal -h | cut -c19-20	<MISSING>
"cal -h | sed ""s/ $(date +%d) /""$'\033\[94m&\033\[0m/g; '""s/ $(date +%d)$/""$'\033\[94m&\033\[0m/g'"	<MISSING>
"cal -h | sed ""s/$(date +%d)/""$'\033\[94m&\033\[0m/g'"	<MISSING>
"cal -h | sed ""s/\<$(date +%d)\>/""$'\033\[94m&\033\[0m/g'"	<MISSING>
"cal -h|sed -r ""s/\b$(date|cut -d' ' -f3)\b/*/"""	<MISSING>
cal 01 2015 | sed -n '1,2b;/^.\{6\} \{0,1\}\([0-9]\{1,2\}\) .*/ {s//0\1/;s/.*\([0-9]\{2\}\)$/\1/p;q;}'	<MISSING>
cal 02 1956	<MISSING>
"cal 02 2012|perl -f'(.{1,3})' -ane'begin{$,=""\t&"";$\=""\t\\\\\n""}$.==1||eof||do{$i//=@f;print@f[map{$_*2-1}(1..$i/2)]}'"	<MISSING>
"cal 02 2012|perl -lne'$.==1||eof||do{$,=""\t&"";$\=""\t\\\\\n"";$l=$_;print map{substr($l,$_*3,3)}(1..5)}'"	<MISSING>
"cal 09 2009 | awk 'begin{day=""9""}; nr==4 {col=index($0,day); print col }'"	<MISSING>
"cal 09 2009 | awk 'nr==4{day=""9""; col=index($0,day); print col }'"	<MISSING>
"cal 09 2009 | awk '{day=""9""; if (nr==4) {col=index($0,day); print col } }'"	<MISSING>
cal 2 1900	<MISSING>
cal 4 2009 | tr ' ' '\n' | grep -v ^$ | tail -n 1	<MISSING>
cal april 2012 | tee t | more	<MISSING>
cal | awk '$6{date=$6}end{print date}'	<MISSING>
"cal | awk 'nr==2 {for (i=1;i<=nf;i++) {sub(/ /,"""",$i);a[$i]=i}} nr>2 {if ($a[""tu""]~/[0-9]/) {printf ""%02d\n"",$a[""tu""];exit}}' fieldwidths=""3 3 3 3 3 3 3 3"""	<MISSING>
"cal | awk 'nr==2 {split($0,a)} {for (i=1;i<=nf;i++) if ($i==date) print a[i]}' fieldwidths=""3 3 3 3 3 3 3 3"" date=31"	<MISSING>
"cal | awk 'nr>2 && nf>4 {printf ""%02d\n"",$(nf-4);exit}'"	<MISSING>
"cal | awk 'nr>2{sfields=7-nf; if (sfields == 0 ) {printf ""%02d\n"",$3;exit}}'"	<MISSING>
cal | awk -v date=31 'nr == 2 { split($0, header) } nr > 2 { for (i = 1; i <= nf; ++i) if ($i == date) { print header[nr == 3 ? i + 7 - nf : i]; exit } }'	<MISSING>
"cal | awk -v date=31 -v fieldwidths=""3 3 3 3 3 3 3 3"" 'nr==2 {split($0,a)} {for (i=1;i<=nf;i++) if ($i==date) print a[i]}'"	<MISSING>
cal | sed '1d;2{h;s/./ /g;x};/^\s*$/b;g;s/\n/ /;s/^...\(.\{15\}\).*/\1/;s/.../ &\t\&/g;s/\&$/\\\\/'	<MISSING>
cal | sed -e 's/^.\{3\}//' -e 's/^\(.\{15\}\).\{3\}$/\1/'	<MISSING>
"cal=$(echo $(cal ""$month"" ""$year""))"	<MISSING>
"calculate a list of duplicate md5 sum hashes for all the "".java"" files in the current directory"	
calculate and show md5 sums for every files under current directory tree	
calculate md5 checksum of $key, take the 1st to 10th character, append them with the string '/tmp/command_cache.' and save the rsultant string to variable file	
calculate md5 checksum of $line and save to variable 'md5'	
calculate md5 checksum of '/etc/localtime' and save the first space separated part in variable 'checksum'	
calculate md5 checksum of the list of all files/dirs in /path recursively including dot files and excluding the patterns 'run', 'sys', 'tmp' and 'proc', then check the checksum against the checksum saved in /tmp/file	
calculate md5 checksum of thedirname	
calculate md5 sum of empty string	
calculate md5 sum of file $ecriv	
calculate md5 sum of file $item and save it to variable 'md5'	
calculate md5 sum of file ${my_iso_file} and save it to variable 'md5'	
calculate md5 sum of files $source_file and $dest_file	
calculate md5 sum of the md5 sum of all the sorted files under $path	
calculate md5 sums for all regular files in the current directory tree	
"calculate md5 sums for all regular files in the current directory tree and save the result as ""md5sums"""	
calculate md5 sums for each files matching 'main.cpp*'	
calculate md5sum of the contents of the archives '/tmp/tst.gz', '/tmp/tst.bz2', '/tmp/tst.lzma' and '/tmp/tst.xz'.	
"calculate the crc32 of ""testring"""	
calculate the disk usage for all the files which have been modified in the last 24 hours in ~/tmp folder and display the file sizes	
calculate the factorial of 500	
calculate the md5 checksum of the current directory structure and save it in variable sum	
calculate the md5 checksums of all files from directory tree //path/to/source/directory and save them as output.txt	
"calculate the md5 sum of ""a"""	
"calculate the md5 sum of ""examplestring"""	
"calculate the md5 sum of ""logdir"" and print only the hash"	
"calculate the md5 sum of ""password"""	
"calculate the md5 sum of ""submission.cpp"" with less sensitivity to superficial changes like comments or whitespace"	
"calculate the md5 sum of ""yourstring"""	
"calculate the md5 sum of all "".py"" files in ""/your/dir"" including content and filenames"	
calculate the md5 sum of all *.py files in the current directory	
"calculate the md5 sum of all files in ""/your/dir"" including content and filenames"	
"calculate the md5 sum of all files in ""/your/dir"" including content and filenames and following symbolic links"	
calculate the md5 sum of all files in the current directory and formatting the output by removing parenthesis	
calculate the md5 sum of all files in the current directory with the filename printed first	
"calculate the md5 sum of all the file metadata in the current directory tree excluding "".svn"""	
"calculate the md5 sum of every "".py"" file in directory tree ""/path"""	
calculate the md5 sum of hex byte 61	
"calculate the md5 sum of the contents of ""$files"""	
"calculate the md5 sum of the contents of all files sorted in directory tree ""/path"""	
"calculate the md5 sum of the contents of the sorted list of files ""$files"""	
"calculate the md5 sum of the file ""filename"" and print only the hash"	
calculate the md5 sum of the list of files in the current directory	
"calculate the md5 sum of the md5 sum of all the files sorted under ""$path"""	
"calculate the md5 sum of the output of ""du -csxb /path"" and compare it against the md5 sum saved in ""file"""	
"calculate the md5 sum of the sorted list of md5 sums of all "".py"" files under ""/path/to/dir/"""	
"calculate the md5 sum of the tar archive of ""dir"""	
"calculate the md5sum of all the files with name ""mycprogram.c"", ignoring case"	
"calculate the md5sum of each "".py"" file under ""/path/to/dir/"", sort the output, and calculate the md5sum of that"	
"calculate the md5sum of the executable file of command ""cc"""	
"calculate the md5sum of the executable file of command ""gcc"""	
calculate the md5sum of the executable file of command 'c++'	
"calculate the number of bytes of all the files listed in ""files.txt"""	
"calculate the sha1 sum and md5 sum of ""foo"""	
calculate the sha1 sum for the contents of the path/to/folder directory tree, including permissions	
calculate the sha1 sum for the contents of the regular files in the path/to/folder directory tree	
"calculate the sin values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and ""y.txt"""	
calculate the sum of all the numbers from -5 to 10	
calculate the sum of all the numbers from 1 to 10	
calculate the sum of all the numbers from 1 to 100000	
"calculate the sum of the 7th column of ""ipcs -mb"""	
calculate the sum of the numbers in '/file/with/numbers'	
calculate the total amount of memory usage of the current user	
"calculate the total disk usage for each "".jpg"" file on the system and prepend the system host name to the output"	
calculate the total size of all *.jpg files in the directory tree	
calculate the total size of jpg files in current folder	
"calculate the values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and ""x.txt"""	
calculates process depth of process with id $processid, and stores it in a 'depth' variable.	
candidates=$(which -a $cmd | wc -l)	<MISSING>
case insensitive search using find command in linux	
"case-insensitive search all existing environment variables and their values for ""shell""."	
"case-insensitive search for ""error"" in file report.txt, display one page at a time, waiting for user interaction between each."	
cat	<MISSING>
"cat ""$(which f)"""	<MISSING>
"cat ""$file"" | grep ""^${key}${delimiter}"" | cut -f2- -d""$delimiter"""	<MISSING>
"cat ""$file"" | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -n -s"	<MISSING>
"cat ""text1;text2;text3"" | sed -e 's/ /\n/g'"	<MISSING>
cat $(echo $files | sort) | md5sum	<MISSING>
cat $(find . -name '*.foo')	<MISSING>
cat $(find /usr/share/doc/ -name '*.txt') | zegrep -ic '\<exception\>'	<MISSING>
"cat $(find src/js -type f -name ""*.js"" -printf ""%d\t%p\n"" | sort -n | sed -e ""s|[0-9]*\t||"")>min.js"	<MISSING>
"cat $1 | ssh $2 ""mkdir $3;cat >> $3/$1"""	<MISSING>
cat $1.tmp | sort -u	<MISSING>
"cat $2 | grep -v ""#"" | ssh -t $1 $interpreter"	<MISSING>
cat $file | cut -c 1-10	<MISSING>
cat $file | sed '/\/\//d' | sed '/^\s*$/d' | wc -l	<MISSING>
cat $file | wc -c	<MISSING>
cat $filename | rev | cut -c 3- | rev	<MISSING>
"cat $filename | sed ""${linenum}p;d"";"	<MISSING>
cat $files | md5sum	<MISSING>
cat $i | wc -l	<MISSING>
cat $i | xargs mv -t dir.$count	<MISSING>
cat ${spool_file}                   | tee -a ${log_file}	<MISSING>
cat ${tmp}/${script_name}.kb|sort -rh;	<MISSING>
cat ${tmp}/${script_name}.name|sort -r;	<MISSING>
cat ${tmp}/${script_name}.pid|sort -rh;	<MISSING>
cat 'filename' | grep '[^ ]' | wc -l	<MISSING>
cat *.py | md5sum	<MISSING>
cat *.txt | sort | sort -u -c	<MISSING>
cat *.txt | tail -n +1001 | split --lines=1000	<MISSING>
cat *.txt | wc -l	<MISSING>
cat --help	<MISSING>
cat -e yourfile | less	<MISSING>
cat -n	<MISSING>
cat -n file.txt | less	<MISSING>
cat -n file_name | sort -uk2 | sort -nk1 | cut -f2-	<MISSING>
cat -n infile	<MISSING>
cat -n text.txt | join -o2.2 lines.txt -	<MISSING>
cat -v -e filename	<MISSING>
cat -v /dev/urandom	<MISSING>
cat -vet a	<MISSING>
cat -vet file | less	<MISSING>
cat /boot/config-`uname -r`	<MISSING>
cat /boot/config-`uname -r` | grep ip_mroute	<MISSING>
cat /boot/system.map-`uname -r` | grep funcname	<MISSING>
cat /dev/input/mice | od -t x1 -w3	<MISSING>
cat /dev/urandom | env lc_ctype=c tr -cd 'a-f0-9' | head -c 32	<MISSING>
cat /dev/urandom | lc_all=c tr -dc 'a-za-z0-9' | fold -w 24 | head -n 1	<MISSING>
cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32	<MISSING>
cat /dev/urandom | tr -dc '. ' | fold -w 100	<MISSING>
cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1	<MISSING>
cat /dev/urandom | tr -dc '[:graph:]'	<MISSING>
cat /dev/urandom | tr -dc 'a-za-z0-9'	<MISSING>
cat /dev/urandom | tr -dc 'a-za-z0-9' | fold -w 32 | head -n 1 | xargs mkdir	<MISSING>
cat /dir/file.txt | wc -l	<MISSING>
cat /etc/fstab | wc -l	<MISSING>
cat /etc/passwd -n | grep `whoami` | cut -f1	<MISSING>
cat /etc/passwd /etc/group	<MISSING>
"cat /etc/passwd | sed 's/^\([^:]*\):.*$/crontab -u \1 -l 2>\&1/' | grep -v ""no crontab for"" | sh"	<MISSING>
"cat /etc/passwd | sed 's/^\([^:]*\):.*$/crontab -u \1 -l 2>\&1/' | sh | grep -v ""no crontab for"""	<MISSING>
cat /file/with/numbers | php -r '$s = 0; while (true) { $e = fgets(stdin); if (false === $e) break; $s += $e; } echo $s;'	<MISSING>
cat /home/pkglist.txt | xargs yum -y install	<MISSING>
cat /proc/1/sched  | head -n 1	<MISSING>
cat /proc/17709/cmdline | xargs -0 echo	<MISSING>
cat /proc/2671/maps | grep `which tail`	<MISSING>
cat /proc/config.gz | gunzip	<MISSING>
cat /proc/cpuinfo | awk '/^processor/{print $3}' | tail -1	<MISSING>
cat /tmp/nums | addnums	<MISSING>
cat /var/run/dmesg.boot | grep features	<MISSING>
cat /var/spool/mail/`whoami`	<MISSING>
cat 1.txt | xargs dig txt	<MISSING>
"cat <(crontab -l) <(echo ""1 2 3 4 5 scripty.sh"") | crontab -"	<MISSING>
"cat <(fgrep -i -v ""$command"" <(crontab -l)) <(echo ""$job"") | crontab -"	<MISSING>
"cat <(fgrep -i -v ""$command"" <(crontab -u test -l)) <(echo ""$job"") | crontab -u test -"	<MISSING>
cat <(grep -vxf -f set1 set2) <(grep -vxf -f set2 set1)	<MISSING>
cat <(ls 1 | sort -u) <(ls 2 | sort -u) | uniq -d	<MISSING>
cat <(yes | tr \\n x | head -c $bytes) <(sleep $seconds) | grep n	<MISSING>
cat `/gnuwin32/bin/find.exe . -name *.php` | wc -l	<MISSING>
"cat `find . -name ""*.php""` | wc -l"	<MISSING>
cat `find . -name '*.foo' -print`	<MISSING>
cat `find . -name aaa.txt`	<MISSING>
cat `find . -type f` > out.txt	<MISSING>
cat `find [whatever]`	<MISSING>
"cat `find src/js -type f -name ""*.js"" -print0 | xargs -0 stat -f ""%z  %n"" | sort -n | sed -e ""s|[0-9]*\ \ ||""` > public/js/mycleverscript.js"	<MISSING>
cat `which f`	<MISSING>
cat `which java` | file -	<MISSING>
cat `which ~/f`	<MISSING>
cat a.txt | grep / | sed 's|/[^/]*$||' | sort -u | xargs -d $'\n' mkdir -p	<MISSING>
"cat afile | split -l 2 --filter='bzip2 > ""$file.bz2""'"	<MISSING>
cat allfolders.txt | xargs -n 1 cp filename.txt	<MISSING>
cat archive.tar | tar x	<MISSING>
cat b c d | sort | comm -2 -3 a -	<MISSING>
cat backup.img.gz | gunzip | dd of=/dev/sdb	<MISSING>
cat big_file.txt | less	<MISSING>
"cat blah | perl -en '/\xca\xfe\xba\xbe/ && print ""found""'"	<MISSING>
cat blah.gz | gunzip | some_command	<MISSING>
cat commands-to-execute-remotely.sh | ssh blah_server	<MISSING>
cat data.csv | rev | cut -d, -f-5 | rev	<MISSING>
cat datafile | rev | cut -d '/' -f 2 | rev	<MISSING>
cat dax-weekly.csv | awk '1 { last = nr; line[last] = $0; } end { print line[1]; for (i = last; i > 1; i--) { print line[i]; } }'	<MISSING>
cat dax-weekly.csv | awk '{a[i++]=$0} end {for (j=i-1; j>=0;) print a[j--] }'	<MISSING>
cat dbdump.sql.gz | gzip -cd | mysql	<MISSING>
cat dump.txt | head -16224 | tail -258	<MISSING>
cat f.html | grep -o \	<MISSING>
cat file | clipboard	<MISSING>
cat file | column -c 80	<MISSING>
cat file | column -t	<MISSING>
cat file | fold -s -w29	<MISSING>
cat file | fold -s -w29 | head -1	<MISSING>
cat file | fold -w29	<MISSING>
cat file | fold -w29 | head -1	<MISSING>
cat file | grep pattern | paste -sd' '	<MISSING>
"cat file | grep pattern | paste -sd'~' | sed -e 's/~/"" ""/g'"	<MISSING>
cat file | head -n 16482 | tail -n 258	<MISSING>
cat file | paste -d' ' - -	<MISSING>
cat file | paste -d\ - - -	<MISSING>
cat file | xargs	<MISSING>
cat file | xargs -n3	<MISSING>
cat file | xclip	<MISSING>
cat file | xclip -selection clipboard	<MISSING>
cat file-of-ips | xargs -n 1 -i ^ -p 50 ping ^	<MISSING>
"cat file.json | python -c ""import sys, json, jsonpath; print '\n'.join(jsonpath.jsonpath(json.load(sys.stdin), 'store.book[?(@.price < 10)].title'))"""	<MISSING>
"cat file.txt | column -c 28 -s ""\ """	<MISSING>
cat file.txt | fold	<MISSING>
cat file.txt | perl -ne 's/foo/bar/g;' | less	<MISSING>
cat file.txt | rev | cut -d ',' -f 2 | rev	<MISSING>
cat file.txt | xargs  | sed -e 's/\ /+/g' | bc	<MISSING>
cat file1 file2 ... file40000 | split -n r/1445 -d - outputprefix	<MISSING>
cat file1 file2 | crontab	<MISSING>
cat file1 file2 |sort -t. -k 2.1	<MISSING>
"cat file1 |xargs -i {} dirname ""{}""| sort -u | xargs -i{} mkdir -p ""{}"""	<MISSING>
cat file1.txt | grep -fvf file2.txt | grep '^q'	<MISSING>
cat filename	<MISSING>
cat filename | awk '{print length, $0}'|sort -nr|head -1	<MISSING>
cat filename | grep -v ^$ | wc -l	<MISSING>
"cat filename | python -c""from fileinput import input; print sum(map(int, input()))"""	<MISSING>
cat files | sort -t- -k2,2 -n	<MISSING>
cat files.txt | xargs du -c | tail -1	<MISSING>
cat files.txt | xargs du -c | tail -1 | awk '{print $1}'	<MISSING>
cat files.txt | xargs scp user@remote:	<MISSING>
"cat filewithcolumnofnumbers.txt | xargs ruby -e ""puts argv.map(&:to_i).inject(&:+)"""	<MISSING>
"cat filname | lua -e ""sum = 0;for i in io.lines() do sum=sum+i end print(sum)"""	<MISSING>
cat folder_list.txt | xargs mkdir	<MISSING>
cat foo.c | sed '/^\s*$/d' | wc -l	<MISSING>
cat foo.md | pandoc -f markdown_github | lynx -stdin	<MISSING>
cat foo.pl | sed '/^\s*#/d;/^\s*$/d' | wc -l	<MISSING>
cat infile | dos2unix -u | od -c	<MISSING>
cat infile | od -c	<MISSING>
cat infile | paste -sd '  \n'	<MISSING>
cat infile | paste -sd ',\n'	<MISSING>
cat infile | sed 's/\r$//' | od -c	<MISSING>
"cat infile.txt | tr -d ""[:space:]"" | fold -80"	<MISSING>
cat input.txt | sed 's/string/longer_string/g' | column -t	<MISSING>
"cat inputfile | grep ""^t\:"" | split -l 200"	<MISSING>
"cat ip_addresses | sort | uniq -c | sort -nr | awk '{print $2 "" "" $1}'"	<MISSING>
cat ips | xargs -i% ping -c 2 %	<MISSING>
cat ips | xargs -n1 echo ping -c 2	<MISSING>
cat ips | xargs -n1 ping -c 2	<MISSING>
cat ips | xargs echo ping -c 2	<MISSING>
cat list_part* | sort --unique | wc -l	<MISSING>
cat little_commas.txt	<MISSING>
cat log | tr -s [:blank:] |cut -d' ' -f 3-	<MISSING>
"cat mail.tmp | mail -r ""noreply@$(hostname)"" -s ""config done!"" ""${mail}"""	<MISSING>
"cat message.txt | mail -s ""backup"" -a mysqldbbackup.sql backup@email.com"	<MISSING>
cat my_ips | xargs -i dig -x {} +short	<MISSING>
cat my_script.py	<MISSING>
cat myfile	<MISSING>
cat myfile.txt | wc -l	<MISSING>
cat myfile.txt| sort| uniq	<MISSING>
cat myfiles_split.tgz_* | tar xz	<MISSING>
cat n	<MISSING>
"cat new.txt  |  nl |sed  ""3d;4d"""	<MISSING>
cat new.txt  | nl	<MISSING>
"cat new.txt  | nl | sed  ""/2/d"""	<MISSING>
cat numbers.txt	<MISSING>
"cat numbers.txt | php -r ""echo array_sum(explode(php_eol, stream_get_contents(stdin)));"""	<MISSING>
cat order.txt	<MISSING>
cat report.txt | grep -i error	<MISSING>
cat report.txt | grep -i error | more	<MISSING>
cat results2.txt | xargs -i{} ln -s {} ~/newlinks	<MISSING>
cat searches.txt| xargs -i {} -d, -n 1 grep  -r {}	<MISSING>
cat set1 set2 | sort -u	<MISSING>
"cat somedata.txt | ""$outfile"""	<MISSING>
cat somefile | splitter 16224-16482	<MISSING>
cat submission.cpp | astyle -bj | cpp - | md5sum	<MISSING>
cat table.txt | awk '{print $1}' | sort | uniq  | xargs -i grep {} table.txt	<MISSING>
cat text	<MISSING>
"cat text.txt | cut -d "" "" -f 4"	<MISSING>
cat text.txt | tr -s ' ' | cut -d ' ' -f 4	<MISSING>
cat text.txt | tr -s ' ' | cut -d ' ' -f4	<MISSING>
cat whatever | egrep 'snozzberries|$'	<MISSING>
cat www-backup.tar.*|gunzip -c |tar xvf -	<MISSING>
cat xx.sh	<MISSING>
cat yourfile.txt | more	<MISSING>
cat | od -b	<MISSING>
cat ~/.bashrc | pbcopy	<MISSING>
cat ~/.ssh/config	<MISSING>
cat=`which cat`	<MISSING>
catch output from a script printing to /dev/tty	
cc=$(which cc) ./configure	<MISSING>
cc=$(which gcc) ./configure	<MISSING>
cd	<MISSING>
cd  /path/to/pdf	<MISSING>
"cd ""$(dirname ""$(which oracle)"")"""	<MISSING>
"cd ""$(dirname ""$1"")"""	<MISSING>
"cd ""$(dirname $(which oracle))"""	<MISSING>
"cd ""$(find . -name config -type d | sed 1q)"""	<MISSING>
"cd ""$(find . -name subscription.java -printf '%h\n')"""	<MISSING>
"cd ""$(find . -print0 | sort -z | tr '\0' '\n' | tail -1)"""	<MISSING>
"cd ""$(grep download $home/.config/user-dirs.dirs | cut -f 2 -d ""="" | tr ""\"""" ""\n"" | tr -d ""\n"")"""	<MISSING>
"cd ""$(grep download $home/.config/user-dirs.dirs | cut -f 2 -d ""="" | tr ""\"""" ""\n"")"""	<MISSING>
"cd ""$(ls -rd [0-9]*/ | tail --lines 1)"""	<MISSING>
"cd ""$(node app)"""	<MISSING>
"cd ""$(xsel)"""	<MISSING>
"cd ""$tag"""	<MISSING>
"cd ""${dirs[-1]}"""	<MISSING>
"cd ""/cygdrive/c/program files (x86)"""	<MISSING>
"cd ""/some/dir"" && find . -type f"	<MISSING>
"cd ""`pwd -p`"""	<MISSING>
"cd ""`xsel`"""	<MISSING>
"cd ""~"""	<MISSING>
"cd $( ~/marker.sh go ""$@"" )"	<MISSING>
cd $(basename $1 .tar.gz)	<MISSING>
cd $(dirname $(dirname $(which perl)))/lib	<MISSING>
cd $(dirname $(find . -name $1 | sed 1q))	<MISSING>
cd $(dirname $(readlink -f $0))	<MISSING>
cd $(dirname $(which $0) )	<MISSING>
cd $(dirname $(which ls))	<MISSING>
cd $(dirname $(which oracle))	<MISSING>
cd $(dirname $(which ssh));	<MISSING>
cd $(dirname `which oracle`)	<MISSING>
"cd $(echo $somedir | sed ""s#^~#$home#"")"	<MISSING>
"cd $(find . -maxdepth 1 -type d -name ""folder_*"" | sort -t_ -k2 -n -r | head -1)"	<MISSING>
cd $(find . -name $1 | xargs dirname)	<MISSING>
cd $(find . -name config -type d | sed 1q)	<MISSING>
cd $(find . -name subscription.java -printf '%h\n')	<MISSING>
cd $(find . -name subscription.java | xargs dirname)	<MISSING>
cd $(git rev-parse --show-cdup)	<MISSING>
cd $(ls -d */ | grep 1670)	<MISSING>
cd $(readlink -f $(dirname $0))	<MISSING>
cd $(readlink /proc/$pid/cwd)	<MISSING>
cd $(which oracle | xargs dirname)	<MISSING>
cd ${curr_dir} && find .	<MISSING>
cd '/cygdrive/c/program files (x86)/$dollarsign'	<MISSING>
cd -	<MISSING>
cd -l ..	<MISSING>
"cd -p ""$dir1"""	<MISSING>
cd -p ..	<MISSING>
cd -p xyz	<MISSING>
cd /cygdrive/c/program\ files\ \(x86\)	<MISSING>
cd /home/`whoami`	<MISSING>
cd /home/www && find . -type f -print0 | xargs -0 perl -i.bak -pe 's/subdomaina\.example\.com/subdomainb.example.com/g'	<MISSING>
cd /lib/modules/$(uname -r)/	<MISSING>
cd /nfs//office/ && find . -name '.user.log'	<MISSING>
cd /nfs//office/ && find . -name '.user.log' | xargs -i{} dirname {} | xargs -i{} dirname {}	<MISSING>
cd /nfs/office/ &&  find . -name 'file.txt' | sed -r 's|(\./([^/]*/)?).*|\1|'	<MISSING>
cd /some/where/long	<MISSING>
cd /the/project/root//data	<MISSING>
cd /tmp	<MISSING>
cd /var/cron/tabs && grep -vh ^# *	<MISSING>
cd `/path/to/my/script`	<MISSING>
cd `cat $home/.lastdir`	<MISSING>
cd `dirname $(which python)`	<MISSING>
cd `dirname $target_file`	<MISSING>
"cd `echo -n ""~""`"	<MISSING>
cd `find . -maxdepth 1 -type d | grep 1670`	<MISSING>
"cd `find . -name ""config""`"	<MISSING>
cd `find . -name file.xml -exec dirname {} \;`	<MISSING>
cd `find . -name file.xml -printf %h`	<MISSING>
cd `find . -name subscription.java | xargs dirname`	<MISSING>
cd `find a |sed '$!d'`	<MISSING>
cd `ls -d */ | grep 1670`	<MISSING>
cd `script`	<MISSING>
cd `which <file> | xargs dirname`	<MISSING>
cd b && find . >> ../tmp.txt	<MISSING>
cd bar1 find . -maxdepth 1 -name '*foo*' -not -name '*.cc'  -exec echo ln -s $pwd/{} ../bar2	<MISSING>
cd foo | cat	<MISSING>
"cdate=$( date -d @""$timestamp"" +""%y-%m-%d %h:%m:%s"" )"	<MISSING>
"cdate=$(date ""+%y-%m-%d %h:%m:%s"")"	<MISSING>
"change all ""jpg"" filename suffixes in current directory to ""jpeg""."	
"change all cron jobs running ""anm.sh"" to be run every 10 minutes instead of 5 minutes."	
"change all directories under ""./bootstrap/cache/"" to owner ""apache"" and group ""laravel"""	
"change all directories under ""./storage/"" to owner ""apache"" and group ""laravel"""	
"change all file permissions to 664 and all directory permissions to 775 in directory tree ""htdocs"""	
"change all files in ""~"" which are owned by the group ""vboxusers"" to be owned by the user group ""kent"""	
"change all files in the current directory tree to owner ""xx"""	
"change all files with no user under ""/var/www"" to have owner ""root"" and group ""apache"""	
"change all occurrences of ""foo"" to ""bar"" in the file ""file.txt"""	
"change all variables containing ""gcc.4.2"" to containing ""gcc64"" in the current shell's environment."	
change cgi files to mode 755	
change cgi files to mode 755 under htdocs or cgi-bin directories	
"change directory to ""$dir1"" and resolve any symlinks in the resulting path"	
"change directory to ""/lib/modules/"" of the current kernel release"	
"change directory to ""/path/to/pdf"""	
change directory to parent directory and do not resolve any symlinks in the resulting path	
"change directory to the ""lib"" directory located two parent directories above the path to command ""perl"""	
change directory to the alphabetically last path under the current directory	
"change directory to the basename of ""$1"" with "".tar.gz"" removed"	
change directory to the current user's home directory	
"change directory to the directory containing file path ""$1"""	
"change directory to the directory containing the ""oracle"" executable"	
change directory to the directory containing the current script	
"change directory to the directory containing the executable file of command ""oracle"""	
change directory to the download directory specified in the current user's user-dirs.dirs file	
"change directory to the output of command '~/marker.sh go ""$@""'"	
change directory to the parent of the real path of the current script	
"change directory to the real path of the current working directory of process ""$pid"""	
change directory to the real path of the directory containing the current script	
change directory to the user's home directory	
"change every directory under ""/var/www/html/"" to have permissions 775"	
"change every file under ""/var/www/html/"" to have permissions 664"	
change every reference to the colour red to green in all css files	
"change file owner and group of ""/path/to/yourapp"" to root and print a diagnostic"	
change file permissions on all regular files within a directory	
change folder to the one where $0 link target file is located.	
change group of the file /tmp/php_session to group daemon	
change group of the file /var/lib/php/session  to group lighttpd	
change group of the file myfile to group friends	
change group ownership to `foo' for files with gid=2000	
change html files to mode 644	
"change login shell to the full path of ""zsh"""	
"change mode of all files ending with "".php"" under the current folder to 755 and write the output to the console and ""logfile.txt"" file"	
"change onwer of ""file"" to ""user_name"""	
"change onwer to ""root"" and group to ""wheel"" of ""com.xxxx.adbind.plist"""	
change owner and group  of all files and directory into current directory to user and group apache	
"change owner and group of ""script.sh"" to ""root"""	
change owner and group of the all files with group owner vboxusers into home directory to user and group kent	
change owner and group of the current directory and all files into it to user and group andrew	
"change owner and group of the directory  $dstdir"" to the user and group of the file ""$srcdir"""	
"change owner and group of the file ""/path/to/yourapp"" to root"	
"change owner and group of the file ""file"" to user ""user"" and group ""group"""	
change owner and group of the file dir1 to user root and group  specialusers	
change owner and group of the file it to user and group root	
change owner and group of the file script.sh to user root	
change owner and group of the file uid_demo to user and group root	
"change owner of ""folder"" to ""user_name"""	
"change owner of ""my_test_expect.exp"" to ""el"""	
change owner of all files into current directory except  files named as  './var/foo*' to user www-data	
"change owner of the file ""file"" to user user_name"	
change owner of the file /home/bob to user root	
"change owner of the file destination_dir to user ""user:"	
change owner of the file file.sh to user root	
change owner of the file my_test_expect.exp to user el	
change owner of the file process to user root	
"change owner of the files into directory ""/mydir"" with "".txt"" extension to user root"	
change owner of the files into directory dir_to_start except directory dir_to_exclude to user owner	
"change owner to ""$1"" and group to ""httpd"" of "".htaccess"""	
"change owner to ""$fuid"" and group to ""$fgid"" of ""$file2"""	
"change owner to ""$user"" and group to ""$group"" of ""$file"""	
"change owner to ""bob"" and group to ""sftponly"" of ""/home/bob/writable"""	
"change owner to ""root"" and group to ""dockerroot"" of ""/var/run/docker.sock"""	
"change owner to ""root"" and group to ""wheel"" of ""adbind.bash"""	
"change owner to ""root"" and group to ""wheel"" of ""bin"""	
"change owner to ""root"" and group to ""www-data"" of ""/foobar/test_file"""	
"change ownership of ""/data/db"" to the current user"	
"change ownership of ""/vol"" to the current user"	
change permission of all the files in the entire file system which have permissions 777.	
change permission of all the files in the entire file system which have the permissions 777.	
change permission to 000 of all directories named '.texturedata' under '/path/to/look/in/' directory tree	
change permission to 755 for all directories under $d directory tree	
change permission to 755 of all files/directories under current directory tree that have 777 permission	
change permissions for all php files under the current directory tree to 755	
change permissions for all php files under the current directory tree to 755 and print the number of files changed	
change permissions for directories in the entire file system	
"change permissions of "".bash_logout"", "".bashrc"", and "".profile"" to 444"	
"change permissions of "".git/hooks/pre-commit"" to 777"	
"change permissions of "".git/hooks/prepare-commit-msg"" to 777"	
"change permissions of ""/dvtcolorconvert.rb"" to 755"	
"change permissions of ""/usr/bin/wget"" to 777"	
"change permissions of ""mksdcard"" to 755"	
change permissions of all directories from the current directory tree to 644	
change permissions of all directories in the ~/dir_data directory tree in accordance with mode `a+xr,u+w'	
change permissions of all directories residing under and below ./debian to 755	
"change permissions of all files ending "".php"" under the current directory to 755 and print a count of modified files"	
"change permissions of all files ending "".php"" under the current directory to 755 with a progress bar based on lines"	
"change permissions of all files ending in "".php"" under the current directory to 755 and print a '+' for each file"	
"change permissions of all files ending in "".php"" under the current directory to 755 and print a count of modified files"	
change permissions of all regular files from the current directory tree to 644	
change permissions of all regular files in the ~/dir_data directory tree in accordance with mode `a-x,u+w'	
change permissions of all the script files in a directory	
"change permissions of directory ""/home/sshtunnel/"" to 555"	
change permissions of files older than 30 days	
change permissions to 0755 for all directories in the /path directory tree	
change permissions to 500 for all regular files under and below the current directory	
change permissions to 600 for all regular .rb files in the current directory tree	
change permissions to 644 for *.html files under /usr/local	
change permissions to 644 for all directories under and below /path/to/somedirectory/	
change permissions to 644 for all files in the current directory tree	
change permissions to 644 for all files showing the respective chmod command	
change permissions to 644 for all regular files in and below the current directory	
change permissions to 644 for all regular files under and below /path/to/somedirectory/	
change permissions to 644 for all regular files under the /path/to/dir/ tree	
change permissions to 644 for all regular files under the /path/to/dir/ tree unless these permissions are already set	
change permissions to 644 for all subdirectories	
change permissions to 644 of multiple files with permissions 755	
change permissions to 644 of multiple regular files with permissions 755	
change permissions to 644 recursively for php files.	
change permissions to 644 recursively only for files	
change permissions to 700 for directories at the current level and deeper	
change permissions to 700 for files and directories deeper than the current directory	
change permissions to 755 for all directories in the /path/to/dir directory tree	
change permissions to 755 for all directories in the current directory tree	
change permissions to 755 for all subdirectories of the current directory	
change permissions to 755 recursively only for directories	
change permissions to 777 for all directories in the current directory tree	
change permissions to u=rw,g=r,o= for all files in the current directory tree	
change permissions to u=rw,g=r,o= for all files inside the current directory tree	
change permissions to u=rwx,g=rx,o= for all directories in the current directory tree	
change permissions to u=rwx,g=rx,o= for all directories inside the current directory tree	
change permssions of *.cgi files under directories htdocs and cgi-bin to 755	
"change string ""searc"" to ""replace"" in all files in directory hierarchy"	
"change symbolic link ""$f"" into a file"	
"change the current working directory to ""a"" and display all the files in that folder and save the output to the file ""tmp.txt"""	
"change the current working directory to ""b"" and display all the files in that folder and append the output to the file ""tmp.txt"""	
change the current working directory to /some/dir and display all normal/regular files	
change the directory to the last found folder in the directory 'a'	
change the encoding of all *.java files in a directory and subdirectories from cp1252 to utf-8	
"change the extension of all the "".abc"" files in the folder ""/the/path"" to "".edefg"" and do not change in the sub directories"	
"change the extension of all the "".abc"" files in the folder ""/the/path"" to "".edefg"" and do not change in the sub directories. execdir ensures that the command after it is executed only in the folder where the file is found"	
"change the extension of all the "".lst"" files in the current folder to ""a.lst"""	
change the extension of all the files in the current folder to html excluding those html files and those which are present in another disk partition	
change the extension of all the text files from .txt to .txt_bak in current folder	
change the file extension from '.txt' to '.bak' for all files/directories under current directory tree	
"change the group of ""myfile"" to ""friends"""	
change the group of all directories (except those with a '.') under current directory tree to a group with the same name as the directory name	
change the group of all directories in the current folder	
change the group of all regular/normal files in the current directory	
change the group of all the files in the file system which belong to the group with the gid 999	
change the group of all the files in the folder /u/netinst/ to staff	
change the group of all the files which belong to the user edwarda to pubs	
"change the group to ""new_group"" and permissions to 770 for all the files in the current folder"	
"change the group to ""new_group"" and permissions to 770 for all the files in the current folder, $0 is the input to the sub shell i.e, the name of the file"	
change the group to `temp' for all files in the current directory tree that belong to group `root'	
"change the owner and group of ""it"" to ""root"""	
"change the owner and group of ""testfile.txt"" to ""root"""	
"change the owner and group of ""uid_demo"" to ""root"""	
change the owner and group of all the directories in the current folder and /home/admin/data/ to admin & admin	
change the owner and group of all the files in the folder  /usr/lpp/financials	
change the owner and group of all the normal/regular files in the current folder and /home/admin/data/ to admin & admin	
"change the owner of ""$jboss_console_log"" to ""$jboss_user"""	
"change the owner of ""/var/www/html/mysite/images/"" to ""nobody"""	
"change the owner of ""/var/www/html/mysite/tmp_file_upload/"" to ""nobody"""	
"change the owner of ""destination_dir"" to ""user"""	
"change the owner of ""process"" to ""root"""	
"change the owner of all "".txt"" files in directory tree ""/mydir"" to ""root"""	
"change the owner of all files in ""/empty_dir/"" to ""root"" using at most 10 files at a time"	
"change the owner of all files in the current directory tree excluding those who match ""./var/foo*"" to ""www-data"""	
"change the owner of all files in the directory tree ""dir_to_start"" excluding directory ""dir_to_exclude"" to ""owner"""	
"change the owner of all files in the directory tree ""dir_to_start"" excluding file ""file_to_exclude"" to ""owner"""	
change the owner of all the files in folder /u/netinst to netinst	
change the owner of all the files in the current directory	
change the owner of all the files in the file system which belong to the user with the uid 999	
"change the owner of all the regular/normal files which belong to the root user to ""tom"" in the current folder"	
"change the owner of the directory name of ""$jboss_pidfile"" to ""${jboss_user}"" and always return successfully"	
change the owner of the files which belong to the group 1000 to username and modify only the symbolic link not the originally pointed file	
"change the owner to ""hduser"" and group to ""hadoop"" of ""{directory path}"""	
"change the owner to ""owner"" and group to ""nobody"" of ""public_html"""	
"change the owner to ""root"" and group to ""specialusers"" of ""dir1"""	
"change the owner to ""user"" and group to ""group"" of files ""file ..."""	
"change the ownership of ""/etc/udev/rules.d/51-android.rules"" to ""root"""	
"change the ownership of ""/home/bob"" to ""root"""	
"change the ownership of ""file.sh"" to ""root"""	
change the ownership of all aluno1's files in the current directory and below to aluno2	
change the ownership of all directories in the current folder	
change the ownership of all files in the current directory tree from root to www-data	
change the ownership of all files in the current directory tree to myuser:a-common-group-name	
change the ownership of all regular/normal files in the current directory	
change the ownership of all regular/normal files in the current directory after users confirmation	
change the ownership of all regular/normal files in the current directory(print0 is used to handle all the files which have spaces or new lines in their names)	
change the ownership of all the files in the file system from edwarda to earnestc	
change the ownership to eva for all files/directories that belong to the user 'george' in the entire file system without traversing to other devices/partitions	
change the ownership to the user daisy for all directories under current directory that are owned by harry	
change the permission of all directories in current folder to 755.	
change the permission of all php files in current folder	
change the permission of all php files in current folder. plus symbol at the end is used to give multiple files as input to the chmod command	
change the permission of all regular files under current directory tree to 644	
change the permission of all the directories to 755 in the current folder	
change the permission of all the files in the current directory to 664 and change the permission of all the directories  in the current folder to 775.	
"change the permission of all the normal/regular files from 777 to 755 in the folder ""/home/user/demo"""	
change the permission of all the normal/regular files to 644 in the current folder	
change the permission of all the php files in the folder /var/www/ to 700	
change the permission of all the regular files in the folder /home to 700	
change the permission of all the regular/normal files in the current folder from 777 to 755	
change the permission of all the rpm files in the entire file system to 755	
change the permission to 0644 for all files under current directory	
change the permission to 0755 for all directories under current directory	
change the permission to 644 for all files under current directory	
change the permission to 755 for all directories under current directory	
change the permissions of al the directories in the current folder	
change the permissions of all regular files whose names end with .mp3 in the directory tree /var/ftp/mp3	
change the permissions of all regular/normal files in the current directory	
change the permissions of all regular/normal files in the current directory, print0 is used for handling files with newlines in their file name	
change the permissions of all regular/normal files in the file system	
change the permissions of all the directories  to 775 in the current folder	
change the permissions of all the directories in the current folder	
change the permissions of all the directories in the current folder, print0 is used for handling files with newlines in their file name	
"change the permissions of all the directories in the folder ""/path/to/somedirectory"" to 755"	
change the permissions of all the directories in the folder root_dir to 555	
"change the permissions of all the directories to 755 in the folder ""/home/nobody/public_html"""	
"change the permissions of all the files ending with ""fits"" in the folder ""/store/01"""	
"change the permissions of all the files ending with ""fits"" in the folder ""/store/01"" and save the output file names to a log file"	
change the permissions of all the normal files in a directory	
change the permissions of all the regular files in the current folder	
change the permissions of all the regular files in the folder root_dir to 444	
change the permissions of all the regular/normal files in the current folder	
"change the permissions of all the regular/normal files in the folder ""/path/to/somedirectory"" to 644"	
change the permissions of all the regular/normal files to 644 in the folder /home/nobody/public_html	
change the permissions of all the regular/normal files to 664 in the current folder	
change the permissions of every directory in the current directory and all files and directories within them to 700	
change the permissions of mp3 files in the folder /var/ftp/mp3 to 644	
change the permissions of the current directory and all its subdirectories to 755.	
"change the permissions of the directories from 777 to 755 in the folder ""/var/www/html"""	
"change the timestamp of symbolic link ""somesymlink"" to current date/time"	
change the user and group of all files and directories under /var/www to www-data:www-data	
change the user to daisy for directories and subdirectories owned by harry	
"change the word ""ghbag"" to ""stream-agg"" in all the file names in current folder which have the word ""-ghbag-"" in their name"	
change to a directory and search for a file in that directory	
change to directory 'foo' and print to terminal all received on standard input	
change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.	
change to directory listed in file '$home/.lastdir'	
change to folder where the oracle binary is.	
change to location of '$target_file' file.	
change to parent directory and resolve any symlinks in the resulting path, making the physical path the current one.	
"change to the directory containing the ""oracle"" executable"	
"change to the directory of the executable ""<file>"""	
"change to the directory of the executable ""python"""	
change to the directory pointed by variable tag	
"change user and group of the file ""/var/run/docker.sock"" to user root and group dockerroot"	
change user and group of the file /usr/bin/aws to user amzadm and group root	
change user and group of the file bin to user and group root:wheel	
change user of the direct public_html to user owner and group nobody	
change user ownership to `foo' for files with uid=1005	
"change user to ""amzadm"" and group to ""root"" of ""/usr/bin/aws"""	
changes group ownership of '/etc/btsync/[prefered conf name].conf' to 'btsync'.	
changes group ownership of '/home/www-user/php_user.sh'  to 'www-data'.	
changes group ownership of '/var/run/fcgiwrap.socket' to 'forge'.	
changes group ownership of 'logdir' to 'loggroup'.	
changes group ownership of 'myprog' to 'groupb'.	
changes group ownership of 'myprogram' to ${user} (the current user)	
changes group ownership of 'public' and 'private' to 'god'.	
changes group ownership of 'public' to 'pub'.	
changes group ownership of 'shared' to 'workers'.	
changes group ownership of 'target_directory' to 'target_group'.	
changes group ownership of /sys/class/gpio/export and /sys/class/gpio/unexport to 'gpio'.	
changes the group of defined file.	
changes to the directory where 'ssh' executable is located.	
"check all .txt files whether they contain ""needle"""	
"check all .txt files whose names may contain spaces whether they contain ""needle"""	
check find version	
"check if ""$file"" contains dos line endings"	
"check if ""$file_path"" exists on ""$host"""	
"check if ""/path/to/dir"" is a nfs mount point"	
"check if ""/path/to/file"" exists on ""remote_host"""	
"check if ""/path/to/file"" exists on remote host ""host"""	
"check if ""\[$vlabel\]"" is mounted and save the result in variable ""amv"""	
"check if ""server1"" and ""server2"" have the same list of rpms installed"	
"check if ""~/mnt/sdc1"" is mounted"	
check if $path_in_question is mount point of filesystem	
check if 'nullglob' shell option is enabled, and if so, saves its status in 'is_nullglob' variable.	
check if *rbenv* variable is defined in global environment	
check if *rbenv* variable is defined in tmux session 'sessname' environment.	
check if /path/to/file exists and has a size greater than 25600kb	
check if a drive is mounted to nfs	
"check if a drive with uuid ""$uuid"" is mounted"	
"check if a drive with uuid ""09b8f1ab-8d4b-4c5f-b395-40be09c090b0"" is mounted"	
"check if a drive with uuid ""09b8f1ab-8d4b-4c5f-b395-40be09c090b0"" is mounted on ""/media/wd_disk_1"""	
check if a named screen session already exists	
"check if command ""c++"" and command ""g++"" are equal"	
check if content of all top-level *.txt files in the current directory contain only unique lines	
check if current shell is running within a 'screen' process.	
check if current system is running in 64-bit addressing.	
check if directory $some_dir is empty	
check if files named 'file' in 1 level down the current directory whose status were changed more than 1 hour ago were not found and print old if that's true	
check if myfile has 0644 permissions	
check if named screen session exists	
check if process id 1 exists (init or systemd) and current user has permission to send it signals.	
check if rbenv is defined in the current tmux session environment	
check if the $somedir directory is empty	
"check if the contents of file ""subset"" is a subset of file ""set"""	
check if the directory tree whose name is given as variable $somedir contains no regular files	
"check if the file ""somelink"" links to exists"	
check if the file pointed by the symbolic exists or not and display those which are broken	
check if there any files from the .git folder after excluding it using the prune command	
check if your/dir is empty or not	
check md5sum of directory /path against the checksum saved in file 'file'	
"check readline bindings for ""\x61"""	
"check that the master ssh connection ""officefirewall"" is running"	
"check that the master ssh control socket ""my-ctrl-socket"" to ""jm@sampledomain.com"" is running"	
"check the bit width of static library ""libsomefile.a"""	
check the environment variables generated by switching to the root account.	
check the file type of all the regular/normal files in the current directory and save the output to the file /tmp/filetypes.log	
check the previous alias in current list	
check the syntax of all php files under the current directory	
check the type of files in the folder /usr/bin	
"check whether ""$path_in_question"" is a mount point"	
"check whether ""/full/path"" is a mount point with no output and using the exit code"	
check whether current terminal is opened in a screen session.	
"check which package the ""sort"" command belongs to in rpm"	
check_script_call=$(history |tail -1|grep myscript.sh )	<MISSING>
checks compressed file integrity.	
checks that 'monit' user is in 'www-data' group.	
checks your homebrew system for potential problems.	
checksum=`md5sum /etc/localtime | cut -d' ' -f1`	<MISSING>
chgrp	<MISSING>
"chgrp ""${user}"" myprogram"	<MISSING>
chgrp --recursive website public_html	<MISSING>
chgrp -r $group $path_to_output_folder	<MISSING>
chgrp -r admin *	<MISSING>
chgrp -r apache_user files	<MISSING>
chgrp -r fancyhomepage /home/secondacc/public_html/community/	<MISSING>
chgrp -r git ./	<MISSING>
chgrp -r git .git	<MISSING>
chgrp -r group /path/to/repo	<MISSING>
chgrp -r my_group files	<MISSING>
chgrp -r project_dev /home/user1/project/dev	<MISSING>
chgrp -r repogroup .	<MISSING>
chgrp -r shared_group /git/our_repos	<MISSING>
chgrp -r www-data /var/tmp/jinfo	<MISSING>
chgrp btsync /etc/btsync/[prefered conf name].conf	<MISSING>
chgrp forge /var/run/fcgiwrap.socket	<MISSING>
chgrp god public private	<MISSING>
chgrp groupb myprog	<MISSING>
chgrp loggroup logdir	<MISSING>
chgrp pub public	<MISSING>
chgrp target_group target_directory	<MISSING>
chgrp workers shared	<MISSING>
chgrp www-data /home/www-user/php_user.sh	<MISSING>
chmod +x $(brew --prefix)/etc/bash_completion	<MISSING>
chmod +x *.sh	<MISSING>
chmod +x bar	<MISSING>
chmod +x file.sh	<MISSING>
chmod +x pretty-print	<MISSING>
chmod +x rr.sh	<MISSING>
chmod --reference version2/somefile version1/somefile	<MISSING>
chmod -r +xr directory	<MISSING>
chmod -r 755 /directory	<MISSING>
chmod -r 777 ../tools	<MISSING>
chmod -r a+rx *	<MISSING>
chmod -rf u+w /path/to/git/repo/objects	<MISSING>
chmod 444 .bash_logout .bashrc .profile	<MISSING>
chmod 555 /home/sshtunnel/	<MISSING>
chmod 600 file	<MISSING>
chmod 640 $(find . -name *.php)	<MISSING>
chmod 640 `find ./ -type f -print`	<MISSING>
chmod 644 $(find /path/to/base/dir -type f)	<MISSING>
chmod 644 `find -type f`	<MISSING>
chmod 644 `find . -type f`	<MISSING>
chmod 644 `find /home/my/special/folder -type f`	<MISSING>
chmod 644 img/* js/* html/*	<MISSING>
chmod 751 `find ./ -type d -print`	<MISSING>
chmod 755 $(find /path/to/base/dir -type d)	<MISSING>
chmod 755 /folder -r	<MISSING>
chmod 777 /usr/bin/wget	<MISSING>
"chmod a+x $pathtoshell""myshell.sh"""	<MISSING>
chmod a+x computedate col printdirections	<MISSING>
chmod a+x myscript.sh	<MISSING>
chmod g+w $(ls -1a | grep -v '^..$')	<MISSING>
chmod g+w * ...*	<MISSING>
chmod g+w .[^.]* ..?*	<MISSING>
"chown ""dev_user"".""dev_user"" -r ~/.ssh/"	<MISSING>
"chown $(stat -c%u:%g ""$srcdir"") ""$dstdir"""	<MISSING>
"chown $(stat -f%u:%g ""$srcdir"") ""$dstdir"""	<MISSING>
chown $1:httpd .htaccess	<MISSING>
"chown $fuid:$fgid ""$file2"""	<MISSING>
chown $jboss_user $jboss_console_log	<MISSING>
chown ${jboss_user}: $(dirname $jboss_pidfile) || true	<MISSING>
"chown -- ""$user:$group"" ""$file"""	<MISSING>
"chown --reference=file.txt -- ""$tempfile"""	<MISSING>
chown --reference=oldfile newfile	<MISSING>
chown -r $1:httpd *	<MISSING>
chown -r $jboss_as_user:$jboss_as_user $jboss_as_dir	<MISSING>
chown -r $jboss_as_user:$jboss_as_user $jboss_as_dir/	<MISSING>
chown -r ${jboss_user}: $jboss_log_dir	<MISSING>
chown -r :daemon /tmp/php_session	<MISSING>
chown -r :lighttpd /var/lib/php/session	<MISSING>
chown -r andrewr:andrewr *	<MISSING>
chown -r antoniod:antoniod /opt/antoniod/	<MISSING>
chown -r antoniod:antoniod /var/antoniod-data/	<MISSING>
chown -r nobody upload_directory	<MISSING>
chown -r owner:owner public_html	<MISSING>
chown -r root:root /var/cache/jenkins	<MISSING>
chown -r root:root /var/lib/jenkins	<MISSING>
chown -r root:root /var/log/jenkins	<MISSING>
chown -r tomcat6 webapps temp logs work conf	<MISSING>
chown -r tomcat7:tomcat7 webapps temp logs work conf	<MISSING>
chown -r user:www-data yourprojectfoldername	<MISSING>
chown -r user_name folder	<MISSING>
chown -r www-data /var/www/.gnome2 /var/www/.config /var/www/.config/inkscape	<MISSING>
chown -r your_user_name.your_user_name 775 /home/el/svnworkspace	<MISSING>
chown -r your_user_name.your_user_name 775 /workspace	<MISSING>
"chown -v root ""$file"""	<MISSING>
chown -v root:root /path/to/yourapp	<MISSING>
chown :friends myfile	<MISSING>
chown `stat -c %u originalfile`:`stat -c %g originalfile` newfile	<MISSING>
chown amzadm.root  /usr/bin/aws	<MISSING>
chown amzadm.root -r /usr/lib/python2.6/site-packages/	<MISSING>
chown amzadm.root -r /usr/lib/python2.6/site-packages/awscli/	<MISSING>
chown ftpuser testproject/ -r	<MISSING>
chown nginx:nginx /your/directory/to/fuel/ -r	<MISSING>
chown owner:nobody public_html	<MISSING>
chown root:root it	<MISSING>
chown root:root script.sh	<MISSING>
chown root:specialusers dir1	<MISSING>
chown user destination_dir	<MISSING>
chown user1:user1 -r subdir1	<MISSING>
chown user2:user2 -r subdir2	<MISSING>
chown user3:user3 -r subdir3	<MISSING>
chown user:group file ...	<MISSING>
chown user_name file	<MISSING>
chown user_name folder	<MISSING>
chsh -s $(which zsh)	<MISSING>
clean directories and subdirectories of the temporary files generated during normal use	
clean the current directory from all subversion directories recursively	
clean up all zombie processes by instantly killing their parent process with sigkill signal.	
clean up all zombie processes by sending sigterm signal to their parent process, which requests them to terminate.	
"clean up the output of ""unzip -l"" and print only the ""jar"" files"	
clean=`echo -n $clean | tr a-z a-z`	<MISSING>
clear	<MISSING>
clear the in-memory history	
clear the in-memory history and read from the current history file	
clear the terminal's search history	
clears terminal screen.	
clears the terminal screen.	
"clone the permissions of ""$srcdir"" to ""$dstdir"""	
"clone the permissions of ""$srcdir"" to ""$dstdir"" on osx"	
close the current screen session	
"close the master ssh control socket ""my-ctrl-socket"" to ""jm@sampledomain.com"""	
"cmdstr=$(alias $aliascmd | cut -d""'"" -f2 | xargs)"	<MISSING>
"cnt=`ps -ef| tee log | grep ""cntps""|grep -v ""grep"" | wc -l`"	<MISSING>
"collapse double slashes in variable ""dir"" into a single one."	
"column -s""${tab}"" -t"	<MISSING>
column -s: -t	<MISSING>
column -t -s $'\n' list-of-entries.txt	<MISSING>
column -t -s $'\t' file	<MISSING>
column -t -s $'\t' list-of-entries.txt	<MISSING>
column -t -s '' list-of-entries.txt	<MISSING>
column -t -s' ' filename	<MISSING>
column -t [file]	<MISSING>
column -t file | uniq -w12 -c	<MISSING>
column -x -c 30 /tmp/file	<MISSING>
"column -x <<< ""$(printf '%s\n' $module)"""	<MISSING>
"column <<< ""$(printf '%s\n' $module)"""	<MISSING>
column list-of-entries.txt	<MISSING>
column=`echo $1 | tr -d -`	<MISSING>
combine every two lines of standard input	
comm -1 -2 <(ls /dir1 | sort) <(ls /dir2 | sort)	<MISSING>
comm -1 -2 <(sort file1) <(sort file2)	<MISSING>
comm -1 -2 file1.sorted file2.sorted	<MISSING>
comm -1 -3 file1 file2	<MISSING>
comm -12  <(ls 1) <(ls 2)	<MISSING>
comm -12  <(ls one) <(ls two)	<MISSING>
comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)	<MISSING>
comm -12 <(comm -12 <(comm -12 <(sort file1) <(sort file2)) <(sort file3)) <(sort file4)	<MISSING>
"comm -12 <(cut -d "" "" -f 3 file1.sorted | uniq) <(cut -d "" "" -f 3 file2.sorted | uniq) > common_values.field"	<MISSING>
"comm -12 <(echo $a|awk -f""\0"" '{for (i=1; i<=nf; i++) print $i}') <(echo $b|awk -f""\0"" '{for (i=1; i<=nf; i++) print $i}')|tr -d '\n'"	<MISSING>
comm -12 <(find . -maxdepth 1 | sed -e 's/^.\///' ) <(cat 1)	<MISSING>
comm -12 <(find ~/bin/filesdvorak/.* -maxdepth 0) <(find ~/.past_rc_files/.*)	<MISSING>
comm -12 <(grep -rl word1 . | sort) <(grep -rl word2 . | sort)	<MISSING>
comm -12 <(sort -u /home/xyz/a.csv1) <(sort -u /home/abc/tempfile) | wc -l	<MISSING>
comm -12 <(sort < a) <(sort < b)	<MISSING>
comm -12 <(sort file1.txt) <(sort file2.txt) | wc -l	<MISSING>
comm -12 <(sort set1) <(sort set2)	<MISSING>
comm -12 <(zcat number.txt.gz) <(zcat xxx.txt.gz)	<MISSING>
comm -12 file1 file2	<MISSING>
comm -12 ignore.txt input.txt	<MISSING>
comm -12 ignore.txt input.txt | wc -l	<MISSING>
comm -13 <(grep '#include' file1 | sort) <(grep '#include' file2 | sort)	<MISSING>
comm -13 <(sort file1) <(sort file2)	<MISSING>
comm -13 <(sort first.txt) <(sort second.txt)	<MISSING>
comm -13 a b	<MISSING>
comm -13 first.txt second.txt	<MISSING>
comm -2 -3 <(sort -n b.txt) <(sort -n b.txt)	<MISSING>
comm -2 -3 <(sort a.txt) <(sort b.txt)	<MISSING>
comm -2 -3 a b | comm -2 -3 - c | comm -2 -3 - d	<MISSING>
comm -2 -3 f1 f2	<MISSING>
"comm -2 file1.txt file2.txt | awk -f'\t' '{print (nf==2?""y"":"""")}'"	<MISSING>
"comm -23 ""file 1"" ""file 2"""	<MISSING>
comm -23 <(command_which_generate_n|sort) <(command_which_generate_m|sort)	<MISSING>
comm -23 <(find dir1 -type d | sed 's/dir1/\//'| sort) <(find dir2 -type d | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/'	<MISSING>
comm -23 <(find dir1 -type f | sed 's/dir1/\//'| sort) <(find dir2 -type f | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/'	<MISSING>
comm -23 <(find dir1 | sed 's/dir1/\//'| sort) <(find dir2 | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/'	<MISSING>
comm -23 <(ls dir1 |sort) <(ls dir2|sort)	<MISSING>
comm -23 <(ls) <(ls *music*)	<MISSING>
comm -23 <(sort -u a.txt) <(sort b.txt)	<MISSING>
comm -23 <(sort a.txt) <(sort b.txt)	<MISSING>
comm -23 <(sort file1) <(sort file2)	<MISSING>
comm -23 <(sort file1) <(sort file2)|grep -f - file1	<MISSING>
comm -23 <(sort file1.txt) <(grep -o '^[^;]*' file2.txt | sort)	<MISSING>
comm -23 <(sort filea) <(cut -d' ' -f1 fileb | sort -u)	<MISSING>
comm -23 <(sort set1) <(sort set2)	<MISSING>
comm -23 <(sort subset | uniq) <(sort set | uniq) | head -1	<MISSING>
comm -23 a b	<MISSING>
comm -23 a.txt b.txt	<MISSING>
comm -23 a.txt b.txt | wc -l	<MISSING>
comm -23 file1 file2	<MISSING>
comm -23 second-file-sorted.txt first-file-sorted.txt	<MISSING>
comm -3 <(printf '%s\n' */ | sed 's|/.*||' | sort) <(find */ -type d -name bin | cut -d/ -f1 | uniq)	<MISSING>
comm -3 <(sort -un f1) <(sort -un f2)	<MISSING>
comm -3 <(sort -un f1) <(sort -un f2) | tr -d '\t'	<MISSING>
comm -3 <(sort file1) <(sort file2)	<MISSING>
comm -3 <(sort set1) <(sort set2) | sed 's/\t//g'	<MISSING>
comm -3 a b	<MISSING>
comm -3 a b | sed 's/^\t//'	<MISSING>
comm <(sort -n f1.txt) <(sort -n f2.txt)	<MISSING>
comm <(sort f1.txt) <(sort f2.txt)	<MISSING>
comm abc def	<MISSING>
comm file1 file2	<MISSING>
command $(zcat input1.txt.gz) $(zcat input2.txt)	<MISSING>
command -1 <(gzip -dc file1.gz) -2 <(gzip -dc file2.gz)	<MISSING>
command 2>&1 | tee /path/to/logfile	<MISSING>
command > >(tee -a stdout.log) 2> >(tee -a stderr.log >&2)	<MISSING>
"command time -f ""%e real,%u user,%s sys"" ls -fs"	<MISSING>
command | less	<MISSING>
command | more	<MISSING>
command | tee -a /path/to/logfile	<MISSING>
command | tee /path/to/logfile	<MISSING>
command | wc -l	<MISSING>
command_that_writes_to_stdout | tee >(command_that_reads_from_stdin)	<MISSING>
comment=$(cat /proc/sys/kernel/random/uuid | sed 's/\-//g')	<MISSING>
"compare ""$source_file"" and ""$dest_file"" line by line"	
"compare ""current.log"" and ""previous.log"" line by line and print lines containing regex pattern "">\|<"""	
"compare ""fastcgi_params"" and ""fastcgi.conf"" line by line, output 3 lines of unified context, and print the c function the change is in"	
"compare ""file1"" and ""file2"" line by line with 3 lines of unified context"	
compare *.csv files in the current directory tree with their analogs stored in /some/other/path/	
compare *.csv files in the current directory tree with their analogs stored in /some/other/path/ prompting before running `diff'	
"compare column 3 with column 2 of the next line in ""file"" and format output as a table"	
"compare each .xml file under the current directory with a file of the same name in ""/destination/dir/2"""	
compare each c header file in or below the current directory with file /tmp/master	
compare each c header file in or below the current directory with the file /tmp/master	
"compare each file in ""repos1/"" and ""repos2/"", treat absent files as empty, ignore differences in whitespace and tab expansions, and print 3 lines of unified context"	
"compare files ""a1"" and ""a2"" with 3 lines of unified context and print lines beginning with ""+"""	
compare files 'file1' and 'file2' and print in three columns strings unique for first file, second file, and common ones	
"compare files in ""/tmp/dir1"" and ""/tmp/dir2"", treat absent files as empty and all files as text, and print 3 lines of unified context"	
"compare files in ""/tmp/dir1"" and ""/tmp/dir2"", treating absent files as empty and all files as text"	
compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file, second file, and common ones	
"compare text ""hello"" and ""goodbye"" line by line"	
"compare the contents of ""/bin"" and ""/usr/bin"" line by line"	
"compare the contents of gzip-ompressed files ""file1"" and ""file2"""	
compare the files in 'folder1' and 'folder2' and show which ones are indentical and which ones differ	
compares two listings 'ls' and 'ls *music*', showing only strings that unique for first listing.	
compaudit | xargs chmod g-w	<MISSING>
compose filepath as folder path where file $f is located, and lowercase filename of $f file, and save it in 'g' variable	
compose filepath as folder path where file $src is located, and lowercase filename of $src file, and save it in 'dst' variable	
composes full process tree with process id numbers, and prints only those strings that contain 'git'.	
"compress ""archive.tar"""	
"compress ""hello world"" and save to variable ""hey"""	
"compress ""hello world"", base64 encode, and save to variable ""foo"""	
"compress ""my_large_file"" with gzip and split the result into files of size 1024 mib with prefix ""myfile_split.gz_"""	
"compress ""mysqldbbackup.sql"" with gzip and email it with subject ""mysql db"" to ""backup@email.com"""	
compress $* &	<MISSING>
compress $file file using gzip	
compress .log files in /var and below	
compress .log files in /var and below on an individual basis	
compress a file named '{}' in the current directory	
"compress all "".txt"" files in all sub directories with gzip"	
"compress all "".txt"" files in the current directory tree with gzip"	
compress all *.img files using bzip2	
"compress all .txt files in the current directory tree to archive ""txt.zip"""	
compress all directories found in $logdir wherein a file's data has been modified within the last 24 hours	
compress all directories found in directory tree $logdir that have been modified within the last 24 hours	
"compress all files in directory ""$path_to_logs"" that were last modified more than ""$some_number_of_days"" days ago"	
"compress all files in the ""$file"" directory tree that were last modified 30 days ago"	
"compress all files in the ""$file"" directory tree that were last modified 30 days ago and have not already been compressed with gzip"	
"compress all files not ending in "".gz"" in directory ""$path_to_logs"" that were last modified more than ""$some_number_of_days"" days ago"	
compress all files under /source directory tree using gzip with best compression method	
compress all files under current directory tree with gzip	
compress all files with '.txt' extension under current directory	
compress all the non-compressed  files in the current directory.	
"compress and display the gzip compression ratio of every file on the system that is greater than 100000 bytes and ends in "".log"""	
"compress and display the gzipped filenames of every file on the system that is greater than 100000 bytes and ends in "".log"""	
"compress and display the original filename of every file on the system that is greater than 100000 bytes and ends in "".log"""	
"compress each file in all directories matching pattern ""*.1"""	
"compress every file in the current directory that matches ""*cache.html"" and keep the original file"	
"compress every file in the current directory tree that matches ""*cache.html"" and keep the original file"	
compress every file in the current directory tree with gzip and keep file extensions the same	
compress files excluding *.z files	
compress from standard input and print the byte count preceded with 'gzip.'	
compress from standard input with gzip	
compress in parallel regular files in the current directory tree that were last modified more than 7 days ago	
compress regular files in the current directory tree that were last modified more than 7 days ago	
"compress the base64 encoded first 200 characters of ""/dev/urandom"" as input to uuencode"	
compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout	
compresses all '*.xml' files under current directory with 'bzip2' utility.	
compresses all files in a current folder (not recursively).	
compresses all files in the directory 'path_to_folder' without recursion and keeps uncompressed files from deletion.	
compresses all files listed in array $*, executing in background.	
compresses all the files in the current folder with default depth	
compresses file 'example.log' keeping original file in place.	
compresses with compression level 9 all files under the current folder but already compressed '*.bz2' files, performing in background.	
compute difference between two dates	
compute the mean average of the word count of *.txt files in the home directory	
compute the mean average of the word count of *.txt files smaller than 2000 words in the home directory	
concatenate all .txt files residing in the current directory tree	
"concatenate all files under the current directory and below that contain ""test"" in their names"	
concatenate all pdf files under current directory into all.pdf	
concatenate files containing `test' in their names	
"concatenate with a space every other line in ""input.txt"""	
concatenates file1.txt, file2.txt, and file3.txt with the filenames printed at the beginning of file contents	
connect as ssh user specified by variable user to host whose ip address or host name is specified by host, and copy remote file specified by variable src to location on local host specified by variable dest, disabling progress info but enabling debug info.	
"connect to ""$user_at_host"" using connection sharing on ""$sshsocket"" and request the master to exit"	
"connect to host ""$user_at_host"" in master mode in the background without executing any commands and set the controlpath to ""$sshsocket"""	
"connect to host ""${hostname}"" as user ""${username}"" and execute ""${script}"" non-interactively"	
"connect to host ""hostname"" as user ""username"", automatically add the host key to the list of known hosts, and execute ""pwd; ls"" non-interactively"	
"connect to host ""remotehost"" as ssh user ""user"" to copy remote file ""/location/kmst_datafile_*.kms"" to current directory on local host."	
"connect to host ""server_b"" as ssh user ""user"" and copy local file ""/my_folder/my_file.xml"" to server_b's directory ""/my_new_folder/""."	
connect to host 'hostname' as user 'username' by forcing host key confirmation	
"connect to port 1234 of specified ip address or hostname as ssh user ""user"", and copy all visible files in /var/www/mywebsite/dumps/ on this host to local directory /mynewpathoncurrentlocalmachine - this directory must already exist on local host."	
"connect to port 2222 of example.com as ssh user ""user"", and copy local file ""/absolute_path/source-folder/some-file"" to remote directory ""/absolute_path/destination-folder"""	
"connect via ssh to ""your.server.example.com"" and recursively copy directory ""/path/to/foo"" on this host to direcotry ""/home/user/desktop"" on local host, using ""blowfish"" cipher algorithm."	
"constantly write ""y"" to backingfile as a background process"	
construction with additional '-exec true' to be used if both commands need to run regardless of their success or failure.	
content_dir1=$(mktemp)	<MISSING>
content_dir2=$(mktemp)	<MISSING>
"continuously answer ""y"" to any prompt from ""mv ..."""	
"continuously convert ""20131202"" into ""2013 12 02"" and print the result"	
"continuously output ""y"" at a rate of 10 bytes per second"	
"continuously print ""123456789"" and line buffer the output via ""grep"" for input to ""{ head -n 1; head -n 1; }"""	
"continuously print the seconds since unix epoch and the ping time to ""google.com"""	
"continuously send ""a"" then ""b"" to ""script.py"""	
"continuously send ""ok"" plus newline to the program ""recalcitrant.php"""	
"continuously send ""y"" as input to ""./myscript.sh"" and ignore standard error"	
"continuously send ""y"" as input to ""cat"" which outputs to ""more"""	
"continuously send ""y"" to all prompts of command ""rm"""	
"continuously send ""y"" to input of ""command"""	
"continuously send ""y"" to input of ""command-that-asks-for-input"""	
"continuously send ""yes"" plus newline to the program ""./ittp-update.sh"""	
"continuously send ping requests to broadcast address ""10.10.0.255"" and print the ip addresses who respond"	
"continuously write ""hidden"" over the entire ""/dev/sdb"" disk"	
"continuously write ""hidden"" separated by null terminators over the entire ""/dev/sdb"" disk"	
"continuously write ""hidden"" separated by spaces over the entire ""/dev/sdb"" disk"	
"continuously write ""uuuuuuuuuuuuuuuuu"" without newlines to ""/dev/to/overwrite"""	
"convert ""/usr/share/man/man1/man.1.gz"" to html"	
"convert ""1199092913"" to dotted decimal ipv4 address"	
"convert ""595a"" into characters and then print the hexadecimal and printable characters of each byte"	
"convert "";"" separated list ""luke;yoda;leila"" to new line separated list"	
"convert ""abc"" to a string of hexadecimal bytes"	
"convert ""some random\nbytes"" to ""%"" separated hexadecimal byte values"	
convert *.au files to *.wav files using `sox'	
convert *.doc files in the current directory tree to the .txt format	
convert *.doc files in the current directory tree to the .txt format and remove the original files	
convert all *.ps files under $startdir directory to *.pdf files	
convert all .txt files under and below the current directory from the dos format to unix	
convert all bmp files to png in the current directory tree	
"convert all characters in ""$a"" to lower case and save to variable ""b"""	
"convert all characters in ""$a"" to upper case and save to variable ""b"""	
convert all characters in standard input to lower case	
convert all dos files under and below the current directory to the unix format	
convert all image.pdf files to image.png files under ./polkadots	
convert all m4a sound files in a directory and its subdirectories to mp3 files	
convert all markdown files on the system to html	
convert all text files in the current folder from dos to unix format	
convert all the normal files in the current folder from dos format to unix format (remove extra characters at the end etc.)	
convert all the normal files in the current folder from dos format to unix format (remove extra characters at the end etc.) and save the output to a file	
convert all the png images in the current folder to jpg images	
convert all the regular/normal files in the current folder from dos to unix format	
convert directory of files from dos to unix	
convert epoch second timestamp to date	
convert multiple *.jpg files from jpeg to pdf format	
"convert relative path ""/x/y/../../a/b/z/../c/d"" into absolute path with resolved symbolic links"	
"convert relative symbolic link ""$link"" to absolute symbolic link"	
convert standard input into a dump of octal bytes without the first 8 bytes of address and count the unique results	
convert symlink to regular file	
convert the content of variable 'clean' to small letters	
"convert the contents of ""foo.md"" to github style markdown and display with ""lynx"""	
"convert the contents of ""infile"" from dos to unix style text and display the result as printable characters or backslash escapes"	
convert the contents of 'var1' variable to lowercase	
"convert the first 1024 bytes of ""/dev/urandom"" to a string of hexadecimal bytes"	
"convert the first 16 characters in ""/dev/random"" to a single hexadecimal value"	
"convert the string ""$myarray"" into a bash array using "";"" delimiters"	
convert unix `cal` output to latex table code.	
converts all absolute symbolic links to relative symbolic links	
converts all windows line endings to unix line endings	
cope *.mp3 files to /tmp/musicfiles	
"copies """"$project_dir""/itunesartwork"", to the 'payload/itunesartwork', rewriting files if necessary."	
copies ${file} to collect folder with unique name formatted like 'job_xxxxxxxxx'.	
copies '[macvim_source_folder]/src/macvim/mvim' to the  '/usr/local/bin', printing info message on each operation.	
copies 'libgtest_main.so' and 'libgtest.so' to '/usr/lib/', preserving all attributes, and copying symlinks as symlinks, without following in source files.	
copies 'src' to 'dest' preserving overwriting the existing files.	
"copies all files like ""*foo*"" under the current directory to the '/your/dest' directory."	
"copies all files like ""*foobar*"" under the current directory to the '~/foo/bar' directory."	
"copies all files like ""*foobar*"" under the current directory to the '~/foobar' directory."	
copies all files like '*.txt' under the current directory to the './tmp/' directory.	
copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.	
copies all files under current directory like '*foobar*' to the '~/foo/bar' directory.	
copies all files under the current directory but ones with '*/not-from-here/*' in path to the '/dest/' directory.	
copies all files under the current directory like any-cased '*foobar*' to the '~/foo/bar' directory.	
"copies all files under the current folder like ""file.ext"" with ""foobar"" in the path to the root of the current folder, preserving mode, ownership and timestamp attributes."	
"copies all files with ""foobar"" in the path under the current directory to the '~/foo/bar' directory."	
copies defined file to the target folder without overwriting existing files.	
copies file '/boot/config-`uname -r`' to the  '.config', printing info message and prompting before owerwriting files.	
copies file 'file.dat' to each top-level directory in the current directory.	
copies file 'file.txt' to each top-level directory in the current directory.	
copies file 'file1' to each of directories 'dir1', 'dir2', 'dir3'.	
copies file 'filename.txt' to each of directories listed in the 'allfolders.txt' list.	
copies file 'index.html' to each top-level directory in the current directory beginning with 'd'.	
copies file 'index.html' to each top-level directory in the current directory.	
copies file 'test' to each of directories like './fs*/*'.	
copies files 'src/prog.js' and 'images/icon.jpg' with fully-defined path to '/tmp/package' directory.	
copies newest file under the current folder to the '/tmp/'	
"copy ""*.cc"", ""*.h"", and ""sconstruct"" to ""rsync://localhost:40001/bledge_ce"" using blocking io"	
"copy ""./export"" recursively to ""/path/to/webroot"" preserving permissions"	
"copy ""/home/username/path/on/server/"" to ""username@your.ip.address.here:/users/username/path/on/machine/"" and convert encoding from utf-8 to utf-8-mac"	
"copy ""/new/x/y/z/"" over the network to ""user@remote:/pre_existing/dir/"" preserving the directory hierarchy"	
"copy ""/path/to/source"" to '/path/to/dest' in remote ""username@computer"""	
"copy ""/users/username/path/on/machine/"" to ""username@server.ip.address.here:/home/username/path/on/server/"" and convert encoding from utf-8-mac to utf-8"	
"copy ""6.3.3/6.3.3/macosx/bin/mybinary"" to ""~/work/binaries/macosx/6.3.3/"" and create directory ""~/work/binaries/macosx/6.3.3/"" if ""~/work/binaries/macosx/"" exists"	
"copy ""file"" from ""remote"" into local clipboard"	
"copy ""filename.txt"" to all directories listed in ""allfolders.txt"" - names may not contain spaces."	
"copy ""local_file"" to ""user@host:remote_file"" via ssh protocol, saving partially transferred files, and showing progress"	
"copy ""some_file_name"" to ""destination_directory"" and change ownership to ""someuser:somegroup"""	
"copy ""source"" recursively to ""destination"" excluding ""path1/to/exclude"" and ""path2/to/exclude"""	
"copy ""src"" to ""dest"" if ""src"" is newer than ""dest"""	
"copy ""src/prog.js"" and ""images/icon.jpg"" to ""/tmp/package"" keeping relative path names"	
"copy ""src/prog.js"" and ""images/icon.jpg"" to ""/tmp/package/"" keeping relative path names"	
copy %path% variable on windows to clipboard	
"copy '/path/to/source' from remote ""username@computer"" to local ""/path/to/dest"""	
copy *.mp3 files to /tmp/musicfiles	
copy *.txt files from the dir/ directory tree along with their parent directories	
copy /my/configfile to all empty directories of the $somedir directory tree	
copy a comlex directory tree from one machine o another while preserving copy permissions and ownership	
copy a file xyz.c to all directories or over all files matching the letter 'c' at the end of their names under current directory tree	
copy a file xyz.c to all the .c files present in the c directory and below	
"copy a file xyz.c to all the directories below the current one whose names begin with ""temp"""	
copy a files from one folder to all the folder in the /raid which have an extension local_sd_customize.	
"copy a large sparse file ""sparse-1"" to ""sparse-1-copy"""	
copy a whole directory tree skipping files residing on other files systems to destination_dir	
"copy all "".php"" files in ""projects/"" directory tree to ""copy/"" preserving directory hierarchy"	
"copy all "".xml"" files in the current directory tree to ""/new/parent/dir"" preserving the directory hierarchy"	
copy all *.data files under /source_path to /target_path	
copy all *.data files under /source_path to /target_path by appending the parent directory names in the source paths to the beginning of each of the target file names	
copy all *.data files under jcho directory to files whose names are constructed by appending the parent directory names at the beginning of their names	
copy all *.data files under jcho directory to files whose names are constructed by replacing the first '0' to '2' in their names	
copy all *.mp3 files under the current directory to /tmp/musicfiles/	
copy all *.txt files from the current directory tree to /destination	
copy all *.txt files from the current directory tree to /tmp	
copy all .patch files from the current directory tree to patches/	
copy all .pdf files in the ./work/ directory tree with size bigger then 2 mb and modified more than 5 days ago to the ./backup/ directory	
copy all .png files from the home directory tree to imagesdir/	
copy all .txt files from the dir/ directory tree along with their parent directories hierarchy	
"copy all directories recursively from ""source/"" to ""destination/"" excluding all files"	
"copy all files (not directories) in ""/path/to/local/storage"" to ""/path/to/copy"" on host ""remote.host"" authenticating as user ""user"""	
"copy all files and directories in ""/home/"" to ""/newhome"" preserving directory hierarchy and modification time"	
"copy all files and directories under the current directory into ""../new"" preserving relative paths"	
"copy all files below the current directory whose names contain ""foobar"" (case-insensitive) to directory foo/bar/ in user's home directory."	
"copy all files below the current directory whose names contain ""foobar"" to directory foo/bar/ in user's home directory."	
"copy all files ending in "".a"" in directory trees matching ""folder*"" to ""/path/to/dest"" preserving directory hierarchy"	
copy all files from the current directory tree to /path/to/destination/dir preserving their times, permissions, and ownership	
"copy all files in ""/mail"" to ""/home/username"" preserving the directory hierarchy and modification times"	
"copy all files in ""/var/spool/mail"" to ""/home/username/mail"" preserving the directory hierarchy and modification times"	
copy all files in current directory that do not match */exlude-path/* in their paths to /destination/ preserving directory structure	
copy all files in current directory that do not match */not-from-here/* in their names to /dest	
copy all files in current directory that do not match */not-from-here/* in their paths to /dest	
copy all files in the current directory except those containing 'music' to '/target_directory'.	
"copy all files in the current directory tree matching ""texttosearch"" to ""$destination_path"""	
"copy all files matching ""*.sh"" in ""$from/*"" to ""root@$host:/home/tmp/"" compressing data during transmission"	
"copy all files matching ""*failed.ipynb"" in the current directory tree to ""./fails"" preserving the directory hierarchy"	
"copy all files matching ""file_name.extension"" to ""/path/to/receiving/folder"" preserving directory hierarchy"	
copy all files named 'script.sh' in directory 'olddir' to directory 'newdir'	
copy all files that match 'foobar' in their paths under current directory tree to the '~/foo/bar' directory	
"copy all files unconditionally and directories in directory tree ""myfiles"" to ""target-dir"" preserving directory hierarchy and modification time"	
copy all files under director 'foo' whose name doesn't contain 'music' to directory 'bar'.	
copy all files which do not have execute permission to another folder	
copy all files with '.png' (case insensitive) extension under '/home/mine' directory tree to '/home/mine/pngcoppies/' directory with new names constructed by prepending 'copy' in their names	
copy all files with '.png' (case insensitive) extension under '/home/mine' directory tree to '/home/mine/pngcoppies/copy.' directory	
copy all files with name pattern $j.sh (case insensitive) under '/tmp/2' directory tree to $i directory	
copy all files/directories excluding *.flac files under current directory to /media/wd/network_sync/music directory	
copy all java files from current folder to another folder	
copy all regular files from the current directory tree to /tmp	
copy all regular files from the current directory tree to /tmp/	
copy all regular files from the current directory tree to directory `target'	
"copy all regular files whose names end in ""~"" from the /path directory tree to ~/backups/"	
"copy all the files with the extension "".type"" from one folder to a target directory"	
copy all the log files in the current folder which have not been accessed in the last 30*24 hours to the folder old	
copy all the mp3 files from current folder to another folder	
copy all the regular files in the current directory to the temporary diectory.	
copy all the regular/normal files from temp folder which have been modified in the last 30*24 hours to /tmp/backup	
copy an entire file structure, creating empty files in the copy instead of copying the actual files.	
"copy and always overwrite all files in ""/zzz/zzz"" to ""/xxx/xxx"""	
copy current working directory to clipboard	
"copy default ssh public key to ""somehost"" as user ""myname"""	
"copy directory hierarchy ""dir"" and all its .txt files to ""dir_txt"""	
"copy directory hierarchy from ""$sourcedir"" to ""$targetdir"""	
"copy directory hierarchy from ""./<source_dir>/"" to ""<dest_dir>"""	
"copy directory hierarchy from the current working directory to ""/path/to/backup/"""	
copy directory structure from directory 'olddir' to 'newdir'	
copy directory tree preserving uid and gid and leaving user files alone	
"copy entire directory structure from dir1 as a subdirectory of dir2, omitting any file or directory named ""exclude""."	
"copy entire directory structure from dir1 as a subdirectory of dir2, omitting empty directories, special files (sockets, pipes etc) and any directory named ""exclude""."	
"copy file ""exist"" from directory ""/file/that"" to a new file named ""file"" in ""/location/for/new"""	
copy file 'src' to 'dest', except if 'dest' already exists.	
copy file header.shtml to directories dir1, dir2, dir3, and dir4	
"copy file in current directory of local host to host ""remote"", connecting as ssh user matching current local username, and copying the file in home directory on remote host - enable compression during transfer."	
"copy file linked to by ""bar.pdf"" to ""bar.pdf"""	
"copy file linked to by ""file"" to ""file"""	
copy file or directory 'gtest' from directory 'include' in current directory to /usr/include, preserving ownerships and permissions.	
"copy file or folder linked to by ""file"" to ""file"""	
"copy files printed by ""any_command_what_produces_relative_path_names"" to ""/new/parent/dir"" preserving the directory hierarchy"	
copy files, removing digits from the filename (e.g file123 to file or te12345st to test). do not overwrite any existing file.	
"copy local file ""$1"" to host ""$2"" into host directory ""$3"""	
"copy local file ""file"" via ssh to remote ""host"" path ""/directory/"""	
"copy permissions from ""version2/somefile"" to ""version1/somefile"""	
"copy recursively ""/source/backup"" to ""/destination"" preserving symbolic links, modification times, and permissions"	
"copy recursively ""tata/"" to ""tata2/"" and remove read, write, and execute permission for other"	
"copy specific sub-directories ""company1/"" and ""company1/unique_folder1"" from ""user@server.com:/path/to/old/data/"" to ""/path/to/new/data"" via ssh"	
copy src_dir recursively to dest_dir, but without overwriting existing files.	
copy the 3 specified files to /tmp/package, preserving/creating directory structure of each file as specified on command line.	
"copy the current directory tree to ""newdirpathname"" preserving directory hierarchy"	
copy the current directory tree to '/path/to/destination/dir' preserving permissions, timestamp and ownership	
"copy the directory hierarchy from ""original"" to ""new"""	
"copy the directory hierarchy of the current directory to ""destdir"""	
"copy the directory structure in ""src/"" to ""dest/"" with empty files"	
"copy the entire ""/lib"" and ""/usr"" directory including symlinks from ""pi@192.168.1.pi"" to ""$home/raspberrypi/rootfs"" and delete files after the transfer"	
copy the entire contents of the current directory preserving ownership, permissions, and times	
copy the entire contents of the current directory to another directory, while preserving the permissions, times, and ownership of every file and sub-directory	
copy the entire directory tree under t1 to t2, do not create a containing t1 directory in t2.	
"copy the executable ""python2.7"" in $path to ""myenv/bin/python"""	
copy the file foo.sh into /path/to/cotainer of the docker container	
copy the file foo.sh into /tmp of the docker container	
copy the file header.shtml to each directory under dir1, dir2, dir3, or dir4	
copy the file header.shtml to those dirs	
"copy the owner and group from ""file.txt"" to ""$tempfile"""	
"copy the owner and group of ""oldfile"" to ""newfile"""	
"copy the owner and group of ""originalfile"" to ""newfile"""	
"copy the standard output of a ""bash"" session to ""/var/log/bash.out.log"""	
correct permissions for directories in the web directory	
correct permissions for files in the web directory	
count all directories in maximum 1 level down the current directory	
count all directories under current directory	
"count all files under ""/dir"""	
count all the html files having a specifc word in a folder.	
count all the lines of all '*.c' files in current directory recursively	
count all the lines of all files with names ending with 'php' in current directory recursively	
count all the lines of all php files in current directory recursively	
count all the lines of code in all php files in current directory recursively	
count all the lines of code in the current directory recursively.	
count all the mp3 files in the music user's home and subdirs.	
count all the regular files that are present in a directory	
count amount of jobs running	
count and show the number of lines for each php files in the current directory tree	
count case insensitive absolute paths recursively from the current directory	
count files accessed more than a month ago	
count files in $dir_to_clean that are older than $days_to_save days	
count files in the current path by modification month	
count line numbers on files and record each count along with individual file name.	
count lines of c or c++ or obj-c code under the current directory	
count lines of c or c++ or obj-c or java code under the current directory	
count lines that are neither blanks nor comments in a file 'foo.pl'	
count md5sum of all '*.py' files in a current folder with subfolders.	
count non-blank lines in a file 'foo.c'	
count number of a records of domain '$domain' on nameserver '$server' and save value in 'result' variable	
count number of lines for each file containing ascii text under git repository.	
"count number of lines in ""sample_51770bl1_r1.fastq.gz"""	
"count number of lines in all files matching ""*r1*.fastq.gz"""	
"count number of occurences of ""123"" in the string ""123 123 123"" (ie. 3)"	
count number of users logged in	
"count the *.html files residing in the /usr/src directory tree and containing string ""foo"""	
count the lines of java code for all the java files in the current directory	
"count the number of ""x"" characters in ""filename"""	
"count the number of ""x"" characters in ""infile"""	
count the number of .gz files in directory tree /home/user1/data1/2012/maindir	
count the number of .gz files in the current directory tree	
count the number of .java files in all folders rooted in the current folder	
count the number of all directories under current directory non-recursively	
count the number of all directories under directory '/mount/point' non-recursively	
"count the number of areas that differ in ""file1"" and ""file2"" with 0 lines of unified context"	
count the number of characters in the list of regular files from the current directory tree	
"count the number of differing lines in ""file1"" and ""file2"""	
"count the number of differing lines in ""file1"" and ""file2"" with 0 lines of unified context"	
count the number of directories in the current directory and below	
count the number of directories under directory '/directory/' non-recursively	
"count the number of equal lines in ""file1.txt"" and ""file2.txt"""	
"count the number of equal lines in sorted files ""ignore.txt"" and ""input.txt"""	
count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'dirrmtry'	
count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'etc/rc.d/'	
count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'unexec.rmdir%d'	
count the number of files in the current directory and below	
count the number of files in the directory trees whose pathnames match pattern '/dev/sd*[a-z]'	
count the number of files named 'job.history' under '/data/spoolin' directory tree that match 'fail' in their contents	
count the number of files named `file1'	
count the number of files/directories named file1 under current directory	
count the number of files/directories with '.php' extension under current directory tree and change the permissions to 755	
"count the number of lines in ""/dir/file.txt"""	
"count the number of lines in ""/etc/fstab"""	
"count the number of lines in ""myfile.txt"""	
"count the number of lines in ""testfile"" wrapped to fit in a width of ""$columns"" characters"	
"count the number of lines in all "".php"" files in the current directory tree"	
"count the number of lines in all "".php"" files in the current directory tree using bash for windows"	
"count the number of lines in all "".txt"" files"	
count the number of lines in all files in the xargstest/ directory tree that match pattern 'file??'	
count the number of lines in each .java file in the current directory tree	
count the number of lines in every regular .rb file in the current directory tree	
count the number of lines in the current git repository	
count the number of lines recursively in the current directory	
count the number of matches for the regex '\<exception\>'  in all *.txt files under /usr/share/doc/ directory	
count the number of non localhost users	
"count the number of open files for pid ""$pythonpid"" every 2 seconds"	
count the number of regular files in directory tree ${directory} that contain a vowel in their names	
count the number of regular files in the current directory that contain a vowel in their names	
count the number of regular files in the current directory tree	
count the number of regular files with 755 permission under current directory tree	
count the number of regular files with case insensitive name pattern $srchfor under 'teste2' directory tree	
count the number of symbolic links starting from /students	
count the number of the regular files residing under and below ./randfiles/	
count the number of times each person is logged in on the system	
"count the number of times that a single ""-----------\n"" separated record contains both ""a=2"" and ""dummy=2"" and the number of records that do not have ""dummy=2"" in compressed file ""file.gz"""	
"count the number of times that a single ""-----------\n"" separated record contains both ""a=2"" and ""dummy=2"" in compressed file ""file.gz"""	
count the number of total files and folders under current directory tree	
count the number of unique 3 to 6 character file extensions are in the current directory tree	
"count the number of unique duplicate lines in ""file1"" and ""file2"" combined"	
count the number of unique file extensions in the current directory tree	
"count the number of unique lines in sorted file ""a.txt"" compared to sorted file ""b.txt"""	
count the number of users logged in	
count the number of users logged in minus one	
count the occurrence of 2 in the string '1 1 2 2 2 5'	
count the toal number of lines in all .py files in current directory tree	
"count the total number of lines in all ""*.gz"" files in the current directory tree after decompression"	
"count the total number of lines in all html files under /usr/src that contain string ""foo"""	
count the total number of lines that are present in all the normal/regular files	
count total number of lines in all *.txt file in cuuent directory .	
count total number of lines in all *txt files  in current directory	
count total number of lines in all files below current directory.	
"count used space on device ""/dev/sda"" in megabytes"	
"count=$(grep -c ^ < ""$file"")"	<MISSING>
counts all *.mod files in a /boot/grub/ folder.	
counts all business days in a current month.	
counts all files in a current folder and in subfolders one-level lower and sorts result by number of files within.	
counts all files in a current folder and in subfolders one-level lower, and sort folder list by number of files within.	
counts all files in a current folder and in subfolders one-level lower, sorts result and pipes to the less pager.	
counts all files in a current folder and subfolders.	
counts all files in a dir_name folder and subfolders.	
counts all lines in $i file.	
counts all non-blank lines in the $i file.	
counts all top-level files in a current folder.	
counts lines in each *.cpp, *.c, *.h file.	
counts lines in each *.php file sorted by file path.	
counts lines in each *.php file, sorted by number of lines, descending.	
counts lines in each *.php file.	
counts lines in each of *.php files in a current folder and subfolders and prints total count as well.	
counts lines in each of *.php files in a current folder and subfolders and prints total count.	
counts lines in each of *.php files in a current folder and subfolders ignoring 'tests' folder and prints total count as well.	
counts lines in each of *.php files in a current folder and subfolders ignoring 'tests*' folders and prints total count as well.	
counts lines in each of *.php files in current folder with subfolders and prints total count as well.	
counts lines in file $file and prints number only.	
counts lines in file $file ignoring '//' commented lines, lines with spaces only and empty lines.	
counts lines in file $file.	
counts lines in file 'file1' and shows progress bar while doing.	
counts lines in file 'filename' ignoring empty lines and lines with spaces only.	
counts lines in file file1 and shows progress bar while doing.	
counts lines in file filename ignoring empty lines and lines with spaces only.	
counts lines of 'command' output.	
counts lines of 'file' file.	
counts lines of /dir/file.txt file.	
counts lines of /etc/fstab file.	
counts lines of all *.txt files in a current folder.	
counts lines of myfile.txt file.	
counts lines with all-cased word 'null' in file 'myfile.txt'.	
counts non-blank lines (lines with spaces are considered blank) in all *.py files in a current folder.	
counts non-empty lines in file filename.	
counts number of *.php files in a current folder and subfolders.	
counts number of lines returned by curl request.	
counts number of lines with 'ok' in file 'filename'.	
counts number of occurences of all ip addresses in 'ip_addresses' file, and prints all addresses with number of occurences in a descending order.	
counts number of processors and saves in variable numcpu.	
counts sum of non-empty lines from all .php files in a current folder.	
counts the number of lines in *.php and *.inc files in a current folder and subfolders.	
counts the number of lines in each *.cs file in a git repository.	
counts the number of lines in each *.hpp or *.cpp file in a git repository.	
counts the number of lines in each *.java file in a git repository.	
counts the number of lines in each *.swift or *.mm file in a git repository, escaping any space in filename.	
counts the number of lines in each file but png|jpg|ico files in a git repository.	
counts the number of lines in each file in a git repository, if file names may contain spaces.	
counts the number of lines in each file in a git repository.	
counts the number of lines in only text files in a git repository.	
counts the total number of lines in all the files in a git repository.	
counts total line number of all *.php file in a current folder and subfolders.	
counts total lines in all *.php files in the current directory recursively	
counts total lines in all *.php files.	
counts total lines in php and js files.	
counts total number of all '*.py' files beginning from root folder, and shows 'tqdm' progress bar.	
counts total number of lines in a git repository.	
counts total number of lines in all file under current folder.	
counts total number of only lines with alphanumeric symbols in all *.php files in a current folder and subfolders.	
"cowsay ""hello"" | rev"	<MISSING>
"cp ""${file}"" ""collect/$(mktemp job_xxxxxxxxx)"""	<MISSING>
cp $(ls -1tr * | tail -1) /tmp/	<MISSING>
cp * .hiddendir -r	<MISSING>
cp --help	<MISSING>
cp --parents src/prog.js images/icon.jpg /tmp/package	<MISSING>
cp --remove-destination $(readlink $f) $f	<MISSING>
cp --remove-destination `readlink bar.pdf` bar.pdf	<MISSING>
cp --remove-destination `readlink file` file	<MISSING>
"cp -f ""$project_dir""/itunesartwork payload/itunesartwork"	<MISSING>
cp -n	<MISSING>
cp -n src dest	<MISSING>
cp -nr src_dir dest_dir	<MISSING>
"cp -r ""$1"" ""$2"""	<MISSING>
cp -r $1 $2	<MISSING>
cp -r ../include/gtest ~/usr/gtest/include/	<MISSING>
"cp -r `ls -a | grep -v ""c""` $home/"	<MISSING>
cp -r dir1/ ~/pictures/	<MISSING>
cp -r srcfolder destfolder/	<MISSING>
cp -r t1/ t2	<MISSING>
cp -rf --remove-destination `readlink file` file	<MISSING>
"cp -rp ""$appname.app"" payload/"	<MISSING>
cp -rs /mnt/usr/lib /usr/	<MISSING>
"cp -rv `ls -a | grep -ve ""dirtoexclude|targetdir""` targetdir"	<MISSING>
cp -rvn /source/path/* /destination/path/	<MISSING>
cp -v [macvim_source_folder]/src/macvim/mvim /usr/local/bin	<MISSING>
cp -vi /boot/config-`uname -r` .config	<MISSING>
cp /dev/null emptyfile.c	<MISSING>
cp /file/that/exists /location/for/new/file	<MISSING>
cp `find -perm -111 -type f` /usr/local/bin	<MISSING>
cp `ls | grep -v music` /target_directory	<MISSING>
cp `which python2.7` myenv/bin/python	<MISSING>
cp lib*.so ~/usr/gtest/lib	<MISSING>
cpio -i -e thedirname | md5sum	<MISSING>
creae a tarball 'files.tar.gz' containing all regular files under current directory tree that are newer than 2013-12-04 and older than 2013-12-05	
"create 1000 files each file having a number from 1 to 1000 named ""file000"" to ""file999"""	
create 256 directories named from '00' to 'ff', each containing 256 subdirectories named '00' to 'ff'.	
create 5 empty .txt files	
create 6-letter named temporary directory in a folder path that is provided as the first positional parameter, and save the path to it in a variable 'tmp'	
create 6-letter named temporary file in a folder path $file1, and save the path to it in a variable 'tmpfile'	
create 6-letter named temporary file in a folder path that is provided as the first positional parameter, and save the path to it in a variable 'tmpfile'	
create 998 directories one inside another with sequential names folder1, folder2, ... folder998 and create an additional folder named 'folder9991000' inside the last 'folder998' directory	
create a back up of several folder	
create a backup of all normal/regular files in current folder which have been modified between two dates and create a tar.gz file of this backup	
create a backup of all the files in the current folder excluding those that are present in the .snapshot sub directory and excluding the swap files (files ending with  ~)	
create a backup of all the files in the current folder to the floppy and save the file list in the file /tmp/backup.log	
create a backup of all the files in the file system which belong to the suer edwarda to the floppy	
create a backup of all the files in the folder /tmp and display the taken for this operation	
create a backup of all the files in the home folder on a partition and save the log to a file	
create a backup of all the files which have been modified in the last 48 hours	
create a bzip2 archive `dir_txt.tar.bz2' of all .txt files in the dir/ directory tree	
create a bzip2 archive of all .log files from the /var/log directory tree	
"create a bzip2 archive of all .txt files from the ""dir"" directory tree"	
"create a compressed archive ""compressfilename.tar.gz"" with verbose output"	
"create a compressed archive ""filename.tar.gz"" with verbose output"	
create a compressed archive excluding files matching a pattern	
"create a compressed archive excluding the directories containing ""exclude.tag"""	
"create a compressed archive from ""www"" and split the contents into files of at most 1073741824 bytes and use prefix ""www-backup.tar."""	
create a compressed archive in my_dir directory matching '.[^.]* ..?*' glob pattern	
create a compressed archive named 'my_directory.tar.gz' with files inside directory 'my_directory' without including the directory entry 'my_directory' itself	
"create a compressed archive of ""/home"" and split the contents into files with at most 4000 mib each and use prefix ""/media/drivename/backupname.tgz"""	
create a compressed archive of a target directory excluding '<dir1>' and '<dir2>'	
create a compressed archive with files newer than 1st of january 2014, 18:00:00.	
create a copy of index.html in all directories in current directory whose name contains va, pausing for confirmation before overwriting any existing files - names may not contain spaces.	
create a copy of index.html in all directories in current directory, pausing for confirmation before overwriting any existing files - names may not contain spaces - names may not contain spaces.	
create a copy of the current working directory structure in the usr/project directory,	
create a cpio archive of the entire contents the current directory while preserving the permissions, times, and ownership of every file and sub-directory	
create a directory named 'alpha_real' in the current directory	
"create a full path symbolic link ""$newlink"" from a relative path symbolic link ""$origlink"""	
create a gzip archive file ($tarfile) of all *.log files under $sourcepath	
create a gzip of all the files in the current folder excluding the already gzipped files	
create a gzip of all the files in the current folder excluding the already gzipped files.	
"create a hard link as directory named ""new_hard_link"" to the directory ""existing_dir"" as root"	
"create a hard link named ""my-hard-link"" to ""myfile.txt"""	
create a link to all the html or htm files in the current folder which have been changed in the last 30*24 hours	
create a list of all files in all subdirectories	
"create a local ssh tunnel from ""localhost"" port 16379 to ""localhost"" port 6379 using key ""keyfile.rsa"" and disables the interactive shell"	
create a md5sum for all the instances of the file mycprogram.c in current folder	
create a named screen session	
"create a new directory ""existing-dir/new-dir/"" on host ""node"""	
create a new rsa key for ssh with no passphrase, store it in ~/.ssh/id_rsa without prompting to overwrite if this file exists, and minimize output from ssh-keygen.	
create a new window in an existing screen session and run a script	
create a report of the contents of a usb drive mounted at find /path/to/drive	
"create a rsa key of 2048 bits with comment ""michael"" and store it in file ""key""."	
create a rsa key with comment specified by variable app and passphrase specified y sshkeypass.	
create a soft link of the files in the folder /media/movies which have been modified in the last 30 days	
"create a sorted unique list of new or modified files comparing ""old/"" and ""new/"""	
create a ssh key and store it in the file ~/.ssh/apache-rsync	
create a ssh key of rsa type, and prompt for a filename to store it, presenting the default for this type of key as $home/.ssh/id_rsa	
"create a ssh key with no passphrase and store it in ""outfile""."	
"create a ssh tunnel on local port 2222 through ""bridge.example.com"" to ""remote.example.com"" port 22 without executing any commands and run in the background"	
"create a sub shell and search for regular/normal file with the name ""myfile"" in the entire file system and discard all the errors"	
"create a symbolc link in the current directory to ""target"""	
"create a symbolc link named ""latest"" to the last modified file or directory in ""target-directory"""	
"create a symbolc link named ""public_html"" to ""current/app/webroot"" under the current working directory"	
"create a symbolic link in ""/bar/tmp/"" for each file in directory ""/foo"" that does not start with ""runscript"""	
"create a symbolic link in current directory named ""environments"" to file ""../config/environments"""	
"create a symbolic link in current directory named ""my_db"" to file ""/media/public/xampp/mysql/data/my_db"""	
"create a symbolic link in directory ""/path/to/dir"" for each file and directory under the current directory starting with ""."""	
"create a symbolic link in directory ""new"" for each file in ""original"" directory tree"	
"create a symbolic link in directory ""~/newlinks"" for each file listed in ""results2.txt"""	
"create a symbolic link in target directory ""$tmpdir"" for each file under the current directory"	
"create a symbolic link in target directory ""~/newlinks"" to ""$source"""	
"create a symbolic link in the current directory for each .jpg file under ""dir"""	
"create a symbolic link in the current directory for each file .dbf under the directories matching ""/home/michael/foxpro/mount/a[1fv]/[12][0-9][0-9][0-9]"""	
"create a symbolic link in the current directory for each file under the directories matching ""../[12][0-9][0-9]"""	
"create a symbolic link in the current directory for each hidden file or directory in ""git-stuff/home/"" excluding ""."" and "".."""	
"create a symbolic link in the current directory to ""$file"""	
"create a symbolic link in the current directory to ""../config/init"""	
"create a symbolic link named ""$1/link"" to the current working directory"	
"create a symbolic link named ""$1/link"" to the existing full and real path of ""$2"""	
"create a symbolic link named ""$home/bin/"" to ""$home/downloads/fnord"""	
"create a symbolic link named ""$oracle_home/include"" to file ""/usr/include/oracle/11.2/client"""	
"create a symbolic link named ""$symlink"" to ""$actual_dir"""	
"create a symbolic link named ""$tmpdir/bam"" to the full path of command ""bam2"" found in ""$path"""	
"create a symbolic link named ""${destination}${file}"" to ""${target}${file}"""	
"create a symbolic link named ""-pdf-kundendienst"" to ""local--pdf-kundendienst"" file"	
"create a symbolic link named "".bash_profile"" to "".bashrc"""	
"create a symbolic link named "".profile"" to ""git-stuff/home/profile"" without dereferencing "".profile"""	
"create a symbolic link named ""/lib/libc.so.0"" to ""/lib/libc.so.6"""	
"create a symbolic link named ""/usr/bin/my-editor"" to ""/usr/share/my-editor/my-editor-executable"" and attemp to hard link directories"	
"create a symbolic link named ""/usr/bin/my-editor"" to file ""/usr/share/my-ditor/my-editor-executable"""	
"create a symbolic link named ""/usr/bin/openssl"" to file ""/usr/local/ssl/bin/openssl"""	
"create a symbolic link named ""/usr/lib/jvm/default-java"" to file ""/usr/lib/jvm/java-7-oracle"""	
"create a symbolic link named ""/usr/local/bin/subl"" to ""/applications/sublime text 2.app/contents/sharedsupport/bin/subl"""	
"create a symbolic link named ""bar"" to file that named is a result of the command `canonical.bash foo`"	
"create a symbolic link named ""foo"" to ""/var/cache/apt/archives/bash_4.3-14ubuntu1_amd64.deb"""	
"create a symbolic link named ""link"" in directory named as value of the variable $2 to a file that named as result of the command `cd \`dirname $2\`; pwd`/`basename $2`"	
"create a symbolic link named ""temp"" to ""newtarget"""	
"create a symbolic link named ""test"" to file "".bashrc"""	
"create a symbolic link named ""wh"" to ""$wh"""	
"create a symbolic link named ""www"" to file ""www1"""	
"create a symbolic link named ""~/bin/subl"" to ""/applications/sublime text 2.app/contents/sharedsupport/bin/subl"""	
"create a symbolic link named ""~/bin/subl"" to ""/applications/sublime text.app/contents/sharedsupport/bin/subl"""	
"create a symbolic link named the basename of ""$file"" to ""$file"""	
"create a symbolic link relative to link location named ""$dest_dir/$orig_name"" to ""$orig_dest"""	
"create a symbolic link to ""$file"" named ""/tmp/allfiles"""	
"create a symbolic link to file ""/usr/bin/perl"" named with escaped characters ""/usr/local/bin/perl\r\n"""	
"create a symbolic link with absolute path ""/cygdrive/c/program files"" to file ""/cygdrive/c/programfiles"""	
"create a symbolic link with absolute path ""/cygdrive/c/users/mic/mypics"" to file ""/cygdrive/c/users/mic/desktop/pending - pics/"""	
"create a symbolic lnk named ""$1/link"" to ""$dir"""	
"create a symolic link in ""/usr/local/"" to ""/applications/sublime\ text.app/contents/sharedsupport/bin/subl"""	
"create a symolic link in ""/usr/local/bin/"" to ""/applications/sublime\ text.app/contents/sharedsupport/bin/subl"""	
"create a symolic link in ""/usr/local/bin/"" to ""/applications/sublime\ text\ 2.app/contents/sharedsupport/bin/subl"""	
"create a table containing all information from s43.txt and s44.txt, merging lines where the first field of both files matches, and keeping the line that starts with ""gene"" at the start of the file."	
create a table from '111 22 3\n4 555 66\n' with columns separated by a single space	
create a tar archive of all regular files modified in the last 24 hours	
"create a tar archive of files from directory tree ""data"""	
create a tar archive with all *.java files under the current directory	
create a tar ball of all pdf files in current folder	
create a tar ball of all the files in the current folder	
create a tar ball of all the jpg and png images in the current folder	
create a tar ball of current directory	
create a tar file containing all the files in ~/library folder that contain spaces in their names	
create a tar file of all the songs on my system that have been modified in the last 180 days (which is essentially six months)	
create a tar of all png & jpg images in the current folder	
create a tar.gz compress file with all the jpg files in the entire file system	
create a temporary directory and go into it.	
create a variable cdate in the current shell that contains the date in '%y-%m-%d %h:%m:%s' format , and a variable epoch that contains the seconds since epoch	
"create a variable foo_backwards containing ""oof""."	
create a zip file ($zipfile) of all *.log files under $sourcepath	
create a zip file of all the files in some directory	
create a zip of all the files in the current folder which are bigger than 100kb and do not go more than 2 levels during search	
create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine)	
create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)	
"create alias subs for command  ""du -sch `find ./ -maxdepth 1 -type d`"""	
create all directories in the path specified by variable $javausrlib as super user	
create all directories in the path specified by variable $tempwork	
create an archive and show a progress bar	
create an archive excluding files and directories matching {*.png, *.mp3, *.wav, .git, node_modules}	
create an archive excluding files matching patterns listed in /path/to/exclude.txt	
create an archive named newarch from the contents of ./test directory	
create an archive using 'pigz' as a compress program	
create an archive using 7zhelper.sh as a compress program	
create an archive using pbzip2 as a compress program	
"create an empty file ""foo"" in each directory under the current directory containing a file named ""bar""."	
"create an empty file 'last.check' in directory pointed by variable ""log_dir"", with specified timestamp."	
"create an empty file (or update timestamp of file) specified by variable ""correctfilepathandname"""	
"create an empty file called ""emptyfile.c"""	
"create an empty file in each directory named ""mydir"" under current directory."	
create an empty file with a carriage return character in its name.	
create an empty index.html in each directory under the current one, updating timestamps of already existing index.html files.	
create an empty index.html, or update its timestamp if it already exists.	
create and list contents of the archive	
create and list filenames in the archive	
"create archive ""backup.tar.gz"" from /path/to/catalog"	
"create archive ""backup1.tar"" of all subdirectories of the current directory"	
create backup of all the text files  present in the current folder	
"create compressed archive from ""my_large_file_1"" and ""my_large_file_2"" and split into files of size 1024 mib with prefix ""myfiles_split.tgz_"""	
create compressed archive of all the files in the current directory tree that have been modified in the last 7 days	
create directorie(s) 'some/path' as required in the current directory	
"create directories ""/tmp/x/y/z/"" on remote host before copying ""$source"" to ""user@remote:/tmp/x/y/z/"""	
create directories a b c d e	
create directories bravo_dir and alpha_dir	
create directories foo and bar	
create directories mnt and point	
"create directory "".hiddendir"""	
create directory /cpuset	
create directory /data/db	
create directory /etc/cron.15sec	
create directory /etc/cron.5minute	
create directory /etc/cron.minute	
create directory /path/to/destination	
create directory /tmp/foo	
create directory /tmp/new	
create directory /var/svn as user root	
create directory `junk' in the home directory	
create directory aaa	
create directory aaa/bbb	
create directory backup	
create directory certs	
create directory destdir	
create directory dir	
create directory dir1	
create directory dir2	
create directory dirname with permissions 777	
create directory es if it is not exist and create direcoty lc_messages	
create directory foo	
create directory log into home directory	
create directory new_dir	
create directory practice into home directory	
create directory public_html into home directory	
create directory saxon_docs	
create directory subdirectory	
create directory tata	
create directory temp into home directory	
create directory testexpress	
create directory testproject	
create empty file (or update timestamp to current date/time if file already exists) named with full timestamp (year/month/day/hour/minute/second).	
"create empty files (or update timestamps if they exist) with names matching each word in variable ""correctfilepathandname"""	
"create hard links of all files and directories matching ""test/icecream/cupcake/*"" or ""test/mtndew/livewire/*"" in ""test-keep"" preserving directory hierarchy"	
"create intermediate directories ""b and ""c"" as required and directory ""c"""	
"create intermediate directories ""full"", ""path"" as required and directory ""to"""	
"create intermediate directories ""tmp"" as required and directories real_dir1 and real_dir2"	
"create intermediate directories ""x"" and ""p"" as required and create ""q"""	
create intermediate directories as required	
create intermediate directories as required and directory  /my/other/path/here	
create intermediate directories as required and directory /tmp/test/blah/oops/something	
create intermediate directories as required and directory project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}	
create intermediate directories as required directory{1..3} and subdirectory{1..3} and directories subsubdirectory1 and subsubdirectory2	
create intermediate directories foo and bar as required and directory foo/bar/baz	
create intermediate directories ~/foo/bar/ as required and directories baz, bif, bang	
create intermediate directoriy path2 as required and directories a..z	
"create links for all files in the current directory tree that are more than 1000 days old in ""/home/user/archives"""	
"create master ssh control socket ""my-ctrl-socket"" in the background with no terminal or command execution with connection forwarding from localhost port 50000 to localhost port 3306 via ""jm@sampledomani.com"""	
"create md5 message digest of ""/path/to/source/file"" starting at byte 100 until the 250th byte"	
create md5sum of a directory	
create new crontab set for user 'test' including $job and only jobs from current crontab of 'test' user that don`t contain $command	
create new crontab set including $job and only jobs from current crontab that don`t contain $command	
create script filespermissions.sh that restores the original permissions of the regular files in the current directory tree	
create six empty files in directory ~/junk	
"create ssh tunnel through ""genja.org"" connecting localhost port 4444 to ""raptor.lan"" port 22"	
"create symbolic link ""$1/link"" to the absolute path of ""$2"""	
"create symbolic links in current directory for all files located in ""dir"" directory and have filename extension ""jpg"""	
"create symbolic links in current directory to all files located in ""bar1"" directory that are not directory and do not have "".cc"" filename extension"	
"create symbolic links in current directory to all files located in ""dir"" directory and have filename extension ""jpg"""	
"create symbolic links in current directory to all files located in directory ""/original"" and have filename extension "".processname"""	
"create symbolic links in directory ""/usr/local/symlinks "" to all files located in directiry ""incoming"" and that have been modified earlier then 5 days and owned by user ""nr"""	
"create symbolic links in directory ""/your/dest/dir/"" to all files located in ""/your/source/dir/"" and have filename extension ""txt.mrg"""	
"create symbolic links in directory ""folder2"" to all files located in current directory that filename not started with ""."""	
"create symbolic links in the current directory for all files excluding ""configfile"" located in ""/your/project"""	
"create symbolic links in the current directory for all files excluding ""configfile"" located under ""/your/project"" directory tree"	
"create symbolic links in the current directory for all files located in directory ""/path/with/files"" with a name containing ""txt"""	
"create symbolic links in the current directory for all files under ""bar1"" that are not directories and do not end in "".cc"""	
create symlinks to all  /home/folder1/*.txt files and 'folder1_' directory with the same name in a target directory named '+'	
create symlinks to all  /home/folder1/*.txt files and 'folder2_' directory with the same name in a target directory named '+'	
create symlinks to all  /home/folder1/*.txt files with the same name in current directory	
create symlinks to all  /home/folder2/*.txt files with the same name in current directory	
"create tar archive ""dirall.tar"" and copy all files from directory tree /tmp/a1 to it"	
"create tar archive ""foo.tar"" and copy all files from directory tree /tmp/a1 to it"	
create tar.gz files older than one day logs	
create the compressed tar archive images.tar.gz containing all jpg files found under /	
create the directory '.npm-global' in the user's home directory(~).	
create the directory '.npm-packages' in the user's home directory($home)	
create thumbnails from the first page of each pdf files under /path/to/dir	
creates 5-letter random file name and saves it in 'rand_str' variable.	
creates alias for network interface 'eth0' with ip address '192.0.2.55' and network mask '255.255.255.255'.	
creates detached tmux session named 'cf'.	
creates file by template 'aws-sync-xxxxx' in a current folder and stores file name in a 'dir' variable.	
creates file with random 10-byte size content.	
creates full path with parents, that matches to folder path extracted from $f variable.	
creates path as current folder path and folder that contains $0 file, and saves result in 'script_dir' variable.	
creates random file name formatted like expression in variable ${str// /x} and saves it in 'rand_str' variable.	
creates temporary directory in '/tmp/' folder and saves path to it in 'my_tmp_dir' variable.	
creates temporary directory with name formatted like .daemonxxxxxxx in /tmp/ folder, and saves path to it in 'tmpdir' variable.	
creates temporary file and saves path to it in 'content_dir1' variable.	
creates temporary file and saves path to it in 'content_dir2' variable.	
creates temporary file and saves path to it in 'fif2' variable.	
creates temporary file and saves path to it in a 'tmpfile' variable.	
creates temporary file by template provided in option '-t'.	
creates temporary file in $appdir variable with name formatted like expression in variable ${template}, and saves path to it in 'launcherfile' variable.	
creates temporary file in a current folder and saves path to it in 'f' variable.	
creates temporary file in a current folder with name formatted like 'templatexxxxxx', and saves path to it in 'tempfile' variable.	
creates temporary file in a tmpdir folder or /tmp folder if tmpdir doesn`t defined, with file name like current shell name and '-xxxxx'-formatted suffix, and saves created path to the 'tempfile' variable.	
creates temporary file in a tmpdir folder with name like tmp.xxxxxxxxxx.	
creates temporary file in default folder and saves path to it in 'source' variable.	
creates temporary file in tmpdir folder or /tmp/ if tmpdir is not defined, named by template ${tempname}.xxxxxx, and saves path to new file in  a tmpps_prefix variable.	
creates temporary file name and saves path to it in 'tmp_file' variable.	
creates temporary file with appended suffix '.cmd' and saves path to it in 'lgt_temp_file' variable.	
"creates temporary file with file name formatted like /tmp/gnuplot_cmd_$(basename ""${0}"").xxxxxx.gnuplot and saves path to it in a variable 'gnuplotscript'."	
creates temporary file with name formatted like '.script.xxxxxx' in '/tmp/' folder and saves path to it in 'script1' variable.	
creates temporary file with name formatted like '.script.xxxxxx' in '/tmp/' folder and saves path to it in 'script2' variable.	
creates temporary file with name formatted like 'emacs-manager.xxxxxx' in '/tmp/' folder and saves path to it in 'tmp_file' variable.	
creates temporary file with name formatted like expression in variable ${prog}, and saves path to it in 'mytemp' variable.	
creates temporary file, replacing xxxxxxxxxxxxxxxxxxxxxxx with equal length suffix.	
creates temporary folder and save path to that in a tmpdir variable.	
creates temporary folder and saves path to it in 'other' variable.	
creates temporary folder and saves path to it in 'td' variable.	
creates temporary folder and saves path to it in a 'tempd' variable.	
creates temporary folder in /tmp/ (by default) with 10-letter suffux.	
creates temporary folder in a $temp_dir folder with name pattern defined by $template, and stores path to created folder in 'my_temp' variable.	
creates temporary folder in a tmpdir folder or /tmp folder if tmpdir doesn`t defined, with folder name like current shell name and 10-letter suffix, and saves created path in 'mydir' variable.	
creates temporary folder in tmpdir (if defined) or in '/tmp/', and stores path to created folder in 'dir' variable.	
creates temporary folder in tmpdir (if defined) or in '/tmp/', and stores path to created folder in 'tmpdir' variable.	
creates temporary folder like '/tmp/tardir-xxxxxx' with 6-letter suffix and saves its path in 'tmpdir' variable.	
creates temporary folder relative to directory '/path/to/dir'.	
creates temporary folder within a $mnt_dir folder and saves path to it in a 'rsync_src' variable.	
creates temporary folder within tmpdir, with name like current shell name and 10-letter suffix.	
creates temporary folder, and saves current folder path   joined with created temporary folder path in 'tdir' variable.	
crontab	<MISSING>
crontab -e	<MISSING>
crontab -l	<MISSING>
crontab -l -u user | cat - filename | crontab -u user -	<MISSING>
"crontab -l | awk '$1 == ""*"" || $1 ~ /^[0-9]+$/ && $1 < 15 {print}'"	<MISSING>
"crontab -l | egrep ""word"""	<MISSING>
crontab -l | grep 'word'	<MISSING>
"crontab -l | grep -v ""^#"" | awk '{print $6}'"	<MISSING>
crontab -l | sed '/# *\([^ ][^ ]*  *\)\{5\}[^ ]*test\.sh/s/^# *//' | crontab -	<MISSING>
crontab -l | sed '/anm\.sh/s#\/5#\/10#' | crontab -	<MISSING>
crontab -l | sed '/anm\.sh/s,^\*/5,*/10,' | crontab -	<MISSING>
crontab -l | sed -re '/# *change-enabled *$/s/^([^ ]+) [^ ]+/\1 7/' | crontab -	<MISSING>
crontab -u $user -l 2>/dev/null | grep -v '^#'	<MISSING>
crontab -u apache -l	<MISSING>
"crontab -u user -l | sed ""$my_wonderful_sed_script"" | crontab -u user -"	<MISSING>
crontab filename	<MISSING>
crontab yourfile.text	<MISSING>
csvtopretty filename.csv | less -s	<MISSING>
"curl ""url"" | tac | tac | grep -qs foo"	<MISSING>
curl 'http://www.multitran.ru/c/m.exe?cl=1&s=hello&l1=1' | iconv -f windows-1251 | tr -dc '[:print:]'	<MISSING>
"curl --data-urlencode ""paramname=param"" www.example.com"	<MISSING>
curl --socks5 125.119.175.48:8909 http://example.com/	<MISSING>
"curl -l -c - -b ""oraclelicense=accept-securebackup-cookie"" -o http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip"	<MISSING>
curl -l https://get.scoop.sh	<MISSING>
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash	<MISSING>
curl -s 'http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz' | gunzip -dc | less	<MISSING>
curl -s http://page.that.serves.json.com/json/ | json_xs	<MISSING>
curl -s http://search.twitter.com/search.json?q=node.js | json	<MISSING>
curl -s www.google.com | md5	<MISSING>
"curl -v --get --data-urlencode ""access_token=$(cat .fb_access_token)"" https://graph.facebook.com/me/feed"	<MISSING>
"curl -x get -h ""authorization: token wef4fwef54te4t5teerdfgghrtgdg53"" http://testsite/api/ | python -mjson.tool"	<MISSING>
curl -x http://proxy_server:proxy_port --proxy-user username:password -l http://url	<MISSING>
curl http://127.0.0.1:8000 -o index.html	<MISSING>
curl http://example.com/	<MISSING>
curl http://example.com/textfile.txt -o textfile.txt	<MISSING>
curl http://www.example.com --proxy http://125.119.175.48:8909	<MISSING>
curl https://raw.github.com/creationix/nvm/master/install.sh | sh	<MISSING>
"curl https://s3.amazonaws.com/sampletest/sample.tar.gz | gunzip | pax -r -s ""/old/new/"""	<MISSING>
curl https://www.npmjs.com/install.sh | sh	<MISSING>
curl yahoo.com --silent | wc -l	<MISSING>
current=`pwd`	<MISSING>
"current_pid_from_lockfile=`cat $lockfile | cut -f 1 -d "" ""`"	<MISSING>
"cut ""-d "" -f2 a"	<MISSING>
cut -d ' ' -f 2	<MISSING>
cut -d / -f 4- .exportfiles.text | xargs -n 1 dirname	<MISSING>
cut -d' ' -f1 file.txt | xargs dig +short	<MISSING>
cut -d' ' -f1 file2 | comm -13 - file1	<MISSING>
cut -d' ' -f5 file | paste -d',' -s	<MISSING>
"cut -d, -f1 file | uniq | xargs -i{} grep -m 1 ""{}"" file"	<MISSING>
cut -d/ -f1-2 | cut -d/ -f2- | sort | uniq -c	<MISSING>
cut -d: -f1 /etc/group	<MISSING>
cut -d: -f1 /etc/group | sort	<MISSING>
cut -d\  -f 2	<MISSING>
cut -f $field * | sort| uniq -c |sort -nr	<MISSING>
cut all remote paths from http urls received from standard input (one per line) keeping only the protocol identifier and host name, of the form http://example.com	
cut all remote paths from http urls received from standard input (one per line) keeping only the protocol identifier, host name, and trailing slash, of the form http://example.com/	
cut off three last symbols from string '1234567890  *'	
cuts off last part from the path $dir, and deletes resulted folder if empty.	
cuts off last two parts from the path $dir, and deletes resulted folder if empty.	
"data=$( find ""${1}"" -type f -exec ${md5} {} ';' | sort -n )"	<MISSING>
"date ""+%y-%m-%d"""	<MISSING>
date '+%y' --date='222 days ago'	<MISSING>
"date +""%t"""	<MISSING>
date +%s	<MISSING>
date +%y-%m-%d	<MISSING>
date +%y-%m-%d:%h:%m:%s	<MISSING>
"date +%y:%m:%d -d ""1 day ago"""	<MISSING>
"date +%y:%m:%d -d ""yesterday"""	<MISSING>
date --date @120024000	<MISSING>
"date --date yesterday ""+%a %d/%m/%y"""	<MISSING>
"date --date yesterday ""+%a %d/%m/%y"" | read dt"	<MISSING>
"date --date=""222 days ago"" +""%d"""	<MISSING>
"date --date=""222 days ago"" +""%m"""	
"date --date=""222 days ago"" +""%y"""	<MISSING>
date --date='1 days ago' '+%a'	<MISSING>
"date -d ""$(date -d ""2 months"" +%y-%m-1) -1 day"" +%a"	<MISSING>
"date -d ""-1 days"" +""%a %d/%m/%y"""	<MISSING>
"date -d ""oct 21 1973"" +%s"	<MISSING>
"date -d ""yesterday 13:00"" '+%y-%m-%d'"	<MISSING>
"date -d @$(git log -n1 --format=""%at"") +%y%m%d%h%m"	<MISSING>
date -d @$timestamp	<MISSING>
date -d @1267619929	<MISSING>
date -d @1278999698 +'%y-%m-%d %h:%m:%s'	<MISSING>
date -d tomorrow+2days-10minutes	<MISSING>
"date -j -f ""%a %b %d %h:%m:%s %y %z"" ""sat aug 09 13:37:14 2014 +1100"""	<MISSING>
date -j -v-1d	<MISSING>
date -u '+%y-%m-%dt%k:%m:%s%z'	<MISSING>
date -u -iseconds	<MISSING>
date -ud @1267619929	<MISSING>
date -ud@0	<MISSING>
"date -ujf%s $(($(date -jf%t ""10:36:10"" +%s) - $(date -jf%t ""10:33:56"" +%s))) +%t"	<MISSING>
"date ; read -t 10 -p ""hit enter or wait ten seconds"" ; echo ; date"	<MISSING>
date=$(echo `date`)	<MISSING>
"date_222days_before_todayday=$(date --date=""222 days ago"" +""%d"")"	<MISSING>
"datecoming=$(echo `date -d ""20131220"" +%j`)"	<MISSING>
day=$(od -t x1 --skip-bytes=9 --read-bytes=1 file.moi | head -1 | awk '{print $2}')	<MISSING>
dayofweek=`date +%a |tr a-z a-z`	<MISSING>
"dbprefix=""$(hostname -s).mysqldb"""	<MISSING>
dc=`hostname | cut -b1,2`	<MISSING>
dd if=/path/to/source/file bs=1 skip=100 count=250 | md5sum	<MISSING>
"decompress ""/file/address/file.tar.gz"" to standard output"	
"decompress ""file2.txt"" and ""file1.txt"" and print lines in ""file1.txt"" that match the 5th tab separated field in ""file2.txt"""	
"decompress ""path/to/test/file.gz"" to standard output and save all lines matching ""my regex"" and not matching ""other regex"" to files with a 1000000 line limit"	
"decompress ""path/to/test/file.gz"" to standard output and save all lines matching ""my regex"" to files with a 1000000 line limit"	
decompress ${set1[@]} files with gzip	
decompress 'file.gz'	
decompress 'file.gz' to standard output and execute the output in bash	
decompress and extract '/usr/src/redhat/sources/source-one.tar.gz'	
decompress and extract 'archive.tar.gz' into '/destination'	
decompress and extract 'libxml2-sources-2.7.7.tar.gz'	
"decompress and sort ""$part0"" and ""$part1"" of files in different processes"	
"decompress and unarchive ""hello-0.2.tar.gz"""	
"decompresses each of ""*bz2"" files under the current folder, redirecting output to the standard out, and prints only fourth of comma-separated fields."	
decompresses file 'xac.bz2', redirecting output to standard out.	
decompresses file.	
"delete ""\n\r"" from ""yourfile.txt"""	
delete 'string_to_find' from all files under current directory	
"delete a hard link and create a symbolic link to file named ""$link"""	
"delete all "".ds_store"" files/directories under test directory"	
delete all '-' character from $1 and save the resultant string to variable 'column'	
delete all 'restore.php' files in /var/www and 3 levels below	
delete all *.zip files under current directory that are older than 2 days	
delete all *txt files under current directory	
delete all .bam files in the current directory tree	
delete all .pyc files in the current directory tree	
delete all .svn directories under current directory	
delete all .svn files/directories under current directory	
delete all .svn subdirectories under current directory	
delete all 1us* (case insensitive) files under current directory	
delete all __temp__* directories under maximum 1 level down the current directory tree	
delete all __temp__* files/directories under current directory tree	
delete all broken symbolic links under '/usr/ports/packages' directory tree	
delete all but the most recent 5 files	
delete all but the most recent x files in bash	
delete all contents (including new lines) form the files that contain the regex 'string' in maximum 1 level down the / directory excluding other partitions	
delete all contents form the files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory excluding other partitions	
delete all contents form the files that contain the regex 'string' in maximum 1 level down the / directory excluding other partitions	
delete all directories found in $logdir that are more than a work-week old	
delete all directories in minimum 2 levels down the root directory	
delete all directories in the /mydir directory tree	
delete all directories in the tbd directory that were modified more than 1 day ago	
delete all directories under '.cache/chromium/default/cache' directory tree that are at least 1 level deep and are bigger than 100 mb in size	
delete all directories under '.cache/chromium/default/cache/' directory tree that are bigger than 100mb and are at least 1 level deep	
delete all directories under <directory_name> that contain directories named 'test' and 'live'	
delete all empty directories and directories that contain only empty directories under current directory	
delete all empty directories in minimum 1 level down the directory 'directory'	
delete all empty directories in minimum 2 levels down the root directory	
"delete all empty directories in the ""test"" directory tree"	
delete all empty directories in the /some/parrent/dir directory tree	
delete all empty directories in the current directory tree	
delete all empty directories under current directory	
delete all empty directories under root	
delete all empty directories under test directory	
"delete all empty files and directories in the ""test"" directory tree"	
delete all empty files in the current directory ( empty file = size 0 bytes )	
delete all empty files in the current directory tree	
delete all empty files/directories under test directory	
delete all empty subdirectories in and below directory/	
delete all filename* files under /dir directory	
delete all files (files, directories, links, pipes...) named 'core' under current directory	
delete all files and directories	
delete all files beneath the current directory that begin with the letters 'foo'.	
delete all files in $dir that have not been accessed in at least 5 days	
delete all files in directory $dir that have not been accessed in at least 5 days	
"delete all files in the ""${s}/bundled-libs"" folder except ""libbass.so"""	
delete all files in the $dir directory that have not been accessed in 5 or more days.	
delete all files in the /mydir directory tree that were last modfied 7 days ago	
delete all files in the /mydir directory tree that were last modfied more than 7 days ago	
delete all files in the /mydir directory tree that were last modified 7 days ago	
delete all files in the /tbd directory that were modified more than 1 day ago	
delete all files in the current directory tree whose names end with ~	
delete all files in the current directory.	
delete all files in the current user's home directory and its sub-directories that have not been accessed for more than 100 days.	
delete all files in the home directory which ahve the name core in them	
delete all files in the tbd directory that were modified more than 1 day ago	
"delete all files named ""filename"" in the current directory tree, except the one with path ./path/to/filename"	
"delete all files named ""filename"" in the current directory tree, except those with paths ending in ""/myfolder/filename"""	
delete all files named '-f' under current directory tree	
delete all files named 'sample' (case insensitive) under '/home/user/series' directory tree with superuser privilege	
delete all files named 'waldo' under ~/books directory tree where '~' expands to user's home directory	
delete all files not owned by valid users	
delete all files that have not been accessed in the last 30 days	
"delete all files that have the extension ""bam"" in current directory"	
delete all files that were modified more than 60 days ago under '/path-to-directory' tree	
delete all files throughout the entire filesystem that are no longer owned by a valid user.	
delete all files under $destination directory tree that were modified more than 7 days ago	
delete all files under $intranetdestination/monthly directory tree that were modified more than 366 days ago	
delete all files under $intranetdestination/weekly directory tree that were modified more than 32 days ago	
delete all files under '/home/backups' directory tree with '.tgz' or '.gz' extension (case insensitive) that were modified more thant 60 days ago	
delete all files under /path/to/files that are not newer than dummyfile	
delete all files under /path/to/input/ that match the case insensitive string literal 'spammer@spammy.com' in their contents	
delete all files under and below the current directory	
delete all files under current directory tree with '.$1' extension where $1 expands as the first positional parameter	
delete all files under root whose status were changed more than 30 minutes ago	
delete all files under user's home directory tree that were accessed more than 365 days after their status was changed	
delete all files with ' .o' extension in the entire filesystem	
delete all files with '.old' extension under current directory tree	
delete all files with 128128 inode number under current directory tree	
delete all files with indoe number $inum under current directory tree	
delete all files with inode number 804180	
delete all files/directories in minimum 2 levels down the root directory	
delete all files/directories named 'file' under current directory tree	
delete all files/directories named 'file-to-find' under current directory tree	
delete all files/directories named 'sample' (case insensitive) under '/home/user/series/' directory tree as super user	
delete all files/directories named test under maximum 2 level down the current directory	
delete all files/directories older than 48 hours in /path/to/files* paths	
delete all files/directories taken by the glob pattern * except the ones with the name 'b'	
delete all files/directories under current directory	
delete all files/directories under current directory tree excluding '.gitignore' files/directories and files/directories matching the patterns '.git' or '.git/*' in their paths	
delete all files/directories under current directory tree with '.$1' extension where $1 expands as the first positional parameter	
delete all files/directories with '.old' extension under current directory tree	
delete all files/directories with inode number 117672808 under current directory tree	
delete all files/directories with node number $inum under current directory tree	
delete all hard links to the physical file with inode number 2655341	
delete all hidden files in the directory tree given as variable $folder	
delete all hidden files under $some_directory	
delete all hidden files/directories under $some_directory	
delete all hidden files/directories under $some_directory including $some_directory	
delete all html files under tree ~/mydir	
delete all in the current directory tree	
"delete all instances of the file ""bad"" if its size is 0 bytes"	
"delete all lines in ""file"" that contain ""pattern"", using ""temp"" as temporary working file (ie. shouldn't exist)."	
"delete all lines matching ""pattern to match"" in ""./infile"" and make a backup with suffix "".bak"""	
"delete all lines matching ""pattern"" in ""filename"""	
"delete all lines matching ""some string here"" in ""yourfile"""	
delete all matches to the regex '^.*iframe bla bla bla.*$' in all the php files under current directory tree and modify the files in-place	
delete all mp3 files under /tmp	
"delete all non digits from index ""$i"" in bash array ""depsalastmodified"" and print the hex dump as characters"	
delete all normal/regular files in the current folder which are empty	
delete all regular files named 'file-to-find' under current directory tree	
delete all regular files named 'findcommandexamples.txt' under current directory tree	
delete all regular files named 'imag1806.jpg' under current directory tree	
delete all regular files named 'image1806.jpg' under current directory tree	
delete all regular files that have not been modified in the last 31 days under '/path/to/junk/files' directory tree	
delete all regular files that have not been modified in the last 60 weeks under $dir directory tree	
delete all regular files that reside in directory $outputdir and below, and were last modified more than 7 days ago	
delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree	
delete all regular files under $dir directory tree that have been modified before file $a	
delete all regular files under current directory	
delete all regular files with '.cache' extension that were accessed more than 30 days ago under $home/library/safari/icons directory tree	
delete all regular files with '.txt' extension that were modified in more than 25 minutes ago in maximum 1 level down the directory '/home/u20806/public_html'	
delete all regular files with inode number 314167125 under current directory tree	
delete all shared memory and semaphores for the current user on linux	
delete all shared memory and semaphores for the current user on sun	
delete all text files from current folder	
delete all text files in the entire file system	
delete all text files in the home folder after user confirmation	
"delete all the "".bak"" or swap files in kat folder"	
"delete all the "".doc"" files in the current folder"	
"delete all the ""wmv"" ""wma"" files in the currnet folder,"	
delete all the 'test' directories from all directories under <directory_name> that contain directories named 'test' and 'live'	
delete all the 'test' directories from all directories under maximum 1 level down the current directory that contain directories named 'test' and 'live'	
delete all the .c files present in the current directory and below	
delete all the backup files in current directory	
delete all the broken symbolic links from the folder /usr/ports/packages	
delete all the core files in the folder /prog which are bigger than 1kb	
delete all the directories empty directories in the current folder	
delete all the empty directories in the current folder	
delete all the empty file in the file system after user confirmation	
delete all the empty files in the current directory	
delete all the empty files in the current directory only if they are ok and the user has the permission to delete them	
delete all the empty files(files with size 0 bytes) in the current folder	
delete all the empty in the current folder and all its sub directories	
delete all the empty in the current folder do not search in sub directories	
"delete all the files ending with ""~"" in current folder"	
"delete all the files found in the current directory tree whose names begin with ""heapdump"""	
delete all the files in the current folder	
delete all the files in the current folder  which do not belong to any user	
delete all the files in the current folder which are bigger than 1kb	
delete all the files in the current folder which do not belong to any user	
"delete all the files in the current folder which end with "".bak"" or "".backup"" and which have not been accessed in the last 30 days"	
delete all the files in the current folder which have been modified in the last 14*24 hours	
delete all the files in the file system which belong to the user edwarda	
delete all the files in the file system which belong to the user edwarda after user confirmation	
"delete all the files which start with ""tes"" in the current folder"	
delete all the hidden in the folder musica after user confirmation	
delete all the log files in the current folder	
delete all the log files which have not been modified in the last 5 days after user confirmation	
delete all the mp3 files in the current folder.	
delete all the mp3 files in the home folder	
delete all the mp4 files in the folder /home which are bigger than 10mb	
"delete all the normal files in the current directory whcih have the word ""gui"" in their content."	
delete all the normal files in the current folder and do not delete those in the subfolders	
delete all the normal/regular files in the current folder	
delete all the php files in the folder /var/www	
delete all the regular files in the temp folder which have not been changed in the last 15*24 hours	
delete all the regular files in the temp folder which have not been modified in the last 24 hours	
delete all the regular files in the temp folder which have not been modified in the last 24 hours + at the end gives bulk input to the rm command	
delete all the text files from the current folder after user confirmation	
delete all the text files in the current folder	
delete all the text files in the current folder.	
"delete all the text files starting with the name ""oldstuff"" in the file system"	
delete all the tmp files ( files with the extension tmp ) in the /tmp folder	
delete all the tmp files ( files with the extension tmp ) in the /tmp folder. print0 is used to display all those files which have newline in their names or files whose name is only spaces.	
"delete all the trace files ("".trc"") from the folder $dba/$oracle_sid/bdump/ which have not been accessed in the last 7*24 hours"	
"delete all the trace files ("".trc"") which have not been been accessed in the last 30*24 hours"	
delete and count files in $dir_to_clean that are older than $days_to_save days	
"delete characters in columns 36 through 40 from the output of ""finger"""	
delete current cron job list, and use those in yourfile.text	
delete empty directories	
delete empty files and print their names	
delete empty lines from standard input	
delete empty regular files	
"delete every second line from output of ""seq 10"""	
"delete everything except the control characters in ""foobar\n\337"" and dump the remaining characters"	
delete everything in the current directory	
delete file with inode number 314167125	
"delete files ""*doc copoy"" in directory tree /mnt/zip"	
delete files containing whitespaces	
delete files containing whitespaces without recursion	
delete files in $dir_to_clean older than $days_to_save days	
delete files in $dir_to_clean that are older than $days_to_save days	
delete files in /var/tmp/stuff and below that have not been modified in over 90 days	
"delete files in the dir directory tree whose names begin with ""2015"" and contain ""album"" or ""picture"""	
delete files older than 31 days	
delete files under $location that match $required_files in their names and were modified more than 1 day ago	
delete files under $location that match $required_files in their names and were modified more than 360 minutes ago	
delete files with inode number 782263 under current directory	
delete files with inode number specified by [inode-number] under current directory	
delete history entry at offset, defined in first argument of executed script	
delete in the background all files in /var/tmp/stuff1 and below that have not been modified in over 90 days	
delete interactively all the files/directories with inode number 782263 under current directory tree	
"delete line 2 in numbered file ""file"" and renumber"	
"delete newlines from output of 'hg st -r ""$path""' and save to variable ""var"""	
delete orphan vim undo files in the current directory tree	
delete orphan vim undo files under current directory	
delete recursively empty files named 'bad'	
"delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename "".svn"""	
"delete the 4th tab separated column from the output of ""finger"""	
delete the commands 1006 through 1008 from history	
delete the files under the current working directory with inode numbers specified on standard input	
"delete the first line of ""$file"" using intermediate file ""$file.tmp"""	
"delete the line containing ""start"" plus the next 4 lines from standard input"	
delete the oldest file with '.tgz' or '.gz' extension under '/home/backups' directory tree	
delete the text matched by the regex '<script>if(window.*<\/script>' in all index.html files under current directory	
"delete what was typed in the command line and run ""pwd"" when button ""\e[24~"""	
deletes empty folder 'nonsense_dir'.	
deletes folder like /tmp/*/* or deeper, older than +7 days if they don`t contain files or other folders.	
"delimit standard input with "":"" and display as a table"	
depth=$(pstree -sa $processid | head -n1 | sed -e 's#-+-.*#---foobar#' -e 's#---*#\n#g' -eq | wc -l)	<MISSING>
descend into every directory under /etc and print the file/directory names with relative paths	
determine display variable for the session when logged in via ssh	
determine if /full/path exists on a mounted file system.	
determine if the kernel is 32 bit or 64 bit	
"determine if user ""$user"" is logged in"	
determine the user associated with stdin	
df	<MISSING>
"df ""$filename"" | awk 'nr==1 {next} {print $6; exit}'"	<MISSING>
"df ""$path"" | tail -1 | awk '{ print $6 }'"	<MISSING>
"df $path_in_question | grep "" $path_in_question$"""	<MISSING>
df $pwd | awk '/[0-9]%/{print $(nf-2)}'	<MISSING>
df '/some/directory' | awk '{print $1, $6}'	<MISSING>
"df --output=target ""$path"" | tail -1"	<MISSING>
df --total	<MISSING>
df --total -bt | tail -n 1	<MISSING>
df --total -bt | tail -n 1 | sed -e 's/total *([^ ]*).*/\1/'	<MISSING>
df --total | tail -n 1	<MISSING>
df -bg	<MISSING>
df -h	<MISSING>
"df -h $path | cut -f 1 -d "" "" | tail -1"	<MISSING>
df -h --total /	<MISSING>
"df -h -b 1m | grep dev/sda | tr -s ' '| cut -d' ' -f3 |python -c ""import sys; print sum([int(num) for num in sys.stdin.readlines()])"""	<MISSING>
df -h .	<MISSING>
df -h /	<MISSING>
df -h /dir/inner_dir/	<MISSING>
df -h path-to-file	<MISSING>
df -h |  awk '{print $1}'	<MISSING>
df -i	<MISSING>
df -i $pwd	<MISSING>
df -ih	<MISSING>
df -k	<MISSING>
df -k $filesystem | tail -1 | awk '{print $5}'	<MISSING>
df -k .	<MISSING>
df -k /dir/inner_dir/	<MISSING>
df -k /example	<MISSING>
df -k /some/dir	<MISSING>
df -k /tmp	<MISSING>
df -k /tmp | tail -1 | awk '{print $4}'	<MISSING>
df -k /tmp | tail -1 | tr -s ' ' | cut -d' ' -f4	<MISSING>
df -kt<type>	<MISSING>
"df -m | awk '{ sum += $2} end { print sum/1024/1024""tb"" }'"	<MISSING>
df -p	<MISSING>
"df -p ""$path""  | tail -1 | awk '{ print $nf}'"	<MISSING>
"df -p ""$path"" | awk 'begin {fs=""[ ]*[0-9]+%?[ ]+""}; nr==2 {print $1}'"	<MISSING>
"df -p ""/tmp"" | awk 'begin {fs=""[ ]*[0-9]+%?[ ]+""}; nr==2 {print $nf}'"	<MISSING>
df -p $path | tail -1 | cut -d' ' -f 1	<MISSING>
df -p file/goes/here | tail -1 | cut -d' ' -f 1	<MISSING>
df -ph	<MISSING>
df -ph $pwd | tail -1 | awk '{ print $3}'	<MISSING>
df -ph | column -t	<MISSING>
"df -ph | perl -ne 'chomp; printf ""\n%-40s %8s %8s %8s %8s %-20s"", split / +/, $_, 6 ; '"	<MISSING>
df -t $dir | tail -1 | awk '{print $2;}'	<MISSING>
df .	<MISSING>
df . -b mb | tail -1 | awk {'print $4'} | cut -d'%' -f1	<MISSING>
df . -b mb | tail -1 | awk {'print $4'} | grep  .[0-9]*	<MISSING>
df . -b mb | tail -1 | awk {'print substr($5, 1, length($5)-1)'}	<MISSING>
df . | awk '$3 ~ /[0-9]+/ { print $4 }'	<MISSING>
df . | tail -1 | awk '{print $1}'	<MISSING>
df /full/path | grep -q /full/path	<MISSING>
"df /mnt/myusbdisk | grep -q /mnt/myusbdisk && echo ""mounted"" || echo ""not mounted"""	<MISSING>
"df /tmp | grep -q tmpfs && echo ""shared memory"" || echo ""not shared memory"""	<MISSING>
df | grep /dev/disk0s2	<MISSING>
df | tail -n +2 | tr -s ' ' | cut -d ' ' -f 2 | paste -s -d+ | bc	<MISSING>
diff  --brief --recursive dir1/ dir2/	<MISSING>
"diff ""$source_file"" ""$dest_file"""	<MISSING>
"diff ""${@:3}"" <(sort ""$1"") <(sort ""$2"")"	<MISSING>
diff --brief -nr dir1/ dir2/	<MISSING>
diff --brief -r dir1/ dir2/	<MISSING>
diff --brief <(awk '{print $2}' a) <(tac b | awk '{print $2}')	<MISSING>
"diff --new-line-format="""" --unchanged-line-format=""""  file1 file2"	<MISSING>
"diff --new-line-format="""" --unchanged-line-format="""" <(sort file1) <(sort file2)"	<MISSING>
diff --old-line-format '%l' --new-line-format '' --unchanged-line-format ''  <(nl file-out) <(nl file-reference)	<MISSING>
diff --suppress-common-lines --speed-large-files -y file1 file2 | wc -l	<MISSING>
diff -a --suppress-common-lines -y a.txt b.txt	<MISSING>
diff -a --suppress-common-lines -y a.txt b.txt > c.txt	<MISSING>
diff -arq folder1 folder2	<MISSING>
diff -bur folder1/ folder2/	<MISSING>
diff -burnad teste1 teste2	<MISSING>
diff -dbu0 a b	<MISSING>
diff -dbu0 a b | tail -n +4 | grep ^- | cut -c2-	<MISSING>
diff -enwbur repos1/ repos2/	<MISSING>
diff -nar /tmp/dir1 /tmp/dir2/	<MISSING>
diff -naur dir1/ dir2	<MISSING>
diff -naur dir1/ dir2/	<MISSING>
"diff -q ""$file"" ""${file/${dir1}/${dir2}}"""	<MISSING>
"diff -q /dir1 /dir2 | grep /dir1 | grep -e ""^only in*"" | sed -n 's/[^:]*: //p'"	<MISSING>
diff -q /dir1 /dir2|cut -f2 -d' '	<MISSING>
diff -q <(sort set1 | uniq) <(sort set2 | uniq)	<MISSING>
diff -q <(sort set1) <(sort set2)	<MISSING>
diff -q dir1 dir2	<MISSING>
diff -qr /tmp/dir1/ /tmp/dir2/	<MISSING>
diff -qr dir1 dir2	<MISSING>
diff -qr dir1/ dir2/	<MISSING>
diff -qr dir_one dir_two | sort	<MISSING>
diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq	<MISSING>
diff -r dir1 dir2	<MISSING>
diff -r dir1 dir2 | grep 'only in' | grep dir1 | awk '{print $4}' > difference1.txt	<MISSING>
diff -r dir1 dir2 | grep dir1 | awk '{print $4}' > difference1.txt	<MISSING>
diff -r dir1/ dir2/	<MISSING>
"diff -rq /dir1 /dir2 | grep -e ""^only in /dir1.*"" | sed -n 's/://p' | awk '{print $3""/""$4}'"	<MISSING>
"diff -rq /dir1 /dir2 | grep -e ""^only in /dir1.*"" | sed -n 's/://p' | awk '{print $3""/""$4}' xargs -i {} rm -r {}"	<MISSING>
diff -rq /path/to/folder1 /path/to/folder2	<MISSING>
diff -rq dir1 dir2	<MISSING>
diff -rq dir1 dir2 | grep 'only in dir1/'	<MISSING>
"diff -rqx ""*.a"" -x ""*.o"" -x ""*.d"" ./path1 ./path2 | grep ""\.cpp "" | grep ""^files"""	<MISSING>
diff -rqyl folder1 folder2 --exclude=node_modules	<MISSING>
diff -u 0 file1 file2 | grep -v ^@ | wc -l	<MISSING>
diff -u 0 file1 file2 | grep ^@ | wc -l	<MISSING>
"diff -u a1 a2 | grep -e ""^\+"""	<MISSING>
diff -u file1 file2	<MISSING>
diff -u file1 file2 > file3	<MISSING>
diff -up fastcgi_params fastcgi.conf	<MISSING>
diff -x '*.foo' -x '*.bar' -x '*.baz' /destination/dir/1 /destination/dir/2	<MISSING>
diff -y -w 150 file1.cf file2.cf	<MISSING>
diff -y /tmp/test1  /tmp/test2	<MISSING>
diff -y a b	<MISSING>
diff -y file1 file2	<MISSING>
diff -y one.txt two.txt	<MISSING>
diff /destination/dir/1 /destination/dir/2 -r -x *.xml	<MISSING>
diff /destination/dir/1 /destination/dir/2 -r -x exclude.pats	<MISSING>
diff /tmp/ksh-{9725,9781}.log | grep ^\<	<MISSING>
diff /tmp/test1  /tmp/test2	<MISSING>
diff <(./a) <(./b)	<MISSING>
diff <(curl -s http://tldp.org/ldp/abs/html/) <(curl -s http://www.redhat.com/mirrors/ldp/ldp/abs/html/)	<MISSING>
diff <(echo hello) <(echo goodbye)	<MISSING>
diff <(find . -exec readlink -f {} \; | sed 's/\(.*\)\/.*$/\1/' | sort | uniq) <(find . -name main.cpp  -exec readlink -f {} \; | sed 's/\(.*\)\/.*$/\1/' | sort | uniq) | sed -n 's/< \(.*\)/\1/p'	<MISSING>
diff <(fold -w1 <(sed '2q;d' $f)) <(fold -w1 <(sed '3q;d' $f)) | awk '/[<>]/{printf $2}'	<MISSING>
"diff <(fold -w1 <<< ""$s"") <(fold -w1 <<< ""$r"") | awk '/[<>]/{printf $2}'"	<MISSING>
diff <(ls /bin) <(ls /usr/bin)	<MISSING>
diff <(sort $def.out) <(sort $def-new.out)	<MISSING>
diff <(sort -n ruby.test) <(sort -n sort.test)	<MISSING>
diff <(sort file1 -u) <(sort file2 -u)	<MISSING>
diff <(ssh server1 'rpm -qa | sort') <(ssh server2 'rpm -qa | sort')	<MISSING>
diff <(zcat file1.gz) <(zcat file2.gz)	<MISSING>
"diff current.log previous.log | grep "">\|<"" #comparring users lists"	<MISSING>
diff dir1.txt dir2.txt	<MISSING>
diff file1 file2 | grep ^[\>\<] | wc -l	<MISSING>
diff file2 file1 | grep '^>' | sed 's/^>\ //'	<MISSING>
diff path1/ path2/ -rq -x file1	<MISSING>
dig $domain	<MISSING>
dig $domain | grep $domain | grep -v ';' | awk '{ print $5 }'	<MISSING>
"dig +noall +answer soa yahoo.com | awk '{sub(/.$/,"""",$5);print $5}'"	<MISSING>
"dig +short ""$domain"""	<MISSING>
dig +short -f - | uniq	<MISSING>
dig +short -f list	<MISSING>
dig +short -x 173.194.33.71	<MISSING>
dig +short myip.opendns.com @resolver1.opendns.com	<MISSING>
"dig +trace +additional dragon-architect.com | awk 'nr==3' rs=""\n\n"""	<MISSING>
dig -f /path/to/host-list.txt	<MISSING>
dig -t a $domain	<MISSING>
dig -t srv _kerberos._udp.foo.com	<MISSING>
"dig -x ""$1"" | grep ptr | cut -d ' ' -f 2 | grep google | cut -f 5"	<MISSING>
dig -x $ip | grep ptr | cut -d ' ' -f 2 | grep google | cut -f 5	<MISSING>
dig -x 127.0.0.1	<MISSING>
dig -x 72.51.34.34	<MISSING>
dig -x 8.8.8.8 | awk '/ptr[[:space:]]/{print $nf}'	<MISSING>
dig -x 8.8.8.8 | grep ptr | cut -d ' ' -f 2 | grep google | cut -f 5	<MISSING>
dig -x 8.8.8.8| awk '/ptr[[:space:]]/ && /google/ {print $nf}'	<MISSING>
"dig @""127.0.0.1""  _etcd-client._tcp. srv"	<MISSING>
"dig @$ns $d a | grep $d | grep -v ""dig"""	<MISSING>
dig @8.8.8.8 domain. a	<MISSING>
dig @8.8.8.8 domain. ns	<MISSING>
dig @ns1.hosangit.com djzah.com +noall +authority +comments | awk -f script.awk	<MISSING>
dig @ns1.newnameserver domain. a	<MISSING>
dig @ns2.newnameserver domain. a	<MISSING>
dig @server hostname.bind ch txt	<MISSING>
dig @some.other.ip.address domain. a	<MISSING>
dig @some.other.ip.address domain. ns	<MISSING>
dig google.com ns | awk 'p{print $5}/^;; answer section:$/{p=1}/^$/{p=0}'	<MISSING>
dig mx example.com | grep -v '^;' | grep example.com	<MISSING>
dig ns +aaonly com.	<MISSING>
dig stackoverflow.com	<MISSING>
"dig stackoverflow.com | grep -e ""^[^;]"" | tr -s "" \t"" "" "" | cut -d"" "" -f5"	<MISSING>
dig txt +short o-o.myaddr.l.google.com @8.8.8.8	<MISSING>
dig txt +short o-o.myaddr.l.google.com @ns1.google.com	<MISSING>
dig txt -f 1.txt	<MISSING>
"dir=""$( cd ""$( dirname ""${bash_source[0]}"" )"" && pwd )"""	<MISSING>
"dir=""$(mktemp aws-sync-xxxxx)"""	<MISSING>
"dir=""`echo $dir | sed s,//,/,g`"""	<MISSING>
"dir=$(dirname ""$(readlink -f \""$0\"")"")"	<MISSING>
dir=$(dirname $(readlink -m $bash_source))	<MISSING>
dir=$(dirname $(readlink /proc/$$/fd/255))	<MISSING>
"dir=$(dirname -- ""$1"")"	<MISSING>
dir=$(mktemp -d)	<MISSING>
dir='find $home -type d -name $1 | head 1'	<MISSING>
dir=`pwd`/`dirname $0`	<MISSING>
"dir_context=$(dirname -- ""$1"")"	<MISSING>
"dir_path=`readlink -f ""${the_stuff_you_test}""`"	<MISSING>
directories=$(diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq)	<MISSING>
"dirname ""$(readlink -f ""$0"")"""	<MISSING>
"dirname ""/path/to/vm.vmwarevm/vm.vmx"""	<MISSING>
dirname $(mktemp -u -t tmp.xxxxxxxxxx)	<MISSING>
dirname `find / -name ssh | grep bin | head -1`	<MISSING>
dirname `find / -name ssh | grep bin`	<MISSING>
dirname `pwd -p`	<MISSING>
dirname `readlink -e relative/path/to/file`	<MISSING>
dirs=($(find . -type d))	<MISSING>
disable exiting the shell on error	
disable jobs running in their own process group in the shell	
disable wildcard expansion and name globbing	
"disable x11 forwarding and execute ""cd yourremotedir; ./yourremotescript.sh </dev/null >/dev/null 2>&1"" in the background on ""remoteserver"""	
disables overwriting existing files	
disables shell option 'compat31'.	
disables shell option 'dotglob'.	
disables shell option 'nocasematch'.	
disables shell option 'nullglob'.	
"discard all the errors and search for the file ""program.c"" in the entire file system"	
discard the first letter from every line in $line and calculate the md5 sum of the remaining	
dispaly a list of all the files in the file system which belong to a specific user  and exclude searching in the folder proc	
dispaly a long listig of all the files in the current folder which are bigger than 100kb	
dispaly a long listig of all the files in the home folder which are bigger than 100kb and discard any errors	
dispaly a long listing of all the files in the current folder which have been modified in the last 14 days	
dispaly all the empty regular/normal files in the current folder	
dispaly the latest version of joomla in various folders	
"display ""/tmp/file"" as a table of width 30 with columns filled before rows"	
"display ""infile"" as printable characters or backslash escapes"	
"display 'file.txt' all occurrences of ""foo"" replaced by ""bar"", letting the user interactively page through the result."	
display 12345 backwards	
display 798 backwards	
display a binary file as a sequence of hex codes	
"display a character dump of ""oldfile"""	
display a count of regular files in each directory at the current level.	
display a detailed listing of the current directory, pausing for user input after each page.	
"display a dump of ""file"" as floating point values of double size"	
display a dump of standard input as floating point values of double size	
"display a garbled ascii-art of a cow saying ""hello"" backwards"	
display a list of all files in the folder passed as argument to a script	
display a list of all java or jsp files in the current folders	
display a list of all regular/normal files in the current folder	
display a list of all the files  in the home folder which have been modified today	
display a list of all the files in the file system which do not belong to any group and search only in jfs and jfs2 file systems	
display a list of all the files in the file system which do not belong to any user and search only in jfs and jfs2 file systems	
display a list of all the normal/regular files in the file system ,excluding the folder proc which have the suid or sgid bit set	
display a list of files with sizes in decreasing order of size of all the regular files under $dir directory tree that are bigger than $size in size	
display a list of files with sizes in decreasing order of size of all the regular files under '/your/dir' directory tree that are bigger than 5 mb in size	
display a long ilsting of all the files in the file system which are bigger than 1kb and which have not been modified in the last 30*24 hours	
display a long list and delete all the regular/normal files in the current folder starting with the word k which have been modified in the last 4 hours(360 minutes)	
display a long list of all regular/normal files in the file system which belong to the root and with suid bit set	
"display a long list of all the directories which have files ending with "".todo"""	
"display a long list of all the files in the directory ""/mydir"" which have not been modified in the last 20*24 hours or which have not been accessed in the last 40*24 hours"	
display a long list of all the files that are bigger than 10kb in current folder	
display a long list of all the files that are bigger than 10kb in current folder and save the output to the file mylogtxt.text	
"display a long list of all the files/directories named "".todo"" under $storagefolder directory tree"	
display a long list of all the jpg files in the home folder	
display a long list of all the jpg files in the home folder(plus at the end is used to give bulk data as input)	
display a long list of the files in the current folder which have the word fuddel in all the files in the current folder and then search for the word fiddel in the previously matched files	
display a long listing of all 0777 permission directories under current directory tree	
display a long listing of all directories under '/nas' directory tree	
display a long listing of all files in the entire file system which are bigger than 1mb	
display a long listing of all files/directories named 'file' under current directory tree	
display a long listing of all files/directories that are bigger than 10mb under '/var/' directory tree	
display a long listing of all fles in current folder which have been modified in the last 60 minutes	
"display a long listing of all images with the name ""articles"" in the current folder"	
"display a long listing of all images with the name ""articles"" in the current folder ( print0 is used to preserve file names with new line in their name )"	
display a long listing of all normal/regular files in a folder which have not been modified in the last 60 days and save the output to a file	
display a long listing of all regular files  in current folder which have been modified in the last 60 minutes	
display a long listing of all regular files that are less than 50 bytes in size under '/usr/bin' directory tree	
display a long listing of all regular files with 0777 permission under current directory tree	
display a long listing of all regular/normal files in current directory which have been changed in the last 7 days and save the output to new.files	
"display a long listing of all the ""trash"" files in the folder /home"	
display a long listing of all the directories in current directory	
display a long listing of all the directories in the current folder	
display a long listing of all the directories in the entire file system	
display a long listing of all the empty files in the entire file system which are empty	
display a long listing of all the files in the /var folder which are bigger than 10mb. print0 is used to handle the files which have new lines in their names	
display a long listing of all the files in the current directory	
display a long listing of all the files in the current folder	
display a long listing of all the files in the current folder in sorted order, which are bigger than 10kb	
display a long listing of all the files in the current folder that have been accessed in today from the start of the day	
display a long listing of all the files in the current folder which are bigger than 10kb	
display a long listing of all the files in the current folder which have been modified in the last 24 hours	
display a long listing of all the files in the current folder which have spaces in their names and save the output to the file log.txt	
display a long listing of all the files in the home folder which are bigger than 200mb	
"display a long listing of all the files that begin with the name ""metallica"" in the entire file system"	
display a long listing of all the files/directories under current directory tree that are newer than the file 'nov' by modification time	
display a long listing of all the java files in the current folder in sorted order	
display a long listing of all the log files in the current folder which are bigger than 1mb	
display a long listing of all the normal/regular files in the current folder (print0 is used to handle files which have newlines in their names or files with the name only as spaces )	
display a long listing of all the normal/regular files in the current folder and do not search in the sub folders	
display a long listing of all the regular files in the file system which belong to user 'root' and which have suid bit set	
display a long listing of all the regular files owned by the user 'bluher' in the entire filesystem	
display a long listing of all the regular files under current directory tree that are newer than ‘apr 18 23:59:59 edt 2013’ and older than ‘apr 20 00:00:00 edt 2013’ by modification time	
display a long listing of all the regular/normal files in the current folder	
display a long listing of all the regular/normal files in the current folder along with their md5sum	
display a long listing of all the regular/normal files in the file system which have set uid bit or set gid bit enabled.	
display a long listing of all the temp files whose size is 0 bytes and which have not been accessed in the last 10 days	
display a long listing of all the xls or csv files in the entire file system	
display a long listing of the files all non emoty files in current folder which have been modified 60 minutes ago	
display a long listing of the files in current folder which have been modified in the last 60 minutes	
display a long listing of the files/directories with human readable sizes (100m, 10g etc..) under '/var' directory tree which are bigger than 10mb	
display a long listing of the oldest file under '/hom/backups' directory tree	
"display a named character dump of ""test.sh"""	
"display a sorted count of all the characters in ""filename"""	
"display all available header information for the executable file of command ""tail"""	
display all directories in a folder	
display all directories in current folder	
display all directories in current folder and do not search in sub directories	
display all directories in current folder excluding those that are present in .git folder	
display all directories in current folder excluding those which do not have read permission to all users and save the output to a file	
display all directories in the current folder	
display all directories in the entire file system	
"display all directories in the folder ""$orig_dir"""	
"display all directories in the folder ""/myfiles"""	
"display all directories in the folder ""prod"" and do not search in the sub directories"	
display all directories in the folder symfony	
display all directories in vim folder do not search in sub directories	
display all directories which have not been accessed in the last 24*3 hours	
display all empty files in the current folder	
display all empty files(files with sisze 0 bytes) in home folder	
display all environment variables, functions, and aliases, pausing for user interaction after each page of output.	
display all executable files in the folder /home	
"display all file in the folder /dir/to/search except "".c"" files"	
"display all file in the home folder except "".c"" files"	
display all file names in current folder	
display all files  expect directories in the current folder	
"display all files ending with "".ext"" in current folder and append the file contents of list.txt and sort them based on name and display only uniq items"	
"display all files ending with ""ini"" in current folder"	
display all files in a folder	
display all files in current directory and save the output to a file	
display all files in current directory discard any errors and save the output to a file	
display all files in current folder	
display all files in current folder and follow the symbolic links and display the pointed file	
"display all files in current folder ending with ""~"" or ""#"" using regular expression"	
display all files in current folder excluding current folder (.)	
display all files in current folder excluding text files	
"display all files in current folder excluding those that have the word ""git"" in their name and display files that have git in their path names"	
display all files in current folder in sorted order of depth	
display all files in current folder using regular expression	
display all files in current folder which are bigger than 1 mb	
display all files in current folder which are bigger than 100kb but are less than 500kb	
display all files in current folder which have been modified in the last 60 minutes	
display all files in current folder which have not been modified in the last 60 minutes	
display all files in current folder with null separating each file	
display all files in current folder, with each file name displayed twice on same line	
display all files in the boot directory prepending each filename with stderr, stdout accordingly	
"display all files in the current directory excluding those that are present in the directories whose name starts with ""efence"" and do not search in the sub directories"	
"display all files in the current directory tree that match ""*foo"""	
display all files in the current folder	
display all files in the current folder ($@ contains the variables passed as argument to the function)	
display all files in the current folder after pruning those in the current folder ( dot is the output of this command )	
display all files in the current folder along with their last access timestamps	
display all files in the current folder along with their last accessed timestamps	
display all files in the current folder and do not search in the sub directories	
display all files in the current folder expect text files	
display all files in the current folder that have been modified in the last 24 hours whose name has only 1 letter	
display all files in the current folder which are not empty	
display all files in the current folder which do not belong to the user john	
display all files in the current folder which do not match the regular expression	
"display all files in the current folder which end with extension ""myfile"" followed by one digit or two digits"	
"display all files in the current folder which end with extension ""myfile"" followed by two digits"	
display all files in the current folder which start with met	
display all files in the current folder while discarding the errors save the output to a file	
display all files in the current folder with the name test excluding those that are present folder test	
display all files in the current folder with the name test excluding those that are present in the sub folders of the test folder	
"display all files in the directory ""dir"" which have been accessed in the last 60 minutes"	
"display all files in the directory ""dir"" which have been changed in the last 60 minutes"	
display all files in the entire file system	
display all files in the entire file system excluding the directories /proc,/sys,/dev and those files which are writable and which are not symbolic links and which are not sockets and which do not have the sticky bit set	
display all files in the entire file system excluding those that are in the transfer directory	
"display all files in the file system which are bigger than 50mb and having size ""filename"" in them"	
display all files in the folder /usr and its sub directory(do not search beyond the sub directory)	
"display all files in the folder /usr/src excluding those ending with "",v"""	
display all files in the folder bar only in the path /foo/bar/myfile (no output is generated)	
display all files in the folder home which are owned by the group test.	
display all files which have been modified between two dates in current folder	
display all hidden files in the current folder	
display all html files  in  current folder	
display all html files in current folder and replace some pattern in all these files	
display all instances  of the file tkconfig.sh in the folder /usr	
"display all instances of ""foo.cpp"" file in the current folder which are not in the sub directory tree "".svn"""	
display all instances of the .profile file in the entire file system	
display all jpg files in the current folder	
display all lines contained in 'dax-weekly.csv' in reverse order.	
display all lines contiaining 'funcname' in system map file matching current kernel.	
display all lines in 'file' containing 'something', pausing for user input after each page.	
display all mp3 files in the file system which have not been accessed in the last 24 hours	
display all non empty directories in current folder	
display all normal / regular files in current folder in reverse order	
display all normal/regular files in a folder	
display all normal/regular files in current  folder	
display all normal/regular files in current directory	
display all normal/regular files in current folder	
display all normal/regular files in current folder in sorted order	
display all normal/regular files in current folder which have readable permission	
"display all normal/regular files in the folder ""$orig_dir"""	
"display all normal/regular files in the folder ""pathfolder"""	
"display all normal/regular files or directories in the folder ""$orig_dir"""	
display all pdf files in the current folder	
display all php,xml and phtml files in current folder	
"display all regular files in current folder excluding search in the directories that are ending with ""git,svn"""	
display all regular files in current folder which are atleast 1 level deep and search in the alphabetical order of the directories	
display all regular files in current folder which have spaces in their name	
display all regular files in the folder image-folder	
display all regular files under current directory tree ignoring files in './dir1' and './dir2' directories	
display all regular/normal files in a directory	
display all regular/normal files in current folder	
display all regular/normal files in temp folder and display the filename along with file size	
display all regular/normal files in the current folder ending with the word ummy	
display all regular/normal files in the current folder that were accessed exactly 7*24 hours back	
display all regular/normal files in the current folder which are accessed in the last 7*24 hours	
display all regular/normal files in the current folder which are not accessed in the last 7*24 hours	
display all regular/normal files in the current folder with the name dummy	
display all regular/normal files in the entire file system with the name dummy and discard all the errors	
"display all regular/normal files in the folder ""dir"" and display the filename along with file size"	
display all regular/normal files in the folder /users/david/desktop/	
display all regular/normal files in the folder symfony	
display all regular/normal files which have been modified in the last 30 minutes	
"display all scala files in the directory ""src/main"""	
display all shell scripts in current folder	
display all soft links in current folder	
display all sqlite files in the current directory along with their timestamp	
display all symbolic links in current folder	
"display all symbolic links in the folder ""myfiles"""	
"display all symbolic links in the folder ""myfiles"" and follow them"	
display all symlinks and their targets in the current directory	
display all symlinks and their targets in the current directory tree	
display all text files in a folder	
display all text files in current folder	
display all text files in the current folder	
display all text files in the folder /home/you which have been modified in the last 60*24 hours(case insensitive search)	
display all text files in the folder /tmp/1	
display all text files in the folder /tmp/1 excluding those which do not have spaces in their names	
display all text files in the folder /user/directory which have been modified in today	
display all text, mpg, jpg files  in the folder /users/david/desktop	
"display all the "".c"" files in the current directory"	
"display all the "".c"" files in the current folder excluding those that are present in all the sub directories"	
"display all the "".c"" files in the current folder excluding those that are present in the .svn sub folder"	
"display all the "".c"" files in the folder ""/home/david"" which have been accessed in the last 48 hours"	
"display all the "".c"" files which have been modified in the last 10 minutes"	
"display all the "".mov"" files in the current folder"	
"display all the "".mov"" video files in the current folder in the format filename and folder path"	
"display all the "".sh"" files in the current folder"	
"display all the ""c"" files in the current folder"	
display all the .sh scripts and perl files in the current folder	
display all the .sh scripts in the folder /usr	
display all the c files and the header files in the path /some/dir and do not search in sub directories	
"display all the c files or python files in the folder ""euler"""	
display all the c, cpp, header files in the kat folder	
"display all the configuration files in ""/etc"" folder along with their last access and modified timestamps"	
display all the configuration files in the current folder which are in the current tree structure	
display all the configuration files in the etc folder	
display all the details of empty files in current folder	
display all the directories in specific path ( saved in $x ) excluding those that are present in a path and save the ouput to a file	
display all the directories in the current folder	
display all the directories in the current folder and create a skeleton of make directory commands with all these folders	
display all the directories in the current folder excluding those that are present in the .svn directory tree	
display all the directories in the current folder excluding those that are present in the aa directory tree	
display all the directories in the current folder excluding those that are present in the folder secret	
"display all the directories in the current folder excluding those that have the name ""node_modules"""	
display all the directories in the current folder for the files which have not been accessed in the last 48 hours	
display all the directories in the current folder which are atleast one level deep	
display all the directories in the current folder which start with processor followed by digit and ends with .1 or .2	
display all the directories in the folder /path/to/dest except tmp and cache directories	
display all the directories in the folder /path/to/dest except tmp directory	
display all the directories in the folder /usr/share	
display all the directories in the folder /var and do not go beyond 2 levels during search	
display all the directories in the folder master-	
"display all the doc files in the current folder ( files ending with "".doc"" )"	
display all the empty files in current folder	
display all the empty files in the current folder( files of size 0 bytes)	
display all the empty files in the entire file system	
display all the empty files in the folder /opt (file size 0 bytes)	
"display all the file in the folder /home/david/ which start with the word ""index"""	
"display all the file in the folder /home/david/ which start with the word ""index"" ( case insensitive search)"	
display all the files  in the current folder excluding the current folder and do not search in the sub directories	
display all the files  in the current folder excluding the perl files	
"display all the files  in the current folder excluding those which are present in ""./src/emacs"" folder"	
display all the files  in the current folder which have colon in their name	
display all the files along with their group name in the folder /home which do not belong to the group test	
"display all the files and directories with the name ""cvs""  from /usr/src folder that are at least seven levels deep and do not descend onto the folders"	
"display all the files ending with "".foo"" excluding those that are in the directory "".snapshot"""	
"display all the files ending with "".foo"" including those that are in the directory "".snapshot"", this is the wrong way of using prune."	
"display all the files ending with "".user"" in /var/adm/logs/morelogs/ and excluding all regular files"	
"display all the files ending with "".user"" or beginning with ""admin"" or ending with "".user.gz"" in /var/adm/logs/morelogs/ and excluding  all regular files"	
display all the files ending with .c in the current folder	
display all the files having spaces in the current folder	
"display all the files having the word ""searched phrasse"" in their name in the current folder excluding those from the paths ""/tmp/"" and ""./var/log"""	
display all the files in current directory with each file name displayed twice in the same row	
display all the files in current folder	
display all the files in current folder which are bigger than 10kb	
display all the files in current folder which have been accessed in the last 15 days	
display all the files in current folder which have been changed in the last 2-6 days	
display all the files in current folder which have been changed in the last 24 hours	
display all the files in current folder which have not been modified in the last 7 days	
display all the files in current folder which have write permission to all the users	
"display all the files in current folder which start with ""file2015-0"""	
display all the files in the /usr folder which have the permissions 777	
display all the files in the current directory and do not search in sub directories	
display all the files in the current directory and do not search in the sub directories	
"display all the files in the current directory excluding the paths ""targert"", ""tools"", ""git"""	
display all the files in the current directory excluding those that are in the 'secret' directory	
display all the files in the current folder	
display all the files in the current folder along with the change time and display file names of the last 10 changed files	
display all the files in the current folder along with the hidden files with the depth	
display all the files in the current folder along with the modification time and display file names of the last 10 modified files	
display all the files in the current folder along with their timestamps and sort them and save them in the file1	
display all the files in the current folder and do not search in sub directories and move them to the directory /directory1/directory2.	
display all the files in the current folder and traverse from the sub directories	
"display all the files in the current folder except those whose name is ""personal"""	
"display all the files in the current folder excluding search in the paths containing the folder having the word ""mmm"""	
display all the files in the current folder excluding the directory aa	
"display all the files in the current folder excluding the file states_to_csv.pl and those that are present in the directories whose name starts with "".git"""	
display all the files in the current folder excluding the files with the name mmm	
"display all the files in the current folder excluding those ending with "".disabled"" in sorted order"	
"display all the files in the current folder excluding those that are present in the folder ""secret"""	
"display all the files in the current folder excluding those that are present in the path ""./etc"""	
"display all the files in the current folder excluding those that are present in the sub directory aa and display those files that start with the word ""file"""	
"display all the files in the current folder excluding those which are in the path of "".git"""	
display all the files in the current folder expect perl shell and python fiels	
display all the files in the current folder for the files which have been accessed in the last 24 hours	
display all the files in the current folder for the files which have not been accessed in the last 24 hours	
display all the files in the current folder in a single line separated by null command	
display all the files in the current folder that are at least one week old (7 days) but less then 30 days old	
"display all the files in the current folder that end with "".ksh"""	
display all the files in the current folder that have been modified in the last 24 hours	
display all the files in the current folder which are bigger than 100mb and save the output list to the file /root/big.txt	
"display all the files in the current folder which are in the path ""./sr*sc"""	
display all the files in the current folder which are in the path ending with the folder f	
"display all the files in the current folder which are present in the path ""./sr*sc"""	
"display all the files in the current folder which are present in the path ""./src/emacs"""	
display all the files in the current folder which contains form feed (^l) and does not contain null	
display all the files in the current folder which do not belong to any group	
display all the files in the current folder which do not belong to any user	
"display all the files in the current folder which end with "".bash"""	
"display all the files in the current folder which hare in the sub directory trees of the folders which begin with the word ""kt"" followed by a digit"	
display all the files in the current folder which have are bigger than 1kb	
display all the files in the current folder which have been accessed in the last 60 minutes	
"display all the files in the current folder which have been modified after the files ""/bin/sh"""	
display all the files in the current folder which have been modified between two dates	
display all the files in the current folder which have been modified in one hour ago	
display all the files in the current folder which have been modified in the last 14*24 hours	
display all the files in the current folder which have been modified in the last 2 days	
display all the files in the current folder which have been modified in the last 24 hours	
display all the files in the current folder which have been modified in the last 24 hours excluding all directories	
display all the files in the current folder which have been modified in the last 5*24 hours	
"display all the files in the current folder which have not been modified in the last 7 days and which are not in the list ""file.lst"""	
"display all the files in the current folder which have not been modified in the last 7 days and which are not in the list ""file.lst"" and save the output to a file"	
display all the files in the current folder which have the permissions 777 and which have been modified in the last 24 hours.	
"display all the files in the current folder which have the word ""bills"" in their name"	
"display all the files in the current folder which start with either ""filea_"" or ""fileb_"""	
display all the files in the current folder.	
display all the files in the directory modules	
display all the files in the entire file system	
display all the files in the entire file system which are bigger than 10mb	
"display all the files in the entire file system which begin with ""apache-tomcat"""	
display all the files in the entire file system which have set uid bit set.	
"display all the files in the file system excluding all the "".c"" files"	
display all the files in the file system which are changed a minute ago	
display all the files in the file system which are present in nfs system	
display all the files in the file system which are smaller than 20 bytes	
display all the files in the file system which belong to no group	
display all the files in the file system which belong to no user	
display all the files in the file system which belong to the group lighttpd	
"display all the files in the file system which belong to the user ""user1"""	
"display all the files in the file system which belong to the user ""wnj"" and which are modified after the file ""ttt"""	
"display all the files in the file system which belong to the user ""wnj"" or which are modified after the file ""ttt"""	
display all the files in the file system which belong to the user with the id 1005	
"display all the files in the file system which do not belong to the user ""wnj"" and which are modified before the file ""ttt"""	
display all the files in the file system which have been modified in the last 10 minutes	
"display all the files in the folder ""$orig_dir"""	
"display all the files in the folder ""/dev"" which belong to the user ""peter"""	
"display all the files in the folder ""/home/mywebsite"" which have been changed in the last 7*24 horus"	
"display all the files in the folder ""/users/me/desktop"" which belong to the user ""popo"" and which have the permission 777"	
"display all the files in the folder ""/users/me/desktop"" which have read permission to them"	
display all the files in the folder /etc /srv excluding those that are present in the path of ./srv/tftp/pxelinux.cfg* and /etc/mtab	
display all the files in the folder /home which do not belong to the group test	
display all the files in the folder /home which have the setuid bit enabled	
"display all the files in the folder /mp3-collection which are bigger than 10mb or which start with the name ""metallica"""	
display all the files in the folder a	
display all the files in the folders /etc /srv excluding the paths /etc/mtab and  /srv/tftp/pxelinux.cfg	
display all the files in the folders mydir1, mydir2 which are bigger than 2kb and have not been accessed in the last 30*24 hours	
display all the files in the home folder	
display all the files in the home folder except text files	
display all the files in the home folder excluding directories which have been modified in the last 24 hours	
display all the files in the home folder that have been modified in the last 24 hours	
display all the files in the home folder that have been modified in the last 7*24 hours	
display all the files in the home folder which are smaller than 500 bytes	
"display all the files in the home folder which begin with ""arrow"""	
"display all the files in the home folder which begin with ""arrow"" and end with ""xbm"""	
"display all the files in the home folder which belong to the suer ""bruno"" and end with "".sxw"" and have been accessed in the last 3*24 hours"	
"display all the files in the home folder which end with "".xbm"""	
display all the files in the home folder which have not been modified in the last 365*24 hours	
display all the files in the home folder which have read permission to the user	
display all the files in the kat folder	
display all the files in the user folder which have been modified after the files /tmp/stamp$$	
display all the files in the usr folder and those that are in the path local	
display all the files in the usr folder which have been modified after feburary 1st	
"display all the files on the current folder excluding those that are present in the folder ""./src/emacs"""	
"display all the files only in the path ""./sr*sc"""	
"display all the files with the names ""name1"" and ""name2"" in the current folder and do not search in the sub directories"	
display all the files/directories under '/home/bozo/projects' directory tree that have been modified within the last day	
display all the header files  and cpp files in the current folder	
"display all the hidden directories in the directory ""/dir/to/search/"""	
"display all the hidden files in the directory ""/dir/to/search/"""	
display all the hidden files in the folder /home	
"display all the home folder which end with the extension ""sxw"" and which have been accessed in the last 3*24 hours and which belong to the user bruno"	
display all the html files in the current folder	
display all the html files in the current folder excluding search in the path ./foo	
display all the html files in the current folder excluding search in the paths ./foo, ./bar.	
display all the html files in the current folder that have been modified exactly 7*24 hours ago	
display all the html files in the current folder that have been modified in the last 7*24 hours	
display all the html files in the current folder that have not been modified in the last 7*24 horus	
display all the html files in the folder /var/www	
display all the ip addresses in all the files that are present in /etc folder	
display all the jars in the current folder	
display all the java script files in a folder	
display all the java script files in the current folder	
display all the java, xml and action scripts (.as) files in a directory	
display all the jpg files in the current folder and do not search in sub directories	
display all the jpg files in the current folder which belong to the user nobody	
display all the jpg images in current folder	
display all the log files in the folder /var/log, print0 is used to handle files with only spaces in their names or which have newlines in their names	
display all the log files in the folder /var/log, print0 is used to handle files with only spaces in their names or which have newlines in their names and discard all the errors	
display all the mp4 and flv files in a folder along with their timestamps in the sorted order of time	
display all the normal/regular files in a directory	
display all the normal/regular files in the current folder	
display all the normal/regular files in the current folder and do not go beyond 3 levels	
display all the normal/regular files in the current folder which are empty	
display all the normal/regular files in the directory folder1	
display all the pdf files in a folder which start with a specific word along with their timestamp in sorted order of time and save output to a in remote server	
display all the php files in the current folder which do not have the permission 644	
display all the php files in the entire file system	
display all the regular files in current folder	
"display all the regular files in current folder excluding all the directories and all the sub directories having ""normal"" in their name"	
"display all the regular files in current folder that belong to the user ""tom"""	
display all the regular files in the current folder and do not search in sub folders	
"display all the regular files in the current folder excluding those that are present in the path ""git"""	
display all the regular files in the current folder that are bigger than 10kb	
display all the regular files in the current folder that are exactly 10kb	
display all the regular files in the current folder that are less than 10kb	
"display all the regular files in the current folder that are modified after the file ""file.log"""	
display all the regular files in the current folder which dont not have the permission 777	
display all the regular files in the current folder which have the permission 777	
"display all the regular files in the folder ""$(folder)"" which are modified in the last $(retention)*24 hours and excluding hidden files"	
display all the regular/ normal files in a folder	
"display all the regular/normal files ending with "".mod"" in a folder"	
display all the regular/normal files in a folder	
display all the regular/normal files in a folder and save errors to a log file	
display all the regular/normal files in current directory	
display all the regular/normal files in current folder	
display all the regular/normal files in current folder which have been modified exactly 60 minutes before	
display all the regular/normal files in the /root folder which are bigger than 500mb	
display all the regular/normal files in the current directory	
display all the regular/normal files in the current directory which are atleast 2 levels deep	
"display all the regular/normal files in the current folder excluding the files ""bbb"" and ""yyy"""	
display all the regular/normal files in the current folder excluding the files with the name mmm	
display all the regular/normal files in the current folder that are not accessed in the last 10 minutes	
display all the regular/normal files in the current folder which are modified after a file	
display all the regular/normal files in the current folder which have been modified after a specific time stamp and do not search in the sub directories	
display all the regular/normal files in the current folder which have been modified in the last 24 hours	
display all the regular/normal files in the entire file system	
"display all the regular/normal files in the folder ""/home/user/demo"" which have the permission 777."	
display all the regular/normal files in the folder /path/ which have not been modified today ( from day start ie, 00:00 )	
display all the regular/normal files in the home folder that have been modified in the last 1 day (from the start of day ie, from 00:00 )	
display all the soft links in a  folder which are not broken	
display all the statistics of the files in the current folder and discard the errors	
display all the statistics of the files in the current folder and discard the errors. ( + symbol at the end is used to give stat bulk input than a single file )	
display all the symbolic links in the current folder	
display all the tex files in the current folder	
display all the text and pdf files in the current folder	
display all the text files  in the current folder	
display all the text files and hidden files in the home folder	
display all the text files and pdf files in the current folder	
display all the text files from the current folder and skip searching in skipdir1 and skipdir2 folders	
display all the text files in a folder	
display all the text files in current folder	
display all the text files in current folder and save the output to a file	
display all the text files in the current folder	
display all the text files in the current folder  and do not search in the bin directory	
display all the text files in the current folder and discard all the errors.	
display all the text files in the current folder except readme files	
display all the text files in the current folder which have been modified in the last half minute ( 30 seconds )	
display all the text files in the home folder	
display all the text files in the home folder ( case insensitive search )	
display all the text files in the temp folder	
"display all the trace files ("".trc"") from the folder $dba/$oracle_sid/bdump/ which have not been accessed in the last 7*24 hours"	
"display all the users in the current folder that belong to the group ""sunk"""	
display all the users in the current folder which do not belong to the user root	
"display all variables with names starting with ""derby"" in a window's command line"	
display an amount of processes running with a certain name	
"display an infinite number of lines consisting of ""y"", until the user presses the q key."	
"display bash function definition of ""foobar"""	
display compter's hostname	
display current system's kernel name, kernel release and version, and machine architecture	
display detailed usage help of the 'cp' (copy) command.	
display difference between one.txt and two.txt side-by-side.	
"display differences between /destination/dir/1 and /destination/dir/2 excluding files that match any pattern in file ""exclude.pats""."	
display differences between /destination/dir/1 and /destination/dir/2 excluding files with names ending with extensions '.foo', '.bar' and '.baz'	
display differences between /destination/dir/1 and /destination/dir/2 excluding xml files.	
display differences between /tmp/test1 and /tmp/test2 side-by-side.	
display differences between /tmp/test1 and /tmp/test2.	
display differences between a and b side-by-side	
display differences between directories dir1 and dir2, treating absent files as empty.	
display differences between directories dir1 and dir2.	
display differences between directories repos1 and repos2, ignoring changes due to tab expansion, white spaces and treating absent files as empty.	
display differences between file1 and file2 side-by-side.	
"display differences between files ""a.txt"" and ""b.txt"" side-by-side and do not output common lines."	
display differences between files dir1.txt and dir2.txt.	
display differences between list of files in /bin and /usr/bin.	
display differences between output of two programs, 'a' and 'b', residing in the current working directory.	
"display differences in ""/tmp/ksh-9725.log"" when compared to ""/tmp/ksh-9781.log"""	
display each line in file.txt backwards	
"display environment variable ""_"" of the current shell"	
display file status for all regular files in the current directory tree	
display file status for all regular files in the current directory tree suppressing error messages	
display file status for each regular file in the current directory tree	
display file type description of 'file-name' based on contents.	
"display file type information for all instances of ""file"" in the current path."	
display file.txt with lines numbered, and page interactively through the result.	
"display files ending with "".ext"" in current folder excluding those that are present in the list list.txt"	
"display files ending with "".ext"" in current folder which are present in the file ""foo"""	
"display files in current folder ending with ""pdf"" or ""pdf"""	
display hardware platform, ie. x86_64 even if current kernel uses 32-bit addressing.	
display hostname.	
display human-readable file type description of ascii.txt	
display human-readable file type description of utf8.txt	
display in a list of all the files that are bigger than 10kb in current folder	
display in an optimized way file status for all regular files in the current directory tree suppressing error messages	
display infinite scroll of random ascii art	
display inputfile all on one line (replace newlines by spaces)	
display ip address and login time of the current user's session	
display kernel name, release, and version.	
display kernel release name.	
display last 100 lines of file-with-line-too-long.txt, waiting for user input after each page.	
"display list of all the c files ( fuiles with "".c"" extension ) in current folder"	
display list of all the files in the /tmp folder	
display list of all the files in the current directory	
display list of all the files in the current directory (print0 handles file names with newlines or spaces)	
display list of all the files in the current folder which are empty.	
"display list of all the hidden directories in the directory ""/dir/to/search/"""	
"display list of all the hidden files in the directory ""/dir/to/search/"""	
display list of all the hidden files in the folder $home/projects/ and save the output to the file foo.txt	
display list of all the hidden files in the home folder	
"display list of all the hidden regular/normal files in the directory ""/dir/to/search/"""	
"display list of all the regular/normal files in the current folder which start with ""my"""	
display list of all the regular/normal files in the home folder which are bigger than 512 kb	
display list of all the regular/normal files in the home folder which are exactly 6579 bytes	
"display list of files ending with '.txt' in the current folder to the terminal twice and output it to the text file ""txtlist.txt"""	
"display long list of all the files in the folder /home/peter which belong to no user and change the owner,group of all these files (after user confirmation) to ""peter"",""peter"""	
display long list of all the perl files in the current folder	
display long listing of all files in the current directory whose size is 24 or 25 bytes (doesnt display inode information) .	
display long listing of all files in the current directory whose size is 24 or 25 bytes.	
display long listing of all normal/regular files in the current directory which have been modified in the last 2 days.	
display long listing of all regular/normal files whose size is less than 50 bytes.	
display long listing of all the empty files in the current folder	
"display long listing of all the files in the folder ""/myfiles"""	
display long listing of all the files in the root folder which are bigger than 3kb	
display long listing of all the files that have been changed in the last 4 days, daystart is used to compare from the starting of day i.e, at 00:00	
display long listing of all the files/directories owned by the user 'me' under '/tmp' directory tree	
display long listing of all the regular hidden files in the folder musica	
display long listing of all the symbolic links in the current folder	
display long listing of all the text files in the current folder	
display long listing of all the text files in the current folder (plus at the end executes quickly by sending bulk data as input to the command in exec)	
display long listing of all the text files in the current folder and then execute the script myscript.sh by passing the output of previous exec as input	
display long listing of first 10 directories in the current folder	
display long listing of top ten biggest regular/normal files in the folder /usr/share/man (discard errors during search)	
display machine architecture, ie. x86_64	
"display mime type of file specified by variable ""file"""	
display mimetype of myfile.txt.	
display name and value of 'variable' if it exists.	
display non-hidden files in the current directory with the given output format	
display only first and second dot-separated numbers of kernel version, ie. 4.4	
"display only line numbers listed in 'file_of_line_numbers"" from file 'source'."	
display only mimetype of myfile.txt, without the filename.	
"display only the file names of all the files which end with "".deb"""	
display operating system type, ie. gnu/linux	
display permissions, user, group, and full path for each file in the current directory tree	
display permissions, user, group, and full path for each file in the current directory tree as a list	
display php info one page at a time, pausing for user interaction after each page.	
display smbios/dmi information, pausing for user interaction between pages of output.	
display source and mount point of the file system containing /some/path.	
"display standard input as a table with ""${tab}"" separators"	
display standard input as octal bytes	
display standard input as printable characters or backslash escapes with no addressing radix	
display summary of each specified file in human readable form	
display system information: kernel name, hostname, kernel release and version, machine architecture, processor type, hardware platform, and operating system type.	
display table of files with their name, owner, and size in bytes.	
display ten files in the current directory	
display ten files in the tmp directory	
display the 'bash' manpage, going to the first occurence of \' sequence of characters.	
display the 5 largest files in the current directory and its sub-directories.	
display the 5 smallest files in the current directory and its sub-directories ignoring any empty files.	
display the 5 smallest files in the current directory and its sub-directories.	
display the amount of disk space used by all the log files in the folder /usr/local/apache/logs/	
"display the base name(name without extension) of all the "".flac"" files in the current folder"	
"display the base name(name without extension) of all the "".nef"" files in the current folder"	
display the biggest file sizes only	
display the change owner command for all the regular files in the current folder.	
display the commands to force delete all jpg files in current directory which are less than 50kb and do not search in the sub directories	
"display the content of all the instances of the file ""lilo.conf"" in the file system and discard any errors in encountered during the search and display) and save the output to the file ""lilo.txt"""	
"display the content of file ""f"" in home directory if it exists and is executable"	
"display the content of the files in the file system with the name ""lilo.conf"" and save the output to the file lilo.txt"	
display the content of yourfile.txt, waiting for user input at each page.	
display the contents of  all the regular files in a folder in the sorted order of their depth	
"display the contents of ""file"" formatted into a table, removing duplicate lines where the first 12 characters are duplicates, and display the number of occurrences at the beginning of each line."	
"display the contents of ""myfile"" located in the current directory."	
"display the contents of ""sample_0001.gz"" with ""lk=1&"" removed"	
"display the contents of ""text"""	
display the contents of 'your_file' wrapping lines to maximum 80 characters, and waiting for user interaction after each page.	
display the contents of /var/log/syslog one page at a time, pausing for user interaction between each.	
display the contents of all java script files in a folder and save the output to a file	
"display the contents of all the files ending with "".fq"" and perform a control check on this raw sequence of data and display the output to the screen"	
"display the contents of all the files in the current folder which have the name ""dummy"" and discard all the errors while searching"	
"display the contents of all the files in the current folder which have the name ""dummy"" and discard all the errors while searching and save the output to the file tesst.txt"	
display the contents of all the files in the current folder which start with test ( case insensitive search )	
display the contents of all the files in the current folder which start with test (case insensitive search)	
display the contents of all the regular files in the current folder and save the output to out.txt	
display the contents of all the regular/normal files in the entire file system with the name dummy and discard all the errors	
display the contents of all the regular/normal files in the entire file system with the name dummy and discard all the errors and save the output to the files tesst.txt	
display the contents of all the text files in the current directory	
display the contents of all the text files in the current folder and save the output to all.txt.	
display the contents of file 'filename' excluding lines starting with # or empty/space-only lines, waiting for user interaction after each page.	
"display the contents of variable ""a"" converted to lowercase."	
display the count of all directories in a folder excluding hidden files	
display the count of all normal/regular files in current directory	
display the count of all the directories in the current folder	
display the count of all the directories present in a folder	
display the count of all the files in the current folder	
display the count of all the normal/ regular files in the current directory	
display the count of number html files in the current folder	
display the count of number of files in the current folder	
display the count of regular files for which the owner has read and execute permission under 'home/magie/d2' directory tree	
display the count of regular files under 'home/magie/d2' directory tree which have execute permission to all the users	
display the count of regular/normal files in the current folder do not search in sub directories	
"display the count of regular/normal files in the folder ""/path/to/dir"""	
display the count of total number of empty files in the current folder	
display the count of total number of non empty files in the current folder	
display the count of total number of text files in the folder /home/you which have been modified in the last 60*24 hours	
"display the current directory tree except files or directories starting with ""3rd"""	
"display the differences between ""file1.cf"" and ""file2.cf"" side-by-side with a width of 150 characters"	
display the directory name along with the modified time  for all the files /var	
display the directory name along with the modified time for all the files /var	
"display the entire contents of 'file', replacing only the very first instance of ""old"" with ""new""."	
display the entire file system in a tree-like format	
display the file name and creation month of top 11 files in the entire file system	
display the file name and the file type of all the files in the current directory	
display the file size of file '/data/sflow_log' in bytes	
display the file type description of /bin/bash, ie. symbolic link, elf executable, etc.	
display the filename and size of all the files in the file system which are bigger than 20mb	
display the filenames which do not have begin with dot (.)	
display the files along with the size of all the files in the current which are bigger than 100mb	
display the files modified between last 18 to 24 months in the format filename, file size, last access date, modification date and save the output to the file /dir/dir/output.csv	
display the files/directories under current directory tree matching the regex '/$prefix$ypatt' where $prefix and $ypatt expands in the current shell	
"display the first 10 lines of the byte hex dump with no file offset data for ""/bin/ls"""	
"display the first 32 bytes in ""foo"" as printable characters with 16 characters per line"	
display the help of find command	
display the host's ecdsa fingerprint using the md5 hasing algorithm.	
display the host's ecdsa fingerprint using the sha256 hasing algorithm.	
display the html, javascript and text files in the current folder	
display the html, javascript and text files in the current folder (print0 is used to preserve the filenames of all the files which have newlines in their names)	
display the last 3 characters of variable foo.	
display the last colon-separated field of variable 'var'	
"display the last dot-separated field, in this case ""com""."	
display the last slash-separated part of each filename path in file.txt	
"display the last slash-separated part of path, in this case ""example""."	
display the last space-separated field of each line in file.txt	
display the list of all the files in the current directory which have been accssed in the last 500 days exluding hidden files	
display the list of all the normal files excluding hidden files which have been accessed in the last 500 days	
display the list of all the text files present in the current directory excluding the search in certain paths.	
display the long listing detials of all the files in the folder junk which is in home folder.	
display the long listing of all files in /var/log which were modified 60 days or more ago.	
display the manual page of find	
"display the mimetype of ""filename"""	
"display the mount point of a device file ""$path"""	
display the name and size of all the regular/normal files  in the current folder which are bigger than 50mb	
display the name and size of all the regular/normal files  in the var/log folder which are bigger than 100mb	
display the name of all directories in the current folder and do not search in sub directories	
display the name of all directories in the current folder and do not search in sub directories ( mindepth ensures that the current folder name is removed from the output)	
"display the named characters in ""line1\r\nline2"""	
"display the named characters in ""test\rtesting\r\ntester\rtested"""	
display the names without extensions of all the data files in current folder and do not search in sub folders and which have not been changed in the last 60 mins	
display the names without extensions of all the data files in current folder which have not been changed in the last 60 mins	
display the number of lines in all regular files under current directory tree and also show the total count	
"display the number of lines in all the "".c"" files in the current folder"	
display the number of lines in all the files in the current folder	
display the number of lines in all the header files in the current folder	
display the number of lines in all the php files in the current folder	
display the number of regular files under current directory tree	
display the number of sub-directories for all directories under current directory tree, sort them according to the decreasing order of the number and show only the first 10 of them	
"display the output of ""ls"" for an 80 character wide display"	
"display the size of all the files in the folder ""${start_dir}"" which  have been modified in the last ""${days}""*24 hours"	
display the sizes and filepaths of all files/directories sorted in ascending order of size	
display the sizes and filepaths of all files/directories sorted in descending order of size	
display the sizes and filepaths of all files/directories with '.undo' extension under current directory tree	
display the sum of disk used by all the access.log files in /var/www folder	
display the three largest files by size in current folder	
display the three smallest files by size in a folder.	
display the top 20 biggest files in the current folder which are present in the same partition as that of the current folder	
display the total count of all the files/directories with '.old' extension under current directory tree	
display the type of all the regular/normal files in the entire file system	
display the version of find	
display the version of find command	
display top 11 files along with the last access date for all the files in the file system	
display top 500 mp4 and flv files under current directory along with their timestamps in the sorted order of time	
display total apparent size of a file	
display unique names of logged in users	
display users who are currently logged in	
display variable 'var' without leading and trailing whitespace.	
display what flags mount points are mounted with	
"display which package the command ""command"" belongs to in dpkg"	
display who is logged on and what they are doing	
display=`hostname`:0 skype	<MISSING>
displays a tree of all process alongside their command line arguments.	
displays all files in the current directory	
displays all the files in the current folder	
displays calendar for a previous, current and next month.	
displays calendar of a previous, current and next month for december of 2120 year.	
displays details about package 'zsh'.	
displays homebrew’s install path.	
displays info about users currently in system.	
displays information about all network interfaces in system, including inactive ones.	
displays information about grc formula.	
displays line count in 'filename' every 2 seconds.	
displays process tree of 'pppd' process.	
displays process tree of a process with id 'pid', showing parent process and processes id.	
displays status of currently active network interfaces.	
displays the count of of each unique line read from standard input	
displays what package provides value 'zsh'.	
dmidecode | more	<MISSING>
dns lookup of the current host	
do a dry run of renaming file extension '.andnav' to '.tile' for all files/directories under current directory tree	
do not immediately exit the shell if a command fails	
do not mark variables and function which are modified or created for export to the environment of subsequent commands	
do=$(cal -m $mo $yo|awk 'nr>2&&!/^  /{print$1;exit}')	<MISSING>
dofirst= true	<MISSING>
"dofirst="""" true"	<MISSING>
"download ""http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz"", unzip it, and view the output in ""less"""	
"download ""http://www.multitran.ru/c/m.exe?cl=1&s=hello&l1=1"" and convert encoding to ""windows-1251"" and print only printable characters"	
"download ""https://s3.amazonaws.com/sampletest/sample.tar.gz"", unzip it, and untar it replacing filenames with ""old"" to ""new"""	
"download ""louis theroux's la stories"" using rsync over ssh"	
"download 10 web pages ""http://example.com/?page${i}.html"" at most 2 at a time with ""${i}"" ranging from 1 to 10"	
"download 10000 web pages ""https://www.example.com/page{}.html"" 100 at a time where ""{}"" ranges from 1 to 10000"	
"download a file ""http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip"" using cookies ""oraclelicense=accept-securebackup-cookie"""	
"download content from ""http://127.0.0.1:8000"" and output to ""index.html"""	
"download content from ""http://example.com/textfile.txt"" and output to ""textfile.txt"""	
"download content from ""http://page.that.serves.json.com/json/"" and format it as json"	
"download content from ""http://search.twitter.com/search.json?q=node.js"" and format it as json"	
"download contents from  ""http://url"" using a proxy server"	
"download contents from ""http://example.com/"" using a socks5 proxy ""125.119.175.48:8909"""	
"download contents from ""http://www.example.com"" using a proxy server"	
"download contents from ""https://raw.github.com/creationix/nvm/master/install.sh"" and execute"	
"download contents from ""https://www.npmjs.com/install.sh"" and execute"	
"download contents from website ""www.example.com"" using url-encoding ""paramname=param"""	
"download contents of a website ""http://example.com/"""	
"download contents of a website ""https://get.scoop.sh"""	
"download file  ""https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh"" and execute it"	
dpkg -s `which command`	<MISSING>
"dry run making directories in ""/target_folder_root/"" for each "".mov"" file in the current directory tree"	
dsisplay all files inthe current folder	
"dst=`dirname ""${src}""`/`basename ""${src}"" | tr '[a-z]' '[a-z]'`"	<MISSING>
du --max-depth=0 ./directory	<MISSING>
du --summary --human-readable *	<MISSING>
du -a	<MISSING>
du -a $directory | awk '{print $2}' | grep '\.in$'	<MISSING>
du -a --max-depth=1 | sort -n	<MISSING>
du -a -h --max-depth=1 | sort -hr	<MISSING>
du -a . | sort -nr | head	<MISSING>
du -a /var | sort -n -r | head -n 10	<MISSING>
du -b file	<MISSING>
du -b1 --apparent-size /tmp/foo.txt	<MISSING>
du -csxb /path | md5sum -c file	<MISSING>
du -csxb /path | md5sum > file	<MISSING>
du -h --max-depth=0 * | sort -hr	<MISSING>
du -h --max-depth=1 . | sort -n -r	<MISSING>
du -h your_directory	<MISSING>
du -hs /path/to/directory	<MISSING>
du -hsx * | sort -rh | head -10	<MISSING>
du -ks * | sort -n -r	<MISSING>
du -ksh * | sort -n -r	<MISSING>
du -s $i | read k	<MISSING>
du -s * | sort -n	<MISSING>
du -s --block-size=m /path/to/your/directory/	<MISSING>
du -s <file>	<MISSING>
du -sb	<MISSING>
du -sb /data/sflow_log | cut -f1	<MISSING>
du -sh *	<MISSING>
du -sh */ | sort -n	<MISSING>
du -sk $(find . -type d) | sort -n -k 1	<MISSING>
du -smc * | sort -n	<MISSING>
du | awk '{print $2}'	<MISSING>
"dump ""/dev/ttysomething"" in both hex and text"	
"dump ""a\0b"" as hexadecimal bytes"	
"dump ""file"" as ascii characters"	
"dump ""filename"" as 2 byte wide hexadecimal and printable characters"	
"dump ""filename"" as 2 byte wide hexadecimal numbers"	
"dump ""input_file"" as a 2 byte hexadecimal, character, and octal value and view the contents in ""less"""	
"dump ""mydb"" via ""pg_dump"" and compress to ""mydb.sql.gz"""	
"dump ""testscript.sh"" as 2 byte hexadecimale, printable characters, and octal values"	
dump a mysql database over a compressed ssh tunnel and use it as input to mysql	
"dump all mysql databases over an ssh tunnel to ""user@yoursever.com"" and use it as input to mysql"	
"dump the character output of ""echo 'hi'"""	
"dump the character output of 'echo `echo ""ho ho ho""`'"	
duplicate directory tree under /mnt/usr/lib to /usr but creating symlinks to files instead of copying them.	
dynamically defines tmux session name to attach to.	
"echo ""   worda wordb wordc   "" | sed -e 's/^[ \t]*//' | sed -e 's/[ \t]*$//'"	<MISSING>
"echo "" ${arr[@]/%/$'\n'}"" | column"	<MISSING>
"echo "" ${arr[@]/%/$'\n'}"" | sed 's/^ //' | column"	<MISSING>
"echo "" rdbms exit code : $rc  ""     | tee -a ${log_file}"	<MISSING>
"echo ""$(basename $(pwd))"""	<MISSING>
"echo ""$(comm -12 <(echo ""$a"" | fold -w1 | sort | uniq) <(echo ""$b"" | fold -w1 | sort | uniq) | tr -d '\n')"""	<MISSING>
"echo ""$(date +%h:%m:%s): done waiting. both jobs terminated on their own or via timeout; resuming script"""	<MISSING>
"echo ""$(date): "" $line"	<MISSING>
"echo ""$(dirname $(readlink -e $f))/$(basename $f)"""	<MISSING>
"echo ""$(hostname):$(cat /sys/block/sda/size)"""	<MISSING>
"echo ""$(ifconfig)"""	<MISSING>
"echo ""$(pwd)/$(basename ""$1"")"""	<MISSING>
"echo ""$1"" | od -xcb"	<MISSING>
"echo ""$1""| read -a to_sort"	<MISSING>
"echo ""$a"" | awk '{print tolower($0)}'"	<MISSING>
"echo ""$b"" | grep --only-matching ""[$a]"" | xargs | tr --delete ' '"	<MISSING>
"echo ""$b"" | grep -o ""[$a]"" | tr -d '\n'"	<MISSING>
"echo ""$commands""$'\n'""$aliases"" | sort -u"	<MISSING>
"echo ""$data"" | cut -f2 -d$'\n'"	<MISSING>
"echo ""$direc"" | od -c"	<MISSING>
"echo ""$f"" | grep -eo '[0-9]+[.]+[0-9]+[.]?[0-9]?' | cut -d. -f1"	<MISSING>
"echo ""$f"" | grep -eo '[0-9]+[.]+[0-9]+[.]?[0-9]?' | cut -d. -f2"	<MISSING>
"echo ""$f"" | grep -eo '[0-9]+[.]+[0-9]+[.]?[0-9]?' | cut -d. -f3"	<MISSING>
"echo ""$file"" | cut -d'.' --complement -f2-"	<MISSING>
"echo ""$file"" | cut -d'.' -f1"	<MISSING>
"echo ""$file"" | cut -d'.' -f2"	<MISSING>
"echo ""$file""|rev|cut -d""."" -f3-|rev"	<MISSING>
"echo ""$line"" | column -t"	<MISSING>
"echo ""$list"" | uniq -c"	<MISSING>
"echo ""$name"" | cut -d'.' -f2-"	<MISSING>
"echo ""$newfile"" | sudo tee /etc/apt/sources.list"	<MISSING>
"echo ""$opt"" | tr -d '""'"	<MISSING>
"echo ""$path"" | rev | cut -d""/"" -f1 | rev"	<MISSING>
"echo ""$pwd"" | sed 's!.*/!!'"	<MISSING>
"echo ""$queue"" | xargs -i'{}' find {} -mindepth 1 -maxdepth 1 $*"	<MISSING>
"echo ""$queue"" | xargs -i'{}' find {} -mindepth 1 -maxdepth 1 -type d"	<MISSING>
"echo ""$string"" | nl -ba -s') '"	<MISSING>
"echo ""$string"" | sed -e 's/^[ \t]*//' | sed -e 's/[ \t]*$//'"	<MISSING>
"echo ""$url"" | cut -d'/' -f1-3"	<MISSING>
"echo ""$url"" | cut -d'/' -f3"	<MISSING>
"echo ""$url"" | cut -d'/' -f4-"	<MISSING>
"echo ""$url"" | cut -d':' -f1"	<MISSING>
"echo ""$usertab""| grep -ve '^#|^$|no crontab for|cannot use this program'"	<MISSING>
"echo ""$var"" | rev | cut -d: -f1 | rev"	<MISSING>
"echo ""${depsalastmodified[$i]}"" | tr -cd '[[:digit:]]' | od -c"	<MISSING>
"echo ""${line}"" | egrep --invert-match '^($|\s*#|\s*[[:alnum:]_]+=)'"	<MISSING>
"echo ""( `date -d $b +%s` - `date -d $a +%s`) / (24*3600)"" | bc -l"	<MISSING>
"echo ""* * * * * script"" | crontab -"	<MISSING>
"echo ""* * * * * touch $(pwd)/washere1"" | crontab"	<MISSING>
"echo ""0 1 * * * /root/test.sh"" | tee -a /var/spool/cron/root"	<MISSING>
"echo ""0a.00.1 usb controller some text device 4dc9"" | rev | cut -b1-4 | rev"	<MISSING>
"echo ""1 1 2 2 2 5"" | tr ' ' $'\n' | grep -c 2"	<MISSING>
"echo ""123 123 123"" | grep -o 123 | wc -l"	<MISSING>
"echo ""1\n2\n3\n4\n5"" | paste -s -d, /dev/stdin"	<MISSING>
"echo ""30 * * * * touch $(pwd)/washere2"" | crontab"	<MISSING>
"echo ""<line>"" | cut -d "";"" -f 1"	<MISSING>
"echo ""<line>"" | cut -d "";"" -f 2"	<MISSING>
"echo ""[some repository]"" | sudo tee -a /etc/apt/sources.list"	<MISSING>
"echo ""`hostname -i` file.txt"" | xargs myscript.rb"	<MISSING>
"echo ""`pwd -p`"""	<MISSING>
"echo ""a b c d e"" | tr ' ' '\n' | tail -1"	<MISSING>
"echo ""a"" | md5sum"	<MISSING>
"echo ""a,b""|sed 's/,/\r\n/'"	<MISSING>
"echo ""a,b,c"" | tr '\n' ',' | tac -s "","" | sed 's/,$/\n/'"	<MISSING>
"echo ""a.txt b.txt c.txt d.txt z.txt"" | xargs touch"	<MISSING>
"echo ""aaaa eeee bbbb ffff cccc""|tr ' ' '\n'|tac|tr '\n' ' '"	<MISSING>
"echo ""abc-def-ghi-jkl"" | rev | cut -d- -f-2 | rev"	<MISSING>
"echo ""abcdefg"" | fold -w1"	<MISSING>
"echo ""australia/adelaide"" | sudo tee /etc/timezone"	<MISSING>
"echo ""bla@some.com;john@home.com"" | awk -f';' '{print $1,$2}'"	<MISSING>
"echo ""bla@some.com;john@home.com"" | sed -e 's/;/\n/g'"	<MISSING>
"echo ""cannot acquire lock - already locked by $(cat ""$lockfile"")"""	<MISSING>
"echo ""command"" | ssh user@host"	<MISSING>
"echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" | tee -a /etc/apt/sources.list"	<MISSING>
"echo ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" | tee -a /etc/apt/sources.list"	<MISSING>
"echo ""df -k;uname -a"" | ssh 192.168.79.134"	<MISSING>
"echo ""dirname/readlink: $(dirname $(readlink -f $0))"""	<MISSING>
"echo ""dirname: `dirname ""$0""`"""	<MISSING>
"echo ""dirname: `dirname $0`"""	<MISSING>
"echo ""error"" 1>&2 | tee -a log"	<MISSING>
"echo ""error"" | tee"	<MISSING>
"echo ""error"" | tee -a log 1>&2"	<MISSING>
"echo ""fifo forever"" | cat - fifo | tee fifo"	<MISSING>
"echo ""filename.gz""     | sed 's/^/./' | rev | cut -d. -f2- | rev | cut -c2-"	<MISSING>
"echo ""foo.tar.gz"" | rev | cut -d""."" -f1 | rev"	<MISSING>
"echo ""groups: [ $(groups myuser | sed -e 's/.\+\s\+:\s\+\(.\+\)/\1/g' -e 's/\(\s\+\)/, /g') ]"""	<MISSING>
"echo ""he likes cats, really?"" | fold -w1 | sort -u"	<MISSING>
"echo ""hello `sleep 2 &`"""	<MISSING>
"echo ""hello world"" | echo test=$(cat)"	<MISSING>
"echo ""hello world"" | tee >(wc)"	<MISSING>
"echo ""hello, world"" | tee /tmp/outfile"	<MISSING>
"echo ""hey hey, we're the monkees"" | (exec 1>&3 && tee /proc/self/fd/3 | gzip --stdout > my_log.gz)"	<MISSING>
"echo ""hey hey, we're the monkees"" | tee /dev/tty | gzip --stdout > my_log.gz"	<MISSING>
"echo ""hey hey, we're the monkees"" | tee >(gzip --stdout > my_log.gz)"	<MISSING>
"echo ""http://www.suepearson.co.uk/product/174/71/3816/"" | cut -d'/' -f1-3"	<MISSING>
"echo ""luke;yoda;leila"" | tr "";"" ""\n"""	<MISSING>
"echo ""mpc-1.0.1.tar.gz"" | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//'"	<MISSING>
"echo ""myname=\""test\"""" | sudo tee --append $config"	<MISSING>
"echo ""number files in search path with extension:"" $(ls -1 ""${searchpath}""/*.""${extension}"" | wc -l)"	<MISSING>
"echo ""on"" | tee /sys/bus/usb/devices/usb*/power/level"	<MISSING>
"echo ""password"" | md5sum"	<MISSING>
"echo ""some console and log file message"" | tee /dev/fd/3"	<MISSING>
"echo ""some output"" | sudo -u some_user tee /some/path/some_file"	<MISSING>
"echo ""su whoami"" |ssh remotehost"	<MISSING>
"echo ""the current default java is $(readlink --canonicalize `which java`)"""	<MISSING>
"echo ""the quick brown fox jumps over the lazy dog"" | grep -o . | sort | uniq -c | sort -nr"	<MISSING>
"echo ""the script you are running has basename `basename $0`, dirname `dirname $0`"""	<MISSING>
"echo ""this is   a sentence."" | tr -s "" "" ""\012"""	<MISSING>
"echo ""total generated: $(echo ""$generated_ports"" | sort | uniq | wc -l)."""	<MISSING>
"echo ""welcome $(whoami)!"""	<MISSING>
"echo ""welcome `whoami`!"""	<MISSING>
"echo ""your string here""| tr ' ' '\n' | tail -n1"	<MISSING>
echo $(( $(... | paste -sd+ -) ))	<MISSING>
echo $(( ( $(date -ud '2003-08-02 17:24:33' +'%s') - $(date -ud '2003-04-21 22:55:02' +'%s') )/60/60/24 )) days	<MISSING>
echo $(($(date +%s) / 60 / 60 / 24))	<MISSING>
echo $(/usr/sbin/arp $(hostname) | awk -f'[()]' '{print $2}')	<MISSING>
"echo $(basename ""$1"")"	<MISSING>
echo $(basename $(dirname $(dirname $pathname)))	<MISSING>
echo $(basename $(dirname $pathname))	<MISSING>
echo $(basename $(readlink -nf $0))	<MISSING>
echo $(basename /foo/bar/stuff)	<MISSING>
echo $(cat /proc/$$/cmdline)	<MISSING>
"echo $(cd $(dirname ""$1"") && pwd -p)/$(basename ""$1"")"	<MISSING>
"echo $(date) ""0"" | tee -a log.csv"	<MISSING>
"echo $(date) ""1"" | tee -a log.csv"	<MISSING>
echo $(date) doing stuff	<MISSING>
echo $(dirname $(readlink -m $bash_source))	<MISSING>
echo $(false; echo foo)	<MISSING>
echo $(find / -type f -perm -002) has world write permissions	<MISSING>
echo $(ls $(pwd))	<MISSING>
echo $(ls -l $(which bash))	<MISSING>
echo $(pwd)/$filename	<MISSING>
echo $(readlink -f /dev/disk/by-uuid/$1) is mounted	<MISSING>
echo $(readlink -f /dev/disk/by-uuid/$1) is not mounted	<MISSING>
"echo $(seq 254) | xargs -p255 -i% -d"" "" ping -w 1 -c 1 192.168.0.% | grep -e ""[0-1].*?:"""	<MISSING>
echo $(yes % | head -n3)	<MISSING>
echo $(yes image.png | head -n10)	<MISSING>
echo $[4/0] || exit $?	<MISSING>
echo $b|grep -q $a	<MISSING>
echo $c | crontab	<MISSING>
echo $filename | egrep -o '[[:digit:]]{5}' | head -n1	<MISSING>
echo $filename | rev | cut -f 2- -d '.' | rev	<MISSING>
echo $foo | rev | cut -c1-3 | rev	<MISSING>
echo $j | read k	<MISSING>
echo $line | cut -c2- | md5sum	<MISSING>
echo $modules | column -t | fold | column -t	<MISSING>
echo $mount_opts | tr , \\\n | grep '^acl$' -q	<MISSING>
echo $name | tr -c -d 0-9	<MISSING>
echo $path | awk -f: -f rem_dup.awk | paste -sd:	<MISSING>
echo $path | rev | cut -d'/' -f-3 | rev	<MISSING>
echo $path | rev | cut -d'/' -f4- | rev	<MISSING>
echo $path | tr ':' '\n' | xargs -i {} find {} -maxdepth 1 -type f -perm '++x'	<MISSING>
echo $string | cut -d';' -f1	<MISSING>
echo $string | cut -d';' -f2	<MISSING>
echo $string | rev | cut -d ' ' -f -20	<MISSING>
"echo $var | awk '{gsub(/^ +| +$/,"""")}1'"	<MISSING>
echo ${filename%.*}	<MISSING>
echo ',s/foo/bar/g; w' | tr \; '\012' | ed -s file.txt	<MISSING>
echo '1/2 [3] (27/03/2012 19:32:54) word word word word 4/5' | sed -e 's/(.*)//' -e 's/[^0-9]/ /g' | column -t	<MISSING>
echo '1234567890  *' | rev | cut -c 4- | rev	<MISSING>
echo '2-1' |sudo tee /sys/bus/usb/drivers/usb/unbind	<MISSING>
echo '2-1.1.1'|sudo tee /sys/bus/usb/drivers/usb/unbind	<MISSING>
echo 'abcdefg'|tail -c +2|head -c 3	<MISSING>
echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list	<MISSING>
echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list > /dev/null	<MISSING>
"echo 'echo ""bash version: ${bash_version}""' | ssh -q localhost bash"	<MISSING>
echo 'ee' | tee /dev/stderr | foo	<MISSING>
echo 'ee' | tee /dev/tty | foo	<MISSING>
echo 'ee' | tee >(foo)	<MISSING>
echo 'hello world!' | sed $'s/world/\e[1m&\e[0m/'	<MISSING>
echo 'hello, world' | cat	<MISSING>
echo 'hi' | od -c	<MISSING>
echo 'ls -hal /root/ > /root/test.out' | sudo bash	<MISSING>
echo 'maps.google.com' | rev | cut -d'.' -f 1 | rev	<MISSING>
echo 'some_file_name' | cpio -p --owner someuser:somegroup destination_directory	<MISSING>
echo 'someletters_12345_moreleters.ext' | cut -d'_' -f 2	<MISSING>
echo 'string to be hashed' | md5	<MISSING>
echo 'test/90_2a5/windows' | xargs dirname | xargs basename	<MISSING>
echo 'your, text, here' | fold -sw 70	<MISSING>
echo *.txt | xargs gzip -9	<MISSING>
"echo -e  'y\n'|ssh-keygen -q -t rsa -n """" -f ~/.ssh/id_rsa"	<MISSING>
"echo -e ""$(tz=gmt+30 date +%y-%m-%d)\n$(tz=gmt+20 date +%y-%m-%d)"" | grep -v $(date +%y-%m-%d) | tail -1"	<MISSING>
"echo -e ""$correctfilepathandname"" | xargs touch"	<MISSING>
"echo -e ""1\n2\n3"" | sed 's/.*$/&<br\/>/'"	<MISSING>
"echo -e ""<line>"" | sed 's:\s\+:\t:g' | cut -f2"	<MISSING>
"echo -e ""\n/usr/local/boost_1_54_0/stage/lib"" | sudo tee -a /etc/ld.so.conf"	<MISSING>
"echo -e ""\n\n\n"" | ssh-keygen -t rsa"	<MISSING>
"echo -e ""a\nb\ncccccccccccc\nd"" | paste - - | column -t"	<MISSING>
"echo -e ""alert - shell access on:' `date` `who` '\n\n' `whois $(who | cut -d'(' -f2 | cut -d')' -f1)`"""	<MISSING>
"echo -e ""http/1.1 200 ok\n\n $(date)"""	<MISSING>
"echo -e ""icon\\r"" | xargs touch"	<MISSING>
"echo -e ""length(foo)==$(echo -ne ""${foo}"" | wc -m)"""	<MISSING>
"echo -e ""length(foo_no_external_space)==$(echo -ne ""${foo_no_external_space}"" | wc -m)"""	<MISSING>
"echo -e ""length(foo_no_lead_space)==$(echo -ne ""${foo_no_lead_space}"" | wc -m)"""	<MISSING>
"echo -e ""length(foo_no_trail_space)==$(echo -ne ""${foo_no_trail_space}"" | wc -m)"""	<MISSING>
"echo -e ""length(foo_no_whitespace)==$(echo -ne ""${foo_no_whitespace}"" | wc -m)"""	<MISSING>
"echo -e ""line1\r\nline2"" | awk '{ print $0; }' | od -a"	<MISSING>
"echo -e ""line1\r\nline2"" | od -a"	<MISSING>
"echo -e ""onboot=\""yes\""\nipaddr=10.42.84.168\nprefix=24"" | sudo tee -a /etc/sysconfig/network-scripts/ifcfg-eth4"	<MISSING>
"echo -e ""test1\ntest2\ntest3"" |tr -d '\n' |grep ""test1.*test3"""	<MISSING>
"echo -e ""test\rtesting\r\ntester\rtested"" | awk '{ print $0; }' | od -a"	<MISSING>
"echo -e ""testing\r\ntested_hello_world"" | awk -v rs=""_"" '{ print $0; }' | od -a"	<MISSING>
"echo -e ""testing\r_tested"" | awk -v rs=""_"" '{ print $0; }' | od -a"	<MISSING>
"echo -e {{a..c},ch,{d..l},ll,{m,n},ñ,{o..z}}""\n"" | nl"	<MISSING>
"echo -e {{a..n},ñ,{o..z}}""\n"" | nl"	<MISSING>
"echo -en ""${line:0:11}"" ""\t"" $(md5sum ""${line:12}"") ""\0"""	<MISSING>
echo -en '111 22 3\n4 555 66\n' | column -t | sed 's/ \([0-9]\)/\1/g'	<MISSING>
echo -en '111 22 3\n4 555 66\n' | tr ' ' '\t'	<MISSING>
"echo -n """" | md5sum"	<MISSING>
"echo -n ""hello"" | od -a n -t x1"	<MISSING>
"echo -n ""logdir"" | md5sum - | awk '{print $1}'"	<MISSING>
"echo -n ""yourstring"" |md5sum"	<MISSING>
echo -n $(pwd)	<MISSING>
echo -n $(pwd) | pbcopy	<MISSING>
echo -n $line | od -x	<MISSING>
echo -n '' | md5	<MISSING>
echo -n 'examplestring' | md5sum	<MISSING>
echo -n *checking partition permission* hostname=$(hostname) lastchecked=$(date)	<MISSING>
echo -n -e '\x61' | md5sum	<MISSING>
echo -n `hostname`	<MISSING>
echo -n hi | md5	<MISSING>
echo -n teststring | gzip -1 | pigz -lv	<MISSING>
"echo -n teststring | gzip -1 | tail -c 8 | head -c 4 | hexdump -e '1/4 ""%08x"" ""\n""'"	<MISSING>
echo -n | md5sum	<MISSING>
"echo -ne ""$var1"" | xxd -r -p | od -c"	<MISSING>
"echo -ne ""welcome $(whoami)!\n"""	<MISSING>
"echo -ne ""welcome `whoami`!\n"""	<MISSING>
echo -ne 'some random\nbytes' | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g'	<MISSING>
echo ./fs*/* | xargs -n 1 cp test	<MISSING>
echo /path/to/vm.vmwarevm/vm.vmx | xargs dirname	<MISSING>
echo 0a.00.1 usb controller some text device 4dc9 | rev | cut -b1-4 | rev	<MISSING>
echo 123 | tee >(tr 1 a)  | tr 1 b	<MISSING>
echo 12345 | rev	<MISSING>
echo 127.0.0.1 ad.doubleclick.net | sudo tee -a /etc/hosts	<MISSING>
echo 35 53 102 342|tr ' ' '\n'|tac|tr '\n' ' '	<MISSING>
"echo 595a | awk -niord '$0=chr(""0x""rt)' rs=.. ors= | od -tx1c"	<MISSING>
echo 798|rev	<MISSING>
echo 987654321 | rev | cut -c 4- | rev	<MISSING>
echo <(true)	<MISSING>
echo <(yes)	<MISSING>
"echo `basename ""$filename""`"	<MISSING>
echo `cat $file | head -n 100 | wc -c` / 1024 | bc -l	<MISSING>
echo `clear`	<MISSING>
"echo `date +""%a %x %x""` `hostname`"	<MISSING>
echo `date +%s`/86400 | bc	<MISSING>
echo `date -v-1d +%f`	<MISSING>
echo `date` `hostname`	<MISSING>
"echo `echo ""ho ho ho""` | od -c"	<MISSING>
"echo `ls` ""`cal`"""	<MISSING>
echo `pwd`/`dirname $0`	<MISSING>
echo `sed -e 's/$/\ |\ /g' file`	<MISSING>
echo `seq $start $end`	<MISSING>
echo `uname -a | awk '{print $2}'`	<MISSING>
echo `whoami`	<MISSING>
"echo `whoami` `stat -c %i ""/home""`"	<MISSING>
echo aa | od -t x1	<MISSING>
echo aa | wc -l | tr -d ' '	<MISSING>
echo abc | od -a n -v -t x1 | tr -d ' \n'	<MISSING>
echo dir1 dir2 dir3 | xargs -n 1 cp file1	<MISSING>
echo dirname: $(dirname $mystring)	<MISSING>
echo each command before running	
echo ee | tee /dev/pty/2 | foo	<MISSING>
echo find . -atime +7 -o -size +`expr 10 \* 1024 \* 2` -print	<MISSING>
echo foo | read bar	<MISSING>
echo foo | readlink /proc/self/fd/0	<MISSING>
echo foo | readlink /proc/self/fd/1	<MISSING>
echo foo | tee >(sha1sum) >(md5sum)	<MISSING>
echo gzip. $( gzip | wc -c )	<MISSING>
echo hello `whoami`	<MISSING>
echo hello world | od -t x1 -t c	<MISSING>
echo hello world | tee  >(awk '{print $2, $1}')	<MISSING>
echo hello world | tee /dev/tty | awk '{print $2, $1}'	<MISSING>
echo hostname=$(hostname) lastchecked=$(date)	<MISSING>
echo i am $(whoami) and the program named ls is in $(which ls).	<MISSING>
echo myvar | grep -oe '/[^/]+:' | cut -c2- | rev | cut -c2- | rev	<MISSING>
echo orange | fold -w 1	<MISSING>
echo password | su user1 -c 'command'	<MISSING>
echo pwd: `pwd`	<MISSING>
echo something | read param	<MISSING>
echo suspend | sudo tee /sys/bus/usb/devices/usb3/power/level	<MISSING>
echo t1_t2_t3_tn1_tn2.sh | rev | cut -d_ -f3- | rev	<MISSING>
echo this dir: `dirname $bash_source`	<MISSING>
echo {1..9}: 10 | tr -d ' '	<MISSING>
echo | ssh-keygen -p ''	<MISSING>
edit current user's cron job list with editor specified by editor environment variable, or default /usr/bin/editor if editor is not set.	
edit the cron job list for user 'wwwrun' using default editor specified by the editor environment variable, or /usr/bin/editor if no default editor is specified.	
"egrep -r ""word-1|word-2” directory-path"	<MISSING>
egrep -v '^\s*#' /etc/launchd.conf | launchctl	<MISSING>
"egrep -w -r ""word-1|word-2” directory-path"	<MISSING>
eliminates partially duplicate lines by column, keeping the last occurrence	
"email an alert message containing the ip address of the ssh connection with attachment ""tmpfile"" to ""user@example.com"""	
"enable extglob expansion and create symbolic links in ""bar2"" directory to all files located in ""bar1"" directory that are not directory and do not have"".cc"" filename extension"	
enable history and history expansion within a script	
enable history expansion in a script	
enable history in a script	
enables 'dotglob' shell option.	
enables 'globstar' (recursive globbing) shell option.	
enables 'nullglob' shell option.	
enables shell option 'autocd'.	
enables shell option 'cdable_vars'.	
enables shell option 'cmdhist'.	
enables shell option 'compat31'.	
enables shell option 'direxpand'.	
enables shell option 'expand_aliases'.	
enables shell option 'failglob'.	
enables shell option 'histappend'.	
enables shell option 'lastpipe'.	
enables shell option 'lithist'.	
enables shell option 'nocaseglob'.	
enables shell option 'nocasematch'.	
enables shell option 'nullglob'.	
enables shell option 'progcomp'.	
enables shell option 'promptvars'.	
enables shell options 'expand_aliases', 'extglob', 'xpg_echo'.	
enables shell options 'extglob' and 'progcomp'	
enables shell options 'nullglob' and 'dotglob'.	
end_abs=`pwd -p`	<MISSING>
ensure all 5 of uedp0{1..5}_20120821.csv files exist, creating empty files for any missing ones (updates the file's timestamps)	
env $(cat .env | xargs) rails	<MISSING>
env - `cat ~/cronenv` /bin/sh	<MISSING>
env - scriptname	<MISSING>
env -i	<MISSING>
env -i ./makeall.sh	<MISSING>
env -i bash --norc	<MISSING>
env -i perl -v	<MISSING>
env -u foo somecommand	<MISSING>
env `cat xxxx` otherscript.sh	<MISSING>
env display=`hostname`:0 skype	<MISSING>
"env | awk -f ""="" '{print $1}' | grep "".*x.*"""	<MISSING>
"env | awk -f= '/[a-za-z_][a-za-z_0-9]*=/ { if (!system(""[ -n \""${"" $1 ""+y}\"" ]"")) print $1 }' | sort | uniq"	<MISSING>
env | awk -f= '{if($1 ~ /x/) print $1}'	<MISSING>
"env | grep "".*x.*"""	<MISSING>
env | grep '^\(go\|home=\|path=\)'	<MISSING>
env | grep '^\(gobin\|path=\)'	<MISSING>
env | grep '^goroot'	<MISSING>
env | grep '^variable='	<MISSING>
env | grep -i shell	<MISSING>
env | grep ^path	<MISSING>
env | grep dualcase	<MISSING>
"env | grep ipo | awk 'begin {fs=""=""} ; { print $1 } '"	<MISSING>
env | grep name	<MISSING>
env | sed 's/;/\\;/g'	<MISSING>
"env | sed -n /""$username""/p"	<MISSING>
env | uniq | sort -r | grep path	<MISSING>
"erase user's cron jobs and add one cron job to run ""script"" every minute."	
error - need to add -a or -r for recursive copy	
error - probably means -pgodt (capital d)	
error - this is for dos	
error - will overwrite the executable if it's not a symlink.	
"eval ""`find -type f -name ""*.htm"" |awk -f/ '{print ""cp "" $0 "" "" $2 ""-"" $3 ""-"" $4 ""-"" substr($5,5) "";"" }'`"""	<MISSING>
"evaluate the output of recursively changing the owner and group of ""/data/*"" to ""mongodb"""	
examines the path expanded by variable $filename to see if it is a symlink and if so, sets source_dir to the location of the link itself.	
exchanges the top two directories in the dirs stack.	
exclude ./dirtoexclude, using yui compress all file under currect folder	
exclude directory from find . command	
exclude vendor and app/cache dir, and search name which suffixed with php	
excute script makeallsizes with all '*.jpg' file under originals directory in 2 processes parallelly	
excute script makeallsizes with all '*.jpg' file under originals directory.	
"exec /usr/bin/find ""$@"""	<MISSING>
exec 1 2>&1 | tee ${log_file}	<MISSING>
exec 1 | tee ${log_file}	<MISSING>
exec 2 | tee ${log_file}	<MISSING>
exec > >(tee -a $home/logfile) 2>&1	<MISSING>
"execute ""${md5}"" on all files found under ""${1}"", numerically sort the results, and save to variable ""data"""	
"execute ""./my_script.sh"" every 3 seconds and highlight the differences in successive runs"	
"execute ""/some/directory/myprogram"" ignoring output in the background on target machine ""user@target"""	
"execute ""/wherever/whatever"" in the background on target machine ""user@host"""	
"execute ""1"" and write output to standard output and file ""${log_file}"""	
"execute ""1"" and write standard output and error to standard output and file ""${log_file}"""	
"execute ""2"" and write output to standard output and file ""${log_file}"""	
"execute ""awk -f, '$1 ~ /f$/'"" on contents of ""file.gz"""	
"execute ""bash -c 'python -m unittest discover |& pyrg'"" in a shell with color support every second"	
"execute ""bash -c your_script"" every 2 seconds"	
"execute ""cat /tmp/iostat.running"" every 10 seconds"	
"execute ""cd ${remote_path}; mkdir -p $i"" on host ""$server"" as user ""$user"" and connect standard input to ""/dev/null"""	
"execute ""cd /some/directory/myprogram"" in the background on target machine ""user@target"" and write standard output and standard error to foo.out and foo.err"	
"execute ""chown -r ask:ask /www/askapache.com"" in the background on server ""askapache"""	
"execute ""chown -r ask:ask /www/askapache.com"" in the background on server ""askapache"" with a niceness of 19"	
"execute ""date"" every second"	
"execute ""dropbox-cli status"" every second"	
"execute ""du -s path"" every 300 seconds"	
"execute ""elinks -dump file.html"" every 2 seconds"	
"execute ""generate_commands"" and run the resulting commands in the current shell."	
"execute ""killall -usr1 dd"" every minute"	
"execute ""ls -l data.temp"" every 2 seconds"	
"execute ""ls -l"" every 0.5 seconds"	
"execute ""ls -l"" every 2 seconds"	
"execute ""ls -l"" every 2 seconds and highlight the differences in runs"	
"execute ""ls -l"" on host ""something"" as user ""root"""	
"execute ""ls"" every 2 seconds"	
"execute ""ls"" every second"	
"execute ""lynx -dump http://dslrouter/stats.html"" every 10 seconds"	
"execute ""myfile"" on all .ogv files from the current directory tree"	
"execute ""myfile"" on all regular files from the current directory tree"	
"execute ""myscript.rb"" with the first argument as the current host name and the second ""file.txt"""	
"execute ""mysqladmin -u root -pxxxxx processlist | grep tablename"" every second and append output to ""/root/plist.log"""	
"execute ""ps -c java -o pcpu,state,cputime,etimes"" every second"	
"execute ""ps -mo pid,tid,%cpu,psr -p \`pgrep binary-name\`"" every half second displayed with no title and highlighting the differences"	
"execute ""ps -mo pid,tid,%cpu,psr -p \`pgrep firefox\`"" every half second displayed with no title and highlighting the differences"	
"execute ""ps aux | grep php"" every second"	
"execute ""script.awk"" on ""file"" and format the output as a table"	
"execute ""sleep 30; touch nohup-exit"" in the background on target machine ""remote"""	
"execute ""some_script"" on all files in the current directory tree"	
"execute ""ssh raptor.lan hostname\; uptime"" on server ""genja.org"""	
"execute ""tail file | grep pattern"" every 2 seconds"	
"execute ""utility"" for each file in the current directory tree passing the pathname as a command line argument"	
"execute ""wget -qo-  http://fake.link/file.txt | tail"" every 5 seconds"	
"execute ""wget -qo-  http://fake.link/file.txt"" every 5 seconds"	
"execute ""xbacklight -set 0% && sleep 20 && xbacklight -set 100%"" every 1200 seconds"	
"execute ""your_script.sh"" passing all ""sqlite.db"" files from the current directory tree as arguments to it"	
"execute '/usr/bin/fbi -noverbose -a -t 4 -u `find -type f | egrep -i ""(jpg|bmp|png|gif)$""`' every 300 seconds and display without title"	
"execute 'bash -c ""python -m unittest discover |& pyrg""' every second and display with color support"	
"execute 'echo -e ""\033[31mhello world\033[0m""' every without color support 2 seconds"	
"execute 'echo -e ""\thello world""' every 2 seconds"	
execute 'python -m unittest discover 2>&1 | pyrg' every second and display with color support	
execute 'tail -f -n 50 mylogfile.txt | ccze' every 5 seconds and display with color support	
execute 'top -n1 | grep mysql' every 2 seconds and highlight the differences between runs	
execute 'tput setaf 1; echo foo' with color support every 2 seconds	
execute /usr/bin/find with $* arguments	
execute /usr/bin/find with $* arguments where current directory is the first argument	
execute `echo' for each file found	
"execute `find -type f | egrep -i ""(jpg|bmp|png|gif)$""` every 300 seconds and display without title"	
execute `somecommand' on each file from the current directory tree with the environment variable f set to the filename	
execute a command in 10 seconds	
"execute all arguments to a shell script and write the output to console and ""$file"""	
"execute all commands in ""/path/to/commands-inc.sh"" on server ""remote"" as user ""user"""	
"execute all commands in ""commands-to-execute-remotely.sh"" on server ""blah_server"""	
"execute awk command '{ ...}' on compressed file ""file"""	
"execute awk script ""script.awk"" on ""file2"" and ""file1"" and format output as a table"	
"execute awk script ""script.awk"" that exists in ""$path"" with argument ""arg1"""	
"execute awk script ""script.awk"" with 2 arguments both ""file.txt"" and format the output as a table"	
"execute command ""$cmd_str"" on host ""$server"" as user ""$user"""	
"execute command ""tssh myboxes n"" where n ranges from 0 to 20"	
"execute command ""who"" when key ""\ew"" is pressed"	
execute command for all files and directories under the current directory tree	
execute command on all files and directories in the current directory tree	
"execute commands from ""$file"" in the current shell."	
"execute find with ""$@"" arguments"	
execute md5sum command on files found by the find command	
"execute python script ""test.py"" with ""ld_preload=./linebufferedstdout.so"" and write the output to console and append to ""test.out"""	
"execute script ""your_command_here"" for each file from directory tree /target/path passing the filename as an argument to the script"	
"execute script ""your_command_here"" passing all regular files from directory tree /target/path as arguments to it"	
execute script 'truncate.sh' on all files in the /path/to/files directory tree	
execute script 'truncate.sh' on all regular files in the current directory tree	
"execute script /path/to/filecopy.sh passing all jpg files found under the ""$source"" directory and below as arguments"	
execute script /tmp/echoargs on all files from the /tmp/foo directory tree	
execute script do1.sh on each regular file from the /etc directory tree	
execute shell script with find comamnd	
execute the 'echo' command on each file from the current directory tree individually	
execute the `convert' command for every .jpg file in the current directory	
execute the `file' command on all regular files from the current directory tree and save the output as /tmp/filetypes.log	
execute the file utility for each file found under /etc and below	
"execute the file utility for each file found under /etc or below that contains ""test"" in its pathname"	
"execute the first instance of ""parallel"" found in the path, passing it all parameters received by the script/function"	
"execute the ruby script ""genrc.rb"" which will output a filename, and interpret this file in the current shell."	
execute the ssh command and kill it after 5 seconds	
"execute zcat on every file matching ""*20120805.gz"" in the current directory and subdirectories"	
executes 'cd /' in a subshell created by a pipeline of built-in function 'true'.	
"executes 'echo ""$ret""' in a subshell that is opened by command 'true'."	
executes 'sleep 10' in a subshell created by a pipeline of built-in function 'true'.	
executes 'true'. then makes 'xargs' fail executing 'false' and return 123 exit code.	
executes command 'cd ~/server' in an opened tmux session 'cf'.	
executes tmux commands that are stored in the '$tmux_command' variable, and then attaches to the tmux session.	
exit	<MISSING>
exit -1	<MISSING>
exit 1	<MISSING>
exit n	<MISSING>
exit the shell immediately if an error is encountered	
exit the shell immediately if an error is encountered, treat references to unset variables as errors, disable overwriting existing files, and use the first non-zero exit code of a set of piped commands as the exit code of the full set of commands	
exit the shell on the first error encountered	
exits from login shell.	
exits from process with exit code 255.	
exits from screen session.	
exits from script with exit code 1.	
exits the entire bash script with defined status code n.	
"expand bash array ""myargs"" as arguments to ""mv"""	
expands `whoami` as current user name, and adds resulted path to the directory stack.	
explicitly list all files in the current directory	
export foo_backwards=$(echo 'foo' | rev)	<MISSING>
"export full path of command ""git"" to variable ""git"""	
export git=$(which git)	<MISSING>
export java_home=$(readlink -f $(dirname $(readlink -f $(which java) ))/../)	<MISSING>
"export java_home=$(readlink -f /usr/bin/java | sed ""s:bin/java::"")"	<MISSING>
"export java_home=$(readlink -f /usr/bin/javac | sed ""s:/bin/javac::"")"	<MISSING>
export java_home=$(readlink -ze /usr/bin/javac | xargs -0 dirname -z | xargs -0 dirname)	<MISSING>
export myprogramname_kernel_version=$(uname -r)	<MISSING>
"export ps1=""\[\033]0;\u $(host $(hostname))\007\]\u@\h:\w\$ """	<MISSING>
export ps1='$(whoami)@$(hostname):'	<MISSING>
export ps1='\[\e]0;`hostname`\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '	<MISSING>
export user=`env|grep -i ssh_client|cut -d' ' -f1|cut -d'.' -f4`	<MISSING>
export value=$(uname -r)	<MISSING>
"export variable ""java_home"" as symlink resolved absolute path of ""/usr/bin/javac"" with ""/bin/javac"" removed"	
"export variable ""java_home"" as symlink resolved absolute path of the 2nd parent directory name of ""java"""	
"export variable ""java_home"" as symlink resolved absolute path of two parent directories above ""/usr/bin/javac"""	
"export variable ""ps1"" as the current username ""@"" the hostname"	
"extract ""backup.tar.gz"" with verbose output"	
"extract ""filename.tar.xz"" with verbose output"	
"extract ""passwd.tar.gz"" with verbose output"	
"extract ""phantomjs-1.9.0-linux-x86_64.tar.bz2"""	
extract 'archive.tar.gz' to /destination	
extract /path/to/my_archive.tar.xz to /path/to/extract and preserve permissions.	
"extract 8 bytes as an unsigned integer that is ""$o"" offset into ""$pkg"""	
"extract 8 bytes as an unsigned integer that is ""$o"" offset into ""$rpm"""	
extract all gzip-compressed files from tar archives beginning with 'myfiles_split.tgz_*'	
extract an archive stripping the first component	
"extract and print hostname and protocol part from url like ""http://www.suepearson.co.uk/product/174/71/3816/""."	
"extract any line in ""f1"" or ""f2"" which does not appear in the other"	
"extract any line in ""file1"" or ""file2"" which does not appear in the other"	
"extract any line in ""file1.txt"" which does not appear as the first "";"" delimited entry in ""file2.txt"""	
"extract any line in ""filea"" which does not appear as the first word of any line in ""fileb"""	
"extract any line in ""set1"" which does not appear in ""set2"""	
"extract any line in sorted file ""a"" that does not appear in ""b"", ""c"", or ""d"""	
extract archive stored in $1	
"extract data from html table in ""mycode.html"""	
extract files from archive 'archive.tar'	
extract five digits sequence from a filename with x number of alphanumeric characters followed by the five digit sequence surrounded by a single underscore on either side then another set of x number of alphanumeric characters.	
extract host name part from url.	
"extract number from $filename of the form ""something_12345_else"" and set the variable ""number"" to this number."	
extract path and query part from url	
extract protocol and host name from url.	
extract protocol part from url.	
"extract rpm ""foo.rpm"""	
"extract rpm ""libstdc++-4.9.2-1.fc21.x86_64.rpm"""	
"extract rpm ""packagename"""	
extract tar.gz archive and go into the directory that would normally be created by extracting it.	
extract the content of the file doc.gz and split it into pieces per 1000 lines compressed with gzip	
extract the content of the file large.csv.gz and split it into pieces per 1000 lines named as xxxnnn	
"extract the contents of ""input.txt.gz"", list the unique first comma separated field prefixed by the number of occurrences"	
"extract the contents of rpm ""php-5.1.4-1.esp1.x86_64.rpm"""	
"extract the second-to-last slash-separated path component, ie. ""90_2a5"" in this case."	
extract two semicolon-separated fields from specified strings, output them separated by a space.	
extract, sort and print only group names from /etc/group.	
extract_dir=$(diff .dir_list_1 .dir_list_2 | grep '>' | head -1 | cut -d' ' -f2)	<MISSING>
extract_dir=$(tar -tf $file | cut -d/ -f1 | uniq)	<MISSING>
extracts 258 lines beginning from line 16482 of in.sql and saves them to out.sql	
extracts a bz2 file.	
extracts single file 'filename' from bzip2-compressed tarball archive.tbz.	
extracts text between pattern1 and pattern2 if and only if the pattern1 is followed by pattern2	
f=$(cat numbers.txt)	<MISSING>
f=`mktemp -p .`	<MISSING>
false	<MISSING>
"false | echo ""${pipestatus[0]}"""	<MISSING>
false | tee /dev/null	<MISSING>
false | true	<MISSING>
fetch 'stackoverflow.com' domain ip addresses from dig dns lookup	
fetch a script from the web and interpert (run) it in the current shell, without writing the script to disk.	
fetch a script from the web, and interpret it in the current shell.	
fetches the newest version of homebrew and all formulae from github and perform any necessary migrations.	
fg	<MISSING>
fg 1	<MISSING>
fg 2	<MISSING>
fg `jobs | iselect -a | grep -o [0-9]*`	<MISSING>
fg `jobs | tr '[]' ' \n' | zenity  --list --column '' --column ''`	<MISSING>
fgrep --include='status.txt' -rl 'open' | xargs -l 1 dirname	<MISSING>
fhost=`hostname -f`	<MISSING>
fif2=$(mktemp -u)	<MISSING>
fifo_name=$(mktemp -u -t fifo.xxxxxx)	<MISSING>
fiind and remove multiple files such as *.mp3 or *.txt	
"file ""files.txt"" contains a list of files, copy all files listed to host ""remote"", connecting as ssh user ""user"", and copying the files to this user's home directory - this will not work with files/directory names containing spaces."	
file $(readlink -f $(type -p rename))	<MISSING>
file $(which foo)	<MISSING>
file 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer.	
file 'mydatafile' has a number on each line, display the sum of these numbers.	
file 'save_pid.txt' contains a process id, instantly kill this process with sigkill signal.	
file * | grep ascii	<MISSING>
file *.php | grep utf	<MISSING>
file */*.php | grep utf	<MISSING>
file --mime myfile.txt	<MISSING>
file -bi myfile.txt	<MISSING>
file -i filename	<MISSING>
"file -ib ""$file"""	<MISSING>
file -l $(python -c 'import sys; print(sys.executable)')	<MISSING>
file -l `which gcc`	<MISSING>
file /mnt/c/boot.ini	<MISSING>
file `which c++`	<MISSING>
file `which file`	<MISSING>
file `which python`	<MISSING>
file all the sticky bit set files whose permission are 551	
file ascii.txt	<MISSING>
file file-name	<MISSING>
file utf8.txt	<MISSING>
file ~/myfile	<MISSING>
file1 and file2 contain lines of comma-separated information, for each line whose first field matches, and where 3rd field of file1 matches 2nd field of file2, 6th field of file1 matches 3rd field of file2, and 7th field of file1 matches 4th field of file2, output: fields 1, 2, 3, 4, 6, and 7 of file1.	
"file1.txt and file2.txt both contain a name and a number on each line. for each name whose corresponding number does not match in both files, display the ""age of ... is different"" message."	
"file=""/tmp/command_cache.`echo -n ""$key"" | md5sum | cut -c -10`"""	<MISSING>
"file=$( basename ""$1"" )"	<MISSING>
"file=`basename ""$1""`"	<MISSING>
file_changed=$(find . -depth \( -wholename \./\.\* \) -prune -o -mtime -1 -print | cpio -oav)	<MISSING>
"filename=""$(uname -a)$(date)"""	<MISSING>
"filename=""$(uname -n)-$(date +%f).txt"""	<MISSING>
"filename=""`basename ""http://pics.sitename.com/images/191211/pic.jpg""`"""	<MISSING>
"files = ""`find ""'""$dirs""'"" -type f |& grep -v '^find: '`"""	<MISSING>
files all files which expect directories and display count of them	
"files2 = ""`find ""'""$dirs""'"" -type f`"""	<MISSING>
"files=""$(find $dir -perm 755)"""	<MISSING>
"files=$(find $files_path -type f -name ""*"")"	<MISSING>
files=`cat $raw_log_dir | xargs -r`	<MISSING>
files=`find .`	<MISSING>
filnd all directory in root directory with 777 permission and change permision755  with chmod commad .	
filnd all files in root directory with 777 permission and change permision 644  with chmod commad .	
filter /path/to/logfile for any lines containing the specified date, paging interactively through the output.	
filter contents of 'file' through awk commands written in script.awk, display the result.	
filter out current date in current time zone from the gmt+30 and gmt+20 representations of current date and show the last one	
filter output of bind -p by regex	
filter the contents of 'file' through sed commands written in 'commandfile', displaying the result.	
"filter the cron list of user ""user"" through ""my_wonderful_sed_script"" and re-apply the resulting output."	
filters only directories from long file listing of a current directory, and prints their names.	
filters only directories from long file listing of the current directory	
filters only directories from long file listing of the current directory.	
filters only directories including hidden ones from long file listing of a current directory, and prints their names.	
filters out all comment lines(lines beginning with a '#') from /etc/launchd.conf and pipes the output to launchctl.	
"filters out all comments from the output of the command ""crontab -u $user -l"" ignoring errors"	
filters out strings beginning with '#' from all files in current folder, and prints file name before each line.	
"filters out strings, using the extended regexp pattern '^#|^$|no crontab for|cannot use this program' from ""$usertab"""	
filters unique lines by matching against the first column of a .csv file	
"finaldate=$(date -u -d ""$string2"" +""%s"")"	<MISSING>
"finalname=$(basename -- ""$(dirname -- ""$path"")"")"	<MISSING>
finalname=$(dirname ${path#*/})	<MISSING>
find  -mtime -1	<MISSING>
find  -name '*-*x*.*' | xargs rm -f	<MISSING>
find  .  -path  './src/emacs'  -prune  -o -print	<MISSING>
find  . -name '*.bak' -ls	<MISSING>
find  . -name \*.txt -print -exec cat {} \;	<MISSING>
find  . -type d -mindepth 1 -print -exec chmod 755 {}/* \;	<MISSING>
"find  . -type f -name ""*.txt"" -exec mv {} `basename {} .html` .html \;"	<MISSING>
"find  . -type f -name ""*.txt"" -exec sed 's/tz/malawi/g' {} \;"	<MISSING>
find  /   -print > masterfilelist.out	<MISSING>
find  / -iname findcommandexamples.txt	<MISSING>
"find  / -name ""[a-j]*"" -print"	<MISSING>
"find  / -name ""apt"""	<MISSING>
"find  / -name ""apt"" -ls"	<MISSING>
find  / -name '[a-c]*'	<MISSING>
"find  / -type d -iname ""apt"""	<MISSING>
"find  / -type d -iname ""apt"" -ls"	<MISSING>
"find  / -type d -iname ""project.images"" -ls"	<MISSING>
"find  / -type d -name ""apt"" -ls"	<MISSING>
"find  / -type d -name ""project.images"""	<MISSING>
"find  / -type d -name ""project.images"" -ls"	<MISSING>
find  /home -type f -perm /a=x	<MISSING>
find  /home/family/music -type f -name '*.m4a' -print0	<MISSING>
"find  /home/mine -iname ""*.png"" -printf ""%p\n "" | xargs  -i % -n1 cp %  /home/mine/pngcoppies/copy%"	<MISSING>
find  /path/to/directory/* -maxdepth 0 -type d -exec basename {} \;	<MISSING>
"find  /root -type d -iname ""*linux*"""	<MISSING>
"find  /root -type f -iname ""*linux*"""	<MISSING>
find  /storage/sdcard0/tencent/micromsg/ -type f  -iname '*.jpg' -print0	<MISSING>
"find  /usr/lib/ /usr/lib64/ -lname ""*libstdc++*"""	<MISSING>
find  /var -path */l??/samba*	<MISSING>
find  case-insensitive stringbuffer in all *.java files	
find  directory which case-insensitive name is too in currect directory	
find  file which case-insensitive name is too in currect directory	
find  files which  full path name is /tmp/foo/bar under foo directory and print	
find  files which full path name is /tmpfoo/bar under /tmp/foo directory and print	
find  files which full path name is /tmpfoo/bar under foo directory and print	
find  files which full path name is foo/bar under foo directory and print	
find  js file which name is not  'glob-for-excluded-dir'  under current directory.	
find  symbolic link file that name match  '*sysdep.c'	
find  | rename 's/\.jpg$/.jpeg/'	<MISSING>
"find ! -newermt ""apr 01 2007"" -newermt ""mar 01 2007"" -ls"	<MISSING>
"find ! -path ""dir1"" ! -path ""dir2"" -iname ""*.mp3"""	<MISSING>
"find ! -path ""dir1"" ! -path ""dir2"" -name ""*foo*"""	<MISSING>
"find ! -path ""dir1"" ! -path ""dir2"" -type f"	<MISSING>
"find ! -path ""dir1"" -iname ""*.mp3"""	<MISSING>
"find ! -type d -printf ""%t@ %p\n"" | sort -n | head -n1"	<MISSING>
"find ""$(pwd -p)"" -mtime 0 -not \( -name '*.swp' -o -regex './es.*' -o -regex './en.*' \)"	<MISSING>
"find ""$(pwd -p)"" -type d \( -path '/path/to/dir1' -or -path '/path/to/dir2' \) -prune  -or -not \( -path '/path/to/file1' -or -path '/path/to/file2' \) -print0 | gnutar --null --no-recursion -czf archive.tar.gz --files-from -"	<MISSING>
"find ""$1"" -name ""?*"" | dd bs=$((${#1}+3)) count=1 2>/dev/null"	<MISSING>
"find ""$1"" -path ""*/.*"" -prune -o \( -type f -print0 \)"	<MISSING>
"find ""$1"" -perm -u+r -print0 | xargs chmod g+r"	<MISSING>
"find ""$1"" -perm -u+w -print0 | xargs chmod g+w"	<MISSING>
"find ""$1"" -perm -u+x -print0 | xargs chmod g+x"	<MISSING>
"find ""$1"" -type f -exec md5sum {} \; > ""$1""__checksums.md5"	<MISSING>
"find ""$1"" -type f -print0 | parallel -0 -x md5 > checksums.md5"	<MISSING>
"find ""$1"" -type f | egrep -v '\.bz2' | xargs bzip2 -9 &"	<MISSING>
"find ""$1""/.hg -type d -print0 | xargs chmod g+s"	<MISSING>
"find ""$@"	<MISSING>
"find ""$absolute_dir_path"" -type f -print0"	<MISSING>
"find ""$d"" -mindepth 1 -prune -empty"	<MISSING>
"find ""$d"" -prune -empty"	<MISSING>
"find ""$d"" -prune -empty -type d"	<MISSING>
"find ""$d"" -type f -printf ""%t@ :$f %p\n"" | sort -nr | cut -d: -f2- | head -n""$m"""	<MISSING>
"find ""$d/"" -type d -print0 | xargs -0 chmod 755"	<MISSING>
"find ""$d/"" -type f -print0 | xargs -0 chmod 777"	<MISSING>
"find ""$deletedir"" -mindepth 1 -depth -type d -empty -exec rmdir ""{}"" \;"	<MISSING>
"find ""$dir"""	<MISSING>
"find ""$dir"" -maxdepth 1 -type f"	<MISSING>
"find ""$dir"" -maxdepth 1 -type f -iname '*.txt' | sort -n"	<MISSING>
"find ""$dir"" -maxdepth 1 -type f | sed 's#.*/#   #'"	<MISSING>
"find ""$dir"" -maxdepth 1 -type f | wc -l"	<MISSING>
"find ""$dir"" -mindepth 1 -type f"	<MISSING>
"find ""$dir"" -name ""*.mod"" -type f -print0"	<MISSING>
"find ""$dir"" -name \*.txt"	<MISSING>
"find ""$dir"" -not -path ""$dir/prune_me*"" -exec bash -c 'echo ""$0""' {} \;"	<MISSING>
"find ""$dir"" -not \( -path ""$dir/prune_me"" -prune \) -exec bash -c 'echo ""$0""' {} \;"	<MISSING>
"find ""$dir"" -path ""$dir/prune_me"" -prune -o -exec bash -c 'echo ""$0""'  {} \;"	<MISSING>
"find ""$dir"" -type f"	<MISSING>
"find ""$dir"" -type f -atime +5 -exec rm {} \;"	<MISSING>
"find ""$dir"" -type f -exec grep ""$search"" {} \;"	<MISSING>
"find ""$dir"" -type f -exec grep -q ""$search"" {} + ;"	<MISSING>
"find ""$dir"" -type f -mtime +15 -exec rm {} \;"	<MISSING>
"find ""$dir"" -type f \! -newer ""$a"" -exec rm {} +"	<MISSING>
"find ""$dir"" -type f \! -newer ""$a"" \! -samefile ""$a"" -delete"	<MISSING>
"find ""$dir"" -type f \! -newer ""$a"" \! -samefile ""$a"" -exec rm {} +"	<MISSING>
"find ""$dir_temporal"" ""$dir_descarga"" -maxdepth 2 -name ""$nombre"" -printf '%f.torrent\n'"	<MISSING>
"find ""$dir_to_clean"" -mtime +$days_to_save -exec bash -c 'printf ""count=0; for f; do rm ""$f"" && (( count++ )); done; printf ""total: %d\n"" $count' _ {} +"	<MISSING>
"find ""$dir_to_clean"" -mtime +$days_to_save -exec bash -c 'printf ""total: %d\n"" $#; rm ""$@""' _ {} +"	<MISSING>
"find ""$dir_to_clean"" -mtime +$days_to_save -exec rm {} \;"	<MISSING>
"find ""$dir_to_clean"" -mtime +$days_to_save | wc -l"	<MISSING>
"find ""$dir_to_clean"" -mtime +$days_to_save | while read file; do rm ""$file""; done"	<MISSING>
"find ""$dir_to_clean"" -type -f -mtime ""+$days_to_save"" -exec rm {} \; -exec printf '.' \; | wc -c"	<MISSING>
"find ""$dir_to_clean"" -type -f -mtime ""+$days_to_save"" -exec rm {} \; -printf '.' | wc -c"	<MISSING>
"find ""$dir_to_clean"" -type f -mtime +$days_to_save -print0 | awk -v rs='\0' -v ors='\0' '{ print } end { print nr }' | xargs -0 rm"	<MISSING>
"find ""$directory"" -perm ""$permissions"""	<MISSING>
"find ""$directory_to_process"" -type f -iregex "".*\.$files_to_proces""  ! -name ""$find_excludes"" -print0 | xargs -0 -i {} bash script.bash {}"	<MISSING>
"find ""$directory_to_process"" -type f -iregex "".*\.$files_to_proces"" ! -name ""$find_excludes"" -print0"	<MISSING>
"find ""$fileloc"" -type f -prune -name ""$filename"" -print"	<MISSING>
"find ""$folder"" -mindepth 1 | sort"	<MISSING>
"find ""$folder"" -type d -printf ""%t@\n"" | cut -f 1 -d . | sort -nr"	<MISSING>
"find ""$front_element"" -maxdepth 1 -type d -not -path ""$front_element"" -printf '%t@ %p\n' | sort | awk '{print $2}'"	<MISSING>
"find ""$given_dir"" -type d -mindepth 1"	<MISSING>
"find ""$given_dir"" -type d -mindepth 1 -print0"	<MISSING>
"find ""$home"" -name '*.txt' -type f -not -path ""$home/newdir/*"" -print0 | xargs -0 cp -t ""$home/newdir"""	<MISSING>
"find ""$home"" -name '*.txt' -type f -print0 | sort -zu | xargs -0 cp -t ""$home/newdir"""	<MISSING>
"find ""$home"" -name '*.txt' -type f -print0 | xargs -0 cp -ut ""$home/newdir"""	<MISSING>
"find ""$home/"" -name myfile.txt -print"	<MISSING>
"find ""$i"" files under current directory and search for ""$srchstr"" in those files"	
"find ""$musicdir"" -type f -print"	<MISSING>
"find ""$musicdir"" -type f -print | egrep -i '\.(mp3|aif*|m4p|wav|flac)$'"	<MISSING>
"find ""$orig_dir"""	<MISSING>
"find ""$orig_dir"" -name ""*"" -type d"	<MISSING>
"find ""$orig_dir"" -name ""*"" -type d -o -name ""*"" -type f"	<MISSING>
"find ""$orig_dir"" -name ""*"" -type f"	<MISSING>
"find ""$path"" -type f -print0 | sort -z | xargs -r0 md5sum | md5sum"	<MISSING>
"find ""$path_to_folders"" -name 'm?' -type d -exec mv {} {}.mbox \; -exec mkdir {}.mbox/messages \; -exec sh -c ""mv {}.mbox/*.emlx {}.mbox/messages"" \;"	<MISSING>
"find ""$pwd"" -type d"	<MISSING>
"find ""$pwd"" / -iname '*.jpg' -exec du -s {} + | sed ""s/^/$(hostname): /"""	<MISSING>
"find ""$root"" -name "".[a-z]*"" -prune -o -type d -printf '%p:'"	<MISSING>
"find ""$search_path"" -name 'pattern' | rev | cut -d'/' -f3- | rev"	<MISSING>
"find ""$searchpath"" -name ""$filepat.[ch]"" -exec grep --color -ahn ""$greppattern"" {} \;"	<MISSING>
"find ""$some_dir"" -prune -empty -type d | read && echo empty || echo ""not empty"""	<MISSING>
"find ""$some_directory"" -name '.*' ! -name '.' ! -name '..' -delete"	<MISSING>
"find ""$some_directory"" -type f -name '.*' -delete"	<MISSING>
"find ""$some_directory"" -type f -name '.*' -exec rm '{}' \;"	<MISSING>
"find ""$some_directory"" -type f -name '.*' | xargs rm"	<MISSING>
"find ""$somedir"" -maxdepth 0 -empty -exec echo {} is empty. \;"	<MISSING>
"find ""$somedir"" -type d -empty -exec cp /my/configfile {} \;"	<MISSING>
"find ""$somedir"" -type f -exec echo found unexpected file {} \;"	<MISSING>
"find ""$source"" -type f -iname '*.jpg'"	<MISSING>
"find ""$source"" -type f -iname '*.jpg' -exec /path/to/filecopy.sh {} +"	<MISSING>
"find ""$source_dir"" -name ""*.$input_file_type"" -print0"	<MISSING>
"find ""$source_dir"" -name *.$input_file_type"	<MISSING>
"find ""$source_dir"" -type f -regex "".*\.\(avi\|wmv\|flv\|mp4\)"" -print0"	<MISSING>
"find ""$source_dir"" -type f|egrep ""$input_file_type"""	<MISSING>
"find ""$sourcedir"" -type d | sed -e ""s?$sourcedir?$targetdir?"" | xargs mkdir -p"	<MISSING>
"find ""$sourcedir"" -type f -name ""*.type"" -exec sh -c 'for f; do cp ""$f"" ""$0""; done' ""$targetdir"" {} +"	<MISSING>
"find ""$sourcedir"" -type f -name ""*.type"" | xargs cp -t targetdir"	<MISSING>
"find ""$storagefolder"" -name .todo  -exec dirname {} \;"	<MISSING>
"find ""$storagefolder"" -name .todo -printf '%h\n'"	<MISSING>
"find ""$storagefolder"" -name .todo -printf '%h\n' | uniq | xargs ls -l"	<MISSING>
"find ""$storagefolder"" -name .todo -printf '%h\n' | xargs ls -l"	<MISSING>
"find ""$topdir"" -name '*.py' -printf '%h\0' | xargs -0 -i {} find {} -mindepth 1 -maxdepth 1 -name makefile -printf '%h\n' | sort -u"	<MISSING>
"find ""${backuppath}"" -mtime -10 > file.list"	<MISSING>
"find ""${current_directory}"" -type f -iname ""*.wma"""	<MISSING>
"find ""${dir_to_clean?}"" -type f -mtime +${days_to_save?} -print0"	<MISSING>
"find ""${dir}"" -name ""*.txt"""	<MISSING>
"find ""${input_location}"" -name '*.pdf.marker' | xargs -i bash -cx 'pdf=`dirname {}`/`basename {} .marker`;[ -e ""$pdf"" ]&&{ mv {} ""$pdf"" ""$0"";}' ""${output_location}"""	<MISSING>
"find ""${searchpath}"" -type f -print0 | xargs -0 grep -l -e ""${string1}"".*""${string2}"".*""${string3}"""	<MISSING>
"find ""${searchpath}"" -type f -print0 | xargs -0 grep -l -e ""${string1}.*${string2}.*${string3}"""	<MISSING>
"find ""${s}"" -name '*.data' -exec mv '{}' ""${s}/data/"" \;"	<MISSING>
"find ""${s}"" -name '*.so*' -exec doexe '{}' +"	<MISSING>
"find ""${s}"" -type f"	<MISSING>
"find ""${s}/bundled-libs"" \! -name 'libbass.so' -delete"	<MISSING>
"find ""*.dat"" files recursively in the current directory, print the lines starting on line 5 to the console and save to ""concat.txt"""	
"find ""*.gz"" -exec gunzip -vt ""{}"" +"	<MISSING>
"find ""*201512*"" regular files in /home/myhome/data/archive/ and move them to /home/myhome/archive/tempfolder/"	
"find ""*prefs copy"" files in the /mnt/zip directory tree and remove them"	
"find ""*prefs copy"" files in the /mnt/zip directory tree and remove them with prompting"	
"find "".c"" and "".h"" files in the current directory tree and print line numbers and lines containing ""#include"""	
"find "".c"" and "".h"" files in the current directory tree and print lines containing ""#include"""	
"find "".flac"" files in current folder using regular expressions"	
"find "".performance_test"" -not -path "".performance_test/prune_me*"" -exec bash -c 'echo ""$0""' {} \;"	<MISSING>
"find "".performance_test"" -not \( -path "".performance_test/prune_me"" -prune \) -exec bash -c 'echo ""$0""' {} \;"	<MISSING>
"find "".performance_test"" -path "".performance_test/prune_me"" -prune -o -exec bash -c 'echo ""$0""' {} \;"	<MISSING>
"find ""/cygdrive/e/mydocs/downloads/work/oats domain related/"" -iname ""log4j*.xml"" | xargs -i % grep -ilr ""console"" ""%"" | xargs -i % grep -h ""async"" %"	<MISSING>
"find ""/path/to/files"" -mmin +120"	<MISSING>
"find ""/path/to/pdfs/"" -type f -name ""$1*.pdf"" -exec stat -f ""%10dm %sn"" {}\;  | sort -k1,1n -k2,2"	<MISSING>
"find ""/path/to/pdfs/"" -type f -name ""$1*.pdf"" -printf ""%ty/%tm/%td %th:%tm %p\n""      | sort -n -k1.1,1.2 -k1.3,1.4 -k1.6,1.7 -k1.9,1.10 -k2.1,2.2 -k2.4,2.5 -k3  > remoteuser@remoteserver:/u/tmp/custtmp/zzz_pdfs.txt"	<MISSING>
"find ""/proc/$pid/fd"""	<MISSING>
"find ""/proc/$pid/fd"" -ignore_readdir_race -lname ""$save_path/sess_\*"" -exec touch -c {}"	<MISSING>
"find ""/tmp/1"" -iname ""*.txt"""	<MISSING>
"find ""/tmp/1/"" -iname ""*.txt"" | sed 's/[0-9a-za-z]*\.txt//g"	<MISSING>
"find ""/tmp/2/"" -iname ""$j.sh"" -exec cp {} ""$i"" \;"	<MISSING>
"find ""/zu/durchsuchender/ordner"" -name ""beispieldatei*"" -print0 | xargs -0 grep -l ""beispielinhalt"""	<MISSING>
"find ""`echo ""$some_dir""`"" -maxdepth 0 -empty"	<MISSING>
"find ""`pwd`"" -type f"	<MISSING>
"find ""file.xml"" under the current directory and change directory to its parent"	
"find ""somedir"" -type l -print0"	<MISSING>
"find ""somedir"" -type l -print0 | xargs -r0 file | grep ""broken symbolic"" | sed -e 's/^\|: *broken symbolic.*$/""/g'"	<MISSING>
"find ""test folder"" -type d -name '.dummy' -delete"	<MISSING>
"find ""test folder"" -type d -name .dummy -exec rm -rf \""{}\"" \;"	<MISSING>
"find ""your/dir"" -prune -empty"	<MISSING>
"find $(/usr/ucb/ps auwwx | grep weblogic | tr ' ' '\n' | grep security.policy | grep domain | awk -f'=' '{print $2}' | sed -e 's/weblogic.policy//' -e 's/security\///' -e 's/dep\///' | awk -f'/' '{print ""/""$2""/""$3""/""$4""/somefile.cf""}' | sort | uniq) 2> /dev/null -exec ls {} \; -exec cat {} \;"	<MISSING>
find $(mount -t smbfs | awk '{print $3}') -mount -type f -ls -execdir file {} \;	<MISSING>
find $(pwd) -name \*.txt -print	<MISSING>
"find $(pwd) -name yourprogram -exec dirname {} \; | while read d; do cd ""$d"" && ./yourprgram; done"	<MISSING>
"find $(pwd) -name yourprogram -exec dirname {} \; | while read d; do cd ""$d"" && pwd; done"	<MISSING>
"find $(pwd) -type f -name ""*.ext"" | while read file; do sed -e 's/^m//g' -i ""$file""; done;"	<MISSING>
find $(pwd) -type f | xargs -i xxx sed -i 's/\r//g' xxx	<MISSING>
find $(pwd)/ -type f	<MISSING>
"find $(pwd)/* -type f -exec stat -c ""f%15s %n"" {} +"	<MISSING>
"find $1 -name ""$2"" -exec grep -hn ""$3"" {} \;"	<MISSING>
"find $1 -name ""$2"" | grep -v '/proc' | xargs grep -hn ""$3"" {} \;"	<MISSING>
find $1 -name '* *'	<MISSING>
"find $1 -path /proc -prune -o -name ""$2"" -print -exec grep -hn ""$3"" {} \;"	<MISSING>
find $1 -perm -u+r -exec chmod g+r {} \;	<MISSING>
find $1 -perm -u+w -exec chmod g+w {} \;	<MISSING>
find $1 -perm -u+x -exec chmod g+x {} \;	<MISSING>
find $1 -type f -name '*'$n'.txt'	<MISSING>
find $1 -type f -not -regex '.*/\..*' -exec $0 hashmove '{}' \;	<MISSING>
find $1 -type f | wc -l	<MISSING>
"find $1 \( -name ""*$2"" -o -name "".*$2"" \) -print"	<MISSING>
find $1/.hg -type d -exec chmod g+s {} \;	<MISSING>
find $2 -type f -exec bzip2 {} \;	<MISSING>
find $@ -ls	<MISSING>
find $@ -not -name ss	<MISSING>
find $arch1 -ls	<MISSING>
find $backup_path/* -mtime +30 -exec rm {} \;	<MISSING>
find $backup_path/* -name *.sql -mtime +30 -exec rm {} \;	<MISSING>
find $backup_path/*.sql -mtime +5 -exec rm -f {} \;	<MISSING>
find $d -maxdepth 1 -perm -100 -type f | sed 's#.*/##'	<MISSING>
"find $d -name '*.js' | grep -v "" """	<MISSING>
find $d -type d -exec chmod ug=rwx,o= '{}' \;	<MISSING>
find $d -type f -exec chmod ug=rw,o= '{}' \;	<MISSING>
find $dba/$oracle_sid/bdump/*.trc -mtime +7	<MISSING>
find $dba/$oracle_sid/bdump/*.trc -mtime +7 -exec rm {} \;	<MISSING>
find $dba/$oracle_sid/bdump/*.trc -mtime -1 -print >> /tmp/trace_list.lst	<MISSING>
find $destination -mtime +7 -exec rm {} \;	<MISSING>
find $dir -maxdepth 1 -type d -user $username -perm -100	<MISSING>
find $dir -maxdepth 1 -type f	<MISSING>
find $dir -mtime +3	<MISSING>
find $dir -mtime -3	<MISSING>
"find $dir -name ""*.mod"" -type f -exec bash -c 'remodup ""$1""' - {} \;"	<MISSING>
"find $dir -name ""*.mod"" -type f -exec remodup {} \;"	<MISSING>
"find $dir -name ""*.txt"""	<MISSING>
"find $dir -name ""*.txt"" -exec wc -l {} \;"	<MISSING>
"find $dir -name ""*.txt"" -print"	<MISSING>
find $dir -type -f size +$size -print0 | xargs -0 ls -1hss	<MISSING>
find $dir -type f	<MISSING>
find $dir -type f -exec grep $search /dev/null {} \; | wc --bytes	<MISSING>
"find $dir -type f -exec stat --format '%y :%y %n' ""{}"" \; | sort -nr | cut -d: -f2- | head -n 1"	<MISSING>
"find $dir -type f -iname ""*.$type"""	<MISSING>
find $dir -type f -mtime +450 -exec rm {} \;	<MISSING>
find $dir -type f -mtime +60w -exec rm {} \;	<MISSING>
find $dir -type f -name $1 -exec getline {} \;	<MISSING>
find $dir -type f -name $1 -exec sed $num'q;d' {} \;	<MISSING>
find $dir -type f -name $name -print	<MISSING>
"find $dir -type f -name '*.html' -exec sed -i 's/.*<script type=""text\/javascript"" charset=""utf-8"" src=""file.js""><\/script>.*/<script type=""text\/javascript"" charset=""utf-8"" src=""file2.js""><\/script>/g' {} \;"	<MISSING>
"find $dir -type f -printf ""%t@ %p\n"" | sort -n | cut -d' ' -f 2 | tail -n 1"	<MISSING>
"find $dir -type f -size +""$size""m -printf '%s %p\n' | sort -rn"	<MISSING>
find $dir/tmp/daily/ -name '*.tar.gz' | sort -n | tail -3	<MISSING>
"find $dir/tmp/daily/ -type f -printf ""%p\n"" | sort -rn | head -n 2 | xargs -i{} cp {} $dir/tmp/weekly/"	<MISSING>
find $dir_name -size $sizefile -printf '%m %n %u %g %s %tb %td %tk:%tm %p\n'	<MISSING>
find $directory -type -f -execdir zip -j $zipfilename {}\;	<MISSING>
find $directory -type f	<MISSING>
find $directory -type f -name '*'	<MISSING>
find $directory -type l	<MISSING>
"find $directory -type l -printf ""%p$ifs"""	<MISSING>
find $dirname -type f  > $tempfile	<MISSING>
find $diskname -type f -mtime -3 -size +5000 -exec ls -ld {} \; 2>/dev/null | sort -n -k 5.1,5 >> $tmpfile	<MISSING>
find $file -type f -mtime 30 -exec gzip {} \;	<MISSING>
find $file -type f -not -name '*.gz' -mtime 30 -exec gzip {} \;	<MISSING>
find $files_path -type f	<MISSING>
"find $folder -name "".*"""	<MISSING>
"find $folder -name "".*"" -delete"	<MISSING>
find $from_dir -mindepth 3 -maxdepth 3 -type d	<MISSING>
find $fulfillment $arch1 -exec stat -c '%i,%b,%a,%h,%u,%g,%y,%n' {} \;	<MISSING>
find $fulfillment -ls	<MISSING>
find $home  -mtime 0	<MISSING>
find $home -atime +30	<MISSING>
find $home -iname '*.ogg'	<MISSING>
find $home -iname '*.ogg' ! -size +20m	<MISSING>
find $home -iname '*.ogg' -atime +30	<MISSING>
find $home -iname '*.ogg' -o -iname '*.mp3'	<MISSING>
find $home -iname '*.ogg' -size +100m	<MISSING>
find $home -iname '*.ogg' -size +20m	<MISSING>
find $home -iname '*.ogg' -type f -size -100m	<MISSING>
find $home -maxdepth 1 -type f -name '.*' -print0	<MISSING>
find $home -mmin -30	<MISSING>
find $home -mtime +365	<MISSING>
find $home -mtime -1	<MISSING>
find $home -mtime -2 -mtime +1	<MISSING>
find $home -mtime -7	<MISSING>
"find $home -name ""*.conf"" -exec sed -i 's/vermin/pony/g' {} \;"	<MISSING>
"find $home -name "".*"" -ls"	<MISSING>
find $home -name '*.c' -print | xargs    grep -l sprintf	<MISSING>
find $home -name '*.c' -print | xargs grep -l sprintf	<MISSING>
find $home -name '*.ogg' -type f -exec du -h '{}' \;	<MISSING>
find $home -name 'mysong.ogg'	<MISSING>
find $home -name \*txt -o -name \*html -print0	<MISSING>
find $home -name core -exec rm -f {} \;	<MISSING>
find $home -newer ~joeuser/lastbatch.txt	<MISSING>
"find $home -not -iname ""*.c"" -print"	<MISSING>
find $home -print	<MISSING>
find $home -size -500b	<MISSING>
find $home -type d -name $1 -exec echo {} ';'  -exec rm -rf {} ';'	<MISSING>
find $home -type f -atime +30 -size 100k	<MISSING>
find $home -type f | samefile -r	<MISSING>
"find $home \! -iname ""*.c"" print"	<MISSING>
find $home \( -name \*txt -o -name \*html \) -print0 | xargs -0 grep -li vpn	<MISSING>
find $home \( -name a.out -o -name '*.o' \) -atime +7 -exec rm {} \;	<MISSING>
"find $home/. -name ""*.txt"" -ok rm {} \;"	<MISSING>
find $home/. -name *.txt -exec head -n 1 -v {} \;	<MISSING>
find $home/. -name *.txt -exec head -n 1 -v {} \; > report.txt	<MISSING>
find $home/. -name *.txt -ok rm {} \;	<MISSING>
find $home/html/andrews-corner -exec grep -q 'slrn' '{}' \; -print	<MISSING>
"find $home/library/safari/icons -type f -atime +30 -name ""*.cache"" -print -delete"	<MISSING>
"find $home/projects/ -name "".*"" -ls > foo.txt"	<MISSING>
find $homedirdata -type d -mmin +10 -print0 | xargs -0 rmdir	<MISSING>
find $input_location -name '*.pdf.marker' -exec bash -c 'mv ${0%.marker} $0 $1' {} $output_location \;	<MISSING>
find $input_location -name '*.pdf.marker' | xargs -i bash -c 'mv ${0%.marker} $0 $1' {} $output_location	<MISSING>
find $intranetdestination/monthly -mtime +366 -exec rm {} \;	<MISSING>
find $intranetdestination/weekly -mtime +32 -exec rm {} \;	<MISSING>
find $location -name $required_files -type f -mmin +360 -delete	<MISSING>
find $location -name $required_files -type f -mtime +1 -delete	<MISSING>
find $location -print -exec shred $times -u '{}' \;	<MISSING>
find $logdir -type d -mtime +0 -exec compress -r {} \;	<MISSING>
find $logdir -type d -mtime +5 -exec rm -f {} \;	<MISSING>
find $logdir -type d -mtime +5 -exec rm -rf {} \;	<MISSING>
find $logdir -type d -mtime -1 -exec compress -r {} \;	<MISSING>
find $outputdir -type f -mtime +7 -delete	<MISSING>
find $parentdir -name $tofind*	<MISSING>
find $path -type d	<MISSING>
"find $path -type f -name ""*.$extension"""	<MISSING>
find $path_to_logs -maxdepth 1 -mtime +$some_number_of_days -exec gzip -n {} \;	<MISSING>
"find $path_to_logs -maxdepth 1 -mtime +$some_number_of_days -exec sh -c ""case {} in *.gz) ;; *)  gzip '{}' ;; esac;"" \;"	<MISSING>
"find $pwd -exec echo -n '""{}"" ' \; | tr '\n' ' '"	<MISSING>
"find $pwd -name ""file.ext"" -exec sh -c 'echo $(dirname {})' ';'"	<MISSING>
find $pwd -name '.[^.]*' -exec ln -s '{}' /path/to/dir \;	<MISSING>
find $pwd -type d	<MISSING>
find $pwd -type f -exec ln -st $tmpdir {} +	<MISSING>
"find $pwd | sed 's/^/""/g' | sed 's/$/""/g' | tr '\n' '"	<MISSING>
"find $pwd | sed -e 's/^/""/g' -e 's/$/""/g' | tr '\n' ' '"	<MISSING>
find $root -type d -printf '%p:'	<MISSING>
find $root -type d | tr '\n' ':'	<MISSING>
find $root_dir -type d -depth -print	<MISSING>
find $root_dir -type f	<MISSING>
find $some_directory '.*' -delete	<MISSING>
find $something	<MISSING>
find $source -type f -mtime +$keep | sed ‘s#.*/##'	<MISSING>
"find $sourcepath -type f -mtime +10 -name ""*.log"" -exec mv {} $destpath \;"	<MISSING>
"find $sourcepath -type f -mtime +10 -name ""*.log"" | xargs zip -jmt $zipfile -@"	<MISSING>
"find $sourcepath -type f -mtime +10 -name ""*.log"" | xargs zip -mt $zipfile -@"	<MISSING>
"find $sourcepath -type f -name ""*.log"" -exec tar -uvf $tarfile {} \;"	<MISSING>
"find $sourcepath -type f -name ""*.log"" | xargs zip $zipfile -@"	<MISSING>
find $srvdir* -maxdepth 0 -type d	<MISSING>
find $startdir -name '*.ps' -print	<MISSING>
find $startdir -name '*.ps' -print | sed -e 's/.ps$//' | xargs -l -i  ps2pdf '{}.ps' '{}.pdf'	<MISSING>
find $startdir -name '*.ps' -print | sed -e 's/.ps$//' | xargs -l -i  ps2pdf \{}.ps	<MISSING>
find $storagefolder -name .todo  -exec ls -l {} \;	<MISSING>
"find $target -type f -iname ""*.txt"""	<MISSING>
"find $target_dir -regextype posix-extended -regex \"".*/$now.*\"" -fprint $file_list"	<MISSING>
"find $whatever -printf ""%s %p\n"""	<MISSING>
find $workspace_ts -mindepth 1 -maxdepth 1 -type d -mtime +30 -print	<MISSING>
find $workspace_ts -mindepth 1 -maxdepth 1 -type d -mtime -30	<MISSING>
find $x -type d -wholename '*' ! -wholename */@eadir* > /tmp/mediaindex/$nn.dir	<MISSING>
find $your_dir -type f	<MISSING>
find ${1:-.} -mindepth 1 -maxdepth 1 -type d	<MISSING>
"find ${curr_dir} -type f \( -ctime ${ftime} -o -atime ${ftime} -o -mtime ${ftime} \) -printf ""./%p\n"""	<MISSING>
"find ${directory} -name ""${pattern}"" -print0 | xargs -0 ${my_command}"	<MISSING>
find ${directory} -type f -print | sed -e 's@^.*/@@' | grep '[aeiouyaeiouy]' | wc -l	<MISSING>
"find ${dir} -type f -name ""*.css"" -exec sed -n '/\.exampleclass.{/,/}/p' \{\} \+"	<MISSING>
"find ${dir} -type f -regex "".*\.${types_re}"""	<MISSING>
"find ${folder} -type f ! -name \"".*\"" -mtime -${retention}"	<MISSING>
"find ${folder} -type f ! -name \"".*\"" -mtime -${retention} | egrep -vf ${skip_file}"	<MISSING>
find ${input_location} -name '*.pdf.marker' -exec sh -c 'echo mv $0 `dirname $0`/`basename $0 .marker` $1' {} ${output_location} \;	<MISSING>
find ${input_location} -name '*.pdf.marker' -exec sh -c 'mv $0 `dirname $0`/`basename $0 .marker` $1' {} ${output_location} \;	<MISSING>
"find ${input_location}/ -name ""*.pdf.marker"" | xargs -i file mv file $(basename file .marker) ${output_location}/."	<MISSING>
"find ${input}/ -name ""*.pdf"" -exec mv '{}' '{}'.marker ${output} \;"	<MISSING>
"find ${input}/ -name ""*.pdf"" -exec test -e '{}'.marker \; -exec mv '{}' '{}'.marker ${output} \;"	<MISSING>
find ${path} -p -type f	<MISSING>
"find ${start_dir} -mtime -${days} |xargs stat -c ""%s""|awk '{sum += $1}end{print sum}'"	<MISSING>
find ${userdir}/${i}/incoming -mtime +2 -type f -exec rm {} \;	<MISSING>
find ${userdir}/${i}/incoming -mtime +2 -type f -ls	<MISSING>
find ${userdir}/${i}/incoming -mtime +2 -type f -size +200557600c -exec rm {} \;	<MISSING>
find ${userdir}/${i}/incoming -mtime +2 -type f -size +200557600c -ls	<MISSING>
find ${wp_root}/wp-content -exec chgrp ${ws_group} {} \;	<MISSING>
find ${x} -type d -exec chmod ug=rwx,o= '{}' \;	<MISSING>
find ${x} -type f -exec chmod ug=rw,o= '{}' \;	<MISSING>
find %s -iname *.css | xargs sed -i s/[ff][oo][oo]/bar/g	<MISSING>
find & calculate total number of caractor  in all .txt file from current directory	
find & calculate total number of worlds in all .txt file from current directory	
find & replace broken symbolic links	
find & substitute only 2nd occurrence of a word using sed s//2 in all .txt files	
find & substitute only when the line matches with the pattern using sed	
find & write changes to a file and print the changes using sed s//gpw	
find '*prefs copy' files under /mnt/zip and delete them ensuring white space safety	
find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt	
find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt ensuring white space safety	
find '.git' directories in directory tree /home/madhu/release/workspace	
find '.git' directories in directory tree /path/to/files and print the pathnames of their parents	
find '.java' files with checksum 0bee89b07a248e27c83fc3d5951213c1 in the current directory	
find 'my key phrase'	<MISSING>
find 'my key phrase' > mylist.txt	<MISSING>
find 'test folder' -type d -print0 | xargs -0 rm -rf	<MISSING>
find *	<MISSING>
find * -maxdepth 0	<MISSING>
find * -maxdepth 0 ! -path . -exec mv {} pre_{} \;	<MISSING>
"find * -maxdepth 0 -name ""efence*"" -prune -o -print"	<MISSING>
find * -maxdepth 0 -name 'b' -prune -o -exec rm -rf '{}' ';'	<MISSING>
find * -maxdepth 0 -name 'b' -prune -o -exec rm -rf {} \;	<MISSING>
find * -maxdepth 0 -type d -print0	<MISSING>
find * -mtime -1 -daystart -print0 | cpio -pd0 ../changeset	<MISSING>
"find * -name ""*.java"""	<MISSING>
find * -perm 777 -exec chmod 770 {} \;	<MISSING>
find * -prune -type f -size +0c -print	<MISSING>
find * -type f  | xargs md5sum | sort | uniq -dw32 | awk -f'[ /]' '{ print $nf }' | sort -f | uniq -di	<MISSING>
find * -type f -print	<MISSING>
find * -type f -print -o -type d -prune	<MISSING>
find * -type f | xargs md5sum | sort | uniq -dw32	<MISSING>
find * /home/www -type f	<MISSING>
find *-name hi.dat	<MISSING>
find *.1  -exec tar czf '{}.tgz' '{}' --remove-files \;	<MISSING>
find *.avi and *.flv files in /path/to/your/directory and below and copy them to /path/to/specific/folder	
find *.c and *.h files under the current directory tree skipping hidden directories and files	
find *.c and *.sh files	
find *.c files under $home and search for the string 'sprintf' in those files	
find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end	
find *.conf files/directories only upto 2 levels down under /etc directory and show a few lines of output from the end	
find *.css files in the current directory tree, skipping all directories that match pattern '*/lang/en.css'	
find *.gif files under the currently directory and sub-directories and list them using the ls command	
find *.html files in the /usr/src/linux directory tree	
find *.html files in the current directory tree that were last modified more than 7 days ago	
find *.html files in the current directory tree that were modified 7 days ago	
find *.html files in the current directory tree that were modified less than 7 days ago	
find *.java files in the current directory and replace foo with bar in those files	
find *.java files in the current directory with gnu find and replace foo with bar in those files	
find *.java files under current directory and compress them to myfile.tar	
find *.java files under current directory and compress them to myfile.tar  (unsafe)	
find *.jpg screenshots that are bigger than 500k	
find *.js utf-8 files with bom and correct them	
find *.nef files under current directory and take only the filename without extension and run other commands on this    file name.	
find *.o files with permissions 664 in the current directory tree	
"find *.pdf files in the pdfs directory tree that contain text ""perry sound"" and ""october 26, 2004"""	
"find *.pdf files in the pdfs directory tree that contain text ""perry sound"" and copy them to folder found/"	
find *.pl files/directories under /users/tom	
find *.scm files recursively in the current directory	
"find *.tex files in the current directory tree that contain text ""documentclass"""	
find *.txt files in the current directory and sub-directories	
find *.txt files in the current directory tree, ignoring paths ./movies/*, ./downloads/*, and ./music/*	
find */ | cut -d/ -f1 | uniq -c	<MISSING>
"find */201111 -name ""*.jpg"""	<MISSING>
"find */201111/* -name ""*.jpg"" | sort -t '_' -nk2"	<MISSING>
"find */201111/*20111130* -name ""*.jpg"" -print0 | sort -t '_' -nk2 | xargs -0 cat | ffmpeg -f image2pipe -framerate 30 -vcodec mjpeg -i - -vcodec libx264 -profile:v baseline -level 3.0 -movflags +faststart -crf 19 -pix_fmt yuv420p -r 30 ""output.mp4"""	<MISSING>
find *2011* files and grep for the string 'from: ralph' in those files	
find *log files/directories within a maximum of 3 levels of directories	
find --help	<MISSING>
find --version	<MISSING>
find -amin +25 -amin -35	<MISSING>
find -amin -60	<MISSING>
find -amin 30	<MISSING>
find -anewer /etc/hosts	<MISSING>
find -atime -5	<MISSING>
find -atime 0	<MISSING>
find -cmin -5 | less -r	<MISSING>
find -cnewer /etc/fstab	<MISSING>
find -d help	<MISSING>
"find -d myapp.app -name headers -type d -exec rm -rf ""{}"" \;"	<MISSING>
find -d myapp.app -name headers -type d -exec rm -rf {} +	<MISSING>
find -d myapp.app -name headers -type d -print0 | xargs -0 rm -rf	<MISSING>
find -daystart   -atime 0	<MISSING>
find -daystart   -atime 0 -ls	<MISSING>
find -daystart -mitime -1	<MISSING>
find -daystart -mtime +0	<MISSING>
find -daystart -mtime +7	<MISSING>
find -daystart -mtime -7	<MISSING>
find -daystart -mtime 1	<MISSING>
find -daystart -mtime 2	<MISSING>
find -delete	<MISSING>
"find -depth ""test folder"" -type d -name .dummy -exec rm -rf \{\} \;"	<MISSING>
find -depth -printf '%m:%u:%g:%p\0' >saved-permissions	<MISSING>
find -depth -type d -empty -exec rmdir {} \;	<MISSING>
"find -depth -type d | while read dir;  do [[ ! $prev =~ $dir ]] && echo ""${dir}"" ; prev=""$dir""; done"	<MISSING>
find -depth -type d |sed 'h; :b; $b; n; /^\(.*\)\/.*\n\1$/ { g; bb }; $ {x; b}; p; d'	<MISSING>
find -ds . -mindepth 1 -type f -print0; printf '\0';	<MISSING>
find -e . -iregex '.*/(ea|fs)_.*'	<MISSING>
"find -e . -regex "".*ext1|.*ext2|.*ext3"""	<MISSING>
find -e . -type f -regex '.*(c|h|cpp)$' -exec ls {} \;	<MISSING>
find -e /somefolder -type f -iregex '\./(.*\.error.*|second.*log|.*ffpc\.log)$'	<MISSING>
find -e /somefolder -type f -regex '\./(.*\.error.*|second.*log|.*ffpc\.log)$'	<MISSING>
find -empty	<MISSING>
find -empty -type -f	<MISSING>
find -exec <script> {}\;	<MISSING>
find -exec command {} +	<MISSING>
"find -exec grep -q fuddel {} "";"" -exec grep -q fiddel {} "";"" -ls"	<MISSING>
find -exec rm '{}' +	<MISSING>
find -exec some_script {} \;	<MISSING>
find -execdir ipython nbconvert {} \;	<MISSING>
find -executable	<MISSING>
find -f \( -exec sed -i s/foo/bar/g \; , -name \*foo\* -exec rename 's/foo/bar/ {} \; \)	<MISSING>
find -fprint0	<MISSING>
find -gid 1000 -exec chown -h :username {} \;	<MISSING>
find -group compta	<MISSING>
"find -iname ""*.c"""	<MISSING>
"find -iname ""*.jpg"""	<MISSING>
"find -iname ""*testfile*"""	<MISSING>
"find -iname ""dateiname"""	<MISSING>
"find -iname ""filename"""	<MISSING>
"find -iname ""mycprogram.c"""	<MISSING>
"find -iname ""mycprogram.c"" -exec md5sum {} \;"	<MISSING>
"find -iname ""query"""	<MISSING>
find -iname '*.java'|xargs grep 'class pool'	<MISSING>
find -iname '*weservice*'|xargs -i {} service {} restart	<MISSING>
find -iname '*~' | xargs rm	<MISSING>
find -iname '.#*'	<MISSING>
find -iname 'file*' -exec du -cb {} + | grep total$ | cut -f1 | paste -sd+ - | bc	<MISSING>
find -iname 'somename'	<MISSING>
find -iname *.sh	<MISSING>
find -iname example.com | grep -v beta	<MISSING>
find -iname pattern	<MISSING>
find -iname september	<MISSING>
find -iname “*.c” -exec grep -l ‘main(‘ {} \; -a -exec cp {} test1/ \;	<MISSING>
find -inum 117672808 -exec rm {} \;	<MISSING>
find -inum 16187430 -exec mv {} new-test-file-name \	<MISSING>
find -inum 752010 -exec rm {} \;	<MISSING>
find -inum 804180 -exec rm {} \	<MISSING>
find -ipath './projects/insanewebproject'	<MISSING>
find -ipath './projects/insanewebproject'| head -n1	<MISSING>
find -ipath 'projects/insanewebproject'	<MISSING>
find -iregex '.*\.py$\|.*\.xml$' | xargs egrep -nih 'a.search.pattern'  | vi -r -	<MISSING>
find -l	<MISSING>
find -l $path -maxdepth 1 -type l	<MISSING>
find -l -maxdepth 1 -name 'upvoter-*' -type f -perm /111	<MISSING>
find -l -samefile path/to/file	<MISSING>
find -l -type l	<MISSING>
find -l .	<MISSING>
find -l . -type f -perm -a=x	<MISSING>
find -l . -type f -perm -u=x,g=x  \! -perm -o=x	<MISSING>
find -l . -type f \( -perm -u=x -o -perm -g=x -o -perm -o=x \)	<MISSING>
find -l . -type l	<MISSING>
find -l . -type l -delete -exec ln -s new_target {} \;	<MISSING>
find -l . -type l |xargs symlinks	<MISSING>
find -l / -samefile path/to/foo.txt	<MISSING>
find -l /home/peter -name *~ -exec rm '{}' +	<MISSING>
find -l /home/peter -name *~ -exec rm '{}' \;	<MISSING>
find -l /home/peter -name *~ -print0 |xargs -0 -r -n1000 rm	<MISSING>
find -l /home/peter -name *~ -print0 |xargs -0 -r rm	<MISSING>
find -l /home/peter -name *~ |xargs rm	<MISSING>
find -l /myfiles	<MISSING>
"find -l /path/to/dir/* -printf ""%ty%tm%td%th%tm%ts|%p\n"""	<MISSING>
find -l /target ! -type l	<MISSING>
find -l /target -type l	<MISSING>
find -l /target -type l | while read -r file; do echo $file is orphaned; done	<MISSING>
find -l /usr/ports/packages -type l -delete	<MISSING>
find -l /usr/ports/packages -type l -exec rm -- {}	<MISSING>
find -l /usr/ports/packages -type l -exec rm -- {} +	<MISSING>
find -l research -maxdepth 2 -type d ! -group ian	<MISSING>
find -l. -type l	<MISSING>
find -ls	<MISSING>
find -maxdepth 0	<MISSING>
"find -maxdepth 0 -name ""*.sh""  -exec ./lastline.sh {} \;"	<MISSING>
"find -maxdepth 1 -iname ""*.txt"""	<MISSING>
"find -maxdepth 1 -iname ""*target*"""	<MISSING>
"find -maxdepth 1 -name '*.pdf' -exec rm ""{}"" \;"	<MISSING>
find -maxdepth 1 -name '*.sql' -exec cat '{}' \; | sed -e 's/ , );/1,1);/g' | mysql -d ootp	<MISSING>
find -maxdepth 1 -name '*.sql' -exec sed -e 's/ , );/1,1);/g' '{}' + | mysql -d ootp	<MISSING>
find -maxdepth 1 -name '*.sql' -exec sed -e 's/ , );/1,1);/g' '{}' | mysql -d ootp	<MISSING>
find -maxdepth 1 -name '*.sql' -print0 \; | xargs -0 sed -e 's/ , );/1,1);/g'  | mysql -d ootp	<MISSING>
"find -maxdepth 1 -not -iname ""mycprogram.c"""	<MISSING>
find -maxdepth 1 -type d	<MISSING>
"find -maxdepth 1 -type d ! -name "".*"""	<MISSING>
"find -maxdepth 1 -type d -exec sh -c ""cd {} && [ -d test ] && [ -d live ] && rm -rvf test "" {} \;"	<MISSING>
find -maxdepth 1 -type d -mtime -1	<MISSING>
"find -maxdepth 1 -type d | awk -f""./"" '{print $2}'"	<MISSING>
"find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find ""$dir"" -type d | wc -l); let n--; if [ $n -gt 0 ]; then printf ""%4d : %s\n"" $n ""$dir""; fi; done"	<MISSING>
"find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find ""$dir"" -type d | wc -l); let n--; printf ""%4d : %s\n"" $n ""$dir""; done"	<MISSING>
"find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find ""$dir"" -type f | wc -l); if [ $n -gt 0 ]; then printf ""%4d : %s\n"" $n ""$dir""; fi; done"	<MISSING>
"find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find ""$dir"" | wc -l); let n--; if [ $n -eq 0 ]; then printf ""%4d : %s\n"" $n ""$dir""; fi; done"	<MISSING>
find -maxdepth 1 -type d | while read dir; do echo $dir; echo cmd2; done	<MISSING>
find -maxdepth 1 -type f -daystart -mtime -1	<MISSING>
find -maxdepth 1 -type f -exec md5sum {} \; | awk '{s=$2; $2=$1; $1=s;}1'	<MISSING>
find -maxdepth 1 -type f -exec md5sum {} \; | sed 's/[^(]*(\([^)]*\)) =/\1/'	<MISSING>
find -maxdepth 1 -type f -mtime -1	<MISSING>
"find -maxdepth 1 -type f -newermt ""nov 22"" \! -newermt ""nov 23"" -delete"	<MISSING>
find -maxdepth 1 -type f -perm /200	<MISSING>
find -maxdepth 1 -type f -perm /222	<MISSING>
find -maxdepth 1 -type f -printf '%f\000'	<MISSING>
"find -maxdepth 1 -type f newermt ""$timestamp""'"	<MISSING>
find -maxdepth 1 -type f | xargs grep -f 'example'	<MISSING>
find -maxdepth 2 -name file1	<MISSING>
find -maxdepth 2 -name passwd	<MISSING>
find -maxdepth 2 -type d -ls >dirlist	<MISSING>
find -maxdepth 3	<MISSING>
find -maxdepth 3 -mindepth 3 -type f -iname '*.jpg' -exec rename -n 's/jpg$/jpeg/i' {} +	<MISSING>
find -maxdepth num -name query	<MISSING>
"find -mindepth $i -maxdepth $i ""$@"""	<MISSING>
find -mindepth 0 -maxdepth 0	<MISSING>
find -mindepth 1 -delete	<MISSING>
find -mindepth 1 -depth -print0 | grep -vezz '(\.git(/|$)|/\.gitignore$)' | xargs -0 rm -rvf	<MISSING>
find -mindepth 1 -maxdepth 1	<MISSING>
find -mindepth 1 -maxdepth 1 -print0 | xargs -0 rm -rf	<MISSING>
find -mindepth 1 -maxdepth 1 -type d | cut -c 3- | sort -k1n | tail -n 1 | xargs -r echo rm -r	<MISSING>
"find -mindepth 1 -printf ""%t@ %p\n"" | sort -n -r | cut -d' ' -f 2- | tail -n +7"	<MISSING>
find -mindepth 10 -iname $target	<MISSING>
find -mindepth 2 -maxdepth 2	<MISSING>
find -mindepth 2 -maxdepth 3 -name file	<MISSING>
"find -mindepth 3 -maxdepth 3 -type d -name ""*new parts*"" -exec ln -s -t /cygdrive/c/views {} \;"	<MISSING>
"find -mindepth 3 -maxdepth 3 -type d | grep ""new parts"""	<MISSING>
"find -mindepth 3 -maxdepth 3 -type d | grep ""new parts"" | tr '\012' '\000' | xargs -0 ln -s -t /cygdrive/c/views"	<MISSING>
find -mindepth 3 -maxdepth 5 -name passw	<MISSING>
find -mindepth 3 -maxdepth 5 -name passwd	<MISSING>
find -mindepth 3 -type d ! -path '*/p/*' -name c -print	<MISSING>
find -mindepth 3 -type d -path '*/p/*' -prune -o -name c -print	<MISSING>
find -mindepth 4 -name file	<MISSING>
find -mindepth num -name query	<MISSING>
find -mmin +15 -mmin -25	<MISSING>
find -mmin +60	<MISSING>
find -mmin -60	<MISSING>
find -mmin -60 -exec ls -l {} \;	<MISSING>
find -mmin 1 -print	<MISSING>
find -mmin 2 -print	<MISSING>
find -mmin 60	<MISSING>
find -mtime +0	<MISSING>
find -mtime +0 -mtime -1	<MISSING>
find -mtime +1	<MISSING>
find -mtime +2	<MISSING>
find -mtime +2 -mtime -5	<MISSING>
find -mtime +7 -print > found.lst	<MISSING>
find -mtime +7 -print | grep -fxvf file.lst	<MISSING>
find -mtime +7 -print | grep -vf file.lst > found.lst	<MISSING>
find -mtime -1	<MISSING>
find -mtime -5 -type f -print	<MISSING>
find -mtime -7 -daystart	<MISSING>
find -mtime 0	<MISSING>
find -mtime 0 -not \( -name '*.swp' -o -path './es*' -o -path './en*' \)	<MISSING>
find -mtime 1	<MISSING>
find -mtime 2	<MISSING>
"find -name ""$something"""	<MISSING>
"find -name ""* *"" -type d | rename 's/ /_/g'"	<MISSING>
"find -name ""* *"" -type f | rename 's/ /_/g'"	<MISSING>
"find -name ""*"" | xargs rm -f"	<MISSING>
"find -name ""*.c"""	<MISSING>
"find -name ""*.cpp"""	<MISSING>
"find -name ""*.cpp"" -o -name ""*.c"""	<MISSING>
"find -name ""*.flac"" -exec bash -c 'ffmpeg -i ""{}"" -y -acodec libmp3lame -ab 128k ""${0/.flac}.mp3""' {} \;"	<MISSING>
"find -name ""*.flac"" -exec ffmpeg -i {} -acodec libmp3lame -ab 128k {}.mp3 \;"	<MISSING>
"find -name ""*.gz"" | wc -l"	<MISSING>
"find -name ""*.htm"" -print"	<MISSING>
"find -name ""*.htm"" | while read file; do sed ""s|<title>sometext</title>|<title>${file##*/}</title>|g"" -i $file; done"	<MISSING>
"find -name ""*.js"" -not -path ""./directory/*"""	<MISSING>
"find -name ""*.mkv"""	<MISSING>
"find -name ""*.php"" –exec cp {} {}.bak \;"	<MISSING>
"find -name ""*.txt"""	<MISSING>
"find -name ""*.txt"" -exec mv {} `basename {} .htm`.html \;"	<MISSING>
"find -name ""*.txt"" -print0 | xargs -0 rm"	<MISSING>
"find -name ""*.txt"" 2>>/dev/null"	<MISSING>
"find -name ""*.txt"" cp {} {}.bkup \;"	<MISSING>
"find -name ""*.txt"" | xargs rm"	<MISSING>
"find -name ""*.xml"" -exec sed -s --in-place=.bak -e 's/firstword/newfirstword/g;s/secondword/newsecondword/g;s/thirdword/newthirdword/g' {} \;"	<MISSING>
"find -name ""*\ *.txt"" | xargs rm"	<MISSING>
"find -name ""*pattern*"""	<MISSING>
"find -name ""*test*"" -depth"	<MISSING>
"find -name ""*testfile*"""	<MISSING>
"find -name ""*text"""	<MISSING>
"find -name ""123*.txt"" -exec rename 's/^123_//' {} "";"""	<MISSING>
"find -name ""<filename>"""	<MISSING>
"find -name ""<filetype>"" -atime -5"	<MISSING>
"find -name ""bar"" -execdir touch foo \;"	<MISSING>
"find -name ""filename"""	<MISSING>
"find -name ""mycprogram.c"""	<MISSING>
"find -name ""query"""	<MISSING>
"find -name ""test"" -type d -delete"	<MISSING>
"find -name ""text"""	<MISSING>
find -name '*.[ch]' -exec sed -i 's/\<foo\>/bar/g' {} +	<MISSING>
find -name '*.[ch]' | xargs grep -e 'expr'	<MISSING>
find -name '*.class' -printf '%h\n' | sort -u	<MISSING>
find -name '*.css'	<MISSING>
find -name '*.html' -print0 | xargs -0 rename 's/\.html$/.var/'	<MISSING>
find -name '*.isolate.quantifier.txt' -maxdepth 1 -exec mv {} isolate/ +	<MISSING>
find -name '*.jpg	<MISSING>
find -name '*.jpg' | sort -n	<MISSING>
find -name '*.js' -not -path './node_modules/*' -not -path './vendor/*'	
find -name '*.js' -not \( -path './node_modules/*' -o -path './vendor/*' \)	<MISSING>
find -name '*.log' -delete	<MISSING>
find -name '*.p[lm]'	<MISSING>
find -name '*.patch' -print0 | xargs -0 -i {} cp {} patches/	<MISSING>
find -name '*.php'	<MISSING>
"find -name '*.php' -exec bash -c '[[ ""$(wc -l < ""$0"")"" -eq 1 ]] && echo ""$0""' '{}' ';'"	<MISSING>
"find -name '*.php' -exec grep -in ""fincken"" {} + | grep todo | cut -d: -f1 | uniq"	<MISSING>
"find -name '*.php' -exec grep -iq ""fincken"" {} \; -exec grep -iq ""todo"" {} \; -print"	<MISSING>
"find -name '*.php' -exec grep -li ""fincken"" {} + | xargs grep -l ""todo"""	<MISSING>
find -name '*.php' | xargs cat | wc -l	<MISSING>
find -name '*.txt'	<MISSING>
find -name '*.undo' -exec wc -c {} + | tail -n 1	<MISSING>
find -name '*.undo' -exec wc -c {} + | tail -n 1 | cut -d' ' -f 1	<MISSING>
find -name '*.zip' | xargs -n 1 unzip	<MISSING>
find -name '*foobar*' -print0 | xargs -0 cp -t ~/foo/bar	<MISSING>
find -name '*macs'	<MISSING>
find -name '*my key phrase*' > mylist.txt	<MISSING>
find -name '*php' | xargs cat | wc -l	<MISSING>
"find -name '*spaces*' | while read text; do cat ""$text""; done"	<MISSING>
find -name '*~' -delete	<MISSING>
find -name '*~' -print0 | xargs -0 -i _ mv _ /tmp/	<MISSING>
find -name '*~' -print0 | xargs -0 rm	<MISSING>
find -name '.?*' -prune -o \( -type f -print0 \)	<MISSING>
find -name '[error,access,error_log,access_log,mod_jk.log]*.[0-9]*' -type f	<MISSING>
find -name 'access.log.*.gz' | sort -vr | rename 's/(\d+)/$1+1/ge'	<MISSING>
find -name 'catalina*'	<MISSING>
find -name 'file*' -size 0 -delete	<MISSING>
find -name 'file_*' -follow -type f -exec zcat {} \; | agrep -deoe 'grep'	<MISSING>
find -name 'index.*'	<MISSING>
find -name 'messages.*' -exec grep -iw uint {} + | grep -ev '.svn|.git|.anythingelseiwannaignore'	<MISSING>
find -name *.bmp -type f -exec convert '{}' '{}'.jpg \;	<MISSING>
find -name *.php -print | xargs -l1 awk 'nr>1{exit} end{if(nr==1) print filename}'	<MISSING>
find -name *.sh	<MISSING>
find -name *.tar.gz	<MISSING>
find -name *.undo -exec stat -c%s {} \; | awk '{total += $1} end {print total}'	<MISSING>
find -name *.undo -print0 | du -hc --files0-from=-	<MISSING>
find -name *.xml	<MISSING>
find -name *bar	<MISSING>
find -name *monfichier*.ogg	<MISSING>
find -name .git -prune -o -exec git log --pretty=tformat:'' --numstat --follow --find-copies-harder --reverse {} ';' | cut -f3- | grep '.* => .*'	<MISSING>
find -name \*.jsp | sed 's/^/http:\/\/127.0.0.1/server/g' | xargs -n 1 wget	<MISSING>
find -name \*.plist	<MISSING>
find -name \*.txt	<MISSING>
find -name \*.xml -print0 | xargs -0 -n 1 -p 3 bzip2	<MISSING>
find -name cookbook -type d	<MISSING>
find -name cookies.txt	<MISSING>
find -name file -delete	<MISSING>
find -name file -exec echo '-exec is an action so an implicit -print is not applied' \;	<MISSING>
find -name file -exec echo 'this should print the filename twice if an implicit -print is applied: ' {} +	<MISSING>
find -name file -fprint file	<MISSING>
find -name file -ls	<MISSING>
find -name file -ok echo '-ok is an action so an implicit -print is not applied' \;	<MISSING>
find -name file -okdir echo '-okdir is an action so an implicit -print is not applied' \;	<MISSING>
find -name file -print	<MISSING>
find -name file -print0	<MISSING>
find -name file -printf 'since -printf is an action the implicit -print is not applied\n'	<MISSING>
find -name file -prune	<MISSING>
find -name file -quit	<MISSING>
find -name file1	<MISSING>
find -name file1 | wc -l	<MISSING>
find -name filename	<MISSING>
find -name foo.txt -execdir rename 's/\.txt$/.xml/' '{}' ';'	<MISSING>
find -name foo.txt -execdir vim '{}' ';'	<MISSING>
find -name foo_bar	<MISSING>
find -name met*	<MISSING>
find -name photo.jpg	<MISSING>
find -name test2	<MISSING>
find -name test2 -prune	<MISSING>
find -name test_3	<MISSING>
find -name teste.tex	<MISSING>
find -name whatever -exec grep --with-filename you_search_for_it {} \;	<MISSING>
find -name ‘*.lst’ -exec rename .lst a.lst {} \;	<MISSING>
find -name ‘*exp_to_find_in_folders*’ -exec rename “s/exp_to_find_for_replacement/exp_to_replace/” {} \;	<MISSING>
find -name “*.txt”	<MISSING>
find -name “*.xml” -exec grep -l “slc02oxm.us.oracle.com” {} \;	<MISSING>
find -newer /etc/passwd	<MISSING>
find -newer foo.txt	<MISSING>
find -newer ordinary_file	<MISSING>
find -newer timestamp-file -type f > list-of-files	<MISSING>
"find -newermt ""mar 03, 2010 09:00"" -not -newermt ""mar 11, 2010"" -ls"	<MISSING>
"find -newermt ""mar 03, 2010"" -ls"	<MISSING>
find -newermt yesterday -ls	<MISSING>
"find -not -name ""*testfileasdf*"""	<MISSING>
"find -not -name ""query_to_avoid"""	<MISSING>
find -not -user www-data	<MISSING>
find -nouser	<MISSING>
"find -o3 ""$save_path"" -depth -mindepth 1 -name 'sess_*' -ignore_readdir_race -type f -cmin ""+$gc_maxlifetime"" -delete"	<MISSING>
"find -p .  -maxdepth 1 -type l -exec echo -n ""{} -> "" \; -exec readlink {} \;"	<MISSING>
find -p . -lname '*/test*'	<MISSING>
find -p . -type f | rev | cut -d/ -f2- | rev | cut -d/ -f1-2 | cut -d/ -f2- | sort | uniq -c	<MISSING>
"find -p . -type l -exec echo -n ""{} -> "" \; -exec readlink {} \;"	<MISSING>
"find -path ""*/test"" -type d -delete"	<MISSING>
"find -path ""*/test/*"" -delete"	<MISSING>
find -path './linux/*' -name teste.tex	<MISSING>
find -path ./d -prune -o -name hi.dat -print	<MISSING>
find -perm -111 -type f	<MISSING>
find -perm -644	<MISSING>
find -perm 664	<MISSING>
find -perm 777	<MISSING>
find -perm 777 | xargs -i@ sudo chmod 755 '@'	<MISSING>
find -print	<MISSING>
find -print | grep esxcfg-firewall	<MISSING>
find -print | xargs -d'\n'	<MISSING>
find -print0	<MISSING>
find -print0 | grep -vezz '(\.git|\.gitignore/)'	<MISSING>
find -print0 | sort -z | cpio -pdv0 ../new	<MISSING>
"find -print0 | tr ""\0"" "":"""	<MISSING>
"find -print0 | while ifs= read -rd $'\0' f ; do echo ""[$f]"" ; done"	<MISSING>
find -print0 | xargs --null	<MISSING>
find -print0 | xargs -0	<MISSING>
find -print0 | xargs -0 ls	<MISSING>
"find -printf ""%p\0"" -exec uuid -v 4 \; | sort | awk -f'\0' '{ print $2 "" "" $1}'"	<MISSING>
"find -printf ""%p\n""| sort | xargs -i '{}' bash -c 'echo $(uuid) {}'"	<MISSING>
"find -printf ""%y %i %prn"""	<MISSING>
"find -printf '""%h/%f"" '"	<MISSING>
find -printf '%p %t@\n' | sort > file1	<MISSING>
find -prune	<MISSING>
"find -regex ""$rx"""	<MISSING>
"find -regex ""^.*~$\|^.*#$"""	<MISSING>
find -regex '.*/modules\(/.*\|$\)' \! -regex '.*/modules/.*/modules\(/.*\|$\)' -type d -links 2	<MISSING>
find -regex '.*\.\(c\|cpp\)'	<MISSING>
find -regex '^.*/[a-za-z]+-[0-9]+x[0-9]+\.[a-za-z]+$' | xargs echo rm -f	<MISSING>
find -regex .*sql.*	<MISSING>
find -regextype posix-egrep -regex '.*(php|js)$'	<MISSING>
find -s	<MISSING>
find -s . -mindepth 1 -type f -print0; printf '\0';	<MISSING>
find -size +2m	<MISSING>
find -size 100k	<MISSING>
find -type d	<MISSING>
find -type d ! -perm -111	<MISSING>
find -type d -a ! -name '.?*' -o ! -prune	<MISSING>
find -type d -a -name test	<MISSING>
find -type d -a -name test|xargs rm -r	<MISSING>
find -type d -and -atime +3	<MISSING>
find -type d -empty	<MISSING>
find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} +	<MISSING>
find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} `;`	<MISSING>
find -type d -exec chmod 755 {} \;	<MISSING>
find -type d -exec find {} -maxdepth 1 \! -type d -iname '.note' \;	<MISSING>
find -type d -exec rmdir --ignore-fail-on-non-empty {} + ;	<MISSING>
"find -type d -maxdepth 1 ! -name "".*"" -printf ""%f\n"""	<MISSING>
find -type d -name a -exec rmdir {} \;	<MISSING>
find -type d -path '.svn' -prune -o -print	<MISSING>
"find -type d -print0 | sed -e ""y/\d0/:/;s/:$//;"""	<MISSING>
find -type d -print0|xargs -0 chmod 644	<MISSING>
find -type d -printf '%d\t%p\n' | sort -r -nk1 | cut -f2-	<MISSING>
find -type d -printf '%t+ %p\n' | sort	<MISSING>
find -type d -printf '%t+ %p\n' | sort | head -1	<MISSING>
find -type d > dir-list	<MISSING>
find -type d exec chmod 755 {} +	<MISSING>
find -type d exec chmod 775 {} +	<MISSING>
"find -type d | ssh server-b 'xargs -i% mkdir -p ""/path/to/dir/%""'"	<MISSING>
find -type d | xargs chmod 775	<MISSING>
find -type d|sed -r '/^.$/{s:.:#!/bin/bash:};{s/^\./mkdir -p &/}'	<MISSING>
find -type f	<MISSING>
"find -type f  -exec readlink -m {} \; | gawk 'begin{fs=""/"";ofs=""/""}{$nf=tolower($nf);print}' | uniq -c"	<MISSING>
find -type f  |  grep -p '\w+-\d+x\d+\.\w+$' | sed -re 's/(\s)/\\\1/g' | xargs rm	<MISSING>
find -type f ! -perm -444	<MISSING>
find -type f -and -mmin -30	<MISSING>
find -type f -ctime +14	<MISSING>
find -type f -exec chmod 644 {} \;	<MISSING>
find -type f -exec du -sh {} + | sort -rh | head -n 5	<MISSING>
"find -type f -exec grep -hn ""texthere"" {} +"	<MISSING>
find -type f -exec grep -iq . {} \; -and -print	<MISSING>
"find -type f -exec grep -l ""texthere"" {} +"	<MISSING>
find -type f -exec md5sum {} +	<MISSING>
find -type f -exec perl -e 'printf qq[%s => %s\n], scalar @argv, length join q[ ], @argv' {} +	<MISSING>
find -type f -exec printf '\n' \; | wc -l	<MISSING>
"find -type f -iname ""*.txt"" -exec ls -lrt {} \;|awk -f' ' '{print $1  $9}'"	<MISSING>
"find -type f -iname ""*.txt"" -exec ls -lrt {} \;|awk -f' ' '{print $1 $2  $9}'"	<MISSING>
find -type f -iname '*.un~'	<MISSING>
find -type f -maxdepth 1 -name 'file*' -print0 | sort -z | xargs -0 bash script.sh	<MISSING>
find -type f -maxdepth 1 -writable	<MISSING>
find -type f -mtime -60	<MISSING>
find -type f -mtime 61 -exec ls -ltr {} \;	<MISSING>
"find -type f -name ""* *"""	<MISSING>
"find -type f -name ""*.htm"""	<MISSING>
"find -type f -name ""*.htm"" | awk -f'[/]' 'begin{ofs=""-""}{ gsub(/^\.\//,"""") ;print $1,$2, substr($4,3,2),substr($4,5,2),substr($4,8) }'"	<MISSING>
"find -type f -name ""*.htm"" | sed 's@^./@@g;s@/@-@g' | awk -f'-' '{print $1 ""-"" $2 ""-"" $3 ""-"" substr($4, 5, 2) ""-"" $5}'"	<MISSING>
"find -type f -name ""*.wav"" | grep export"	<MISSING>
"find -type f -name ""*.wav"" | grep export | ./calc_space"	<MISSING>
"find -type f -name ""makefile"""	<MISSING>
"find -type f -name ""makefile"" -exec awk 'fnr==235 {print filename; print}' {} +"	<MISSING>
"find -type f -name ""status.txt"" -exec grep -q ""open"" {} \; -exec dirname {} \;"	<MISSING>
find -type f -name '*.au'	<MISSING>
find -type f -name '*.au' > names.txt	<MISSING>
"find -type f -name '*.au' | awk '{printf ""%s %s\n"",$0,$0"".wav"" }' | xargs sox"	<MISSING>
"find -type f -name '*.au' | awk '{printf ""sox %s %s\n"",$0,$0"".wav"" }' | bash"	<MISSING>
find -type f -name '*.ext' | grep -vff list.txt	<MISSING>
"find -type f -name '*.htm' -printf '%p\0%f\0' | xargs -0 -n2 sh -c 'fil=""${2/\.htm/}""; sed -i -e ""s;<title>.*</title>;<title>$fil</title>;"" $1' replace"	<MISSING>
find -type f -name '*.txt' -print0 | xargs --null perl -pi -e 's/windows/linux/'	<MISSING>
find -type f -name 'error.[0-9]*' -o -name 'access.[0-9]*' -o -name 'error_log.[0-9]*' -o -name 'access_log.[0-9]*' -o -name 'mod_jk.log.[0-9]*'	<MISSING>
find -type f -name 'header.php' | xargs -n 1 dirname | xargs -n 1 cp -f topscripts.php	<MISSING>
find -type f -name *ummy	<MISSING>
find -type f -name .git -prune -o -print	<MISSING>
find -type f -name \*.txt -exec install -d {} /dest/path/{} \;	<MISSING>
find -type f -name dummy	<MISSING>
"find -type f -name thumb.png -exec ./deslash.sh {} "";"""	<MISSING>
"find -type f -newermt ""nov 21"" ! -newermt ""nov 22"" -delete"	<MISSING>
find -type f -perm -110	<MISSING>
find -type f -perm /110	<MISSING>
find -type f -print0	<MISSING>
find -type f -print0 | xargs -0 grep -l `printf '^\xef\xbb\xbf'` | sed 's/^/found bom in: /'	<MISSING>
find -type f -print0 | xargs -0 sed -i .bakup 's/company/newcompany/g'	<MISSING>
find -type f -print0 | xargs -r0 grep -f 'example'	<MISSING>
"find -type f -printf ""%s %p\n"" | sort -nr | head -n 4"	<MISSING>
"find -type f -printf ""%s %p\n"" | sort -nr | head -n 4 | awk ""{print $2}"""	<MISSING>
"find -type f -printf ""%s %p\n"" | sort -nr | head -n 4 | cut -d ' ' -f 2"	<MISSING>
"find -type f -printf ""%s %p\n"" | sort -nr | head -n 4 | sed -r 's/[0-9]+\s//g'"	<MISSING>
"find -type f -printf ""%t+ %p\0"" | sort -z | grep -zom 1 "".*"" | cat"	<MISSING>
find -type f -printf %p\\n | sort | comm -3 manifest - | xargs rm	<MISSING>
"find -type f -printf '""%p"""	<MISSING>
find -type f -printf '%t+ %p\n' | sort | head -n 1	<MISSING>
find -type f -printf '.' | wc -c	<MISSING>
find -type f -printf '\n' | wc -l	<MISSING>
"find -type f -regex "".*/.*\.\(shtml\|css\)"""	<MISSING>
find -type f -regex '.*\(\(error\|access\)\(_log\)?\|mod_jk\.log\)\.[0-9]+'	<MISSING>
find -type f -user www	<MISSING>
find -type f |  grep -p '\w+-\d+x\d+\.\w+$' | sed -re 's/(\s)/\\\1/g' | xargs ls -l	<MISSING>
find -type f |  grep -p '\w+-\d+x\d+\.\w+$' | xargs rm	<MISSING>
find -type f | sed 's/./\\&/g' | xargs grep string_to_find	<MISSING>
find -type f | wc -l	<MISSING>
find -type f | xargs -i {} mv {} {}.txt	<MISSING>
find -type f | xargs chmod 775	<MISSING>
find -type f | xargs head -v -n 1 | grep -b 1 -a 1 -e '^catalina'	<MISSING>
find -type l	<MISSING>
find -type l -xtype l	<MISSING>
"find -type l | while read f; do if [ ! -e ""$f"" ]; then ls -l ""$f""; fi; done"	<MISSING>
find -type type_descriptor	<MISSING>
find -uid 1000	<MISSING>
find -used +2	<MISSING>
find -user 1000	<MISSING>
find -user eric -print	<MISSING>
find -user jzb	<MISSING>
find -user michel	<MISSING>
find -user root -exec chown www-data {} \;	<MISSING>
find -user root -o -user www-data	<MISSING>
find -user takuya	<MISSING>
find -user takuya -name '*.php' -daystart -mtime -1	<MISSING>
find -user www-data -not -size +100k	<MISSING>
find -version	<MISSING>
find -x . -type f -print0	<MISSING>
find -x / -name foo	<MISSING>
find -x / -user george -print0 | xargs -0 chown eva	<MISSING>
find -x /var -inum 212042	<MISSING>
"find -x data -name ""filepattern-*2009*"" -print0 > filesofinterest.txt"	<MISSING>
"find -x data -name ""filepattern-*2009*"" -print0 | tar --null --no-recursion -uf 2009.tar --files-from -"	<MISSING>
find -xtype l	<MISSING>
find .	<MISSING>
"find .  ! -regex "".*[/]\.svn[/]?.*"""	<MISSING>
find .  -ctime +7 -print	<MISSING>
"find .  -maxdepth 1 -type d -iname "".[^.]*"" -print0 | xargs -i {} -0 rm -rvf ""{}"""	<MISSING>
find .  -maxdepth 1 -type f -writable	<MISSING>
find .  -maxdepth 2 -name '*.tmp'	<MISSING>
find .  -mindepth 1 -type f	<MISSING>
find .  -mtime +7 -print	<MISSING>
find .  -mtime -14 | sed -e 's/^\.\///'	<MISSING>
"find .  -name ""*.groovy"" -not -path ""./target/*"" -print"	<MISSING>
"find .  -name ""*.txt"" -type f -daystart -mtime +89 | xargs rm -f"	<MISSING>
"find .  -name ""*.txt"" -type f -daystart -mtime -91 -mtime +2 | xargs cat | sort | uniq"	<MISSING>
find .  -name '*.txt' -exec rsync -r {} path/to/dext \;	<MISSING>
find .  -name .git -prune -o -type f -print	<MISSING>
"find .  -name .svn -prune -o -name ""*.c"" -print"	<MISSING>
"find .  -newermt ""1 hour ago"""	<MISSING>
find .  -path '*/*config'	<MISSING>
find .  -path '*f'	<MISSING>
find .  -perm 775	<MISSING>
find .  -perm 775 -print	<MISSING>
find .  -size -10c -print	<MISSING>
find .  -size 10 print	<MISSING>
find .  -type f  -exec ls -lrt {} \; |awk -f' ' '{print $9}'	<MISSING>
find .  -type f  -name '*.txt' -exec wc -c {} \; | awk '{total += $1} end{print total}'	<MISSING>
find .  -type f  -name '*.txt' -exec wc -l {} \; | awk '{total += $1} end{print total}'	<MISSING>
find .  -type f  -name '*.txt' -exec wc -w {} \; | awk '{total += $1} end{print total}'	<MISSING>
find .  -type f -links +2 -exec ls -lrt {} \;	<MISSING>
"find .  -type f -name ""* *"""	<MISSING>
"find .  -type f -name ""cdc*"" -ctime -1 -exec sed -i'' -e '1d' -e '$d' '{}'  \ | wc -l"	<MISSING>
"find .  -type f -name ""cdc*"" -ctime -1 -exec sed -i'' -e '1d' -e '$d' '{}'  \;"	<MISSING>
find .  -type f -print|xargs file|grep -i text|cut -fl -d:    | xargs grep regexp	<MISSING>
"find .  \( ! -path ""./output/*"" \) -a \( -type f \) -a \( ! -name '*.o' \) -a \( ! -name '*.swp' \) | xargs grep -n soc_attach"	<MISSING>
find .  \( -name work -o -name home \)  -prune -o -name myfile -type f -print	<MISSING>
find .  \( -user aa1 - group grp \) -print	<MISSING>
find . ! -local -prune -o -print	<MISSING>
"find . ! -name ""$controlchars"""	<MISSING>
"find . ! -name ""*.txt"""	<MISSING>
"find . ! -name ""*photo*"""	<MISSING>
"find . ! -name ""a.txt"" -print"	<MISSING>
"find . ! -name ""node_modules"" -type d"	<MISSING>
find . ! -name '*.html' ! -name '*.svn*' -exec grep 'searchstring' {} /dev/null \;	<MISSING>
find . ! -name '*git*' | grep git	<MISSING>
find . ! -name '.gitignore' ! -path '.git' ! -path '.git/*' -exec rm -rf {} \;	<MISSING>
find . ! -name . -prune	<MISSING>
"find . ! -name . -prune -exec sh -c 'mv ""$@"" targetdirectory/' sh  {} +"	<MISSING>
"find . ! -name . -prune -exec sh -c 'shift $1; mv ""$@"" targetdirectory/' 2 1 {} +"	<MISSING>
find . ! -name . -prune -name '*.old' -exec mv {} ../old/ \;	<MISSING>
"find . ! -name . -prune -name '*.old' -exec sh -c 'mv ""$@"" ../old/' sh {} +"	<MISSING>
find . ! -newer some_file	<MISSING>
"find . ! -path  ""*.git*"" -type f -print"	<MISSING>
"find . ! -path ""*/test/*"" -type f -name ""*.js"" ! -name ""*-min-*"" ! -name ""*console*"""	<MISSING>
find . ! -path '*bar*' -print	<MISSING>
find . ! -path *mmm*	<MISSING>
find . ! -perm -g+r,u+r,o+r -prune	<MISSING>
find . ! -readable -prune	<MISSING>
find . ! -size 0k	<MISSING>
find . ! -user john	<MISSING>
find . ! -user root	<MISSING>
"find . ! -wholename ""./etc*"""	<MISSING>
"find . ! \( -name ""*.exe"" -o -name ""*.dll"" \)"	<MISSING>
find . ! — type d -print	<MISSING>
find . '(' -name folder1 -prune -o -name filename ')' -print	<MISSING>
find . ( -name '*.bak' -o -name *.backup ) -type f -atime +30 -exec csh -c 'if ( -f $1:r ) rm $1' '{}' ;	<MISSING>
find . ( -name '*.bak' -o -name *.backup ) -type f -atime +30 -exec rm '{}' ;	<MISSING>
find . ( -name a.out -o -name *.o ) -print	<MISSING>
"find . * | grep -p ""[a-f0-9\-]{36}\.jpg"""	<MISSING>
"find . -\( -name ""myfile[0-9][0-9]"" -o -name ""myfile[0-9]"" \)"	<MISSING>
find . -amin -1	<MISSING>
find . -amin -30	<MISSING>
find . -amin -60	<MISSING>
find . -amin 10	<MISSING>
find . -atime +1 -type f -exec mv {} tmp \;	<MISSING>
find . -atime +1 -type f -exec mv {} tmp \; # mv files older then 1 day to dir tmp	<MISSING>
find . -atime +10	<MISSING>
find . -atime +30 -exec ls \;	<MISSING>
find . -atime +30 -exec ls \; | wc -l	<MISSING>
find . -atime +30 -print	<MISSING>
find . -atime +6	<MISSING>
find . -atime +6 -exec ll | more	<MISSING>
find . -atime +7 -o -size +20480 -print	<MISSING>
find . -atime +7 -o -size +`expr 10 \* 1024 \* 2` -print	<MISSING>
find . -atime +7 -print	<MISSING>
find . -atime +7 -size +20480 -print	<MISSING>
find . -atime -1 -print	<MISSING>
find . -atime -15	<MISSING>
find . -atime 7 -print	<MISSING>
find . -cmin $minutes -print	<MISSING>
find . -cmin +2 -cmin -6	<MISSING>
find . -cmin -60	<MISSING>
find . -cpio /dev/fd0 -print | tee /tmp/backup.log	<MISSING>
find . -ctime -1 -print	<MISSING>
find . -ctime 0 -type f	<MISSING>
find . -ctime 1 -type f	<MISSING>
find . -daystart -ctime 0 -type f	<MISSING>
find . -daystart -ctime 1 -type f	<MISSING>
find . -daystart -ctime 4 -ls -type f	<MISSING>
find . -daystart -mtime -1 -ls	<MISSING>
find . -delete	<MISSING>
find . -depth  -type d  -empty -exec rmdir {} \;	<MISSING>
find . -depth -empty -type d	<MISSING>
find . -depth -empty -type d -delete	<MISSING>
"find . -depth -name ""* *"" -execdir rename ""s/ /_/g"" ""{}"" \;"	<MISSING>
"find . -depth -name ""blabla*"" -type f | xargs rm -f"	<MISSING>
"find . -depth -name '* *'  | while ifs= read -r f ; do mv -i ""$f"" ""$(dirname ""$f"")/$(basename ""$f""|tr ' ' _)"" ; done"	<MISSING>
"find . -depth -name '* *' | while ifs= read -r f ; do mv -i ""$f"" ""$(dirname ""$f"")/$(basename ""$f""|tr ' ' _)"" ; done"	<MISSING>
find . -depth -name '*.zip' -exec /usr/bin/unzip -n {} \;	<MISSING>
find . -depth -name '*.zip' -exec /usr/bin/unzip -n {} \; -delete	<MISSING>
find . -depth -name '*.zip' -exec /usr/bin/unzip -n {} \; -exec rm {} \;	<MISSING>
find . -depth -name '*.zip' -exec rm {} \;	<MISSING>
find . -depth -name '__temp__*' -exec rm -rf '{}' \;	<MISSING>
find . -depth -name *.zip	<MISSING>
find . -depth -name .svn -exec rm -fr {} \;	<MISSING>
find . -depth -path './.*' -prune -o -print	<MISSING>
find . -depth -print | cpio -dump /backup	<MISSING>
find . -depth -print | cpio -o -o /target/directory	<MISSING>
find . -depth -print | cpio -ov > /dev/fd0	<MISSING>
find . -depth -print0 | cpio --null -o > ../lpicpio.1	<MISSING>
find . -depth -type d -empty -exec rmdir {} \;	<MISSING>
find . -depth -type d -mtime 0 -exec mv -t /path/to/target-dir {} +	<MISSING>
find . -depth -type f -not -name *.itp -and -not -name *ane.gro -and -not -name *.top -exec rm '{}' +	<MISSING>
find . -depth -type f -print	<MISSING>
find . -depth \( -wholename \./\.\* \) -prune -o -print| cpio -aov > /media/caca/extract/full$date.cpio	<MISSING>
find . -depth=1 -exec mv {} /tmp/blah/ \;	<MISSING>
find . -empty	<MISSING>
find . -empty -delete -print	<MISSING>
find . -empty -exec ls -l {} \;	<MISSING>
find . -empty -exec ls {} \;	<MISSING>
find . -empty -exec rm '{}' \;	<MISSING>
find . -empty -exec rm {}\;	<MISSING>
find . -empty -maxdepth 1 -exec rm {} \;	<MISSING>
find . -empty -ok rm {}\;	<MISSING>
find . -exec $0 {} +	<MISSING>
find . -exec /bin/rm {} \;	<MISSING>
find . -exec bash -c 'cmd1; cmd2' filedumper {} \;	<MISSING>
find . -exec chmod 775 {} \;	<MISSING>
find . -exec chown myuser:a-common-group-name {} +	<MISSING>
find . -exec cmd1 \; -exec cmd2 \;	<MISSING>
find . -exec command {} +	<MISSING>
find . -exec command {} \;	<MISSING>
find . -exec echo ' list of files & direcoty'   {} \;	<MISSING>
"find . -exec echo -n '""{}"" ' \;"	<MISSING>
find . -exec echo xx{}xx \;	<MISSING>
"find . -exec echo {} "";"""	<MISSING>
find . -exec echo {} ';'	<MISSING>
find . -exec echo {} +	<MISSING>
find . -exec echo {} ;	<MISSING>
find . -exec echo {} \+	<MISSING>
find . -exec echo {} \;	<MISSING>
find . -exec env f={} somecommand \;	<MISSING>
find . -exec file {} \;	<MISSING>
find . -exec file {} \; | grep text | cut -d: -f1	<MISSING>
"find . -exec grep ""www.athabasca"" '{}' \; -print"	<MISSING>
find . -exec grep -h string-to-find {} \;	<MISSING>
"find . -exec grep -i ""pw0"" {} \;"	<MISSING>
"find . -exec grep -i ""vds admin"" {} \;"	<MISSING>
find . -exec grep -l -e 'myregex' {} \; >> outfile.txt	<MISSING>
find . -exec grep -l foo {} +	<MISSING>
find . -exec grep -l foo {} \;	<MISSING>
find . -exec grep chrome {} +	<MISSING>
find . -exec grep chrome {} \;	<MISSING>
find . -exec grep foo {} +	<MISSING>
find . -exec grep foo {} \;	<MISSING>
find . -exec grep penwidth {} \; | more	<MISSING>
find . -exec grep something {} +	<MISSING>
find . -exec grep whatiwanttofind {} \;	<MISSING>
find . -exec ls -ld {} \;	<MISSING>
find . -exec mv '{}' ~/play/ \;	<MISSING>
find . -exec myscript {} +	<MISSING>
find . -exec myscript {} \;	<MISSING>
find . -exec printf '%s\0' {} \;	<MISSING>
"find . -exec printf '%s\t' {} \; -exec uuidgen \; | awk -f '\t' '{ sub(/.+\//,"""", $1); print $2, $1 }' | sort -k2"	<MISSING>
find . -exec program {} +	<MISSING>
find . -exec sh -c 'echo {} | grep -qi /path/to/something' \; -print	<MISSING>
find . -exec sh -c 'echo {} | grep -qi /path/to/something[^/]*$' \; -print	<MISSING>
find . -exec sh -c 'echo {} | grep -qi /projects/insanewebproject[^/]*$' \; -print	<MISSING>
find . -exec touch {} \;	<MISSING>
find . -exec utility \;	<MISSING>
find . -exec wc -l {} \;	<MISSING>
find . -executable	<MISSING>
find . -executable -type f	<MISSING>
find . -follow -iname '*.htm' -print0 | xargs -i -0 mv '{}' ~/webhome	<MISSING>
find . -follow -inum 41525360	<MISSING>
find . -follow -uid 0 -print	<MISSING>
find . -fprint foo	<MISSING>
find . -gid 1003	<MISSING>
find . -group 10 -perm -2000 -print	<MISSING>
find . -group flossblog -type f	<MISSING>
find . -group root -print | xargs chgrp temp	<MISSING>
find . -group root -print | xargs chown temp	<MISSING>
find . -group staff -perm -2000 -print	<MISSING>
find . -group x_gname -exec chgrp y_gname {} +	<MISSING>
"find . -iname ""$srch*"" -exec grep ""processed files"" {} \; -print"	<MISSING>
"find . -iname ""$srch*"" -exec grep ""processed files"" {} \; -print| sed -r 'n;s/(.*)\n(.*)/\2 \1/'"	<MISSING>
"find . -iname ""$srch*"" -exec grep ""processed files"" {} \; -print| sed -r 'n;s/(.*)\n(.*)/\2 \1/'  > temp2"	<MISSING>
"find . -iname ""$srch1*"" -exec grep ""it took"" {} \; -print"	<MISSING>
"find . -iname ""$srch1*"" -exec grep ""it took"" {} \; -print |sed -r 'n;s/(.*)\n(.*)/\2 \1/'"	<MISSING>
"find . -iname ""$srch1*"" -exec grep ""it took"" {} \; -print |sed -r 'n;s/(.*)\n(.*)/\2 \1/' > temp1"	<MISSING>
"find . -iname ""*$@*"" -or -iname "".*$@*"""	<MISSING>
"find . -iname ""*.bak"" -type f -print | xargs /bin/rm -f"	<MISSING>
"find . -iname ""*.cls"" -exec echo '{if(length($0) > l) { line=$0; l = length($0)}} end {print line""l""l}' {} \;"	<MISSING>
"find . -iname ""*.jar"" | xargs -n1 zipinfo"	<MISSING>
"find . -iname ""*.jar"" | xargs zipinfo"	<MISSING>
"find . -iname ""*.jpg"" -ls |perl -lane '$t += $f[6]; print $t/1024/1024/1024 . "" gb""'"	<MISSING>
"find . -iname ""*.mov"" -exec /path/to/myffmpeg.sh {} \;"	<MISSING>
"find . -iname ""*.mov"" -exec ffmpeg -i ""%p"" -f flv ""%f"" \;"	<MISSING>
"find . -iname ""*.mov"" -follow"	<MISSING>
"find . -iname ""*.mov"" -print0 | xargs -0 -i sh -c 'ffmpeg -i {} -f flv `basename {}`'"	<MISSING>
"find . -iname ""*.mov"" -printf ""%p %f\n"""	<MISSING>
"find . -iname ""*.mov"" -printf ""%p %f\n"" | while read -a hr ; do echo ffmpeg -i ${hr[0]} -f flv ${hr[1]} ;done"	<MISSING>
"find . -iname ""*.mov"" -printf ""%p %f\n"" | xargs -l bash -c 'echo ffmpeg -i $0 -f flv $1' | xargs"	<MISSING>
"find . -iname ""*.mov"" -printf ""%p %f\n"" | xargs -r -n2 ffmpeg -f flv -i"	<MISSING>
"find . -iname ""*.pdf"" -exec tar --append --file=somefile.tar {} \;"	<MISSING>
"find . -iname ""*.php~"" -exec mv ""{}"" /mydir +;"	<MISSING>
"find . -iname ""*.php~"" -exec mv {} /mydir \;"	<MISSING>
"find . -iname ""*.txt"" -exec du -b {} +"	<MISSING>
"find . -iname ""*.txt"" -exec du -b {} + | awk '{total += $1} end {print total}'"	<MISSING>
"find . -iname ""*filename*"""	<MISSING>
"find . -iname ""*foobar*"" -exec cp ""{}"" ~/foo/bar \;"	<MISSING>
"find . -iname ""*linkin park*"""	<MISSING>
"find . -iname ""*linkin park*"" -exec cp -r {} /users/tommye/desktop/lp \;"	<MISSING>
"find . -iname ""*linkin park*"" > temp;rsync -arhv --files-from=temp  /users/tommye/desktop/lp;rm temp"	<MISSING>
"find . -iname ""*needle*"""	<MISSING>
"find . -iname ""*notes*"" -print0 | xargs -i{} -0 grep -i mysql ""{}"""	<MISSING>
"find . -iname ""*notes*"" | xargs grep -i mysql"	<MISSING>
"find . -iname "".*"" -exec bash -c ""fgrep {} /tmp/list_files >/dev/null || rm -i {}"" \;"	<MISSING>
"find . -iname "".*"" \! -iname 'list_files'"	<MISSING>
"find . -iname ""1us*"" -exec rm {} \;"	<MISSING>
"find . -iname ""articles.jpg"""	<MISSING>
"find . -iname ""articles.jpg"" -exec ls -l {} \;"	<MISSING>
"find . -iname ""articles.jpg"" -print0 | xargs -0 ls -l"	<MISSING>
"find . -iname ""file*"""	<MISSING>
"find . -iname ""needle"""	<MISSING>
"find . -iname ""photo.jpg"""	<MISSING>
"find . -iname ""thumbs.db"" -print0 | xargs -0 rm -rf"	<MISSING>
"find . -iname ""wsfy321.c"""	<MISSING>
"find . -iname ""{ea,fs}_*"""	<MISSING>
find . -iname '*.cgi' | xargs chmod 755	<MISSING>
find . -iname '*.cpp' -print	<MISSING>
find . -iname '*.jar'	<MISSING>
"find . -iname '*.jar' -printf ""unzip -c %p | grep -q '<stringwithorwithoutspacestofind>' && echo %p\n"" | sh"	<MISSING>
find . -iname '*.jpg'	<MISSING>
find . -iname '*.jpg' -print0 | xargs -i{} -0 -r convert -resize 300x300 {} $outdir/{}	<MISSING>
find . -iname '*.jpg' -type f -printf '%b\t%d:%i\n' |   sort -u | cut -f1 | paste -sd+ - | bc	<MISSING>
find . -iname '*.jpg' -type f -printf +%b	<MISSING>
"find . -iname '*.jpg' | while read fn; do name=$(basename ""$fn"") ; dir=$(dirname ""$fn"") ; mv ""$fn"" ""$dir/$(basename ""$dir"")-$name"" ;done ./lib/bukovina/version.jpg ./lib/bukovina/bukovina-version.jpg"	<MISSING>
"find . -iname '*.page' -exec awk '{if(length($0) > l) { line=nr;l = length($0)}} end {print l""|""filename"":""line}' {} \; | sort"	<MISSING>
find . -iname '*.pdf' -exec pdfgrep -i keyword {} +	<MISSING>
"find . -iname '*.png' | while read i; do mogrify -format jpg ""$i"" && rm ""$i""; echo ""converted $i to ${i%.*}.jpg""; done"	<MISSING>
find . -iname '*.pyc' -print0 | xargs -0 --no-run-if-empty  rm	<MISSING>
find . -iname '*.txt' -type f -exec sed -i '' 's/[[:space:]]\{1,\}$//' {} \+	<MISSING>
find . -iname '*blah*' -mtime -2	<MISSING>
find . -iname '*blah*' \( -type d -o -type f \) -mtime -2	<MISSING>
find . -iname '*demo*' | grep -i sitesearch	<MISSING>
"find . -iname '*py' -exec grep ""text"" {} \;"	<MISSING>
find . -iname '*sitesearch*' | grep demo	<MISSING>
find . -iname '*something*'	<MISSING>
find . -iname '*test*' -exec cat {} \;	<MISSING>
"find . -iname '.#*' -print | while read -r i; do foobar ""$i""; done"	<MISSING>
"find . -iname '.#*' -print0 | while read -r -d '' i; do foobar ""$i""; done"	<MISSING>
find . -iname '.note'	<MISSING>
find . -iname '.note' | sort	<MISSING>
find . -iname '.note' | sort -r	<MISSING>
find . -iname 'myfile*'	<MISSING>
find . -iname 'process.txt' -print	<MISSING>
find . -iname *.js -type f -exec sed 's/^\xef\xbb\xbf//' -i.bak {} \; -exec rm {}.bak \;	<MISSING>
find . -iname *.mov	<MISSING>
find . -iname *.page -exec ~/t.sh {} \; | sort	<MISSING>
find . -iname *.txt -exec egrep mystring \{\} \;	<MISSING>
find . -iname *linkin*	<MISSING>
"find . -iname .svn -exec bash -c 'ls -l ""{}"" | wc -l' \;"	<MISSING>
find . -iname .svn -exec bash -c 'rm -rf {}' \;	<MISSING>
find . -iname .svn -exec rm -rf {} \;	<MISSING>
find . -iname .svn -print | xargs rm -rf	<MISSING>
find . -iname .svn -print0 | xargs -0 rm -rf	<MISSING>
find . -iname a\*.html	<MISSING>
find . -iname cvs -type d | xargs rm -rf	<MISSING>
find . -iname filename.txt	<MISSING>
find . -iname foo	<MISSING>
find . -iname foo -type d	<MISSING>
find . -iname foo -type f	<MISSING>
find . -iname test	<MISSING>
find . -inum $inum -exec rm {} \	<MISSING>
find . -inum $inum -exec rm {} \;	<MISSING>
find . -inum 128128 | xargs rm	<MISSING>
find . -inum 1316256	<MISSING>
find . -inum 211028 -exec mv {} newname.dir \;	<MISSING>
find . -inum 31246 -exec rm [] ';'	<MISSING>
find . -inum 782263 -exec rm -i {} \;	<MISSING>
find . -inum 968746 -exec ls -l {} \;	<MISSING>
find . -inum 968746 -exec rm -i {} \;	<MISSING>
find . -inum 968746 -print	<MISSING>
find . -inum [inode-number] -exec rm -i {} \;	<MISSING>
find . -inum num	<MISSING>
find . -ipath '*sitesearch*' -ipath '*demo*'	<MISSING>
"find . -iregex "".*packet.*"""	<MISSING>
"find . -iregex "".*packet.*"" ! -type d -size +1500c"	<MISSING>
"find . -iregex ""./[^/]+\.dat"" -type f -cmin +60 -exec basename {} \;"	<MISSING>
find . -iregex '.*/.git/.*' -prune -o -type d -name 'cvs'	<MISSING>
find . -iregex '.*/\(ea\|fs\)_.*'	<MISSING>
find . -iregex '.*sitesearch.*' -iregex '.*demo.*'	<MISSING>
find . -iregex './\(ea\|fs\)_.*'	<MISSING>
find . -iregex './\(rt\|ed\).*' | head	<MISSING>
"find . -iwholename ""*ack*1"""	<MISSING>
find . -links 1	<MISSING>
"find . -lname ""*"""	<MISSING>
"find . -lname ""`pwd`*"" -exec sh -c 'ln -snvf `python -c ""from os.path import *; print relpath(\""$(readlink {})\"",dirname(\""{}\""))""` {}' \;"	<MISSING>
find . -lname '*sysdep.c'	<MISSING>
find . -lname '*test*'	<MISSING>
find . -lname /path/to/foo.txt	<MISSING>
find . -lname \*foo.txt	<MISSING>
find . -ls	<MISSING>
"find . -ls -name ""*.ksh"""	<MISSING>
find . -ls > /tmp/files.txt	<MISSING>
"find . -ls | awk '{printf( ""%s,%s,%s,%s,%s,%s,%s,%s %s %s,%s\n"", $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11 )}'"	<MISSING>
find . -ls | tr -s ' ' ,	<MISSING>
"find . -ls|awk 'begin{ofs="",""}$1=$1'"	<MISSING>
find . -maxdepth 0	<MISSING>
find . -maxdepth 0 -print	<MISSING>
find . -maxdepth 0 -type f -exec chmod g+w {} ';'	<MISSING>
find . -maxdepth 1 ! -perm  -o=r	<MISSING>
"find . -maxdepth 1 ! -regex '.*~$' ! -regex '.*\.orig$' \     ! -regex '.*\.bak$' -exec grep --color ""#define"" {} +"	<MISSING>
find . -maxdepth 1 -cmin +60 -name file	<MISSING>
find . -maxdepth 1 -cmin +60 -name file >/tmp.$$	<MISSING>
find . -maxdepth 1 -ctime +1 -name file	<MISSING>
find . -maxdepth 1 -empty	<MISSING>
"find . -maxdepth 1 -empty -not -name "".*"""	<MISSING>
"find . -maxdepth 1 -iname ""*.jpg"" | xargs tar -czvf jpeg.tgz"	<MISSING>
"find . -maxdepth 1 -iname ""*linkin park*"""	<MISSING>
find . -maxdepth 1 -mindepth 1 -iname '*.jpg' -type f	<MISSING>
find . -maxdepth 1 -mindepth 1 -type d	<MISSING>
find . -maxdepth 1 -mindepth 1 -type d -printf '%f\n'	<MISSING>
find . -maxdepth 1 -mindepth 1 \( -name '*.py' -not -name 'test_*' -not -name 'setup.py' \)	<MISSING>
"find . -maxdepth 1 -name ""$a"" -print -quit"	<MISSING>
"find . -maxdepth 1 -name ""*.jpg"" -size -50k -exec rm {} \;"	<MISSING>
"find . -maxdepth 1 -name ""*.jpg"" -size -50k | xargs echo rm -f"	<MISSING>
"find . -maxdepth 1 -name ""*.jpg"" -size -50k | xargs rm -f"	<MISSING>
"find . -maxdepth 1 -name ""*.pdf"" -print0 | xargs -0 rm"	<MISSING>
"find . -maxdepth 1 -name ""name1"" -o -name ""name2"""	<MISSING>
find . -maxdepth 1 -name '*.dat' -type f -cmin +60 -exec basename {} \;	<MISSING>
"find . -maxdepth 1 -name '*.sql' -exec ""sed -e 's/ , );/1,1);/g' '{}' | /usr/bin/mysql -d ootp"" \;"	<MISSING>
find . -maxdepth 1 -name '*.txt' -mtime +2	<MISSING>
find . -maxdepth 1 -name '*music*' -prune -o -print0 | xargs -0 -i cp {} dest/	<MISSING>
find . -maxdepth 1 -name '[!.]*' -printf 'name: %16f size: %6s\n'	<MISSING>
find . -maxdepth 1 -name 'onlyme*'	<MISSING>
find . -maxdepth 1 -name *.jpg -print -exec convert	<MISSING>
find . -maxdepth 1 -name \*.gz -print0 | xargs -0 zcat | awk -f, '$1 ~ /f$/'	<MISSING>
find . -maxdepth 1 -name \*.txt -print0 | grep -cz .	<MISSING>
find . -maxdepth 1 -name a\*.html	<MISSING>
find . -maxdepth 1 -not -iname file.txt	<MISSING>
find . -maxdepth 1 -not -iwholename '*video'	<MISSING>
"find . -maxdepth 1 -not -name ""."" -print0 | xargs --null chown -r apache:apache"	<MISSING>
find . -maxdepth 1 -not -samefile /home/nez/file.txt	<MISSING>
find . -maxdepth 1 -print0	<MISSING>
find . -maxdepth 1 -print0 | xargs -0 stat -c '%i %n'	<MISSING>
find . -maxdepth 1 -size 0c -exec rm {} \;	<MISSING>
find . -maxdepth 1 -type d	<MISSING>
find . -maxdepth 1 -type d ! -name . | sort > a	<MISSING>
find . -maxdepth 1 -type d -empty	<MISSING>
find . -maxdepth 1 -type d -empty -exec rm {} \;	<MISSING>
find . -maxdepth 1 -type d -exec chmod -r 700 {} \;	<MISSING>
find . -maxdepth 1 -type d -exec ls -dlrt {} \;	<MISSING>
find . -maxdepth 1 -type d -exec ls -dlrt {} \; | wc --lines	<MISSING>
"find . -maxdepth 1 -type d -exec ls -ld ""{}"" \;"	<MISSING>
"find . -maxdepth 1 -type d -iname ""*linkin park*"" -exec cp -r {} /users/tommye/desktop/lp \;"	<MISSING>
find . -maxdepth 1 -type d -name '__temp__*' -print0 | xargs -0 rm -rf	<MISSING>
find . -maxdepth 1 -type d -print | parallel -x echo directories:	<MISSING>
find . -maxdepth 1 -type d -print | parallel echo directory: {}	<MISSING>
"find . -maxdepth 1 -type d -print | xargs  -i ""^"" echo directory: ""^"""	<MISSING>
find . -maxdepth 1 -type d -print | xargs -i {} echo directory: {}	<MISSING>
find . -maxdepth 1 -type d -print | xargs echo directories:	<MISSING>
find . -maxdepth 1 -type d -print0	<MISSING>
find . -maxdepth 1 -type d -print0 | (cd /somewhere/else; xargs -0 mkdir)	<MISSING>
find . -maxdepth 1 -type d -print0 | xargs -0 -i {} sh -c 'echo  $(find {} | wc -l) {}' | sort -n	<MISSING>
find . -maxdepth 1 -type d -print0 | xargs -0 -i {} sh -c 'echo $(find {} | wc -l) \\t {}' | sort -rn | less	<MISSING>
"find . -maxdepth 1 -type d -print0 | xargs -0 -i {} sh -c 'echo -e $(find ""{}"" -printf ""\n"" | wc -l) ""{}""' | sort -n"	<MISSING>
find . -maxdepth 1 -type d -print0 | xargs -0 -i {} sh -c 'echo -e $(find {} | wc -l) {}' | sort -n	<MISSING>
find . -maxdepth 1 -type d -print0 | xargs -0 ls -d	<MISSING>
find . -maxdepth 1 -type d > dirs_to_remove	<MISSING>
"find . -maxdepth 1 -type d \( ! -name ""bar"" -a ! -name ""foo"" -a ! -name ""a"" -a ! -name ""b"" \) -delete"	<MISSING>
find . -maxdepth 1 -type d \( ! -name . \)	<MISSING>
"find . -maxdepth 1 -type d \( ! -name . \) -exec bash -c ""cd '{}' && pwd"" \;"	<MISSING>
find . -maxdepth 1 -type d | sed '/^\.$/d'	<MISSING>
"find . -maxdepth 1 -type d | while read -r dir; do printf ""%s:\t"" ""$dir""; find ""$dir"" -type f | wc -l; done"	<MISSING>
"find . -maxdepth 1 -type d | xargs -i ""{x}"" mkdir ""{x}""/new-dir"	<MISSING>
find . -maxdepth 1 -type d | xargs -i x mkdir '/new/directory/x'	<MISSING>
find . -maxdepth 1 -type f	<MISSING>
find . -maxdepth 1 -type f  -name '*~' -exec mv {} /tmp/ \;  -or  -name '#*#' -exec mv {} /tmp/ \;	<MISSING>
"find . -maxdepth 1 -type f ! -name '*.gz' -exec gzip ""{}"" \;"	<MISSING>
find . -maxdepth 1 -type f -delete	<MISSING>
find . -maxdepth 1 -type f -empty -delete	<MISSING>
find . -maxdepth 1 -type f -exec ls -l {} \; | less	<MISSING>
find . -maxdepth 1 -type f -exec rm -f {} \;	<MISSING>
"find . -maxdepth 1 -type f -iname '*[aeiouy]*' -printf "".\n"" | wc -l"	<MISSING>
find . -maxdepth 1 -type f -name '*.flac'	<MISSING>
find . -maxdepth 1 -type f -name '*.txt' -not -name file.txt	<MISSING>
find . -maxdepth 1 -type f -name '*~' -delete  -or -name '#*#' -delete	<MISSING>
find . -maxdepth 1 -type f -name '.*' -exec basename {} \;	<MISSING>
find . -maxdepth 1 -type f -name '.*' -printf '%f\0'	<MISSING>
find . -maxdepth 1 -type f -name '\.*' | sed -e 's,^\./\.,,' | sort | xargs -iname mv .name name	<MISSING>
find . -maxdepth 1 -type f -name 'image*png' `	<MISSING>
"find . -maxdepth 1 -type f -newermt ""nov 22"" \! -newermt ""nov 23"" -exec echo {} +"	<MISSING>
find . -maxdepth 1 -type f -not -regex '.*\.txt'	<MISSING>
find . -maxdepth 1 -type f -perm -uga=x	<MISSING>
find . -maxdepth 1 -type f -perm -ugo=x	<MISSING>
find . -maxdepth 1 -type f -print0	<MISSING>
find . -maxdepth 1 -type f -print0 | xargs -0 sed -i 's/toreplace/replaced/g'	<MISSING>
find . -maxdepth 1 -type f -print0 | xargs rm -f	<MISSING>
"find . -maxdepth 1 -type f -printf '%t@ %p\0' | sort -r -z -n | awk 'begin { rs=""\0""; ors=""\0""; fs="""" } nr > 5 { sub(""^[0-9]*(.[0-9]*)? "", """"); print }' | xargs -0 rm -f"	<MISSING>
find . -maxdepth 1 -type f -printf '%ty-%tm\n' | sort | uniq -c	<MISSING>
find . -maxdepth 1 -type f -regex '.*\.txt' -not -name file.txt	<MISSING>
find . -maxdepth 1 -type f | md5sum	<MISSING>
find . -maxdepth 1 -type f | xargs -i ‘{}’ sudo mv {} /directory1/directory2	<MISSING>
find . -maxdepth 1 -type f | xargs -x ls -t | awk 'nr>5' | xargs -l1 rm	<MISSING>
find . -maxdepth 1 -type f |wc -l	<MISSING>
"find . -maxdepth 1 | grep -v ""exclude these"" | xargs rm -r"	<MISSING>
find . -maxdepth 1 | sort > a	<MISSING>
find . -maxdepth 2	<MISSING>
find . -maxdepth 2  -type f	<MISSING>
find . -maxdepth 2  -type f -exec ls -l {} \;	<MISSING>
find . -maxdepth 2  -type f -print0 | xargs -0 -n1 ls -l	<MISSING>
"find . -maxdepth 2 -mindepth 2 -name '*.jpg' -exec sh -c 'echo mv -- ""$0"" ""${0%%.jpg}.jpeg""' {} \;"	<MISSING>
"find . -maxdepth 2 -name ""test"" -exec rm -rf {} \;"	<MISSING>
find . -maxdepth 2 -name '*.tex'	<MISSING>
find . -maxdepth 2 -name 'onlyme*'	<MISSING>
find . -maxdepth 2 -size +100000 -exec bzip2 {} \;	<MISSING>
find . -maxdepth 2 -type d | sed 'p;s/thumbs/thumb/' | xargs -n2 mv	<MISSING>
find . -maxdepth 3 -type f	<MISSING>
find . -maxdepth 4 -name 'restore.php'	<MISSING>
find . -mindepth 1 -exec mv -t /tmp {} +	<MISSING>
find . -mindepth 1 -maxdepth 1 -type d	<MISSING>
find . -mindepth 1 -maxdepth 1 -type d -print -exec git -c {} pull \;	<MISSING>
"find . -mindepth 1 -maxdepth 1 -type d -printf ""%p\n"""	<MISSING>
"find . -mindepth 1 -maxdepth 1 -type d | awk 'begin {fs=""./""}; {print $2}' | xargs -d '\n' tar czf backup1.tar"	<MISSING>
find . -mindepth 1 -maxdepth 1 -type d | wc -l	<MISSING>
find . -mindepth 1 -maxdepth 1 -type d| grep \/a |xargs -n 1 cp -i index.html	<MISSING>
find . -mindepth 1 -maxdepth 1 -type d| xargs -n 1 cp -i index.html	<MISSING>
"find . -mindepth 1 -maxdepth 1 -type f -print0 | xargs -0 -i {} echo ""{}"""	<MISSING>
find . -mindepth 1 -mmin -60 | xargs -r ls -ld	<MISSING>
find . -mindepth 1 -name '.*' -prune -o \( -type d -print \)	<MISSING>
find . -mindepth 1 -name 'onlyme*'	<MISSING>
find . -mindepth 1 -print0|xargs -0 -i, mv , /tmp	<MISSING>
find . -mindepth 1 -type d -print0	<MISSING>
find . -mindepth 1 -type d -print0 | xargs -0 chmod -r 700	<MISSING>
find . -mindepth 1 -type d | xargs chmod 700	<MISSING>
find . -mindepth 2	<MISSING>
"find . -mindepth 2 -maxdepth 2 -name ""*.so"" -printf ""mv '%h/%f' '%h/lib%f'\n"" | sh"	<MISSING>
find . -mindepth 2 -maxdepth 2 -type d -ls	<MISSING>
find . -mindepth 2 -maxdepth 2 -type d -printf '%m %u %g %p\n'	<MISSING>
find . -mindepth 2 -type f	<MISSING>
find . -mindepth 2 | xargs chmod 700	<MISSING>
find . -mmin +10 -print	<MISSING>
find . -mmin +5 -mmin -10	<MISSING>
"find . -mmin -15 \( ! -regex "".*/\..*"" \)"	<MISSING>
find . -mmin -5	<MISSING>
find . -mmin -60	<MISSING>
find . -mmin -60 -ls	<MISSING>
find . -mmin -60 -mmin +5	<MISSING>
find . -mmin -60 -type f -exec ls -l {} +	<MISSING>
find . -mmin -60 -type f -exec ls -l {} \;	<MISSING>
find . -mmin -60 -type f -ls	<MISSING>
find . -mmin -60 -type f | xargs ls -l	<MISSING>
find . -mmin -60 | xargs -r ls -l	<MISSING>
find . -mmin -60 | xargs -r ls -ld	<MISSING>
find . -mmin -60 |xargs ls -l	<MISSING>
"find . -mmin -720 -mmin +60 -type f -name ""t*"" -exec ls -l '{}' \;"	<MISSING>
find . -mmin 0.5	<MISSING>
find . -mmin 30	<MISSING>
find . -mmin 60 -print0 | xargs -0r ls -l	<MISSING>
find . -mmin 60 -type f	<MISSING>
find . -mmin 60 | xargs '-rd\n' ls -l	<MISSING>
find . -mnewer poop	<MISSING>
find . -mount -type d -print0 | xargs -0 -n1 /tmp/count_em_$$ | sort -n	<MISSING>
find . -mtime +1	<MISSING>
find . -mtime +10 -print	<MISSING>
find . -mtime +10 | xargs rm	<MISSING>
find . -mtime +180 -exec du -ks {} \; | cut -f1 | awk '{total=total+$1}end{print total/1024}'	<MISSING>
find . -mtime +180 -exec du -sh {} \;	<MISSING>
"find . -mtime +2 | perl -pe 's{^}{\""};s{$}{\""}' > ~/output.file"	<MISSING>
find . -mtime +30 -a -mtime -7 -print0	<MISSING>
find . -mtime +7	<MISSING>
"find . -mtime +7 -name ""*.html"" -print"	<MISSING>
"find . -mtime +7 -name ""g*.html"""	<MISSING>
"find . -mtime +7 -name ""g*.html"" -execdir  /path/to/script_7zipi {} +"	<MISSING>
find . -mtime +90 -type f -exec rm -f {} \;	<MISSING>
find . -mtime -1	<MISSING>
find . -mtime -1 ! -name '.ds_store' -type f -exec basename {} \;	<MISSING>
find . -mtime -1 ! -name '.ds_store' -type f -printf '%f\n'	<MISSING>
find . -mtime -1 -ls	<MISSING>
find . -mtime -1 -prin	<MISSING>
find . -mtime -1 -print	<MISSING>
find . -mtime -1 -type f	<MISSING>
"find . -mtime -1 -type f -exec tar rvf ""$archive.tar"" '{}' \;"	<MISSING>
find . -mtime -1 -type f -print	<MISSING>
"find . -mtime -1 -type f -print0 | xargs -0 tar rvf ""$archive.tar"""	<MISSING>
find . -mtime -1 | cpio -oa 2>/dev/null | ( cd $backup_dir && cpio -imd)	<MISSING>
find . -mtime -1 | xargs ls -ld	<MISSING>
find . -mtime -1 | xargs tar --no-recursion -czf myfile.tgz	<MISSING>
find . -mtime -1.5 | xargs tar --no-recursion -czf myfile.tgz	<MISSING>
find . -mtime -14 -ls	<MISSING>
find . -mtime -14 -print	<MISSING>
find . -mtime -14 -print|xargs -i rm \;	<MISSING>
find . -mtime -2	<MISSING>
"find . -mtime -2 -type f -name ""t*"" -exec ls -l '{}' \;"	<MISSING>
find . -mtime -3 -exec rm -rf {} \;	<MISSING>
find . -mtime -30 -print	<MISSING>
find . -mtime -5	<MISSING>
find . -mtime -7	<MISSING>
"find . -mtime -7 -name ""*.html"""	<MISSING>
"find . -mtime -7 -name ""*.html"" -print"	<MISSING>
find . -mtime -7 -print	<MISSING>
find . -mtime -7 -print0 | xargs -0 tar -cjf /foo/archive.tar.bz2	<MISSING>
find . -mtime -7 -print0 | xargs -0 tar -rf /foo/archive.tar	<MISSING>
find . -mtime -7 -type d	<MISSING>
find . -mtime -7 -type f	<MISSING>
find . -mtime -7 \( '*.jpg' -o -name '*.png' \)	<MISSING>
find . -mtime 0	<MISSING>
find . -mtime 0 -not \( -name '*.swp' -o -regex '\./es.*' -o -regex '\./en.*' \)	<MISSING>
find . -mtime 0 -print	<MISSING>
find . -mtime 0 -type f	<MISSING>
find . -mtime 0 -type f -ls	<MISSING>
find . -mtime 0 | grep -v '^\./en' | grep -v '^\./es'	<MISSING>
find . -mtime 0 | grep -v '^\./en' | grep -v '^\./es' | grep -v .swp	<MISSING>
find . -mtime 1	<MISSING>
"find . -mtime 1 -name ""*.html"" -print"	<MISSING>
find . -mtime 30 -print	<MISSING>
find . -mtime 4 -daystart -exec cp -a {} /home/devnet/fileshare\$ on\ x.x.x.x/recover/ \;	<MISSING>
find . -mtime 7	<MISSING>
"find . -mtime 7 -name ""*.html"" -print"	<MISSING>
"find . -name  ""*.java"""	<MISSING>
find . -name  '*.txt' -exec cat {} \;	<MISSING>
find . -name  * -exec ls -a {} \;	<MISSING>
find . -name  \*.java	<MISSING>
"find . -name ""$1"" -type f -exec grep -i ""$2"" '{}' \;"	<MISSING>
"find . -name ""$1"" -type f -print0 | xargs -0 grep -i ""$2"""	<MISSING>
"find . -name ""$1"" > /tmp/safe_del.lst"	<MISSING>
"find . -name ""$i"" -type f -print | xargs egrep -n ""$srchstr"" >/dev/null"	<MISSING>
"find . -name ""$pattern"""	<MISSING>
"find . -name ""* *"" -exec rm -f {} \;"	<MISSING>
"find . -name ""*"" -exec chgrp -v new_group '{}' \; -exec chmod -v 770 '{}' \;"	<MISSING>
"find . -name ""*"" -exec sh -c 'chgrp -v new_group ""$0"" ; chmod -v 770 ""$0""' {} \;"	<MISSING>
"find . -name ""*"" -maxdepth 1 -exec mv -t /home/foo2/bulk2 {} +"	<MISSING>
"find . -name ""*"" -maxdepth 1 -exec sh -c 'mv ""$@"" ""$0""' /home/foo2/bulk2 {} +"	<MISSING>
"find . -name ""*"" -type f -exec dos2unix {} \;"	<MISSING>
"find . -name ""*"" \( -exec chgrp -v new_group {} \; -o -exec chmod -v 770 {} \; \)"	<MISSING>
"find . -name ""*$lower1*"" -exec bash -c 'mv ""$1"" ""${1/$2/$3}""' -- {} $lower1 $lower2 \;"	<MISSING>
"find . -name ""*$version*"""	<MISSING>
"find . -name ""*,txt"""	<MISSING>
"find . -name ""*.$1"" -delete;"	<MISSING>
"find . -name ""*.$1"" -exec rm {} \;"	<MISSING>
"find . -name ""*.*"" -type f -exec grep -l '<img-name>-<width:integer>x<height:integer>.<file-ext> syntax' {} \; | xargs rm -f"	<MISSING>
"find . -name ""*.[!r]*"" -exec grep -i -l ""search for me"" {} \;"	<MISSING>
"find . -name ""*.[ch]"" -exec grep --color -ahn ""e"" {} \;"	<MISSING>
"find . -name ""*.andnav"" -exec rename -v 's/\.andnav$/\.tile/i' {} \;"	<MISSING>
"find . -name ""*.andnav"" | rename ""s/\.andnav$/.tile/"""	<MISSING>
"find . -name ""*.andnav"" | rename -vn ""s/\.andnav$/.tile/"""	<MISSING>
"find . -name ""*.bak"" -delete"	<MISSING>
"find . -name ""*.bam"""	<MISSING>
"find . -name ""*.bam"" | xargs rm"	<MISSING>
"find . -name ""*.bash"""	<MISSING>
"find . -name ""*.bash"" |xargs grep ""echo"""	<MISSING>
"find . -name ""*.bz2"" -print0 | xargs -i{} -0 bzip2 -dc {} | cut -f, -d4"	<MISSING>
"find . -name ""*.c"""	<MISSING>
"find . -name ""*.c"" -a  -perm -777 | xargs rm -rf"	<MISSING>
"find . -name ""*.c"" -exec grep -i ""keyword"" {} "";"""	<MISSING>
"find . -name ""*.c"" -exec grep -ir ""keyword"" {} "";"""	<MISSING>
"find . -name ""*.c"" -exec wc -l {} \;"	<MISSING>
"find . -name ""*.c"" -o -name ""*.cpp"" -o -name ""*.h"" -o -name ""*.hpp"" > cscope.files"	<MISSING>
"find . -name ""*.c"" -print | vim -"	<MISSING>
"find . -name ""*.c"" -print | xargs grep ""main("""	<MISSING>
"find . -name ""*.c"" -print | xargs wc -l"	<MISSING>
"find . -name ""*.c"" -print0 | xargs -0 -n1  -i '{}' mv '{}' temp"	<MISSING>
"find . -name ""*.c"" -print0 | xargs -0 cat | wc -l"	<MISSING>
"find . -name ""*.c"" -print0 | xargs -0 rm -rf"	<MISSING>
"find . -name ""*.c"" -print0 | xargs -0 wc -l"	<MISSING>
"find . -name ""*.c"" | xargs -n3"	<MISSING>
"find . -name ""*.c"" | xargs -n3 echo"	<MISSING>
"find . -name ""*.c"" | xargs grep pattern"	<MISSING>
"find . -name ""*.c"" | xargs rm -f"	<MISSING>
"find . -name ""*.c"" | xargs rm -rf"	<MISSING>
"find . -name ""*.cc"" -print -exec grep ""xxx"" {} \;"	<MISSING>
"find . -name ""*.cc"" | xargs grep ""xxx"""	<MISSING>
"find . -name ""*.class"" -print0 | xargs -0 -n1 dirname | sort --unique"	<MISSING>
"find . -name ""*.cpp"" -exec dirname {} + | sort -u"	<MISSING>
"find . -name ""*.cpp"" -exec dirname {} \; | sort -u"	<MISSING>
"find . -name ""*.cpp"" | while read f; do dirname ""$f"" ; done | sort -u"	<MISSING>
"find . -name ""*.css"""	<MISSING>
"find . -name ""*.css"" -exec grep -l ""#content"" {} \;"	<MISSING>
"find . -name ""*.css"" -exec sed -i -r 's/#(ff0000|f00)\b/#0f0/' {} \;"	<MISSING>
"find . -name ""*.csv"""	<MISSING>
"find . -name ""*.csv"" -exec diff {} /some/other/path/{} "";"" -print"	<MISSING>
"find . -name ""*.csv"" -print"	<MISSING>
"find . -name ""*.csv"" -print0"	<MISSING>
"find . -name ""*.dat"" -type f -cmin +60 | grep ""^./[^/]\+dat"" | sed ""s/^.\///"""	<MISSING>
"find . -name ""*.db"" -type f | while read file ; do sqlite3 $file ""select * from table where column1='value'"" | grep value ; if [ $? -eq 0 ] ; then echo $file ; fi done"	<MISSING>
"find . -name ""*.ext"""	<MISSING>
"find . -name ""*.flac"" -exec basename \{\} .flac \;"	<MISSING>
"find . -name ""*.flac"" -exec ffmpeg -i {} -ab 160k -map_metadata 0 -id3v2_version 3 {}.mp3 \;"	<MISSING>
"find . -name ""*.foo"" -exec somecommand ""{}"" \;"	<MISSING>
"find . -name ""*.fq""  -exec cat '{}' ';' | fastqc  /dev/stdin"	<MISSING>
"find . -name ""*.fq"" -print0 | xargs -0 -n 1 fastqc"	<MISSING>
"find . -name ""*.fq"" | xargs -n 1 fastqc"	<MISSING>
"find . -name ""*.fq.gz""  -exec gunzip -c  '{}' ';' | fastqc  /dev/stdin"	<MISSING>
"find . -name ""*.gz"" -exec zcat ""{}"" + |grep ""test"""	<MISSING>
"find . -name ""*.gz"" -execdir gunzip '{}' \;"	<MISSING>
"find . -name ""*.gz"" | xargs gunzip"	<MISSING>
"find . -name ""*.h"" -print | xargs wc -l"	<MISSING>
"find . -name ""*.htm"" -exec mv '{}' '{}l' \;"	<MISSING>
"find . -name ""*.html"""	<MISSING>
"find . -name ""*.html"" -exec grep -lr 'base\-maps' {} \; | xargs grep -l 'base\-maps\-bot'"	<MISSING>
"find . -name ""*.html"" -print"	<MISSING>
"find . -name ""*.html"" -print | xargs -l -i wc {}"	<MISSING>
"find . -name ""*.html"" -print | zip all-html-files.zip -@"	<MISSING>
"find . -name ""*.jar"" -exec jar -tf {} \;|grep  ""message_track.properties"""	<MISSING>
"find . -name ""*.jar"" -exec unzip -l {} \;|grep -e ""archive:|message_track.properties"""	<MISSING>
"find . -name ""*.jar"" -exec zipinfo {} \;"	<MISSING>
"find . -name ""*.jar"" -print -exec jar -tf {} \; | awk '{if($1~/jar$/)jar=$1;else if($1~/message_track/)arr[jar]=$1;}end{for(i in arr){print i "" contains "" arr[i]}}'"	<MISSING>
"find . -name ""*.jar"" -print -exec jar -tf {} \;|egrep  ""jar$|message_track.properties"""	<MISSING>
"find . -name ""*.java"""	<MISSING>
"find . -name ""*.java"" -exec cp {} {}.bk \;"	<MISSING>
"find . -name ""*.java"" -exec grep ""string"" {} \+"	<MISSING>
"find . -name ""*.java"" -exec grep ""string"" {} \;"	<MISSING>
"find . -name ""*.java"" -exec grep -hin todo {} + | basename `cut -d "":"" -f 1`"	<MISSING>
"find . -name ""*.java"" -exec grep -hin todo {} + | cut -d "":"" -f 1"	<MISSING>
"find . -name ""*.java"" -exec grep -hin todo {} \;"	<MISSING>
"find . -name ""*.java"" -exec grep -i -n todo {}  \;"	<MISSING>
"find . -name ""*.java"" -exec sed -i '' s/foo/bar/g \;"	<MISSING>
"find . -name ""*.java"" -exec sed -i s/foo/bar/g \;"	<MISSING>
"find . -name ""*.java"" -exec wc -l {} \;"	<MISSING>
"find . -name ""*.java"" -print0 | xargs -0 -j % cp % destinationfolder"	<MISSING>
"find . -name ""*.java"" -print0 | xargs -0 wc"	<MISSING>
"find . -name ""*.java"" | wc -l"	<MISSING>
"find . -name ""*.java"" | xargs grep ""stock"""	<MISSING>
"find . -name ""*.java"" | xargs grep ""stock""  find . -name ""*.java"" | xargs grep ""stock""  find . -name ""*.java"" | xargs grep ""stock""  find . -name ""*.java"" | xargs grep ""stock""  find . -name ""*.java"" | xargs grep ""stock""   find . -name ""*.java"" | xargs grep ""stock"	<MISSING>
"find . -name ""*.jpg"""	<MISSING>
"find . -name ""*.jpg"" -exec convert {} -resize 50% {} \;"	<MISSING>
"find . -name ""*.jpg"" -exec ls {} +"	<MISSING>
"find . -name ""*.jpg"" -exec ls {} \;"	<MISSING>
"find . -name ""*.jpg"" -print0 | xargs -0 ls"	<MISSING>
"find . -name ""*.js"""	<MISSING>
"find . -name ""*.js"" -exec grep -ih foo {} \;"	<MISSING>
"find . -name ""*.js.compiled"" -exec rename -v 's/\.compiled$//' {} +"	<MISSING>
"find . -name ""*.ksh"" -prune"	<MISSING>
"find . -name ""*.log"" -exec echo {} \;"	<MISSING>
"find . -name ""*.log"" -exec egrep -l '^error' {} \;"	<MISSING>
"find . -name ""*.log"" -exec grep -l ""the sas system"" {} \; > sas_log_list.txt"	<MISSING>
"find . -name ""*.mov"""	<MISSING>
"find . -name ""*.mp3"" -exec mv {} ""/users/sir/music//itunes/itunes media/automatically add to itunes.localized/"" \;"	<MISSING>
"find . -name ""*.mp3"" -print0 | xargs -0 mplayer"	<MISSING>
"find . -name ""*.mpg"" -type f -print0 | xargs -0 -i {} -n 1 -p 4 ffmpeg -i {} {}.mp4"	<MISSING>
"find . -name ""*.nef"" -exec basename \{\} .nef \;"	<MISSING>
"find . -name ""*.nef"" -exec basename \{\} .nef \; | xargs> -i sh -c 'dcraw -w -c $0.nef | convert - -resize 25% $0.jpg'"	<MISSING>
"find . -name ""*.old"" -exec mv {} oldfiles \;"	<MISSING>
"find . -name ""*.pdf"" -exec rm {} \;"	<MISSING>
"find . -name ""*.pdf"" -maxdepth 1 -print0 | xargs -0 rm"	<MISSING>
"find . -name ""*.pdf"" -print"	<MISSING>
"find . -name ""*.pdf"" -print | grep -v ""^\./pdfs/"""	<MISSING>
"find . -name ""*.pdf"" -print | grep -v ""^\./pdfs/"" | xargs -j x mv x ./pdfs/"	<MISSING>
"find . -name ""*.pdf"" -print0 | xargs -0 rm"	<MISSING>
"find . -name ""*.pdf"" -print0 | xargs -0 rm -rf"	<MISSING>
"find . -name ""*.php"" -exec chmod 755 {} +"	<MISSING>
"find . -name ""*.php"" -exec chmod 755 {} + -printf '.' | wc -c"	<MISSING>
"find . -name ""*.php"" -exec chmod 755 {} \;"	<MISSING>
"find . -name ""*.php"" -exec chmod 755 {} \; -exec /bin/echo {} \; | wc -l"	<MISSING>
"find . -name ""*.php"" -exec sed -i 's/foo/bar/g' {} \;"	<MISSING>
"find . -name ""*.php"" -not -path ""./tests*"" | xargs wc -l"	<MISSING>
"find . -name ""*.php"" -print"	<MISSING>
"find . -name ""*.php"" -print | xargs sed -i 's/foo/bar/g'"	<MISSING>
"find . -name ""*.php"" -print0 -fprint >(pv --line-mode) | xargs -0 chmod 755"	<MISSING>
"find . -name ""*.php"" | pv --line-mode | xargs chmod 755"	<MISSING>
"find . -name ""*.php"" | xargs grep -v -c '^$' | awk 'begin {fs="":""} { $cnt = $cnt + $2} end {print $cnt}'"	<MISSING>
"find . -name ""*.php"" | xargs grep -v -c '^$' | awk 'begin {fs="":""} { cnt = cnt + $2} end {print cnt}'"	<MISSING>
"find . -name ""*.php"" | xargs wc -l"	<MISSING>
"find . -name ""*.pl"""	<MISSING>
"find . -name ""*.pl"" -exec ls -ld {} \;"	<MISSING>
"find . -name ""*.pl"" -ls"	<MISSING>
"find . -name ""*.pl"" | xargs tar -zcf pl.tar.gz"	<MISSING>
"find . -name ""*.png"" -mtime +50 -exec rm {} \;"	<MISSING>
"find . -name ""*.png"" -print0 | sed 'p;s/\.png/\.jpg/' | xargs -0 -n2 mv"	<MISSING>
"find . -name ""*.png"" -print0 | xargs -0 mogrify -format jpg -quality 50"	<MISSING>
"find . -name ""*.png"" -prune -o -name ""*.gif"" -prune -o -name ""*.svn"" -prune -o -print0 | xargs -0 -i files grep -ir ""foo="" files"	<MISSING>
"find . -name ""*.py"" -exec wc -l {} \; | awk '{ sum += $0} end { print sum }'"	<MISSING>
"find . -name ""*.py"" -type f -exec grep ""something"" {} \;"	<MISSING>
"find . -name ""*.py"" -type f -exec sh -c 'grep ""something"" <""$0"" >""$0.txt""' {} \;"	<MISSING>
"find . -name ""*.py"" -type f > output.txt"	<MISSING>
"find . -name ""*.py"" | xargs grep 'import antigravity'"	<MISSING>
"find . -name ""*.pyc"" -exec rm -rf {} \;"	<MISSING>
"find . -name ""*.pyc"" | xargs -0 rm -rf"	<MISSING>
"find . -name ""*.pyc"" | xargs -i rm '{}"	<MISSING>
"find . -name ""*.pyc"" | xargs -i {} rm -v ""{}"""	<MISSING>
"find . -name ""*.pyc"" | xargs rm -rf"	<MISSING>
"find . -name ""*.pyc""|xargs rm -rf"	<MISSING>
"find . -name ""*.rb"""	<MISSING>
"find . -name ""*.rb"" -or -name ""*.py"""	<MISSING>
"find . -name ""*.rb"" -type f"	<MISSING>
"find . -name ""*.rb"" -type f -exec chmod 600 {} \;"	<MISSING>
"find . -name ""*.rb"" -type f -exec wc -l \{\} \;"	<MISSING>
"find . -name ""*.rb"" -type f -print0 | xargs -0 -n 2 echo"	<MISSING>
"find . -name ""*.rb"" -type f -print0 | xargs -0 wc -l"	<MISSING>
"find . -name ""*.rb"" -type f | xargs -i {} echo hello, {} !"	<MISSING>
"find . -name ""*.rb"" -type f | xargs wc -l"	<MISSING>
"find . -name ""*.sh"""	<MISSING>
"find . -name ""*.sh"" -exec ls -ld {} \;"	<MISSING>
"find . -name ""*.sh"" -exec rm -rf '{}' \"	<MISSING>
"find . -name ""*.sh"" -print0 | xargs -0 -i file mv file ~/back.scripts"	<MISSING>
"find . -name ""*.sh"" -print0 | xargs -0 -i {} mv {} ~/back.scripts"	<MISSING>
"find . -name ""*.sh"" -print0 | xargs -0 rm -rf"	<MISSING>
"find . -name ""*.sh"" | xargs grep ""ksh"""	<MISSING>
"find . -name ""*.sh""| xargs rm -rf"	<MISSING>
"find . -name ""*.so"" -printf ""mv '%h/%f' '%h/lib%f'\n"" | bash"	<MISSING>
"find . -name ""*.so"" -printf ""mv '%h/%f' '%h/lib%f'\n"" | less -s"	<MISSING>
"find . -name ""*.sql"" -print0 -type f | xargs -0 grep ""expression"""	<MISSING>
"find . -name ""*.svg.png"" -print0 | sed 's/.svg.png//g' | xargs -0 -i nameprefix mv nameprefix.svg.png nameprefix.png"	<MISSING>
"find . -name ""*.swp"""	<MISSING>
"find . -name ""*.swp"" -print0|xargs -0 rm"	<MISSING>
"find . -name ""*.swp"" > rm"	<MISSING>
"find . -name ""*.swp""-exec rm -rf {} \;"	<MISSING>
"find . -name ""*.swp""|xargs rm"	<MISSING>
"find . -name ""*.t1"" -exec rename 's/\.t1$/.t2/' '{}' \;"	<MISSING>
"find . -name ""*.tex"""	<MISSING>
"find . -name ""*.trc"" -ctime +3 -exec ls -l {} \;"	<MISSING>
"find . -name ""*.trc"" -ctime +3 -exec rm -f {} \;"	<MISSING>
"find . -name ""*.trc"" -ctime +3 -exec rm {} \;"	<MISSING>
"find . -name ""*.txt -exec process_one {} "";"""	<MISSING>
"find . -name ""*.txt"""	<MISSING>
"find . -name ""*.txt"" -delete"	<MISSING>
"find . -name ""*.txt"" -exec $shell -c 'echo ""$0""' {} \;"	<MISSING>
"find . -name ""*.txt"" -exec echo {} \; -exec grep banana {} \;"	<MISSING>
"find . -name ""*.txt"" -exec egrep -l '^string' {} \;"	<MISSING>
"find . -name ""*.txt"" -exec egrep mystring {} \;"	<MISSING>
"find . -name ""*.txt"" -exec ls -la {} +"	<MISSING>
"find . -name ""*.txt"" -exec ls -la {} \;"	<MISSING>
"find . -name ""*.txt"" -exec ls -la {} \; -exec ./myscript.sh {} \;"	<MISSING>
"find . -name ""*.txt"" -exec python myscript.py {} +"	<MISSING>
"find . -name ""*.txt"" -exec rm {} +"	<MISSING>
"find . -name ""*.txt"" -exec rm {} \;"	<MISSING>
"find . -name ""*.txt"" -execdir ls -la {} "";"""	<MISSING>
"find . -name ""*.txt"" -newer /tmp/newerthan"	<MISSING>
"find . -name ""*.txt"" -ok rm {} \;"	<MISSING>
"find . -name ""*.txt"" -print"	<MISSING>
"find . -name ""*.txt"" -print -exec awk '$9 != """" && n < 10 {print; n++}' {} \;"	<MISSING>
"find . -name ""*.txt"" -print -exec awk '$9 != """" {print; if(nr > 9) exit; }' {} \;"	<MISSING>
"find . -name ""*.txt"" -print -exec awk '{if($9!=""""&&n<11){print;n++}}' {} \;"	<MISSING>
"find . -name ""*.txt"" -print 2>/dev/null"	<MISSING>
"find . -name ""*.txt"" -print | grep -v 'permission denied'"	<MISSING>
"find . -name ""*.txt"" -print | less"	<MISSING>
"find . -name ""*.txt"" -print0 | xargs -0 -n 1 process_one"	<MISSING>
"find . -name ""*.txt"" -print0 | xargs -0 egrep 'string'"	<MISSING>
"find . -name ""*.txt"" -print0 | xargs -0 egrep 'stuff'"	<MISSING>
"find . -name ""*.txt"" -print0 | xargs -0 egrep mystring"	<MISSING>
"find . -name ""*.txt"" -print0 | xargs -0 python hello.py"	<MISSING>
"find . -name ""*.txt"" -print0 | xargs -0 rm"	<MISSING>
"find . -name ""*.txt"" -print0 |xargs -0 du -ch"	<MISSING>
"find . -name ""*.txt"" -print0 |xargs -0 du -ch | tail -n1"	<MISSING>
"find . -name ""*.txt"" -printf ""%f\n"""	<MISSING>
"find . -name ""*.txt"" -printf ""%f\n"" > /tmp/a"	<MISSING>
"find . -name ""*.txt"" -printf ""%m %f \t %s bytes \t%y\n"""	<MISSING>
"find . -name ""*.txt"" -printf ""%t+ %p\n"""	<MISSING>
"find . -name ""*.txt"" -printf ""%t+ %p\n"" | sort | tail -1"	<MISSING>
"find . -name ""*.txt"" -printf ""%t@ %p\n"" | sort | tail -1"	<MISSING>
"find . -name ""*.txt"" -prune -o -print"	<MISSING>
"find . -name ""*.txt"" -type f -daystart -mtime +0 -mtime -2"	<MISSING>
"find . -name ""*.txt"" -type f -daystart -mtime -4 -mtime +0|xargs -i cp {} /home/ozuma/tmp"	<MISSING>
"find . -name ""*.txt"" -type f -print | xargs file | grep ""foo="" | cut -d: -f1"	<MISSING>
"find . -name ""*.txt"" 2>>/dev/null"	<MISSING>
"find . -name ""*.txt"" \( -exec echo {} \; -o -exec true \; \) -exec grep banana {} \;"	<MISSING>
"find . -name ""*.txt"" | parallel 'ext=""{/}"" ; mv -- {} foo/{/.}.bar.${ext##*.}'"	<MISSING>
"find . -name ""*.txt"" | parallel -j1 --tty vim"	<MISSING>
"find . -name ""*.txt"" | parallel -xj1 --tty vim"	<MISSING>
"find . -name ""*.txt"" | python hello.py"	<MISSING>
"find . -name ""*.txt"" | sed ""s/\.txt$//"" | xargs -i echo mv {}.txt {}.bak | sh"	<MISSING>
"find . -name ""*.txt"" | xargs -i '{}' mv '{}' /foo/'{}'.bar"	<MISSING>
"find . -name ""*.txt"" | xargs -i{} sh -c 'base=$(basename $1) ; name=${base%.*} ; ext=${base##*.} ; mv ""$1"" ""foo/${name}.bar.${ext}""' -- {}"	<MISSING>
"find . -name ""*.txt"" | xargs -o vim"	<MISSING>
"find . -name ""*.txt"" | xargs bash -c '</dev/tty vim ""$@""' ignoreme"	<MISSING>
"find . -name ""*.txt"" | xargs grep -i ""text_pattern"""	<MISSING>
"find . -name ""*.txt"" | xargs python -c 'import sys; print sys.argv[1:]'"	<MISSING>
"find . -name ""*.txt"" | xargs rm"	<MISSING>
"find . -name ""*.txt"" | xargs rm -rf"	<MISSING>
"find . -name ""*.txt"" | xargs vim"	<MISSING>
"find . -name ""*.undo"" -ls | awk '{total += $7} end {print total}'"	<MISSING>
"find . -name ""*.undo"" -ls | perl -lane '$t += $f[6]; end{print $t}'"	<MISSING>
"find . -name ""*.ver"""	<MISSING>
"find . -name ""*.ver"" -exec grep 'test_version=' '{}' ';' -print;"	<MISSING>
"find . -name ""*.ver"" -exec grep -p 'model-manufacturer:.\n.' '{}' ';' -print"	<MISSING>
"find . -name ""*.xml"" -exec echo {} \;"	<MISSING>
"find . -name ""*.xml"" -exec grep ""error"" /dev/null '{}' \+"	<MISSING>
"find . -name ""*.xml"" -exec grep -hff /tmp/a {} \;"	<MISSING>
"find . -name ""*.xml"" -exec grep -hff <(find . -name ""*.txt"" -printf ""%f\n"") {} \;"	<MISSING>
"find . -name ""*.xml"" -exec sh -c 'echo ""cp $0 somewhereelse/$0""' {} \;"	<MISSING>
"find . -name ""*.zip"" -mtime +2 -print0 | xargs -0 -i {} rm {}"	<MISSING>
"find . -name ""*.zip"" -mtime +2 orint0 | xargs -0 rm"	<MISSING>
"find . -name ""*1"" -exec grep ""1"" {} +"	<MISSING>
"find . -name ""*1"" -exec grep ""1"" {} \;"	<MISSING>
"find . -name ""*1"" -print0 |xargs -0 grep ""1"""	<MISSING>
"find . -name ""*:*"""	<MISSING>
"find . -name ""*[1k]*"""	<MISSING>
"find . -name ""*_test.rb"" | xargs -p 4 rename s/_test/_spec/"	<MISSING>
"find . -name ""*_test.rb"" | xargs -s 1000000 rename s/_test/_spec/"	<MISSING>
"find . -name ""*_test.rb"" | xargs rename s/_test/_spec/"	<MISSING>
"find . -name ""*album*"" -a -name ""*vacations*"" -a -not -name ""*2015*"""	<MISSING>
"find . -name ""*bash*"""	<MISSING>
"find . -name ""*bash*"" | xargs"	<MISSING>
"find . -name ""*bills*"" -print0 | xargs -0 grep put"	<MISSING>
"find . -name ""*bmp"" -print0 | xargs -0 -l -i basename ""{}"" "".bmp"" | xargs -0 -l -i convert ""{}.bmp"" ""{}.png"""	<MISSING>
"find . -name ""*bsd*"" -print"	<MISSING>
"find . -name ""*c"" -print0 | xargs -0 -n1 cp xyz.c"	<MISSING>
"find . -name ""*failed.ipynb"" | cpio -pd ./fails"	<MISSING>
"find . -name ""*fink*"" -print"	<MISSING>
"find . -name ""*fink*"" |xargs ls -l"	<MISSING>
"find . -name ""*foo"""	<MISSING>
"find . -name ""*foo*"" | sed -e ""s/'/\\\'/g"" -e 's/""/\\""/g' -e 's/ /\\ /g' | xargs cp /your/dest"	<MISSING>
"find . -name ""*foobar*"" -exec sh -c 'cp -- ""$@"" ~/foo/bar' sh {} +"	<MISSING>
"find . -name ""*jpg"" -exec du -k {} \; | awk '{ total += $1 } end { print total/1024 "" mb total"" }'"	<MISSING>
"find . -name ""*js"" -o -name ""*rb"""	<MISSING>
"find . -name ""*linkin park"""	<MISSING>
"find . -name ""*oraenv*"" -type f -exec file {} \;"	<MISSING>
"find . -name ""*rb"" -print0 | xargs -0 head -10000"	<MISSING>
"find . -name ""*rc.conf"" -exec chmod o+r '{}' \;"	<MISSING>
"find . -name ""*sh*"""	<MISSING>
"find . -name ""*shp*"" -exec mv {} ../shp_all/ \;"	<MISSING>
"find . -name ""*sub*.cpp"""	<MISSING>
"find . -name ""*txt"" -type f -print | xargs rm"	<MISSING>
"find . -name ""*zip"" -type f | xargs ls -ltr | tail -1"	<MISSING>
"find . -name ""*~"" -delete"	<MISSING>
"find . -name ""*~"" -exec rm {} \;"	<MISSING>
"find . -name ""*~"" -print | xargs rm"	<MISSING>
"find . -name ""-f"" -exec rm {} \;"	<MISSING>
"find . -name "".*\.i"""	<MISSING>
"find . -name ""._*"" -print0 | xargs -0 rm -rf"	<MISSING>
"find . -name "".aux"""	<MISSING>
"find . -name "".ds_store"""	<MISSING>
"find . -name "".ds_store"" -delete"	<MISSING>
"find . -name "".ds_store"" -exec rm {} \;"	<MISSING>
"find . -name "".ds_store"" -print0 | xargs -0 rm -rf"	<MISSING>
"find . -name "".git"" -type d | sed 's/\/.git//' |  xargs -p10 -i{} git -c {} pull"	<MISSING>
"find . -name "".txt"""	<MISSING>
"find . -name "".txt"" -exec rm ""{}"" \;"	<MISSING>
"find . -name "".txt"" | grep ""foo"" | xargs rm"	<MISSING>
"find . -name "".txt"" | grep a"	<MISSING>
"find . -name ""a"" -type d | xargs rmdir"	<MISSING>
"find . -name ""a.txt"" -print"	<MISSING>
"find . -name ""abc"" -exec grep ""xyz"" {} \;"	<MISSING>
"find . -name ""accepted_hits.bam"""	<MISSING>
"find . -name ""article.xml"" -exec rename 's/article/001_article/;' '{}' \;"	<MISSING>
"find . -name ""articles.jpg"""	<MISSING>
"find . -name ""articles.jpg"" -exec chmod 644 {} \;"	<MISSING>
"find . -name ""assemblyinfo.cs"" -print0 | xargs -0 git diff --"	<MISSING>
"find . -name ""core"" -exec rm -f {} \;"	<MISSING>
"find . -name ""d"" -type d"	<MISSING>
"find . -name ""file*"""	<MISSING>
"find . -name ""file*"" -print0 | xargs -0 perl -ple ''"	<MISSING>
"find . -name ""file-containing-can't"" -exec grep ""can't"" '{}' \; -print"	<MISSING>
"find . -name ""file-to-find"" -exec rm -rf {} +"	<MISSING>
"find . -name ""file-to-find"" -exec rm -rf {} \;"	<MISSING>
"find . -name ""file.ext"" -execdir pwd ';'"	<MISSING>
"find . -name ""file.ext""| grep ""foobar"" | xargs -i cp -p ""{}"" ."	<MISSING>
"find . -name ""file2015-0*"""	<MISSING>
"find . -name ""file2015-0*"" -exec mv {} .. \;"	<MISSING>
"find . -name ""file2015-0*"" | head -400 | xargs -i filename mv  filename"	<MISSING>
"find . -name ""file?"" -exec rm -vf {} \;"	<MISSING>
"find . -name ""file_*"" -follow -type f -print0 | xargs -0 zcat | agrep -deoe 'grep'"	<MISSING>
"find . -name ""filename including space"""	<MISSING>
"find . -name ""filename including space"" -print0"	<MISSING>
"find . -name ""filename including space"" -print0 | tee my_teed_file | xargs -0 ls -aldf > log.txt"	<MISSING>
"find . -name ""filename including space"" -print0 | xargs -0 -i '{}' sh -c 'ls -aldf {} >> log.txt; rm -rdf {}'"	<MISSING>
"find . -name ""filename including space"" -print0 | xargs -0 ls -aldf > log.txt"	<MISSING>
"find . -name ""filename including space"" -print0 | xargs -0 rm -rdf"	<MISSING>
"find . -name ""filename"" -and -not -path ""*/myfolder/filename"" -delete"	<MISSING>
"find . -name ""filename"" -and -not -path ""./path/to/filename"" -delete"	<MISSING>
"find . -name ""filename_regex""|grep -v '.svn' -v '.pdv'|xargs grep -i 'your search string'"	<MISSING>
"find . -name ""files.ext"""	<MISSING>
"find . -name ""foo*"""	<MISSING>
"find . -name ""foo.*"""	<MISSING>
"find . -name ""foo.txt"" | awk '{ print ""mv ""$0"" ~/bar/"" | ""sh"" }'"	<MISSING>
"find . -name ""image*.png"""	<MISSING>
"find . -name ""linkin park*"""	<MISSING>
"find . -name ""my.txt"" 2> find_error.txt"	<MISSING>
"find . -name ""my.txt"" 2>&1 | grep -v ""permission denied"""	<MISSING>
"find . -name ""my.txt"" 2>/dev/null"	<MISSING>
"find . -name ""needle.txt"""	<MISSING>
"find . -name ""new*.sh"""	<MISSING>
"find . -name ""new*.sh"" -exec rm -f '{}' \+"	<MISSING>
"find . -name ""new*.sh"" -exec rm -f '{}' \;"	<MISSING>
"find . -name ""octave"" -type d"	<MISSING>
"find . -name ""openssl"" 2>&1 | sed '/permission denied/d;'"	<MISSING>
"find . -name ""openssl"" 2>/dev/null"	<MISSING>
"find . -name ""openssl"" | sed '/permission denied/d;'"	<MISSING>
"find . -name ""orapw*"" -type f"	<MISSING>
"find . -name ""orm.*"""	<MISSING>
"find . -name ""orm.properties"""	<MISSING>
"find . -name ""pattern"" -print"	<MISSING>
"find . -name ""pattern"" | xargs git diff --"	<MISSING>
"find . -name ""photo*.jpg"""	<MISSING>
"find . -name ""process.txt"""	<MISSING>
"find . -name ""r*ver"" -mtime +1"	<MISSING>
"find . -name ""rc.conf"" -exec chmod o+r '{}' \;"	<MISSING>
"find . -name ""s1a*1s*safe"""	<MISSING>
"find . -name ""s1a*1s*safe"" | awk -f/ '{print $nf""/""$0}' | sort -t_ -k 5,5 | cut -d/ -f 2-"	<MISSING>
"find . -name ""s1a*1s*safe"" | rev | awk -f '/' '{print $1}' | rev | sort -t _ -k 5"	<MISSING>
"find . -name ""sample*"" | parallel --dry-run program {}-out {}"	<MISSING>
"find . -name ""sample*"" | xargs -i echo program {}-out {}"	<MISSING>
"find . -name ""sample*_1.txt"""	<MISSING>
"find . -name ""sample*_1.txt"" | perl -pe 's/_1\.txt$//' | parallel program {}-out {}_1.txt {}_2.txt"	<MISSING>
"find . -name ""sample*_1.txt"" | sed -n 's/_1\..*$//;h;s/$/_out/p;g;s/$/_1.txt/p;g;s/$/_2.txt/p' | xargs -l 3 echo program"	<MISSING>
"find . -name ""search"""	<MISSING>
"find . -name ""somefile"" -printf ""%p:%t@\n"" | sort -t : -k2"	<MISSING>
"find . -name ""somefiles-*-.txt"" -type f"	<MISSING>
"find . -name ""somefiles-*-.txt"" -type f -exec sed -i 'itext that gets prepended (dont remove the i)' -- '{}' \;"	<MISSING>
"find . -name ""string to be searched"" -exec grep ""text"" ""{}"" \;"	<MISSING>
"find . -name ""t*.sh"" -exec rm -vf '{}' \;"	<MISSING>
"find . -name ""vmware-*.log"" -exec rm '{}' \;"	<MISSING>
"find . -name ""x*"" -print0 | strace xargs -0 -i '{}' mv '{}' /tmp/other"	<MISSING>
find . -name $1 -type f -exec grep -i $2 '{}' \;	<MISSING>
find . -name '* *'	<MISSING>
find . -name '*$version*'	<MISSING>
find . -name '*'	<MISSING>
find . -name '*' -exec file {} \; | grep -o -p '^.+: \w+ image'	<MISSING>
find . -name '*' | xargs rm	<MISSING>
find . -name '*' | xargs wc -l	<MISSING>
find . -name '*-ghbag-*' -exec bash -c 'echo mv $0 ${0/ghbag/stream-agg}' {} \;	<MISSING>
find . -name '*-ghbag-*' -exec bash -c 'mv $0 ${0/ghbag/stream-agg}' {} \;	<MISSING>
find . -name '*-ghbag-*' -exec rename 's/ghbag/stream-agg/' {} +	<MISSING>
find . -name '*.*' -exec grep 'searchstring' {} /dev/null \;	<MISSING>
find . -name '*.[ch]'	<MISSING>
find . -name '*.[ch]' -exec grep $i {} | less	<MISSING>
find . -name '*.[ch]' -print0 | xargs -r -0 grep -l thing	<MISSING>
find . -name '*.[ch]' | xargs grep $1 | less	<MISSING>
find . -name '*.[ch]' | xargs grep -e 'expr'	<MISSING>
find . -name '*.[ch]' | xargs grep -l thing	<MISSING>
"find . -name '*.andnav' -exec sh -c 'mv ""$0"" ""${0%.andnav}.tile""' {} \;z"	<MISSING>
find . -name '*.axvw'	<MISSING>
find . -name '*.axvw' -exec grep -n 'some string' {} +	<MISSING>
find . -name '*.axvw' -print0 | xargs -0 grep -n 'some string'	<MISSING>
find . -name '*.bak' -type f -atime +30 -exec csh -c 'test -s $1:r && rm $1' '{}' ';'	<MISSING>
find . -name '*.bak' -type f -atime +30 -exec csh -c 'test -s $1:r && rm $1' '{}' ;	<MISSING>
find . -name '*.c' -ls	<MISSING>
"find . -name '*.c' -print0 |xargs -0 wc -l|grep -v total|awk '{ sum += $1; } end { print ""sum: "" sum; }'"	<MISSING>
find . -name '*.c' | xargs grep 'stdlib.h'	<MISSING>
find . -name '*.cgi' -print0 | xargs -0 chmod 755	<MISSING>
find . -name '*.cgi' -print0 | xargs -0 chmod 775	<MISSING>
find . -name '*.clj' -exec grep -r resources {} \;	<MISSING>
find . -name '*.code' -exec grep -h 'pattern' {} +	<MISSING>
find . -name '*.code' -print0 | xargs -0 grep -h 'pattern'	<MISSING>
find . -name '*.coffee' -exec awk '/re/ {print;exit}' {} \;	<MISSING>
find . -name '*.cpp' | sed -e 's/\/[^/]*$//' | sort | uniq	<MISSING>
find . -name '*.csv.gz' -exec gzip -d {} \;	<MISSING>
find . -name '*.csv.gz' -print0 | xargs -0 -n1 gzip -d	<MISSING>
find . -name '*.deb' -exec basename {} \;	<MISSING>
"find . -name '*.deb' -printf ""%f\n"""	<MISSING>
find . -name '*.deb' | xargs -n1 basename	<MISSING>
find . -name '*.def' | sed 's/\(.*\)/\1.out/' | xargs touch	<MISSING>
find . -name '*.doc'	<MISSING>
"find . -name '*.doc' -exec rm ""{}"" \;"	<MISSING>
"find . -name '*.doc' | while read i; do antiword -i 1 ""${i}"" >""${i/doc/txt}"" && rm ""${i}""; done"	<MISSING>
"find . -name '*.doc' | while read i; do antiword -i 1 ""${i}"" >""${i/doc/txt}""; done"	<MISSING>
find . -name '*.ear' -exec du -h {} \;	<MISSING>
find . -name '*.ext' | parallel echo {} '`dirname {}`'	<MISSING>
find . -name '*.foo' -exec cat {} +	<MISSING>
find . -name '*.foo' -exec cat {} \;	<MISSING>
find . -name '*.foo' -exec grep bar {} \;	<MISSING>
find . -name '*.foo' -print0 | xargs -0 -n 1 somecommand	<MISSING>
find . -name '*.gz'	<MISSING>
find . -name '*.gz' ! -name '*dvportgroups*' ! -name '*nsanity*' ! -name '*vcsupport*' ! -name '*viclient*' ! -name 'vsantraces*' -exec gunzip -vf {} \;	<MISSING>
find . -name '*.gz' -exec gunzip '{}' \;	<MISSING>
find . -name '*.gz' -print | xargs gzip -l | awk '{ print $2, $4 ;}'  | grep -v '(totals)$' | sort -n | tail -1	<MISSING>
find . -name '*.gz' -print0 | xargs -0 gunzip	<MISSING>
"find . -name '*.gz' -type f -printf '""%p""\n' | xargs rm -f"	<MISSING>
find . -name '*.gz' | xargs gunzip -vt	<MISSING>
find . -name '*.gz' | xargs gzip -l | tail -n +2 | head -n -1 | sort -k 2 | tail -n 1 | awk '{print $nf}'	<MISSING>
find . -name '*.h' -execdir /bin/diff -u '{}' /tmp/master ';'	<MISSING>
find . -name '*.h' -execdir diff -u '{}' /tmp/master ';'	<MISSING>
find . -name '*.html' -print0 | xargs -0 perl -pi -e 's/oldstring/newstring/g'	<MISSING>
find . -name '*.isolate.*.txt' -maxdepth 1 -print0 | xargs -0 -ifile mv file ./isolate	<MISSING>
find . -name '*.java'	<MISSING>
find . -name '*.java' -exec grep regex {} \;	<MISSING>
find . -name '*.java' -exec vim {} +	<MISSING>
find . -name '*.java' -mtime +7 -print	<MISSING>
find . -name '*.java' -mtime +7 -print0 | xargs -0 grep 'swt'	<MISSING>
find . -name '*.java' -newer build.xml -print	<MISSING>
find . -name '*.java' | xargs vim	<MISSING>
find . -name '*.jpg'	<MISSING>
"find . -name '*.jpg' -exec bash -c 'd=""${1%/*}""; mv ""$1"" ""$d/$d-${1##*/}""' - '{}' \;"	<MISSING>
"find . -name '*.jpg' -exec sh -c 'mv ""$0"" ""$(basename $(dirname $0))-${0%.jpg}$.jpg""' {} \;"	<MISSING>
"find . -name '*.jpg' -exec sh -c 'mv ""$0"" ""${0%.jpg}$.jpg""' {} \;"	<MISSING>
"find . -name '*.jpg' -execdir bash -c 'd=""${pwd##*/}""; [[ ""$1"" != ""$d-""* ]] && mv ""$1"" ""./$d-$1""' - '{}' \;"	<MISSING>
find . -name '*.jpg' -print ./bar/foo.jpg	<MISSING>
find . -name '*.js'	<MISSING>
find . -name '*.js' -\! -name 'glob-for-excluded-dir' -prune	<MISSING>
find . -name '*.js' -and -not -path directory	<MISSING>
find . -name '*.js' -exec grep -i 'string to search for' {} \; -print	<MISSING>
find . -name '*.js' -not -path '*exclude/this/dir*'	<MISSING>
"find . -name '*.js' -not \( -path ""./dir1"" -o -path ""./dir2/*"" -o -path ""./dir3/*""\)"	<MISSING>
"find . -name '*.js' -not \( -path ""./dir1"" -o -path ""./dir2/*"" \)"	<MISSING>
"find . -name '*.js' -or -name '*.php' | xargs wc -l | grep 'total'  | awk '{ sum += $1; print $1} end { print ""total text lines in php and js"",sum }'"	<MISSING>
find . -name '*.js' | grep -v excludeddir	<MISSING>
find . -name '*.js' | grep -v excludeddir | grep -v excludedir2 | grep -v excludedir3	<MISSING>
find . -name '*.jukebox.*.txt' -maxdepth 1 -print0 | xargs -0 -ifile mv file ./jukebox	<MISSING>
find . -name '*.log'  -type f  -readable  ! -size 0 -exec sed -n '1{/the sas system/q0};q1' {} \; -print	<MISSING>
find . -name '*.log' -mtime +3 -print0 | xargs -0 -n 500 -p 4 bzip2	<MISSING>
find . -name '*.log' -mtime +3 -print0 | xargs -0 -p 4 bzip2	<MISSING>
find . -name '*.log' -mtime -2 -exec grep -hc exception {} \; | grep -v :0$	<MISSING>
find . -name '*.mov'	<MISSING>
find . -name '*.mp3' -exec cp -a {} /path/to/copy/stuff/to \;	<MISSING>
find . -name '*.mp3' -name '*.jpg' -print	<MISSING>
find . -name '*.orig'  -exec echo {} \ ;	<MISSING>
find . -name '*.pdf' -exec rm -f {} \;	<MISSING>
find . -name '*.pdf' -exec rm {} +	<MISSING>
"find . -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep --with-filename --label=""{}"" --color ""$1""' -- ""$1"" \;"	<MISSING>
find . -name '*.pdf' -or -name '*.pdf'	<MISSING>
find . -name '*.pdf' -print	<MISSING>
find . -name '*.pdf' -print0 | tar czvf pdf.tar --null -t -	<MISSING>
find . -name '*.pdf' -print0 | xargs -0 -n1 -i '{}' pdftotext '{}' -	<MISSING>
find . -name '*.php' -exec chmod 755 {} \; -exec echo '+' \;	<MISSING>
find . -name '*.php' -exec chmod 755 {} \; > logfile.txt	<MISSING>
find . -name '*.php' -exec chmod 755 {} \; | tee logfile.txt	<MISSING>
find . -name '*.php' -o -name '*.inc' | xargs wc -l	<MISSING>
find . -name '*.php' -o -name '*.xml' -o -name '*.phtml'	<MISSING>
find . -name '*.php' -print0 -o -name '*.xml' -print0 -o -name '*.phtml' -print0 | xargs -0 sed -i '' 's/2013 magento inc./2012 magento inc./g'	<MISSING>
find . -name '*.php' -print0 | xargs -0 wc -l	<MISSING>
"find . -name '*.php' -print0 | xargs -0 wc -l | sort -nr | egrep -v ""libs|tmp|tests|vendor"" | less"	<MISSING>
find . -name '*.php' -type f -exec cat -- {} + | wc -l	<MISSING>
find . -name '*.php' -type f | sort | xargs wc -l	<MISSING>
find . -name '*.php' -type f | xargs cat | wc -l	<MISSING>
find . -name '*.php' -type f | xargs wc -l	<MISSING>
find . -name '*.php' -type f | xargs wc -l | sort -nr	<MISSING>
"find . -name '*.php' | awk '{gsub("" "",""\\ "", $0);print $0}' |xargs wc -l"	<MISSING>
find . -name '*.php' | wc -l	<MISSING>
find . -name '*.php' | xargs cat | awk '/[a-za-z0-9]/ {i++} end{print i}'	<MISSING>
find . -name '*.php' | xargs wc -l	<MISSING>
"find . -name '*.php' | xargs wc -l | sort -nr | egrep -v ""libs|tmp|tests|vendor"" | less"	<MISSING>
find . -name '*.php' | xargs wc -l | sort -r	<MISSING>
find . -name '*.pl' | xargs    grep -l '^use strict'	<MISSING>
find . -name '*.pl' | xargs grep -l '^use strict'	<MISSING>
find . -name '*.png' -exec bash -c 'git mv {} $(dirname {})/$(basename {} .png)48.png' \;	<MISSING>
find . -name '*.png' | grep -f <(sed 's?.*?/[0-9]_[0-9]_[0-9]_&_?' search.txt)	<MISSING>
find . -name '*.png' | grep -f <(sed s/^/[0-9]_[0-9]_[0-9]_/ search.txt)	<MISSING>
find . -name '*.png' | grep -f <(sed s?^?/[0-9]_[0-9]_[0-9]_? search.txt)	<MISSING>
find . -name '*.png' | grep -f <(sed s?^?/[0-9]_[0-9]_[0-9]_? search.txt) | xargs -i{} cp {} /path/to/dir	<MISSING>
find . -name '*.png' | grep -f search.txt	<MISSING>
find . -name '*.png' | perl match4th.pl '/tmp/search.txt' | xargs cp -t /tmp/results	<MISSING>
"find . -name '*.py' -exec bash -c 'test -f $(dirname ""$1"")/makefile' -- {} \; -print"	<MISSING>
find . -name '*.py' -exec grep 'something' {} \; > output.txt	<MISSING>
find . -name '*.py' -exec grep --color 'xrange' {} +	<MISSING>
find . -name '*.py' -exec grep -n -f search_terms.txt '{}' \;	<MISSING>
find . -name '*.py' -print0 | xargs -0 grep 'something' > output.txt	<MISSING>
find . -name '*.py' | tee output.txt | xargs grep 'something'	<MISSING>
find . -name '*.py' | xargs grep 'import'	<MISSING>
find . -name '*.py' | xargs grep some_function	<MISSING>
find . -name '*.py' | xargs perl script.pl	<MISSING>
find . -name '*.py' | xargs wc -l	<MISSING>
find . -name '*.pyc' -print0 | xargs -0 rm	<MISSING>
find . -name '*.rb'	<MISSING>
"find . -name '*.rb' ! -wholename ""./vendor/*"" -print"	<MISSING>
find . -name '*.rb' -exec grep -h jump {} \;	<MISSING>
find . -name '*.rb' | xargs -i{} sed -i '' 's/[[:space:]]*$//g' {}	<MISSING>
find . -name '*.rpm'	<MISSING>
find . -name '*.scm'	<MISSING>
find . -name '*.sql' -exec scriptname {} +	<MISSING>
find . -name '*.sql' -print0	<MISSING>
find . -name '*.text' -exec $shell -c '[ ! -f ${1%.*} ]' $shell '{}' ';' -print	<MISSING>
"find . -name '*.text' -exec sh -c 'for i do if [ ! -f ""${i%.text}"" ]; then echo == $i; fi;done' sh {} +"	<MISSING>
"find . -name '*.text' -exec sh -c 'if [ ! -f ""$(dirname ""$1"")/$(basename ""$1"" .text)"" ]; then echo == $1; fi' sh {} \;"	<MISSING>
find . -name '*.tif ' -print	<MISSING>
find . -name '*.txt	<MISSING>
find . -name '*.txt'	<MISSING>
"find . -name '*.txt' -exec echo ""{}"" \;"	<MISSING>
find . -name '*.txt' -exec grep 'sometext' '{}' \; -print	<MISSING>
find . -name '*.txt' -exec process {} \;	<MISSING>
"find . -name '*.txt' -exec sh -c 'mv ""$0"" ""${0%.txt}.txt_bak""' {} \;"	<MISSING>
"find . -name '*.txt' -not -name ""all.txt"" | xargs cat > all.txt"	<MISSING>
find . -name '*.txt' -o -name '*.html'	<MISSING>
find . -name '*.txt' -print -o -name '*.html'	<MISSING>
find . -name '*.txt' -print | xargs perl -pi -e's/windows/linux/ig' *.txt	<MISSING>
find . -name '*.txt' -print0	<MISSING>
find . -name '*.txt' -print0|xargs -0 -n 1 echo	<MISSING>
find . -name '*.txt' \! -wholename '*/.svn/*' -exec grep 'sometext' '{}' \; -print	<MISSING>
find . -name '*.txt' | cpio -pdm /path/to/destdir	<MISSING>
find . -name '*.txt' | perl -lne 'print if /c|d|z/'	<MISSING>
"find . -name '*.txt' | while ifs= read -r file; do echo ""copying $file..""; cp ""$file"" /destination; done"	<MISSING>
"find . -name '*.txt' | while read line; do echo ""copying '$line' to /tmp""; cp -- ""$line"" /tmp; done"	<MISSING>
find . -name '*.txt' | xargs egrep mystring	<MISSING>
find . -name '*.txt' | xargs zip -9 txt.zip	<MISSING>
find . -name '*.txt'|xargs grep -m1 -ri 'oyss'	<MISSING>
find . -name '*.wav' -maxdepth 1	<MISSING>
find . -name '*.what_to_find' | grep -v exludeddir1 | grep -v excludeddir2	<MISSING>
find . -name '*.xml'	<MISSING>
"find . -name '*.zip' -exec sh -c 'unzip -d ""`dirname \""{}\""`"" ""{}""' ';'"	<MISSING>
find . -name '*.zip' -exec sh -c 'unzip -d `dirname {}` {}' ';'	<MISSING>
find . -name '*.zip' -exec unzip '{}' ';'	<MISSING>
find . -name '*.zip' -execdir unzip '{}' ';'	<MISSING>
find . -name '*.zip' | xargs -n1 unzip	<MISSING>
find . -name '*1234.56789*'	<MISSING>
find . -name '*2011*' -print | xargs -n2 grep 'from: ralph'	<MISSING>
find . -name '*2011*' -print0 > /tmp/allfiles	<MISSING>
"find . -name '*[+{;""\\=?~()<>&*|$ ]*' -exec rm -f '{}' \;"	<MISSING>
"find . -name '*[+{;""\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;"	<MISSING>
find . -name '*`$version`*'	<MISSING>
find . -name '*bak' -exec rm -i {} \;	<MISSING>
"find . -name '*bills*' -exec grep -h ""put"" {} \;"	<MISSING>
find . -name '*bills*' -exec grep put {} \;	<MISSING>
find . -name '*bills*' -print	<MISSING>
find . -name '*foo'	<MISSING>
find . -name '*foo*'	<MISSING>
find . -name '*foo*' ! -name '*.bar' -type d -print	<MISSING>
find . -name '*foo*' -exec ls -lah {} \;	<MISSING>
find . -name '*foobar*' -exec cp -t ~/foobar -- {} +	<MISSING>
"find . -name '*fooobar*' | sed 's/.*/""&""/' | xargs cp ~/foo/bar"	<MISSING>
find . -name '*js' -exec grep -n 'some string' {} \;	<MISSING>
find . -name '*js' | grep -n  'some string'	<MISSING>
find . -name '*my key phrase*'	<MISSING>
find . -name '*shp*'	<MISSING>
find . -name '*shp*'   -execdir mv '{}/*' shp_all ';'	<MISSING>
"find . -name '*song*abc2009*.jpg' | sed 's/\(^.*song.*\)abc2009\(.*.jpg\)$/mv ""&"" ""\1def2010\2""/' | sh"	<MISSING>
find . -name '*test*' -exec cat {} \;	<MISSING>
find . -name '*tests*' -print -exec false \;	<MISSING>
"find . -name '*txt' -print -exec awk 'begin {nl=1 ;print filename} $9 !="""" {if (nl<11) { print $0 ; nl = nl + 1 }}' {}  \;"	<MISSING>
find . -name '*~' -ok rm {} \;	<MISSING>
find . -name '*~' -print 0 | xargs -0 -i % cp % ~/backups	<MISSING>
find . -name '*~' -print0 | xargs -0 rm	<MISSING>
find . -name '*~' | xargs rm	<MISSING>
find . -name '...' 2>/dev/null	<MISSING>
find . -name '.?*' -prune	<MISSING>
find . -name '.git' | xargs -n 1 dirname	<MISSING>
find . -name '.git' | xargs dirname	<MISSING>
find . -name '.svn' -prune -o -type f -printf '%m%c%p' | md5sum	<MISSING>
find . -name '1us*'	<MISSING>
find . -name '[-]*'	<MISSING>
find . -name '[mm][yy][ff][ii][ll][ee]*'	<MISSING>
find . -name 'a(b*' -print	<MISSING>
find . -name 'abc' -type f -exec grep -q xyz {} +	<MISSING>
find . -name 'abc*' -exec echo {}' ok' \; | column -t	<MISSING>
find . -name 'abc*' | sed 's/$/\tok/' | column -t	<MISSING>
find . -name 'build.xml' -exec ant -f {} clean-all \;	<MISSING>
find . -name 'cache*' -depth -exec rm {} \;	<MISSING>
find . -name 'cmn-*.flac'	<MISSING>
find . -name 'cmn-*.flac' -print | grep -p '[\x4e00-\x9fa5]'	<MISSING>
find . -name 'cmn-*\.flac' -print | grep -p './cmn-[\x4e00-\x9fa5]\.flac'	<MISSING>
find . -name 'cvs' -type d -exec rm -rf {} \;	<MISSING>
find . -name 'file*' -size 0 -print0 | xargs -0 rm	<MISSING>
find . -name 'file_name.extension' -print | cpio -pavd /path/to/receiving/folder	<MISSING>
find . -name 'filea_*' -o -name 'fileb_*'	<MISSING>
find . -name 'filename' | xargs -r ls -tc | head -n1	<MISSING>
find . -name 'foo.cpp' '!' -path '.svn'	<MISSING>
find . -name 'foobar' -print0 | xargs -0	<MISSING>
find . -name 'javac'	<MISSING>
find . -name 'kt[0-9] '	<MISSING>
find . -name 'lemon*.mp3' -exec mplayer {} ';'	<MISSING>
find . -name 'lemon*.mp3' -print0 | xargs -0 mplayer	<MISSING>
find . -name 'lemon*.mp3' -print0 | xargs -­0 -i mplayer '{}'	<MISSING>
find . -name 'm?' -type d -exec ./fixmbox {} +	<MISSING>
find . -name 'm?' -type d -exec mv '{}' '{}.mbox' ';' -exec mkdir '{}.mbox/messages' ';' -exec sh -c 'mv {}.mbox/*.emlx {}.mbox/messages' ';'	<MISSING>
find . -name 'my*'	<MISSING>
find . -name 'my*' -type f	<MISSING>
find . -name 'my*' -type f -ls	<MISSING>
find . -name 'myletter*' -print	<MISSING>
find . -name 'orm*'	<MISSING>
"find . -name 'php.ini' -exec sed -i 's/log_errors = off/log_errors = on/g' ""{}"" \;"	<MISSING>
find . -name 'secret' -prune -o -print	<MISSING>
find . -name 'some_text_2014.08.19*'	<MISSING>
find . -name 'spam-*' | xargs rm	<MISSING>
"find . -name 'sqlite.db' -exec sqlite3 ""{}"" 'select * from table where column1=""value""' \;"	<MISSING>
find . -name 'sqlite.db' | xargs your_script.sh	<MISSING>
find . -name 'subscription.java'	<MISSING>
find . -name 'test*'	<MISSING>
find . -name 'test*' -prune	<MISSING>
find . -name 'text.txt' -print -exec cat {} \;	<MISSING>
find . -name 'vpn_callrecord_20140409*' -type f| xargs ls -lhrt |awk '{print $9}' > log.txt	<MISSING>
"find . -name * -print0  | xargs -0 grep -ih ""string"""	<MISSING>
"find . -name * | xargs grep -ih ""string"""	<MISSING>
find . -name *.bar -maxdepth 2 -print	<MISSING>
find . -name *.c -exec grep -n -e blash {} \;	<MISSING>
find . -name *.clj | xargs grep -r resources	<MISSING>
find . -name *.code	<MISSING>
find . -name *.cpp -o -name *.h -o -name *.java	<MISSING>
find . -name *.gif -exec ls {} \;	<MISSING>
find . -name *.gz -exec gunzip '{}' \;	<MISSING>
find . -name *.ini	<MISSING>
find . -name *.ini -exec grep -w project_a {} \; -print | grep ini	<MISSING>
"find . -name *.ini -exec sh -c ""grep -q project_a {} && grep -q config_a {} && echo {}"" \;"	<MISSING>
find . -name *.jpg	<MISSING>
find . -name *.jpg -user nobody	<MISSING>
find . -name *.jpg | uniq -u	<MISSING>
find . -name *.less	<MISSING>
find . -name *.mp3	<MISSING>
find . -name *.o -perm 664 -print	<MISSING>
find . -name *.pdf	<MISSING>
find . -name *.pdf | xargs tar czvf /root/desktop/evidence/pdf.tar	<MISSING>
find . -name *.php -ctime -14	<MISSING>
"find . -name *.php -or -path ""./vendor"" -prune -or -path ""./app/cache"" -prune"	<MISSING>
find . -name *.py	<MISSING>
find . -name *.py -exec wc -l {} \; | awk '{ sum += $0} end { print sum }'	<MISSING>
find . -name *.rb	<MISSING>
find . -name *.rmv	<MISSING>
"find . -name *.so -print0 | xargs -0 -i % sh -c 'echo % ; mycommand ""%"" | grep expectedresult'"	<MISSING>
find . -name *.so -print0 | xargs -0 mycommand | grep expectedresult	<MISSING>
find . -name *.txt -exec ls {} ;\	<MISSING>
find . -name *.txt -exec ls {} \;	<MISSING>
find . -name *.txt -print	<MISSING>
find . -name *.txt | egrep mystring	<MISSING>
find . -name *.txt | xargs dos2unix	<MISSING>
find . -name *.txt | xargs egrep mystring	<MISSING>
find . -name *.xml -exec diff {} /destination/dir/2/{} \;	<MISSING>
find . -name *.xml -print0 | xargs -n 1 -0 invalid_command	<MISSING>
"find . -name *.xml | xargs grep -p ""[\x80-\xff]"""	<MISSING>
find . -name *20120805.gz -exec zcat {} \;	<MISSING>
find . -name *conf*	<MISSING>
find . -name *conf* -exec grep -hni 'matching_text' {} \; > matching_text.conf.list	<MISSING>
find . -name *disc*	<MISSING>
find . -name -type f '*.mp3' -mtime -180 -print0 | xargs -0 tar rvf music.tar	<MISSING>
find . -name .ds_store -exec git rm --ignore-unmatch --cached {} +	<MISSING>
find . -name .ds_store -exec rm {} \;	<MISSING>
find . -name .git  -prune -o -name file  -print	<MISSING>
"find . -name .git -prune -o -print | xargs grep ""string-to-search"""	<MISSING>
"find . -name .git -prune -o -type f -exec perl -i -pe ""s/\q$1\e/\l$2\e/i"" {} +"	<MISSING>
"find . -name .git -prune -o type f -name ""*$lower1*"" -exec mmv ""*$lower1*"" ""#1$lower2#2"" {} +"	<MISSING>
find . -name .git -type d -execdir git pull -v ';'	<MISSING>
find . -name .snapshot -prune -o -name '*.foo' -print	<MISSING>
find . -name .snapshot -prune -o \( -type f -mtime 0 -print0 \)	<MISSING>
find . -name .snapshot -prune -o \( \! -name *~ -print0 \)	<MISSING>
find . -name .snapshot -prune -o \( \! -name *~ -print0 \) | cpio -pmd0 /dest-dir	<MISSING>
find . -name .svn -a -type d -prune -o -print	<MISSING>
find . -name .svn -delete	<MISSING>
find . -name .svn -exec echo {} \;	<MISSING>
find . -name .svn -exec ls {} \;	<MISSING>
find . -name .svn -exec rm -rf '{}' \;	<MISSING>
find . -name .svn -exec rm -rf {} +	<MISSING>
find . -name .svn -exec rm -rf {} \;	<MISSING>
find . -name .svn -exec rm -v {} \;	<MISSING>
"find . -name .svn -type d | while read ss; do dir=$(dirname ""$ss""); test $(ls -a ""$dir"" | wc -l) == 3 && echo ""svn rm \""$dir\""""; done"	<MISSING>
find . -name .svn | xargs rm -fr	<MISSING>
find . -name .svn |xargs rm -rf	<MISSING>
find . -name .vendor -prune -o -name '*.rb' -print	<MISSING>
find . -name [ab]* -print	<MISSING>
find . -name \*.c -exec grep hogehoge {} \;	<MISSING>
find . -name \*.c -exec grep wait_event_interruptible {} +	<MISSING>
find . -name \*.c -exec grep wait_event_interruptible {} /dev/null \;	<MISSING>
find . -name \*.c -print	<MISSING>
find . -name \*.c -print | xargs grep hogehoge	<MISSING>
find . -name \*.c -print | xargs grep wait_event_interruptible /dev/null	<MISSING>
find . -name \*.c -print0	<MISSING>
find . -name \*.c -print0 | xargs -0 grep hogehoge /dev/null	<MISSING>
find . -name \*.c -print0 | xargs -0 grep wait_event_interruptible /dev/null	<MISSING>
find . -name \*.c | xargs grep hogehoge	<MISSING>
"find . -name \*.coffee -exec awk '/re/ {print filename "":"" $0;exit}' {} \;"	<MISSING>
find . -name \*.coffee -exec awk '/re/ {print;exit}' {} \;	<MISSING>
find . -name \*.coffee -exec grep -m1 -i 're' {} \;	<MISSING>
find . -name \*.css -print0 | xargs -0 grep -nh foo	<MISSING>
find . -name \*.exe -o -name \*.dll -o -print	<MISSING>
find . -name \*.ext | cat - list.txt | sort | uniq -u	<MISSING>
find . -name \*.h -print -o -name \*.cpp -print	<MISSING>
find . -name \*.html	<MISSING>
find . -name \*.html -exec grep -h string-to-find {} \;	<MISSING>
find . -name \*.java | tr '\n' '\0' | xargs -0 wc	<MISSING>
find . -name \*.jpg -exec basename {} \; | uniq -d	<MISSING>
find . -name \*.jpg -exec basename {} \; | uniq -u	<MISSING>
find . -name \*.log -print0 | xargs -i{} -0 cp -v {} /tmp/log-files	<MISSING>
find . -name \*.mp3 -print0 | xargs -0 mplayer	<MISSING>
find . -name \*.pdf -print	<MISSING>
find . -name \*.php	<MISSING>
find . -name \*.php -type f	<MISSING>
find . -name \*.php -type f -exec grep -hn '$test' {} \+	<MISSING>
find . -name \*.php -type f -exec grep -hn '$test' {} \+ | wc -l	<MISSING>
find . -name \*.php -type f -exec grep -hn '$test' {} \;	<MISSING>
find . -name \*.php -type f -exec grep -hn '$test' {} \; | wc -l	<MISSING>
find . -name \*.php -type f -exec php -l {} \;	<MISSING>
find . -name \*.php -type f -print0 | xargs -0 -grep -hn '$test' | wc -l	<MISSING>
find . -name \*.php -type f -print0 | xargs -0 -n1 -p8 grep -hn '$test'	<MISSING>
find . -name \*.php -type f -print0 | xargs -0 -n1 grep -hn '$test'	<MISSING>
find . -name \*.php -type f -print0 | xargs -0 -n1 grep -hn '$test' | wc -l	<MISSING>
find . -name \*.php -type f -print0 | xargs -0 -n1 php -l	<MISSING>
find . -name \*.php -type f -print0 | xargs -0 grep -hn '$test'	<MISSING>
find . -name \*.plist	<MISSING>
find . -name \*.py -print	<MISSING>
find . -name \*.py -print0 | xargs -0 sed -i '1a line of text here'	<MISSING>
find . -name \*.py | xargs grep some_function	<MISSING>
find . -name \*.py | xargs sed -i '1a line of text here'	<MISSING>
find . -name \*.rb	<MISSING>
find . -name \*.sql	<MISSING>
find . -name \*.sql -not -samefile $oldest_to_keep -not -newer $oldest_to_keep	<MISSING>
find . -name \*.sql | xargs \ls -1rc | tail -7 | head -1	<MISSING>
find . -name \*.tex	<MISSING>
find . -name \*.txt -exec chmod 666 {} \; -exec cp {} /dst/ \;	<MISSING>
find . -name \*.txt -exec process {} +	<MISSING>
find . -name \*.txt -exec process {} \;	<MISSING>
find . -name \*.txt -print0 | xargs -0 -i{} process {} argument	<MISSING>
find . -name \*.txt -print0 | xargs -0 process	<MISSING>
find . -name \*.xml -print0 | cpio -pamvd0 /new/parent/dir	<MISSING>
find . -name \*.xml | grep -v /workspace/ | tr '\n' '\0' | xargs -0 tar -cf xml.tar	<MISSING>
"find . -name \*.xml | while read i; do grep '<?xml' ""$i"" >/dev/null; [ $? == 0 ] && echo $i; done"	<MISSING>
find . -name \*.xml.bz2	<MISSING>
find . -name \*.xyz -exec rm {} \;	<MISSING>
find . -name \*\:\*	<MISSING>
find . -name \*\\?\*	<MISSING>
find . -name \*\\?\* > output.txt	<MISSING>
find . -name \? -daystart -mtime +0 -mtime -3	<MISSING>
find . -name \? -mtime +0	<MISSING>
find . -name \? -mtime -1	<MISSING>
find . -name __temp__* -exec rm -rf '{}' \;	<MISSING>
find . -name a\*.html	<MISSING>
find . -name aaa -print	<MISSING>
find . -name aaa.txt	<MISSING>
find . -name abc -or -type d	<MISSING>
find . -name abc | xargs grep xyz	<MISSING>
find . -name abc.xxx -exec rm {} \;	<MISSING>
find . -name assemblyinfo.cs | xargs git diff --	<MISSING>
find . -name assemblyinfo.cs | xargs git diff --name-status --	<MISSING>
find . -name bad -empty -delete	<MISSING>
"find . -name bin -prune -o -name ""*.txt"" -print"	<MISSING>
find . -name bin -prune -o -name src -prune -o -type f -print | xargs egrep -il '^from:.*unique sender'	<MISSING>
find . -name chapter1 -type f	<MISSING>
find . -name chapter1 -type f -print	<MISSING>
find . -name config -type d	<MISSING>
find . -name core -ctime +4 -exec /bin/rm -f {} \;	<MISSING>
find . -name core -exec rm {} \;	<MISSING>
find . -name core -ok rm {} \;	<MISSING>
find . -name custlist\*	<MISSING>
find . -name custlist\* | perl -ne '$path = $_; s?.*/??; $name = $_; $map{$name} = $path; ++$c; end { print $map{(sort(keys(%map)))[$c-1]} }'	<MISSING>
find . -name cvs -prune -o -exec mv '{}' `echo {} | tr '[a-z]' '[a-z]'` \; -print	<MISSING>
find . -name f* -print	<MISSING>
find . -name file* -maxdepth 1 -exec rm {} \;	<MISSING>
find . -name file1 -or -name file9	<MISSING>
find . -name file1 -print	<MISSING>
find . -name file_name	<MISSING>
find . -name filename.txt	<MISSING>
find . -name folder1 -prune -o -name filename	<MISSING>
find . -name folder1 -prune -o -name filename -delete	<MISSING>
find . -name folder1 -prune -o -name filename -print	<MISSING>
find . -name foo -type d -prune -o -name foo	<MISSING>
find . -name foo -type d -prune -o -name foo -print	<MISSING>
find . -name foo | xargs ls -tl	<MISSING>
find . -name foo.mp4 -exec dirname {} \;	<MISSING>
find . -name foo.mp4 -printf '%h\n'	<MISSING>
find . -name foo.mp4 | sed 's|/[^/]*$||'	<MISSING>
find . -name foo.rb	<MISSING>
find . -name foo.txt	<MISSING>
find . -name foo.txt -print0 | xargs -0  -i{} mv {} /some/new/location/{}	<MISSING>
find . -name foo.txt 1> tmpfile && mv `cat tmpfile` path/to/some/dir && rm tmpfile	<MISSING>
find . -name foo_fn exec sed -i s/foo_fn/bar_fn/g '{}' \;	<MISSING>
find . -name game	<MISSING>
find . -name headdump* >delete.txt	<MISSING>
find . -name heapdump* -exec rm '{}' \; -print >delete.txt	<MISSING>
find . -name heapdump* -exec rm {} \ ;	<MISSING>
find . -name heapdump*|xargs rm	<MISSING>
find . -name libegl* | xargs rm -f	<MISSING>
find . -name libgle* | xargs rm -f	<MISSING>
find . -name makefile -print0 | xargs -0 grep -nh $ | grep :235:	<MISSING>
find . -name mmm -prune -o -print	<MISSING>
find . -name mmm -prune -o -type f -print	<MISSING>
find . -name modules	<MISSING>
"find . -name modules -exec sh -c 'exit $(find {} -name modules|grep -n """"|tail -n1|cut -d: -f1)' \;"	<MISSING>
find . -name modules -exec sh -c 'exit 0' \;	<MISSING>
find . -name modules \! -exec sh -c 'find -name modules' \;	<MISSING>
find . -name modules \! -exec sh -c 'find {} -mindepth 1 -name modules|read' \; -print	<MISSING>
find . -name myfile |& grep -v 'permission denied'	<MISSING>
find . -name myfile.txt -print	<MISSING>
find . -name myletter.doc -print	<MISSING>
find . -name nameoffile -print | cpio -iv > /dev/fd0	<MISSING>
find . -name nasa -type d	<MISSING>
find . -name new -print -exec cat {} +	<MISSING>
find . -name new -print -exec cat {} \;	<MISSING>
find . -name not\* -print0 | xargs -0 rm	<MISSING>
find . -name not\* | tail -1 | xargs rm	<MISSING>
find . -name not\* | tr \\n \\0 | xargs -0 rm	<MISSING>
find . -name not\* | xargs -d '\n' rm	<MISSING>
find . -name omit-directory -prune -o -type f	<MISSING>
find . -name omit-directory -prune -o -type f  -print	<MISSING>
find . -name onlyme.sh -exec pwd \;	<MISSING>
find . -name onlyme.sh -execdir pwd \;	<MISSING>
find . -name personal -prune -o -print	<MISSING>
find . -name photo\?.jpg	<MISSING>
find . -name photoa.jpg	<MISSING>
find . -name photoa.jpg photob.jpg photoc.jpg	<MISSING>
find . -name pro\*	<MISSING>
find . -name raid -prune -o -print	<MISSING>
find . -name root | xargs cp newroot	<MISSING>
find . -name sccs -prune -o -print	<MISSING>
find . -name secret -type d -prune -o -print	<MISSING>
find . -name some_pattern -print0 | xargs -0 -i % mv % target_location	<MISSING>
find . -name some_pattern -print0 | xargs -0 -i mv {} target_location	<MISSING>
find . -name some_pattern -print0 | xargs -0 -j % mv % target_location	<MISSING>
"find . -name somedir -prune , -name bin -prune -o -name ""*.txt"" -print"	<MISSING>
find . -name something -exec ls -l {} \;	<MISSING>
find . -name something -print -quit	<MISSING>
find . -name something -print | head -n 5	<MISSING>
find . -name something | xargs -0 ls	<MISSING>
"find . -name status.c -exec stat --format ""%a %s %x %n"" {} \;"	<MISSING>
find . -name tecmint.txt	<MISSING>
find . -name test	<MISSING>
find . -name test -delete	<MISSING>
"find . -name test -exec rm -r ""{}"" \;"	<MISSING>
find . -name test -exec rm {} \;	<MISSING>
find . -name test -print	<MISSING>
find . -name test -prune	<MISSING>
find . -name test -prune -o -print	<MISSING>
"find . -name test -prune -o -regex "".*/my.*p.$"""	<MISSING>
"find . -name test -prune -regex "".*/my.*p.$"""	<MISSING>
find . -name test -type d -exec rm -r {} +	<MISSING>
find . -name test -type d -exec rm -r {} \;	<MISSING>
find . -name test -type d -print0|xargs -0 rm -r --	<MISSING>
find . -name test.txt	<MISSING>
find . -name testfile.txt	<MISSING>
find . -name tests -prune -o -type f -name '*.php' | xargs wc -l	<MISSING>
"find . -name text.txt | sed 's|.*/\(.*\)/.*|sed -i ""s@^@\1 @"" & |' | sh"	<MISSING>
find . -name thumbs.db -exec rm {} \;	<MISSING>
find . -name vmware-*.log -delete	<MISSING>
find . -name vmware-*.log -print0 | xargs -0 rm	<MISSING>
find . -name vmware-*.log | xargs -i rm -rf {}	<MISSING>
find . -name vmware-*.log | xargs rm	<MISSING>
find . -name whatever -print | xargs grep whatever	<MISSING>
find . -name xxx -exec command {} +	<MISSING>
find . -name ‘*.c’ | xargs egrep stdlib.h	<MISSING>
find . -name ‘*.mp4’ >> /tmp/$$	<MISSING>
find . -name ‘*.x’ -print0 | xargs -0 grep fred	<MISSING>
find . -name ‘*itm*’	<MISSING>
find . -name “*.[php|php]” -print	<MISSING>
find . -name “*.[php|php]” -print | xargs grep -hnt “specified string”	<MISSING>
find . -name “*.[txt|txt]” -print | xargs grep “specific string”	<MISSING>
find . -name “*.cc” |xargs grep -n “pattern”	<MISSING>
find . -name “*.jar” -print -exec jar tvf {} \; |grep -e “jar$|.class”	<MISSING>
find . -name “*.jpg”	<MISSING>
find . -name “*.jpg” | xargs gimp	<MISSING>
find . -name “*.old” -delete	<MISSING>
find . -name “*.old” -exec rm {} \;	<MISSING>
find . -name “*.old” -print | wc -l	<MISSING>
find . -name “*.old” -print | xargs rm	<MISSING>
find . -name “*.pdf” -print	<MISSING>
find . -name “core” -exec rm -f {} \;	<MISSING>
find . -name ”*.old” -print	<MISSING>
find . -newer  backup.tar.gz	<MISSING>
find . -newer /bin/sh	<MISSING>
find . -newer /reference/file	<MISSING>
find . -newer comparefile -print	<MISSING>
find . -newer disk.log -print	<MISSING>
find . -newer document -print	<MISSING>
find . -newer file	<MISSING>
find . -newer first -not -newer last -type d -print0 |  xargs -0 rmdir	<MISSING>
find . -newer httpd.conf	<MISSING>
find . -newer nov -ls	<MISSING>
find . -newer poop	<MISSING>
find . -newer some_file	<MISSING>
find . -newer tmpfile	<MISSING>
"find . -newermt ""5 days"""	<MISSING>
find . -newermt '2014-04-30 08:00:00' -not -newermt '2014-04-30 09:00:00' |xargs gunzip -c | grep 1234567890	<MISSING>
find . -newermt “sep 1 2006” -and \! -newermt “sep 10 2006”	<MISSING>
find . -nogroup	<MISSING>
find . -not -empty -type f -exec ls -s {} \; | sort -n  | head -5	<MISSING>
find . -not -iwholename '*.svn*'	<MISSING>
find . -not -iwholename '*/.git/*'	<MISSING>
find . -not -iwholename './var/foo*' -exec chown www-data '{}' \;	<MISSING>
"find . -not -name ""*.exe"" -not -name ""*.dll"""	<MISSING>
"find . -not -name ""*.exe"" -not -name ""*.dll"" -not -type d"	<MISSING>
"find . -not -name ""*.exe"" -not -name ""*.dll"" -type f"	<MISSING>
"find . -not -name ""*.pl"""	<MISSING>
"find . -not -name ""*.pl"" -not -name ""*.sh"" -not -name ""*.py"""	<MISSING>
"find . -not -name '*.png' -o -type f -print | xargs grep -icl ""foo="""	<MISSING>
"find . -not -path ""*git*"" -not -name '*git*' |grep git"	<MISSING>
find . -not -path '*/\.*'	<MISSING>
find . -not -path '*/\.*' -type f -name '*some text*'	<MISSING>
find . -not -path '*/\.*' -type f -print0 | xargs -0 sed -i 's/subdomaina\.example\.com/subdomainb.example.com/g'	<MISSING>
"find . -not -path '*/\.*' -type f \( ! -iname "".*"" \)"	<MISSING>
find . -not -path \*/.\* -type d -exec mkdir -p -- ../demo_bkp/{} \;	<MISSING>
"find . -not -regex "".*test.*"""	<MISSING>
find . -not -wholename '*/vendor/*	<MISSING>
"find . -not \( -name *.jpg -prune -o -name *.png -prune -o -name *.ttf -prune \) --type f -print0 | xargs -0 sed -i '' -e ""s/[[:blank:]]+$//"""	<MISSING>
"find . -not \( -name .svn -prune -o -name .git -prune -o -name cvs -prune \) -type f -print0 | xargs -0 file -n | grep -v binary | cut -d "":"" -f1"	<MISSING>
"find . -not \( -name .svn -prune -o -name .git -prune \) -type f -exec sed -i ""s/[[:space:]]*$//g"" ""{}"" \;"	<MISSING>
find . -not \( -name .svn -prune -o -name .git -prune \) -type f -exec sed -i 's/[:space:]+$//' \{} \;  -exec sed -i 's/\r\n$/\n/' \{} \;	<MISSING>
"find . -not \( -name .svn -prune -o -name .git -prune \) -type f -print0 | xargs -0 file -in | grep -v binary | cut -d "":"" -f1 | xargs -0 sed -i '' -e ""s/[[:space:]]*$//"""	<MISSING>
"find . -not \( -name .svn -prune -o -name .git -prune \) -type f -print0 | xargs -0 sed -i '' -e ""s/[[:space:]]*$//"""	<MISSING>
find . -not \( -path ./directory -prune \) -name \*.js	<MISSING>
find . -nouser	<MISSING>
find . -nouser -ls	<MISSING>
find . -nouser | xargs rm	<MISSING>
find . -ok tar rvf backup {} \;	<MISSING>
"find . -okdir diff {} /some/other/path/{} "";"""	<MISSING>
"find . -path ""*.git"" -prune -o -type f -print"	<MISSING>
"find . -path ""*.git*"" -prune -o -type f -print"	<MISSING>
"find . -path ""*src/main*"" -type f -iname ""*\.scala*"""	<MISSING>
"find . -path ""./dirtoexclude"" -prune \     -o -exec java -jar config/yuicompressor-2.4.2.jar --type js '{}' -o '{}' \;"	<MISSING>
"find . -path ""./foo"" -prune -o -path ""./bar"" -prune -o -type f -name ""*.html"""	<MISSING>
"find . -path ""./foo"" -prune -o -type f -name ""*.html"""	<MISSING>
"find . -path ""./sk"" -prune -o -name ""*.txt"" -print"	<MISSING>
"find . -path ""./sr*sc"""	<MISSING>
find . -path '*/.svn*' -prune -o -print	<MISSING>
find . -path '*/lang/en.css' -prune -o -name '*.css' -print	<MISSING>
find . -path './.git' -prune -o -type f	<MISSING>
find . -path './bar*' -print	<MISSING>
find . -path './kt[0-9] '	<MISSING>
find . -path './media' -prune -o -path './images' -prune -o -path './backups' -prune -o -print	<MISSING>
find . -path './pma' -prune -o -path './blog' -prune -o -path './punbb' -prune -o -path './js/3rdparty' -prune -o -print | egrep '\.php|\.as|\.sql|\.css|\.js' | grep -v '\.svn' | xargs cat | sed '/^\s*$/d' | wc -l	<MISSING>
find . -path './sr*sc'	<MISSING>
find . -path './src/emacs' -prune -o -print	<MISSING>
find . -path ./.git  -prune -o -name file  -print	<MISSING>
find . -path ./.git -prune -o -not -name '*git*' -print |grep git	<MISSING>
find . -path ./.git -prune -o -print -a \( -type f -o -type l -o -type d \) | grep '.git'	<MISSING>
find . -path ./dir1  -prune -o -print	<MISSING>
find . -path ./dir1\*  -o -print	<MISSING>
find . -path ./dir1\*  -prune -o -print	<MISSING>
find . -path ./directory -prune -o -name '*.js' -print	<MISSING>
find . -path ./ignored_directory -prune -o -name filename.txt -print	<MISSING>
find . -path ./misc -prune -o -name '*.txt' -print	<MISSING>
find . -path ./proc -prune -or -path ./sys -prune -or -path ./run -prune  -or -iname '*start*' -print	<MISSING>
find . -path ./source/script -prune -o -type f -print;	<MISSING>
find . -path ./src/emacs -prune -o -print	<MISSING>
find . -path ./vendor -prune -o \( -name '*.java' -o -name '*.xml' -o -name '*.css' \)  -exec gsed -i -e 's/\t/    /' \{} \; -exec gsed -i -e 's/[[:space:]]*$//' \{} \; -exec gsed -i -e 's/\r\n/\n/' \{} \;	<MISSING>
find . -path ‘*/1/lang/en.css’ -print	<MISSING>
find . -perm +220  -exec ls -l {} \; 2> /dev/null	<MISSING>
find . -perm +600 -print	<MISSING>
find . -perm -0002 -print	<MISSING>
find . -perm -070 -print	<MISSING>
find . -perm -100 -print	<MISSING>
find . -perm -111 -type f | sort -r	<MISSING>
find . -perm -20 -exec chmod g-w {} ;	<MISSING>
find . -perm -20 -exec chmod g-w {} ;  or  find . -perm -20 -print | xargs chmod g-w	<MISSING>
find . -perm -20 -print | xargs chmod g-w	<MISSING>
find . -perm -220	<MISSING>
find . -perm -4000 -print	<MISSING>
find . -perm -444 -perm /222 ! -perm /111	<MISSING>
find . -perm -600 -print	<MISSING>
find . -perm -664	<MISSING>
find . -perm -a+r -perm /a+w ! -perm /a+x	<MISSING>
find . -perm -g+w,u+w	<MISSING>
find . -perm -g=r -type f -exec ls -l {} \;	<MISSING>
find . -perm -o+w	<MISSING>
find . -perm -o+w,+s	<MISSING>
find . -perm /111 -type f | sed 's#^./##' | sort | diff -u .gitignore -	<MISSING>
find . -perm /220	<MISSING>
find . -perm /222	<MISSING>
find . -perm /a=x	<MISSING>
find . -perm /a=x | head	<MISSING>
find . -perm /g+s	<MISSING>
find . -perm /g+s | head	<MISSING>
find . -perm /u+w,g+w	<MISSING>
find . -perm /u=s	<MISSING>
find . -perm /u=s | head	<MISSING>
find . -perm /u=w,g=w	<MISSING>
find . -perm /u=x,g=x,o=x	<MISSING>
find . -perm 040 -type f -exec ls -l {} \;	<MISSING>
find . -perm 0644 | head	<MISSING>
find . -perm 0777 -type d -exec ls -l {} \;	<MISSING>
find . -perm 0777 -type f -exec ls -l {} \;	<MISSING>
find . -perm 600 -print | xargs chmod 666	<MISSING>
find . -perm 644 -type f -exec ls -l {} \;	<MISSING>
find . -perm 664	<MISSING>
find . -perm 755 -exec chmod 644 {} \;	<MISSING>
find . -perm 766	<MISSING>
find . -perm 766 -exec ls -l {} \;	<MISSING>
find . -perm 777  -mtime 0 -print	<MISSING>
find . -perm 777 -a -mtime 0 -a -print	<MISSING>
find . -perm 777 -print	<MISSING>
find . -perm 777 -type f -exec ls -l {} \;	<MISSING>
find . -perm a=rwx,g-w,o-w	<MISSING>
find . -perm g=r -type f -exec ls -l {} \;	<MISSING>
find . -perm u=rwx,g=rx,o=rx	<MISSING>
find . -print	<MISSING>
find . -print -exec touch {} \;	<MISSING>
find . -print -name dir -prune	<MISSING>
find . -print -name sccs -prune	<MISSING>
find . -print -o -name sccs -prune	<MISSING>
find . -print >myfile.sh	<MISSING>
"find . -print | grep ""/${prefix}${ypatt}"""	<MISSING>
find . -print | grep '.*message.*\.java'	<MISSING>
find . -print | grep '\.java'	<MISSING>
find . -print | grep -i foo	<MISSING>
find . -print | wc -l	<MISSING>
"find . -print | xargs grep -l -i ""pattern"""	<MISSING>
find . -print | xargs grep something	<MISSING>
find . -print | xargs ls	<MISSING>
find . -print | xargs ls -gilds	<MISSING>
find . -print0	<MISSING>
find . -print0 -name '*.coffee'|xargs -0 grep -m1 -ri 're'	<MISSING>
find . -print0 > mypipe	<MISSING>
find . -print0 | grep --null 'foobar' | xargs -0	<MISSING>
find . -print0 | tr -cd '\0' | wc -c	<MISSING>
find . -print0 | xargs    -0 echo	<MISSING>
find . -print0 | xargs -0	<MISSING>
"find . -print0 | xargs -0 -l -i echo ""{}"";"	<MISSING>
find . -print0 | xargs -0 command	<MISSING>
find . -print0 | xargs -0 echo	<MISSING>
find . -print0 | xargs -0 rm	<MISSING>
find . -print0 | xargs -0 stat -f '%i '	<MISSING>
find . -print0 | xargs -0 touch	<MISSING>
find . -print0 | xargs -i{} -0 echo {}	<MISSING>
find . -print0|xargs -0 command	<MISSING>
"find . -printf ""%h/%f : dernier accès le %aa %ad %ab %ay à %ah:%am:%as\n"""	<MISSING>
"find . -printf ""%h/%f : dernier accès le %ac\n"""	<MISSING>
"find . -printf ""%i \n"""	<MISSING>
"find . -printf ""%p\0"" | sort -z | while ifs= read -d '' -r f; do echo ""$(uuid) $f""; done"	<MISSING>
"find . -printf ""%p\n"" | sort | while ifs= read -r f; do echo ""$(uuid) $f""; done"	<MISSING>
"find . -printf ""%y %p\n"""	<MISSING>
find . -printf '%p '	<MISSING>
find . -printf 'name: %f owner: %u %s bytes\n'	<MISSING>
find . -print|grep ?i dbmspool.sql	<MISSING>
find . -print|grep sql|xargs grep -i dba_2pc_pending	<MISSING>
find . -print|xargs command	<MISSING>
find . -print|xargs grep v\$process	<MISSING>
find . -prune	<MISSING>
"find . -prune -name ""*.dat""  -type f -cmin +60 |xargs -i basename {} \;"	<MISSING>
find . -prune -print	<MISSING>
find . -readable	<MISSING>
"find . -regex "".*/(test)[0-9][0-9]\.txt"""	<MISSING>
"find . -regex "".*/my.*p.$"""	<MISSING>
"find . -regex "".*/my.*p.$"" -a -not -regex "".*test.*"""	<MISSING>
"find . -regex "".*\(\.txt\|\.pdf\)$"""	<MISSING>
"find . -regex "".*\.\(flv\|mp4\)"" -type f -printf '%t+ %p\n' | sort | head -n 500"	<MISSING>
"find . -regex "".*\\.rb$"""	<MISSING>
"find . -regex ""./[a-f0-9\-]\{36\}\.jpg"""	<MISSING>
"find . -regex ""xxx-xxx_[a-za-z]+_[0-9]+_[0-9]+\.jpg$"" -exec ./rename.sh ""{}"" "";"""	<MISSING>
find . -regex '.*\(net\|comm\).*'	<MISSING>
find . -regex '.*\.\(cpp\|h\)'	<MISSING>
find . -regex '.*myfile[0-9][0-9]?'	<MISSING>
find . -regex '.+\.\(php|js\)'	<MISSING>
find . -regex '.+\.js'	<MISSING>
find . -regex '.+\.php'	<MISSING>
find . -regex './[0-9].*' -print	<MISSING>
find . -regex './kt[0-9] '	<MISSING>
find . -regex '\./[a-f0-9\-]\{36\}\.jpg'	<MISSING>
find . -regex filename-regex.\*\.html	<MISSING>
find . -regex filename-regex.\*\.html -exec grep -h string-to-find {} \;	<MISSING>
"find . -regex-type posix-extended -regex "".*def/incoming.*|.*456/incoming.*"" -prune -o -print"	<MISSING>
"find . -regextype posix-egrep -regex "".*(rb|js)$"""	<MISSING>
"find . -regextype posix-egrep -regex "".+\.(c|cpp|h)$"""	<MISSING>
"find . -regextype posix-egrep -regex "".+\.(c|cpp|h)$"" -print0 | xargs -0 -n 1 ls"	<MISSING>
"find . -regextype posix-egrep -regex "".+\.(c|cpp|h)$"" | xargs -n 1 ls"	<MISSING>
"find . -regextype posix-egrep -regex ""./c(([4-6][0-9])|70)_data.txt"""	<MISSING>
find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -not -path '*/generated/*' -not -path '*/deploy/*' -print0 | xargs -0 ls -l1d	<MISSING>
find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -print0 | grep -vzz generated | grep -vzz deploy | xargs -0 ls -1ld	<MISSING>
find . -regextype posix-egrep -regex '.\*c([3-6][0-9]|70).\*'	<MISSING>
find . -regextype posix-egrep -regex '\./[a-f0-9\-]{36}\.jpg'	<MISSING>
find . -regextype posix-egrep -regex '^.*/[a-z][^/]*$' -type f	<MISSING>
"find . -regextype posix-ergep -regex "".*(rb|js)$"" -exec grep -l matchnamehere {} \;"	<MISSING>
"find . -regextype posix-extended -regex ""[a-f0-9\-]\{36\}\.jpg"""	<MISSING>
"find . -regextype posix-extended -type d -regex "".{5}"""	<MISSING>
"find . -regextype sed -regex "".*/[a-f0-9\-]\{36\}\.jpg"""	<MISSING>
"find . -regextype sed -regex ""./test[0-9]\{2\}.txt"""	<MISSING>
find . -regextype sed -regex '.*myfile[0-9]\{1,2\}'	<MISSING>
find . -samefile /path/to/file	<MISSING>
find . -size +100000 -ls	<MISSING>
find . -size +10000c -size -32000c -print	<MISSING>
find . -size +1000k	<MISSING>
find . -size +1000k -name *.log -print0 | xargs -0 ls –lsh	<MISSING>
find . -size +1000m	<MISSING>
find . -size +100k -a -size -500k	<MISSING>
find . -size +100m	<MISSING>
find . -size +100m -exec ls -s {} \;	<MISSING>
find . -size +1024 -print	<MISSING>
find . -size +1024 ?print|xargs -i rm \;	<MISSING>
find . -size +10c -print	<MISSING>
find . -size +10k	<MISSING>
find . -size +10k -exec ls -l {} \;	<MISSING>
find . -size +10k -exec ls -lh {} \+	<MISSING>
find . -size +10k -exec ls -ls {} \+ | head -1	<MISSING>
find . -size +10k -exec ls -ls {} \+ | sort -n | tail -1	<MISSING>
find . -size +10k -exec ls -ls {} \+ | sort -nr	<MISSING>
find . -size +10k -ls	<MISSING>
find . -size +10k -type f -maxdepth 1 -exec ls -lh {} \; > mylogfile.txt	<MISSING>
find . -size +10m	<MISSING>
find . -size +10m -exec ls -ld {} \;	<MISSING>
find . -size +10m -size -20m	<MISSING>
find . -size +10m -size -50m -print	<MISSING>
find . -size +1m	<MISSING>
find . -size +1m -exec mv {} files \+	<MISSING>
find . -size +1m -ok mv {} files \+	<MISSING>
find . -size +1m -print0 | xargs -0 -i '{}' mv '{}' files	<MISSING>
find . -size +24000c	<MISSING>
find . -size +270m -size -300m	<MISSING>
find . -size +2g	<MISSING>
find . -size +300m	<MISSING>
find . -size +4096k -print	<MISSING>
find . -size +5000k -type f	<MISSING>
find . -size +50k	<MISSING>
find . -size +9m	<MISSING>
find . -size -100m	<MISSING>
find . -size -10k	<MISSING>
find . -size -1c -print	<MISSING>
find . -size -1m -exec rm {} \;	<MISSING>
find . -size -24000c	<MISSING>
find . -size -26c -size +23c -exec ls -l '{}' \;	<MISSING>
find . -size -26c -size +23c -ls	<MISSING>
find . -size -26c -size +23c -print	<MISSING>
find . -size -300m	<MISSING>
find . -size -40 -xdev -print	<MISSING>
find . -size -500k	<MISSING>
find . -size -500k -print	<MISSING>
find . -size -50k	<MISSING>
find . -size -9k	<MISSING>
find . -size 0	<MISSING>
find . -size 0 -exec rm {} \;	<MISSING>
find . -size 0 -ls	<MISSING>
find . -size 0 -printf '%m %n %u %g %s %tb\n \b%td %tk:%tm %p\n'	<MISSING>
find . -size 0c -type f	<MISSING>
find . -size 0k	<MISSING>
find . -size 100m	<MISSING>
find . -size 10c -print	<MISSING>
find . -size 10m	<MISSING>
find . -size 1234c	<MISSING>
find . -size 126m	<MISSING>
find . -size 2000k	<MISSING>
find . -size 2000k -print	<MISSING>
find . -size 24000c	<MISSING>
find . -size 300m	<MISSING>
find . -size 6m	<MISSING>
"find . -type 'd' | grep -v ""nametoexclude"" | xargs rmdir"	<MISSING>
find . -type d	<MISSING>
find . -type d   -execdir echo /bin/mv {} /new/location \;	<MISSING>
find . -type d ! -iname '*.*' | while read d; do mv $d/* .; done	<MISSING>
find . -type d ! -name aa	<MISSING>
find . -type d ! -perm -111	<MISSING>
find . -type d ! -perm -g+r,u+r,o+r -prune -o -print > files_and_folders	<MISSING>
find . -type d -a ! -name '.?*' -o -name '.?*' -a ! -prune	<MISSING>
find . -type d -atime $ftime	<MISSING>
find . -type d -atime +2	<MISSING>
find . -type d -ctime $ftime	<MISSING>
find . -type d -delete	<MISSING>
find . -type d -depth	<MISSING>
"find . -type d -depth 1 -print0 | xargs -0 sh -c 'for dir; do pushd ""$dir"" && latexmk -c && popd; done' fnord"	<MISSING>
find . -type d -empty	<MISSING>
find . -type d -empty -delete	<MISSING>
"find . -type d -empty -exec rmdir ""{}"" \;"	<MISSING>
find . -type d -empty -exec rmdir {} \;	<MISSING>
find . -type d -empty -print0 | xargs -0 /bin/rmdir	<MISSING>
find . -type d -exec ./script.sh {} \;	<MISSING>
find . -type d -exec /path/to/script.sh '{}' \;	<MISSING>
find . -type d -exec /path/to/script.sh \{} \;	<MISSING>
find . -type d -exec basename {} \; | wc -l	<MISSING>
find . -type d -exec basename {} \; | wc –l	<MISSING>
"find . -type d -exec bash -c 'mv ""$1"" ""${1//foo/bar}""' -- {} \;"	<MISSING>
find . -type d -exec chgrp usergroup {} \;	<MISSING>
find . -type d -exec chmod +rx {} \;	<MISSING>
find . -type d -exec chmod 0755 {} \;	<MISSING>
find . -type d -exec chmod 2770 {} +	<MISSING>
find . -type d -exec chmod 2775 {} \;	<MISSING>
find . -type d -exec chmod 500 {} \;	<MISSING>
find . -type d -exec chmod 700 {} \;	<MISSING>
find . -type d -exec chmod 755 {} +	<MISSING>
find . -type d -exec chmod 755 {} \;	<MISSING>
find . -type d -exec chmod 775 {} \;	<MISSING>
find . -type d -exec chmod 777 {} \;	<MISSING>
find . -type d -exec chmod u=rwx,g=rx,o= '{}' \;	<MISSING>
find . -type d -exec chmod u=rwx,g=rx,o=rx {} \;	<MISSING>
find . -type d -exec chmod u=rwx,g=rx,o=x {} \;	<MISSING>
find . -type d -exec chmod ug=rwx,o= {} \;	<MISSING>
find . -type d -exec chown username {} \;	<MISSING>
find . -type d -exec du -sk {} \; |  sort -n -k 1	<MISSING>
find . -type d -exec ls -algd {} \;	<MISSING>
find . -type d -exec ls -dlrt {} \;	<MISSING>
find . -type d -exec ls -dlrt {} \; | wc --lines	<MISSING>
find . -type d -exec ls -ld {} \;	<MISSING>
find . -type d -exec mkdir -p -- /path/to/backup/{} \;	<MISSING>
"find . -type d -exec rename 's/^thumbs$/thumb/' {} "";"""	<MISSING>
find . -type d -exec rmdir {}\;	<MISSING>
"find . -type d -exec sh -c 'cd -p -- ""{}"" && pwd -p' \;"	<MISSING>
find . -type d -exec touch {}/index.html \;	<MISSING>
"find . -type d -execdir sh -c 'printf ""%s/%s\n"" ""$pwd"" ""$0""' {} \;"	<MISSING>
"find . -type d -execdir sh -c 'test -z ""$(find ""{}"" -mindepth 1 -type d)"" && echo $pwd/{}' \;"	<MISSING>
"find . -type d -iname '*foo*' -depth -exec bash -c '     echo mv ""$1"" ""${1//[ff][oo][oo]/bar}"" ' -- {} \;"	<MISSING>
find . -type d -iname '*foo*' -depth -exec rename 's@foo@bar@gi' {} +	<MISSING>
"find . -type d -iname '*foo*' -exec bash -o nocasematch -c '[[ $1 =~ (foo) ]] && mv ""$1"" ""${1//${bash_rematch[1]}/bar}""' -- {} \;"	<MISSING>
find . -type d -iname \*music_files\*	<MISSING>
find . -type d -iregex '^\./course\([0-9]\.\)*[0-9]$'	<MISSING>
find . -type d -links 2	<MISSING>
find . -type d -ls	<MISSING>
find . -type d -ls | awk '{print $4 - 2, $nf}' | sort -rn | head	<MISSING>
find . -type d -ls | head	<MISSING>
find . -type d -maxdepth 1	<MISSING>
find . -type d -maxdepth 1 -empty -delete	<MISSING>
find . -type d -maxdepth 1 -empty -print0 | xargs -0 /bin/rmdir	<MISSING>
find . -type d -maxdepth 1 -exec basename {} \;	<MISSING>
find . -type d -maxdepth 1 -exec ls -dlrt {} \;	<MISSING>
find . -type d -maxdepth 1 -mindepth 1 -exec basename {} \;	<MISSING>
find . -type d -mtime $ftime	<MISSING>
find . -type d -mtime -0 -exec mv -t /path/to/target-dir {} +	<MISSING>
find . -type d -mtime -0 -print0 | xargs -0 mv -t /path/to/target-dir	<MISSING>
find . -type d -mtime 0 -exec mv {} /path/to/target-dir \;	<MISSING>
"find . -type d -mtime 14 -printf ""%p\n"" > deploy.txt"	<MISSING>
find . -type d -mtime 14 | sed -e 's,^\./,,' > deploy.txt	<MISSING>
"find . -type d -name ""*"""	<MISSING>
"find . -type d -name ""*log*"" | xargs -i {} sh -c ""echo {};ls -la {} | tail -2"""	<MISSING>
"find . -type d -name "".*"""	<MISSING>
"find . -type d -name "".svn"" -print | parallel rm -rf"	<MISSING>
"find . -type d -name "".svn"" -print | xargs    rm -rf"	<MISSING>
"find . -type d -name "".svn"" -print | xargs rm -rf"	<MISSING>
"find . -type d -name ""0"" -execdir tar -cvf filename.tar rs* \;"	<MISSING>
"find . -type d -name ""0"" -execdir tar -cvf ~/home/directoryfortransfer/filename.tar rs* \;"	<MISSING>
"find . -type d -name ""?????????????????????????????????"""	<MISSING>
"find . -type d -name ""build*"" | sort -r"	<MISSING>
"find . -type d -name ""cpp"" -exec find {} -type f \;"	<MISSING>
"find . -type d -name ""mydir"" -exec touch '{}/abc.txt' \;"	<MISSING>
"find . -type d -name ""mydir"" -print |  sed 's/$/\/abc.txt/g' | xargs touch"	<MISSING>
"find . -type d -name ""temp*"" | xargs -n1 cp xyz.c"	<MISSING>
"find . -type d -name ""test*"""	<MISSING>
find . -type d -name '.git*' -prune -o -type f -print	<MISSING>
find . -type d -name 'test' -exec rm -rf {} \;	<MISSING>
find . -type d -name 'uploads'	<MISSING>
find . -type d -name 'uploads' -print0 | xargs -0 chmod -r 755	<MISSING>
"find . -type d -name 'uploads' | while read d; do chmod -r 755 ""$d""; done"	<MISSING>
"find . -type d -name .git -exec sh -c ""cd \""{}\""/../ && pwd && git pull && git status"" \;"	<MISSING>
"find . -type d -name .git -exec sh -c ""cd \""{}\""/../ && pwd && git pull"" \;"	<MISSING>
find . -type d -name .svn -print0|xargs -0 rm -rf	<MISSING>
find . -type d -name .svn -prune -o -print	<MISSING>
find . -type d -name aa	<MISSING>
find . -type d -name aa -prune	<MISSING>
find . -type d -name aa -prune -o -print	<MISSING>
find . -type d -name bin | cut -d/ -f1,2 | sort > b	<MISSING>
find . -type d -name build	<MISSING>
find . -type d -name cvs -exec rm -r {} \;	<MISSING>
find . -type d -name files -exec chmod ug+rwx,o-rwx {} \;	<MISSING>
find . -type d -name files -exec chmod ug=rwx,o= '{}' \;	<MISSING>
find . -type d -name proc -prune -o -name '*.js'	<MISSING>
find . -type d -name test	<MISSING>
find . -type d -name tmp -prune -o -print | cpio -dump /backup	<MISSING>
find . -type d -name “dirname” -exec rm -rf {} \;	<MISSING>
find . -type d -path '*/\.*' -prune -o -not -name '.*' -type f -name '*some text*' -print	<MISSING>
find . -type d -perm -o=w	<MISSING>
find . -type d -perm 755 -exec chmod 700 {} \;	<MISSING>
find . -type d -perm 777 -print -exec chmod 755 {} \;	<MISSING>
find . -type d -print	<MISSING>
find . -type d -print -exec bash -c 'find {} -type f -depth 1 -perm +0111 | sort -r' \;	<MISSING>
"find . -type d -print | sed -e 's/^/""/' -e 's/$/""/' | xargs chmod 755"	<MISSING>
find . -type d -print0	<MISSING>
find . -type d -print0 | tar cf directory-structure.tar --null --files-from - --no-recursion	<MISSING>
find . -type d -print0 | tar cf dirstructure.tar --null --files-from - --no-recursion	<MISSING>
"find . -type d -print0 | xargs -0 -i {} sh -c ' echo ""{}: \c"" ; find {} -maxdepth 1 -type f | wc -l ; find {} -maxdepth 1 -type f -print | sed ""s#.*/##"" '"	<MISSING>
"find . -type d -print0 | xargs -0 -i {} sh -c ' echo ""{}: \c"" ; find {} -maxdepth 1 -type f | wc -l ; find {} -maxdepth 1 -type f -print'"	<MISSING>
find . -type d -print0 | xargs -0 -n1 du -sk | sort -rn > dir-sizes.txt&	<MISSING>
find . -type d -print0 | xargs -0 chmod 2775	<MISSING>
find . -type d -print0 | xargs -0 chmod 755	<MISSING>
find . -type d -print0 | xargs -0 chmod go+rx	<MISSING>
find . -type d -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -i{} du -sh {}	<MISSING>
find . -type d -print0|xargs -0 chmod 644	<MISSING>
"find . -type d -printf ""%a@ %p\n"" | sort -n | tail -n 1 | cut -d "" "" -f 2-"	<MISSING>
find . -type d -printf '%d:%p\n' | sort -n | tail -1	<MISSING>
find . -type d -print|sed 's@^@/usr/project/@'|xargs mkdir	<MISSING>
find . -type d -print|sed 's@^@/usr/project/@'|xargs mkdir -p	<MISSING>
find . -type d -regextype posix-egrep -regex '\./processor[0-9]*/10\.(1|2)'	<MISSING>
find . -type d -regextype posix-egrep -regex '\./processor[[:digit:]]*/10\.(1|2)'	<MISSING>
find . -type d -user harry -exec chown daisy {} \;	<MISSING>
find . -type d \( -name media -o -name images -o -name backups \) -prune -o -print	<MISSING>
find . -type d \( -path dir1 -o -path dir2 -o -path dir3 \) -prune -o -print	<MISSING>
find . -type d | awk -f'/' '{print nf, $0}' | sort -k 1 -n -r | awk '{print $2}' | sed 'p;s/\(.*\)thumbs/\1thumb/' | xargs -n2 mv	<MISSING>
find . -type d | cpio -pdvm destdir	<MISSING>
find . -type d | grep -v '/\.'	<MISSING>
find . -type d | grep dirname	<MISSING>
"find . -type d | sed -e 's/\.\///g' -e 's/\./avoid/g' | grep -v avoid | awk '{print $1""\t""$1}' | xargs chgrp"	<MISSING>
find . -type d | sed -e 's/\.\///g' | awk '{print $1, $1}' | xargs chgrp	<MISSING>
"find . -type d | sed -e 's/^\.\///g' -e 's/^\./avoid/g' | grep -v avoid | awk '{print $1""\t""$1}' | xargs chgrp"	<MISSING>
find . -type d | sed -e 's/^\.\///g' | awk '{print $1, $1}' | xargs chgrp	<MISSING>
"find . -type d | sort | awk '$0 !~ last ""/"" {print last} {last=$0} end {print last}'"	<MISSING>
"find . -type d | sort | xargs -n1 -i{} bash -c ""find {} -type f -maxdepth 1 -executable | sort -r"""	<MISSING>
find . -type d | tac | xargs rmdir 2>/dev/null	<MISSING>
"find . -type d | xargs -i ""{x}"" mkdir ""{x}""/new-dir"	<MISSING>
find . -type d | xargs chmod -v 755	<MISSING>
find . -type d | xargs chmod 2775	<MISSING>
find . -type d | xargs rmdir	<MISSING>
find . -type d |xargs tar rf /somewhereelse/whatever-dirsonly.tar --no-recursion	<MISSING>
find . -type d –iname stat*	<MISSING>
find . -type d –print | wc -l	<MISSING>
find . -type f	<MISSING>
find . -type f  -mtime +7 | tee compressedp.list | parallel compress	<MISSING>
find . -type f  -mtime +7 | tee compressedp.list | xargs -i{} -p10 compress {} &	<MISSING>
find . -type f  -mtime +7 | tee compressedp.list | xargs compress	<MISSING>
"find . -type f  -name ""your_pattern"" -exec du -ch {} + 2>/dev/null | grep total$."	<MISSING>
"find . -type f  -name '*.java' -exec sh -c 'iconv -f cp1252 -t utf-8 ""$1"" > converted && mv converted ""$1""' -- {} \;"	<MISSING>
find . -type f  -perm 777 -exec ls -l {} \;	<MISSING>
find . -type f  -perm a=rwx -exec ls -l {} \;	<MISSING>
"find . -type f ! -iname ""*.txt"" -delete"	<MISSING>
"find . -type f ! -name ""$output"" -exec md5sum $md5sum_options {} + > $output"	<MISSING>
"find . -type f ! -name ""*1"" ! -name ""*2"" -print"	<MISSING>
"find . -type f ! -name '*.gz' -exec gzip ""{}"" \;"	<MISSING>
find . -type f ! -perm -444	<MISSING>
find . -type f ! -perm 777	<MISSING>
find . -type f ! -perm 777 | head	<MISSING>
"find . -type f ! -regex "".*/\(textfile.txt\|backup.tar.gz\|script.php\|database.sql\|info.txt\)"" -delete"	<MISSING>
find . -type f ! -size 0	<MISSING>
find . -type f ! -size 0 -exec ls -l '{}' \;	<MISSING>
"find . -type f ! \( -name ""*gz"" -o -name ""*tmp"" -o -name ""*xftp"" \) -exec gzip -n '{}' \;"	<MISSING>
find . -type f ( -iname '.cpp' -o -iname '.hpp' -o -iname '.c' -o -iname '.h' -o -iname '.cc' -o -iname '.hh' ) -print | xargs etags -a	<MISSING>
find . -type f -a -name '*.*'	<MISSING>
find . -type f -amin +10	<MISSING>
"find . -type f -and -iname ""*.deb"""	<MISSING>
"find . -type f -and -iname ""*.deb"" | xargs -n 1 dpkg -i"	<MISSING>
find . -type f -atime $ftime	<MISSING>
find . -type f -atime +1	<MISSING>
find . -type f -atime +30 -exec rm {} \;	<MISSING>
find . -type f -atime +30 -print	<MISSING>
find . -type f -atime +7	<MISSING>
find . -type f -atime -1	<MISSING>
find . -type f -atime -1 -exec ls -l {} \;	<MISSING>
find . -type f -atime -7	<MISSING>
find . -type f -atime 1	<MISSING>
find . -type f -atime 7	<MISSING>
find . -type f -ctime $ftime	<MISSING>
"find . -type f -ctime -$2 -name ""mylog*.log"" | xargs bzip2"	<MISSING>
find . -type f -ctime -1	<MISSING>
"find . -type f -ctime -3 -printf ""%c@ %p\n"" | sort | tail -n 5 | sed 's/[^ ]* \(.*\)/\1/'"	<MISSING>
find . -type f -ctime -3 | tail -n 5	<MISSING>
find . -type f -daystart -mtime $date_dif -exec copy_it.sh $verbose -s {} -t $to_dir \;	<MISSING>
find . -type f -daystart -mtime -1	<MISSING>
find . -type f -daystart -mtime -2	<MISSING>
find . -type f -daystart -mtime 0	<MISSING>
find . -type f -daystart -mtime 1	<MISSING>
find . -type f -empty	<MISSING>
find . -type f -empty -delete	<MISSING>
find . -type f -empty -print0 | xargs -0 /bin/rm	<MISSING>
find . -type f -empty | wc -l	<MISSING>
find . -type f -exec ./truncate {} \;	<MISSING>
find . -type f -exec /tmp/clever.sh {} \;	<MISSING>
find . -type f -exec basename {} \;	<MISSING>
find . -type f -exec basename {} \; | wc -l	<MISSING>
find . -type f -exec bash -c 'echo ${1:0:5}' funcname {} \;	<MISSING>
"find . -type f -exec bash -c 'f=""{}""; echo ""${f:2}""' \;"	<MISSING>
"find . -type f -exec bash -c 'for f do d=${f%/*} b=${f##*/} nb=${b//[^a-za-z0-9._-]/_}; [[ $b = ""$nb"" ]] || echo mv ""$f"" ""$d/$nb""; done' _ {} +"	<MISSING>
"find . -type f -exec bash -c 'myfile ""{}""'  \;"	<MISSING>
find . -type f -exec bzip2 {} +	<MISSING>
find . -type f -exec cat {} \;	<MISSING>
find . -type f -exec cat {} \; -print	<MISSING>
find . -type f -exec cat {} \; > out.txt	<MISSING>
find . -type f -exec chgrp usergroup {} \;	<MISSING>
find . -type f -exec chmod 0644 {} +	<MISSING>
find . -type f -exec chmod 0644 {} \;	<MISSING>
find . -type f -exec chmod 0660 {} +	<MISSING>
find . -type f -exec chmod 400 {} \;	<MISSING>
find . -type f -exec chmod 500 {} ';'	<MISSING>
find . -type f -exec chmod 600 {} \;	<MISSING>
find . -type f -exec chmod 644 {} +	<MISSING>
find . -type f -exec chmod 644 {} \;	<MISSING>
find . -type f -exec chmod 664 {} \;	<MISSING>
find . -type f -exec chmod 775 {} +	<MISSING>
find . -type f -exec chmod 775 {} \;	<MISSING>
find . -type f -exec chmod u+r-wx,g+rw-x,o-rwx {} \;	<MISSING>
find . -type f -exec chmod u=rw,g=r,o= '{}' \;	<MISSING>
find . -type f -exec chmod u=rw,g=r,o=r {} \; - that's 644	<MISSING>
find . -type f -exec chmod ug=rw,o= {} \;	<MISSING>
find . -type f -exec chown username {} \;	<MISSING>
find . -type f -exec cp -t target {} \+	<MISSING>
find . -type f -exec cp {} /tmp +	<MISSING>
find . -type f -exec curl --user user:pass --ftp-create-dirs -t {} https://path_to_nexus/{} \;	<MISSING>
find . -type f -exec dos2unix {} \;	<MISSING>
find . -type f -exec dos2unix {} {} \;	<MISSING>
find . -type f -exec du -sh {} + | sort -rh | head -n 15	<MISSING>
find . -type f -exec echo chmod u=rw,g=r,o= '{}' \;	<MISSING>
find . -type f -exec echo chown username {} \;	<MISSING>
find . -type f -exec echo mv -t . {} +	<MISSING>
find . -type f -exec echo {} \;	<MISSING>
find . -type f -exec echo {} \; | wc -l	<MISSING>
find . -type f -exec echo {} {} \;	<MISSING>
find . -type f -exec file '{}' \;	<MISSING>
find . -type f -exec file {} \+;	<MISSING>
find . -type f -exec file {} \;	<MISSING>
find . -type f -exec file {} \; > /tmp/filetypes.log	<MISSING>
find . -type f -exec file {} \; | awk -f: '{ if ($2 ~/[ii]mage|eps/) print $1}'	<MISSING>
find . -type f -exec file {} \; | awk -f: '{if ($2 ~/image/) print $1}'	<MISSING>
find . -type f -exec file {} \; | grep -o -p '^.+: \w+ image'	<MISSING>
find . -type f -exec fromdos {} \;	<MISSING>
"find . -type f -exec grep ""/usr/bin/perl"" {} \; -ls"	<MISSING>
"find . -type f -exec grep ""applicationx"" {} \;"	<MISSING>
"find . -type f -exec grep ""example"" '{}' \; -print"	<MISSING>
"find . -type f -exec grep ""foo"" '{}' \;"	<MISSING>
"find . -type f -exec grep ""magic"" {} \; -ls"	<MISSING>
"find . -type f -exec grep ""text"" {} /dev/null \;"	<MISSING>
find . -type f -exec grep 'needle' {} \;	<MISSING>
find . -type f -exec grep -h whatever {} \;	<MISSING>
find . -type f -exec grep -i california {} \; -print | wc -l	<MISSING>
find . -type f -exec grep -i “redeem reward” {} \; -print	<MISSING>
find . -type f -exec grep -i “redeem reward” {} \; -print 2>/dev/null	<MISSING>
find . -type f -exec grep -ih '/bin/ksh' {} \;	<MISSING>
find . -type f -exec grep -il 'foo' {} \;	<MISSING>
find . -type f -exec grep -il confirm {} \;	<MISSING>
find . -type f -exec grep -il mail	<MISSING>
find . -type f -exec grep -iq . {} \; -and -print	<MISSING>
"find . -type f -exec grep -iq . {} \; -and -print0 | xargs -0 grep ""needle text"""	<MISSING>
"find . -type f -exec grep -l ""word"" {} +"	<MISSING>
find . -type f -exec grep -l 'extjslogin' {} \; | grep -v 'change-app-name.sh' > files.txt	<MISSING>
find . -type f -exec grep -l 'needle' {} \;	<MISSING>
find . -type f -exec grep -l 'string' {} \;	<MISSING>
find . -type f -exec grep -l linux {} \;	<MISSING>
find . -type f -exec grep -li '/bin/ksh' {} \;	<MISSING>
"find . -type f -exec grep -n ""stuff"" {} \; -print"	<MISSING>
find . -type f -exec grep -n -i string_to_search_for /dev/null {} \;	<MISSING>
find . -type f -exec grep -n california {} \; -print | wc -l	<MISSING>
find . -type f -exec grep -o aaa {} \; | wc -l	<MISSING>
find . -type f -exec grep california {} \; -print	<MISSING>
find . -type f -exec grep california {} \; -print | grep surfboard > surfsup.txt	<MISSING>
find . -type f -exec grep california {} \; -print | wc -l	<MISSING>
find . -type f -exec grep some_string {} \;	<MISSING>
find . -type f -exec grep string {} \;	<MISSING>
find . -type f -exec ls -al {} \; | sort -nr -k5 | head -n 25	<MISSING>
find . -type f -exec ls -l '{}' \;	<MISSING>
find . -type f -exec ls -s {} + | sort -n -r | head -3	<MISSING>
find . -type f -exec ls -s {} \; sort -n |head -5	<MISSING>
find . -type f -exec ls -s {} \; | sort -n  | head -5	<MISSING>
find . -type f -exec ls -s {} \; | sort -n -r	<MISSING>
find . -type f -exec ls -s {} \; | sort -n -r | head -10	<MISSING>
find . -type f -exec ls -s {} \; | sort -n -r | head -5	<MISSING>
find . -type f -exec ls -s {} \; | sort -n | head -10	<MISSING>
find . -type f -exec ls -s {} \; |sort -n -r |head	<MISSING>
find . -type f -exec md5 {} \;	<MISSING>
find . -type f -exec md5sum \{\} \;	<MISSING>
find . -type f -exec md5sum {} \; > md5sums	<MISSING>
find . -type f -exec mv '{}' '{}'.jpg \;	<MISSING>
find . -type f -exec perl -i -pe 's/something/another/g' {} \;	<MISSING>
find . -type f -exec perl -pi -e 's|xxx|yyy|g' {} ;	<MISSING>
find . -type f -exec perl -wnl -e '/\s1$/ and print' {} +	<MISSING>
find . -type f -exec printf '%.0sbla\n' {} +	<MISSING>
find . -type f -exec rm -fv {} \;	<MISSING>
find . -type f -exec scp {} hostname:/tmp/{} \;	<MISSING>
find . -type f -exec sed '1s/^\xef\xbb\xbf//' -i.bak {} \; -exec rm {}.bak \;	<MISSING>
"find . -type f -exec sed -i ""s/1\.2\.3\.4/5.6.7.8/g"" {} \"	<MISSING>
find . -type f -exec sed -i 's/foo/bar/g' {} +	<MISSING>
find . -type f -exec sed -i 's/searc/replace/g' {} \;	<MISSING>
find . -type f -exec sed -i ‘s/.*abc.*/#&/’ {} \;	<MISSING>
"find . -type f -exec sh -c 'cp ""$@"" /tmp' {} +"	<MISSING>
find . -type f -exec sh -c 'echo first; false' \; -exec echo second \;	<MISSING>
find . -type f -exec sh -c 'echo first; true' \; -exec echo second \;	<MISSING>
"find . -type f -exec sh -c 'printf ""%s %s \n"" ""$(ls -l $1)"" ""$(md5sum  $1)""' '' '{}' '{}' \; | awk '{$8=""""; print $0}'"	<MISSING>
"find . -type f -exec sh -c 'printf ""%s %s \n"" ""$(ls -l $1)"" ""$(md5sum $1)""' '' '{}' '{}' \;"	<MISSING>
find . -type f -exec sh fixname.sh {} \;	<MISSING>
"find . -type f -exec stat -c ""%s %n"" {} \;"	<MISSING>
"find . -type f -exec stat -f ""%z %n"" {} \;"	<MISSING>
find . -type f -exec stat {} + > /dev/null	<MISSING>
find . -type f -exec stat {} \; > /dev/null	<MISSING>
find . -type f -exec test -x {} \; -print	<MISSING>
find . -type f -exec wc -l {} +	<MISSING>
find . -type f -exec wc -l {} \; | awk '{ sum += $0} end { print sum }'	<MISSING>
find . -type f -exec wc -l {} \; | awk '{total += $1} end{print total}'	<MISSING>
find . -type f -execdir /usr/bin/grep -ih '#!/bin/ksh' {} \; | tee /tmp/allfiles	<MISSING>
"find . -type f -execdir bash -c '   dest=${1//[0-9]/}   [[ -f $dest ]] || cp -- ""$1"" ""$dest"" ' _ {} \;"	<MISSING>
find . -type f -execdir echo '{}' ';'	<MISSING>
"find . -type f -executable -exec file {} \; | grep -we ""executable|shared object|elf|script|a\.out"""	<MISSING>
find . -type f -executable -exec sed -i 's/foo/bar/g' {} +	<MISSING>
find . -type f -executable -print	<MISSING>
"find . -type f -fprintf /tmp/files.txt ""%i,%b,%m,%n,%u,%g,%s,%cy-%cm-%cd %ct,%p\n"""	<MISSING>
find . -type f -group sunk	<MISSING>
"find . -type f -iname ""*.flac"" -o -print0 -iname ""*.mp3"" -print0 -o -iname ""*.wav"" -print0 -o -iname ""*.aac"" -print0 -o -iname ""*.wma"" -print0 | while read -d $'\0' file; do cp -ruv ""$file"" ""/media/wd/network_sync/music/$file""; done"	<MISSING>
"find . -type f -iname ""*.jpg"" -ls | awk 'begin {print ""0""}; {print $7, ""+""}; end {print ""p""}' | dc"	<MISSING>
"find . -type f -iname ""*.php""  -exec file ""{}"" + | grep crlf"	<MISSING>
"find . -type f -iname ""*.png"" -print0 | xargs -i {} -0 optipng -o5 -quiet -keep -preserve -log optipng.log ""{}"""	<MISSING>
"find . -type f -iname ""*.py"""	<MISSING>
"find . -type f -iname ""*.txt"" -print | xargs grep ""needle"""	<MISSING>
"find . -type f -iname ""*.txt"" -print0 | xargs -0 grep ""needle"""	<MISSING>
"find . -type f -iname ""*linkin park*"" -exec cp -r {} /users/tommye/desktop/lp \;"	<MISSING>
"find . -type f -iname ""*linkin park*"" | cpio -pvdmu /users/tommye/desktop/lp"	<MISSING>
"find . -type f -iname '*'""$*""'*' -ls"	<MISSING>
"find . -type f -iname '*'""${1:-}""'*' -exec ${2:-file} {} \;"	<MISSING>
find . -type f -iname '*.cpp' -exec mv -t ./test/ {} \+	<MISSING>
find . -type f -iname '*.cpp' -exec mv {} ./test/ \;	<MISSING>
find . -type f -iname '*.cr2' -print0 | xargs -0 -n 1 -p 8 -i {}	<MISSING>
find . -type f -iname '*.jpg' -print0	<MISSING>
find . -type f -iname '*.jpg' -print0 | du -c --files0-from=-	<MISSING>
find . -type f -iname '*.jpg' -print0 | xargs -r0 du -a| awk '{sum+=$1} end {print sum}'	<MISSING>
find . -type f -iname '*.mp3' -exec rename '/ /_/'  {} \;	<MISSING>
find . -type f -iname '*.txt' -print0 | xargs -0 mv {} {}.abc	<MISSING>
find . -type f -iname '*.txt' -print0 | xargs -0 rename .txt .abc	<MISSING>
"find . -type f -iname '*.un~' | while read undofile ; do file=$( echo ""$undofile"" | sed -r -e 's/.un~$//' -e 's&/\.([^/]*)&/\1&' ) ; [[ -e ""$file"" ]] || rm ""$undofile"" ; done"	<MISSING>
find . -type f -iname *.m4a -print	<MISSING>
find . -type f -iname *.mp3	<MISSING>
find . -type f -iname *.mp3 -delete	<MISSING>
"find . -type f -iname \*.html -exec grep -s ""web sites"" {} \;"	<MISSING>
"find . -type f -iname \*.mov -printf '%h\n' | sort | uniq | xargs -n 1 -d '\n' -i '{}' echo mkdir -vp ""/target_folder_root/{}"""	<MISSING>
"find . -type f -iname \*.mov -printf '%h\n' | sort | uniq | xargs -n 1 -d '\n' -i '{}' mkdir -vp ""/target_folder_root/{}"""	<MISSING>
find . -type f -iname ‘hstd*’ -daystart -mtime 1 -exec cp {} /path/to new/dir/ \;	<MISSING>
find . -type f -iname “*.mp3″ -exec rename “s/ /_/g” {} \;	<MISSING>
find . -type f -inum 314167125 -delete	<MISSING>
find . -type f -inum 31467125 -exec /bin/mv {} new_name.html \;	<MISSING>
find . -type f -inum 31467125 -exec mv {} new_name.html \;	<MISSING>
find . -type f -iregex '.*\.jpe?g'	<MISSING>
find . -type f -links 1 -print	<MISSING>
find . -type f -ls	<MISSING>
find . -type f -ls 2>/dev/null | sort -m -k8,10 | head -n5	<MISSING>
find . -type f -ls | awk '{print $(nf-3), $(nf-2), $(nf-1), $nf}'	<MISSING>
find . -type f -ls | sort +7 | head -1	<MISSING>
find . -type f -ls | sort -nrk7 | head -1 #unformatted	<MISSING>
find . -type f -maxdepth 1 ! -name '.*' -exec printf '%.0s.\n' {} + | wc -l	<MISSING>
find . -type f -maxdepth 1 -empty -print0 | xargs -0 /bin/rm	<MISSING>
"find . -type f -maxdepth 1 -exec sed -i ""s/$p_from/$p_to/g"" {} \;"	<MISSING>
find . -type f -maxdepth 1 -exec sh -c 'cat /dev/null > {}' \;	<MISSING>
find . -type f -maxdepth 1 -not -empty -print0 | xargs -0i cp /dev/null {}	<MISSING>
"find . -type f -maxdepth 1 -not -empty -print0 | xargs -0i sh -c ""cat /dev/null > \""{}\"""""	<MISSING>
"find . -type f -maxdepth 1 -print0 | xargs -0i sh -c ""cat /dev/null > \""{}\"""""	<MISSING>
"find . -type f -maxdepth 2 -name ""*.tex"""	<MISSING>
find . -type f -mmin -60 -print0 | xargs -r0 ls -l	<MISSING>
find . -type f -mmin -60 | xargs -r ls -l	<MISSING>
find . -type f -mmin 0	<MISSING>
find . -type f -mtime $ftime	<MISSING>
find . -type f -mtime +0	<MISSING>
find . -type f -mtime +1	<MISSING>
find . -type f -mtime +1000 -print0 | cpio -dumpl0 /home/user/archives	<MISSING>
find . -type f -mtime +2	<MISSING>
find . -type f -mtime +3	<MISSING>
find . -type f -mtime +3 –exec rm –f {} \;	<MISSING>
"find . -type f -mtime +30 -name ""*.log"" -exec cp {} old \;"	<MISSING>
find . -type f -mtime +31 -print0 | xargs -0 -r rm -f	<MISSING>
"find . -type f -mtime +356 -printf '%s\n'  | awk '{a+=$1;} end {printf ""%.1f gb\n"", a/2**30;}'"	<MISSING>
find . -type f -mtime +4	<MISSING>
find . -type f -mtime +5	<MISSING>
find . -type f -mtime +7	<MISSING>
find . -type f -mtime +7 -mtime -14 | xargs tar -cvf `date '+%d%m%y'_archive.tar`	<MISSING>
find . -type f -mtime +7 -mtime -14 | xargs tar -cvf `date ‘+%d%m%y’_archive.tar`	<MISSING>
find . -type f -mtime +7 -print0 | xargs    -0 rm	<MISSING>
find . -type f -mtime +7 | xargs tar -cvf `date '+%d%m%y'_archive.tar`	<MISSING>
find . -type f -mtime -1	<MISSING>
find . -type f -mtime -1 -daystart -exec ls -l {} \;	<MISSING>
find . -type f -mtime -1 -exec ls -l {} \;	<MISSING>
find . -type f -mtime -1 -print|xargs pr -n |lp	<MISSING>
find . -type f -mtime -14 -printf '%f\n' > deploy.txt	<MISSING>
find . -type f -mtime -14 > deploy.txt	<MISSING>
find . -type f -mtime -14 | cut -b 3- > deploy.txt	<MISSING>
find . -type f -mtime -14 | sed 's|./||' >deploy.txt	<MISSING>
find . -type f -mtime -2 -exec echo {} +	<MISSING>
find . -type f -mtime -3	<MISSING>
find . -type f -mtime -7 -print -exec cat {} \; | tar cf - | gzip -9	<MISSING>
find . -type f -mtime -7 | xargs tar -cvf `date '+%d%m%y'_archive.tar`	<MISSING>
find . -type f -mtime 0	<MISSING>
find . -type f -mtime 1	<MISSING>
find . -type f -mtime 1 -exec rm {} +	<MISSING>
find . -type f -mtime 2 -mtime -3 -daystart -exec ls -l {} \;	<MISSING>
find . -type f -mtime 7 | xargs tar -cvf `date '+%d%m%y'_archive.tar`	<MISSING>
"find . -type f -name ""*"" -newermt 2013-12-04 ! -newermt 2013-12-05 | xargs -i {} tar -czvf files.tar.gz {}"	<MISSING>
"find . -type f -name ""*.$extension"""	<MISSING>
"find . -type f -name ""*.*"" -not -path ""*/.git/*"" -print0 | xargs -0 $sed_cmd -i ""s/$1/$2/g"""	<MISSING>
"find . -type f -name ""*.*"" | awk -f. '{print $nf}' | sort -u"	<MISSING>
"find . -type f -name ""*.*"" | grep -o -e ""\.[^\.]+$"" | grep -o -e ""[[:alpha:]]{3,6}"" | awk '{print tolower($0)}' | sort | uniq -c | sort -rn"	<MISSING>
"find . -type f -name ""*.???"" | awk -f. '{print $nf}' | sort -u"	<MISSING>
"find . -type f -name ""*.bak"" -exec rm -f {} \;"	<MISSING>
"find . -type f -name ""*.bak"" -exec rm -i {} \;"	<MISSING>
"find . -type f -name ""*.c"" -print -exec grep -s ""main("" {} \;"	<MISSING>
"find . -type f -name ""*.class"" -exec rm -vf {} \;"	<MISSING>
"find . -type f -name ""*.css"""	<MISSING>
"find . -type f -name ""*.csv"""	<MISSING>
"find . -type f -name ""*.ext"" $(printf ""! -name %s "" $(cat list.txt))"	<MISSING>
"find . -type f -name ""*.ext"" -exec grep -v ""^{}$"" list.txt && echo {} \;"	<MISSING>
"find . -type f -name ""*.gz"" -exec zgrep 'get /foo' {} \;"	<MISSING>
"find . -type f -name ""*.gz"" -exec zgrep 'string' {} \;"	<MISSING>
"find . -type f -name ""*.htm*"" -o -name ""*.js*"" -o -name ""*.txt"""	<MISSING>
"find . -type f -name ""*.html"" > html_files.txt"	<MISSING>
"find . -type f -name ""*.html"" | zip -j all-html-files -@"	<MISSING>
"find . -type f -name ""*.java"" -exec grep -il 'foo' {} \;"	<MISSING>
"find . -type f -name ""*.java"" -exec grep -il string {} \;"	<MISSING>
"find . -type f -name ""*.java"" -exec grep -l stringbuffer {} \;"	<MISSING>
"find . -type f -name ""*.java"" -exec perl -p -i -e ""s/[ \t]$//g"" {} \;"	<MISSING>
"find . -type f -name ""*.java"" | xargs    tar cvf myfile.tar"	<MISSING>
"find . -type f -name ""*.java"" | xargs    tar rvf myfile.tar"	<MISSING>
"find . -type f -name ""*.java"" | xargs tar cvf myfile.tar"	<MISSING>
"find . -type f -name ""*.java"" | xargs tar rvf myfile.tar"	<MISSING>
"find . -type f -name ""*.java"" | xargs>    tar cvf myfile.tar"	<MISSING>
"find . -type f -name ""*.java"" | xargs>    tar rvf myfile.tar"	<MISSING>
"find . -type f -name ""*.jpg"""	<MISSING>
"find . -type f -name ""*.jpg"" -print0 | xargs -0 rename ""s/image_200x200_(\d{3})/img/"""	<MISSING>
"find . -type f -name ""*.js.compiled"""	<MISSING>
"find . -type f -name ""*.keep.$1"" -print0 | while ifs= read -r -d '' f; do mv -- ""$f"" ""${f%.keep.$1}""; done"	<MISSING>
"find . -type f -name ""*.keep.$1"" -print0 | xargs -0 rename ""s/\.keep\.$1$//"""	<MISSING>
"find . -type f -name ""*.mkv"""	<MISSING>
"find . -type f -name ""*.mp3"" -exec cp {} /tmp/musicfiles \;"	<MISSING>
"find . -type f -name ""*.mp3"" -exec rm -f {} \;"	<MISSING>
"find . -type f -name ""*.php"""	<MISSING>
"find . -type f -name ""*.php"" ! -perm 644"	<MISSING>
"find . -type f -name ""*.php"" -exec grep --with-filename ""eval(\|exec(\|base64_decode("" {} \;"	<MISSING>
"find . -type f -name ""*.php"" -exec grep --with-filename -c ""^abstract class "" {} \; | grep "":[^0]"""	<MISSING>
"find . -type f -name ""*.php"" -exec grep --with-filename -c ""^class "" {} \; | grep "":[2-99]"" | sort -t "":"" -k 2 -n -r"	<MISSING>
"find . -type f -name ""*.php"" -exec grep --with-filename -c ""^use "" {} \; | sort -t "":"" -k 2 -n -r"	<MISSING>
"find . -type f -name ""*.php"" -exec php -l {} \;"	<MISSING>
"find . -type f -name ""*.php"" -exec wc -l {} +;"	<MISSING>
"find . -type f -name ""*.pl"""	<MISSING>
"find . -type f -name ""*.pl"" -print0"	<MISSING>
"find . -type f -name ""*.py"""	<MISSING>
"find . -type f -name ""*.py[c|o]"" -exec rm -f {} +"	<MISSING>
"find . -type f -name ""*.rm"" -exec ffmpeg -i {} -sameq {}.mp3 \; -exec rm {} \;"	<MISSING>
"find . -type f -name ""*.scala"" -exec grep -b5 -a10 'null' {} \;"	<MISSING>
"find . -type f -name ""*.sh"" -exec grep -il landoflinux {} \;"	<MISSING>
"find . -type f -name ""*.sh"" -exec grep -l landoflinux {} \;"	<MISSING>
"find . -type f -name ""*.so"" -exec sh -c ""echo {} && readelf -s {} | grep mysymbol"" \;"	<MISSING>
"find . -type f -name ""*.tex"""	<MISSING>
"find . -type f -name ""*.tmp""  -exec rm -rf {} \;"	<MISSING>
"find . -type f -name ""*.txt"""	<MISSING>
"find . -type f -name ""*.txt"" ! -name readme.txt -print"	<MISSING>
"find . -type f -name ""*.txt"" ! -path ""./movies/*"" ! -path ""./downloads/*"" ! -path ""./music/*"""	<MISSING>
"find . -type f -name ""*.txt"" ! -path ""./movies/*"" ! -path ""./downloads/*"" ! -path ""./music/*"" -ls"	<MISSING>
"find . -type f -name ""*.txt"" -delete"	<MISSING>
"find . -type f -name ""*.txt"" -exec cat {} \;> all.txt"	<MISSING>
"find . -type f -name ""*.txt"" -exec gzip {} \;"	<MISSING>
"find . -type f -name ""*.txt"" -exec printf ""file: %s\n"" {} \;"	<MISSING>
"find . -type f -name ""*.txt"" -exec rm -f {} \;"	<MISSING>
"find . -type f -name ""*.txt"" -exec rm {} \; -print"	<MISSING>
"find . -type f -name ""*.txt"" -exec sed '/\-/s /\-.*//g'  {} \;"	<MISSING>
"find . -type f -name ""*.txt"" -exec sed 's/linux/linux-unix/2' thegeekstuff.txt"	<MISSING>
"find . -type f -name ""*.txt"" -exec sed -n 's/linux/linux-unix/gpw output' thegeekstuff.txt"	<MISSING>
"find . -type f -name ""*.txt"" -exec sh -c 'for i;do sed 's/[[:space:]]*$//' ""$i"">/tmp/.$$ && cat /tmp/.$$ > ""$i"";done' arg0 {} +"	<MISSING>
"find . -type f -name ""*.txt"" -exec sh -c 'for i;do sed 's/[[:space:]]*$//' ""$i"">/tmp/.$$ && mv /tmp/.$$ ""$i"";done' arg0 {} +"	<MISSING>
"find . -type f -name ""*.txt"" -print|xargs rm"	<MISSING>
"find . -type f -name ""*.txt"" | xargs    -i ksh -c ""echo deleting {}; rm {}"""	<MISSING>
"find . -type f -name ""*.txt"" | xargs    -i {} ksh -c ""echo deleting {}; rm {}"""	<MISSING>
"find . -type f -name ""*.yaml"" -print0 | xargs -0 sed -i -e ""s/hoge/moga/"""	<MISSING>
"find . -type f -name ""*baz*"" -exec sed -i 's/foo/bar/g' {} +"	<MISSING>
"find . -type f -name ""*cache.html"" -exec gzip -k {} \;"	<MISSING>
"find . -type f -name ""*cache.html"" -exec sh -c ""gzip < {} > {}.gz"" \;"	<MISSING>
"find . -type f -name ""*html"" -exec perl -pi -e 's|pibeta.psi.ch/~stefan|midas.psi.ch/~stefan|g' {} ;"	<MISSING>
"find . -type f -name ""*html"" | xargs tar cvf htmlfiles.tar -"	<MISSING>
"find . -type f -name ""*html"" | xargs tar cvf jw-htmlfiles.tar -"	<MISSING>
"find . -type f -name ""*keep.${suffix}"""	<MISSING>
"find . -type f -name ""*searched phrasse*"" ! -path ""./tmp/*"" ! -path ""./var/log/*"""	<MISSING>
"find . -type f -name "".*"	<MISSING>
"find . -type f -name "".*"""	<MISSING>
"find . -type f -name "".*"" -newer .cshrc -print"	<MISSING>
"find . -type f -name ""composer.json"" -exec composer validate {} \;"	<MISSING>
"find . -type f -name ""file-to-find"" -exec rm -f {} \;"	<MISSING>
"find . -type f -name ""findcommandexamples.txt"" -exec rm -f {} \;"	<MISSING>
"find . -type f -name ""foo*"" -exec rm {} \;"	<MISSING>
"find . -type f -name ""imag1806.jpg"" -exec rm -f {} \;"	<MISSING>
"find . -type f -name ""postgis-2.0.0"""	<MISSING>
"find . -type f -name ""tecmint.txt"" -exec rm -f {} \;"	<MISSING>
"find . -type f -name ""tes*"" -exec ls -l {} \;"	<MISSING>
"find . -type f -name ""tes*"" -exec rm {} \;"	<MISSING>
find . -type f -name $x	<MISSING>
find . -type f -name '* *'	<MISSING>
find . -type f -name '*' -exec sed --in-place 's/[[:space:]]\+$//' {} \+	<MISSING>
find . -type f -name '*-*'	<MISSING>
"find . -type f -name '*.*' -print0 | while ifs= read -r -d '' file; do     printf '%s\n' ""$file"" done"	<MISSING>
find . -type f -name '*.c' -exec cat {} \; | sed '/^\s*#/d;/^\s*$/d;/^\s*\/\//d' | wc -l	<MISSING>
find . -type f -name '*.ds_store' -ls -delete	<MISSING>
find . -type f -name '*.gz' -printf '%s %p\n'|sort -nr|head -n 1	<MISSING>
find . -type f -name '*.gz' | xargs zcat | wc -l	<MISSING>
find . -type f -name '*.html'	<MISSING>
find . -type f -name '*.html' -exec sed -i -e '1r common_header' -e '1,/string/d' {} \;	<MISSING>
find . -type f -name '*.ini'	<MISSING>
find . -type f -name '*.java' -ls | sort -k +7 -r	<MISSING>
find . -type f -name '*.js' \( -exec grep -q '[[:space:]]' {} \; -o -print \)	<MISSING>
"find . -type f -name '*.m4a' -exec bash -c 'avconv -i ""$0"" ""${0/%m4a/mp3}""' '{}' \;"	<MISSING>
"find . -type f -name '*.m4a' -exec bash -c 'rm ""$0""' '{}' \;"	<MISSING>
find . -type f -name '*.pdf' |sed 's#\(.*\)/.*#\1#' |sort -u	<MISSING>
"find . -type f -name '*.php' -exec bash -c 'wc -l ""$0""' {} \; | awk '{s+=$1} end {print s}'"	<MISSING>
find . -type f -name '*.php' -exec chmod 644 {} \;	<MISSING>
find . -type f -name '*.php' -exec grep -hcm2 $ {} + | sed -n '/:1$/{s///;p}'	<MISSING>
find . -type f -name '*.php' -exec grep -hcm2 '[^[:space:]]' {} + | sed -n '/:1$/{s///;p}'	<MISSING>
"find . -type f -name '*.php' -exec wc -l {} \; | egrep ""^\s*1\s"""	<MISSING>
find . -type f -name '*.png'	<MISSING>
find . -type f -name '*.txt' -exec egrep -l pattern {} \;	<MISSING>
find . -type f -name '*.txt' -exec egrep pattern {} /dev/null \;	<MISSING>
find . -type f -name '*.txt' -exec sed --in-place 's/[[:space:]]\+$//' {} \+	<MISSING>
find . -type f -name '*.txt' -print	<MISSING>
"find . -type f -name '*.txt' | sed 's/'""'""'/\'""'""'/g' | sed 's/.*/""&""/'  | xargs -i{} cp -v {} ./tmp/"	<MISSING>
find . -type f -name '*.txt' | xargs --replace=file sed --in-place 's/foo/baz/' file	<MISSING>
find . -type f -name '*.zip'	<MISSING>
find . -type f -name '*.zip' -print0 | xargs -0 tar -xzf	<MISSING>
find . -type f -name '*some text*'	<MISSING>
find . -type f -name '.*'	<MISSING>
"find . -type f -name '.*' -print0 | while ifs= read -r -d '' f; do basename ""$f""; done"	<MISSING>
find . -type f -name 'abc*' ! -name '*.py'	<MISSING>
find . -type f -name 'btree*.c'	<MISSING>
find . -type f -name 'image1806.jpg' -delete	<MISSING>
find . -type f -name *.php	<MISSING>
find . -type f -name *.tex -print0 | xargs -0 grep -l 'documentclass'	<MISSING>
find . -type f -name \*	<MISSING>
"find . -type f -name \* | grep ""tgt/etc/*"""	<MISSING>
find . -type f -name \* | grep tgt/etc/file1 tgt/etc/file2 tgt/etc/file3	<MISSING>
find . -type f -name \*.bak -print0 | xargs -0 rm -v	<MISSING>
find . -type f -name \*.ext | xargs grep foo	<MISSING>
find . -type f -name file_name	<MISSING>
find . -type f -name filename.txt -exec vi {} +	<MISSING>
find . -type f -name input.txt -print0 | xargs -0 -i file  sed -i.bak '/^#/d' file	<MISSING>
find . -type f -name input.txt -print0 | xargs -0 -i {}  sed -i.bak '/^#/d' {}	<MISSING>
find . -type f -name input.txt -print0 | xargs -0 sed -i.bak '/^#/d'	<MISSING>
find . -type f -name makefile -print -exec sed -n '235p' {} \;	<MISSING>
find . -type f -name some_file_name.xml -exec grep -h put_your_string_here {} \;	<MISSING>
find . -type f -name tecmint.php	<MISSING>
find . -type f -name test	<MISSING>
find . -type f -name yourprogramname -execdir ./yourprogramname yourparameterfile \;	<MISSING>
find . -type f -name yourprogramname -execdir pwd \;	<MISSING>
find . -type f -name “file-to-find” -delete;	<MISSING>
find . -type f -name “k*.*” -mmin -360 -exec ls -l ‘{}’ ; | xargs -0 /bin/rm -f	<MISSING>
"find . -type f -newer ""$file"""	<MISSING>
find . -type f -newer file.log	<MISSING>
find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30	<MISSING>
find . -type f -newerct 2008-09-29 ! -newerct 2008-09-30	<MISSING>
"find . -type f -newermt ""$(date '+%y-%m-%d %h:%m:%s' -d @1494500000)"""	<MISSING>
"find . -type f -newermt ""$date_time"""	<MISSING>
"find . -type f -newermt ""2013-06-01"" \! -newermt ""2013-06-20"""	<MISSING>
"find . -type f -newermt ""2014-01-01"" ! -newermt ""2014-06-01"""	<MISSING>
"find . -type f -newermt ""aug 10"" ! -newermt ""aug 17"" -exec rm {} \;"	<MISSING>
find . -type f -newermt 2007-06-07 ! -newermt 2007-06-08	<MISSING>
find . -type f -newermt ‘apr 18 23:59:59 edt 2013’ ! -newermt ‘apr 20 00:00:00 edt 2013’ -exec ls -l ‘{}’ \;	<MISSING>
"find . -type f -noleaf -links +1 -printf ""%n %i %f\t%h\n"" | sort | less"	<MISSING>
find . -type f -not -empty | wc -l	<MISSING>
find . -type f -not -iname '*/not-from-here/*' -exec cp '{}' '/dest/{}' ';'	<MISSING>
"find . -type f -not -iwholename '*.git*' -print0  | xargs -0 sed -i .bak -e ""s/[[:space:]]*$//"""	<MISSING>
find . -type f -not -iwholename '*.git*' -print0 | xargs -0 perl -pi -e 's/ +$//'	<MISSING>
"find . -type f -not -name ""*.html"""	<MISSING>
find . -type f -not -name '*ignore1' -not -name '*ignore2' | xargs rm	<MISSING>
find . -type f -not -name '*ignore1' -o -not -name '*ignore2' | xargs rm	<MISSING>
find . -type f -not -name '*txt' -print0 | xargs -0 rm --	<MISSING>
find . -type f -not -name '*txt' | xargs rm	<MISSING>
find . -type f -not -name '.*' -mtime +500 -exec ls {} \;	<MISSING>
find . -type f -not -name ‘.*’ -mtime +500 -exec ls {} \;	<MISSING>
find . -type f -not -name “.*” -print | xargs sed -i ‘s/foo/bar/g’	<MISSING>
"find . -type f -not -newermt ""$date_time"""	<MISSING>
find . -type f -not -path '*/\.*'	<MISSING>
find . -type f -not -path '*/exlude-path/*' -exec cp --parents '{}' '/destination/' \;	<MISSING>
find . -type f -not -path '*/not-from-here/*' -exec cp '{}' '/dest/{}' \;	<MISSING>
find . -type f -ok chown username {} \;	<MISSING>
"find . -type f -path ""*/cpp/*"""	<MISSING>
"find . -type f -path ""*src/main/*\.scala"""	<MISSING>
find . -type f -path '*/.svn*' -prune -o -print | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort -u	<MISSING>
find . -type f -perm +111 -print	<MISSING>
find . -type f -perm -u=x	<MISSING>
find . -type f -perm 0777 -print	<MISSING>
find . -type f -perm 644 -exec chmod 664 {} \;	<MISSING>
find . -type f -perm 755	<MISSING>
find . -type f -perm 755 -exec chmod 644 {} \;	<MISSING>
find . -type f -perm 755 | wc -l	<MISSING>
find . -type f -perm 777	<MISSING>
find . -type f -perm 777 -exec chmod 755 {} \;	<MISSING>
find . -type f -print	<MISSING>
find . -type f -print -delete	<MISSING>
"find . -type f -print -exec grep --color=auto --no-messages -nh ""search string"" ""{}"" \;"	<MISSING>
"find . -type f -print -exec sh -c ""readelf -s {} | grep mysymbol"" \;"	<MISSING>
find . -type f -print | \ egrep  '/,|%$|~$|\.old$|sccs|/core$|\.o$|\.orig$' >>exclude	<MISSING>
find . -type f -print | sed 's|^.*/s|s|'	<MISSING>
"find . -type f -print | sed -e 's/^/""/' -e 's/$/""/' | xargs chmod 644"	<MISSING>
find . -type f -print | xargs    grep -il 'bin/ksh'	<MISSING>
find . -type f -print | xargs -l1 wc -l	<MISSING>
find . -type f -print | xargs -n 1	<MISSING>
find . -type f -print | xargs /usr/bin/grep -il 'bin/ksh' | tee /tmp/allfiles	<MISSING>
find . -type f -print | xargs agrep -2 -il '^subject:.*unique subject'	<MISSING>
find . -type f -print | xargs chmod 444	<MISSING>
"find . -type f -print | xargs grep ""example"""	<MISSING>
find . -type f -print | xargs grep -i 'bin/ksh'	<MISSING>
find . -type f -print | xargs grep -il '^subject:.*unique subject'	<MISSING>
find . -type f -print | xargs grep -li 'bin/ksh'	<MISSING>
"find . -type f -print | xargs grep -ni ""string"""	<MISSING>
find . -type f -print | xargs ls -l	<MISSING>
find . -type f -print0	<MISSING>
find . -type f -print0 |   xargs -0 perl -i.bak -pe 's/subdomaina\.example\.com/subdomainb.example.com/g'	<MISSING>
find . -type f -print0 | egrep -iazz '(\.txt|\.html?)$' | grep -vazz 'index.html' | xargs -n 1 -0 grep -c -hi elevator | egrep -v ':[0123]$'	<MISSING>
"find . -type f -print0 | grep -fxvz -f <(cd ""/some/dir"" && find . -type f) | xargs -0 echo rm"	<MISSING>
find . -type f -print0 | parallel -0 -x md5sum	<MISSING>
find . -type f -print0 | tr '\0' ','	<MISSING>
find . -type f -print0 | tr -dc '\0' | wc -c	<MISSING>
find . -type f -print0 | xargs -0 -e grep -nh -e mysearchstr	<MISSING>
find . -type f -print0 | xargs -0 -n 1	<MISSING>
find . -type f -print0 | xargs -0 -n 1 -p 4 dos2unix	<MISSING>
find . -type f -print0 | xargs -0 -n1 -p4 bzip2	<MISSING>
find . -type f -print0 | xargs -0 -n1 echo rm | sh -x	<MISSING>
find . -type f -print0 | xargs -0 ./group.sed --separate	<MISSING>
find . -type f -print0 | xargs -0 /bin/rm	<MISSING>
find . -type f -print0 | xargs -0 awk '/^\xef\xbb\xbf/ {print filename} {nextfile}'	<MISSING>
find . -type f -print0 | xargs -0 cat > out.txt	<MISSING>
find . -type f -print0 | xargs -0 chmod 644	<MISSING>
find . -type f -print0 | xargs -0 chmod 664	<MISSING>
find . -type f -print0 | xargs -0 chmod go+r	<MISSING>
find . -type f -print0 | xargs -0 chown username	<MISSING>
find . -type f -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -i{} du -sh {}	<MISSING>
find . -type f -print0 | xargs -0 egrep messages. | grep -ev '.svn|.git|.anythingelseiwannaignore'	<MISSING>
find . -type f -print0 | xargs -0 file	<MISSING>
find . -type f -print0 | xargs -0 grep -ch '' | awk -f: '$2==16'	<MISSING>
find . -type f -print0 | xargs -0 grep -ch '.' | grep ':16$'	<MISSING>
find . -type f -print0 | xargs -0 grep -h 'documentclass'	<MISSING>
"find . -type f -print0 | xargs -0 grep -i ""needle text"""	<MISSING>
find . -type f -print0 | xargs -0 grep -il '^subject:.*unique subject'	<MISSING>
"find . -type f -print0 | xargs -0 grep -izl . | xargs -0 grep ""needle text"""	<MISSING>
find . -type f -print0 | xargs -0 grep pattern	<MISSING>
find . -type f -print0 | xargs -0 grep string	<MISSING>
find . -type f -print0 | xargs -0 ls	<MISSING>
find . -type f -print0 | xargs -0 ls -l	<MISSING>
find . -type f -print0 | xargs -0 ls -ltr | head -n 1	<MISSING>
find . -type f -print0 | xargs -0 ls -ltr | tail -n 1	<MISSING>
find . -type f -print0 | xargs -0 perl -nle 'print if /^.*666$/'	<MISSING>
find . -type f -print0 | xargs -0 perl -pi -e 's/ +$//'	<MISSING>
find . -type f -print0 | xargs -0 perl -pi.bak -e 's/ +$//'	<MISSING>
find . -type f -print0 | xargs -0 sed -i '' 's/2013/2012/g'	<MISSING>
find . -type f -print0 | xargs -0 sed -i 's/application/whatever/g'	<MISSING>
"find . -type f -print0 | xargs -0 sed -i -e ""s/hoge/moga/"""	<MISSING>
"find . -type f -print0 | xargs -0 sed -i.bak -e ""s/hoge/moga/"""	<MISSING>
"find . -type f -print0 | xargs -0 stat -f ""%m %n"" | sort -n | tail -1 | cut -f2- -d"" """	<MISSING>
"find . -type f -print0 | xargs -0 stat -f ""%m %n"" | sort -rn | head -1 | cut -f2- -d"" """	<MISSING>
find . -type f -print0 | xargs -0 wc -l	<MISSING>
find . -type f -print0 | xargs -0l1 wc -l	<MISSING>
find . -type f -print0 | xargs -0r gzip	<MISSING>
"find . -type f -print0| xargs -0 grep -c banana| grep -v "":0$"""	<MISSING>
find . -type f -print0|xargs -0 ls -drt|tail -n 1	<MISSING>
"find . -type f -printf ""%c@ %p\n"" | sort -r | head -n 10"	<MISSING>
"find . -type f -printf ""%c@ %p\n"" | sort -rn | head -n 10"	<MISSING>
"find . -type f -printf ""%f %s\n"""	<MISSING>
"find . -type f -printf ""%f\n"""	<MISSING>
"find . -type f -printf ""%f\n"" -name ""*.jar"" | sort -f | uniq -i -d"	<MISSING>
"find . -type f -printf ""%s + "" | dc -e0 -f- -ep"	<MISSING>
"find . -type f -printf ""%s\t%p\n"" | sort -n | tail -1"	<MISSING>
"find . -type f -printf ""%s\t%p\n"" | sort -n |head -1"	<MISSING>
"find . -type f -printf '""%p""\n' | xargs grep string"	<MISSING>
find . -type f -printf '%20s %p\n' | sort -n | cut -b22- | tr '\n' '\000' | xargs -0 ls -lasr	<MISSING>
find . -type f -printf '%f ' -exec openssl dgst -md5 {} \;	<MISSING>
find . -type f -printf '%k %p\n' |sort -n |tail -n 20	<MISSING>
find . -type f -printf '%p %s\n'  | awk '{sum+=$nf}end{print sum}'	<MISSING>
find . -type f -printf '%p %s\n' | awk '{ sum+=$2}; end { print sum}'	<MISSING>
"find . -type f -printf '%p %s\n' | perl -ane '$sum+=$f[1];end{print ""$sum\n""}'"	<MISSING>
"find . -type f -printf '%p %s\n' | perl -n -a -e '$sum+=$f[1]; print ""$sum\n""' | tail -n 1"	<MISSING>
"find . -type f -printf '%p %s\n' | perl -n -a -e '$sum+=$s[1]; print ""$sum\n""'"	<MISSING>
find . -type f -printf '%p\n' > outputfile	<MISSING>
find . -type f -printf '%s %p\n'	<MISSING>
find . -type f -printf '%s %p\n' | sort -rn | head -20	<MISSING>
"find . -type f -printf '%t@ %p\n' | sort -n -r | head -${numl} |  cut -f2- -d"" "" | sed -e 's,^\./,,' | xargs ls -u -l"	<MISSING>
"find . -type f -printf '%t@ %p\n' | sort -n | tail -1 | cut -f2- -d"" """	<MISSING>
"find . -type f -printf '%t@ %p\n' | sort -n | tail -1 | cut -f2- -d"" "" | sed 's/.*/""&""/' | xargs ls -l"	<MISSING>
"find . -type f -printf '%t@ %p\n' | sort -n | tail -10 | cut -f2- -d"" """	<MISSING>
find . -type f -printf '%ty-%tm-%td %th:%tm: %tz %p\n'| sort -n | tail -n1	<MISSING>
find . -type f -printf '%ty-%tm-%td %tt   %p\n' | sort	<MISSING>
find . -type f -readable	<MISSING>
"find . -type f -regex "".*\.\(jpg\|jpeg\|gif\|png\|jpg\|jpeg\|gif\|png\)"""	<MISSING>
"find . -type f -regex "".*\.\(py\|py\.server\)"""	<MISSING>
"find . -type f -regex "".*src/main.*\.scala$"""	<MISSING>
"find . -type f -regex "".+-[0-9]+x[0-9]+\.jpg"""	<MISSING>
"find . -type f -regex "".+-[0-9]+x[0-9]+\.jpg"" -exec rm -rf {} \;"	<MISSING>
"find . -type f -regex "".+-[0-9]+x[0-9]+\.jpg"" | xargs rm"	<MISSING>
find . -type f -regex '.*\(c\|h\|cpp\)' -exec ls {} \;	<MISSING>
find . -type f -regex '.*\.\(c\|h\|cpp\)' -exec ls {} \;	<MISSING>
"find . -type f -size +10 -name ""*.err"""	<MISSING>
find . -type f -size +10000 -exec ls -al {} \;	<MISSING>
find . -type f -size +10000000 -print|xargs ls -ld|more	<MISSING>
find . -type f -size +10k	<MISSING>
find . -type f -size +1m -exec rm {} +	<MISSING>
find . -type f -size +2g	<MISSING>
"find . -type f -size +50000k -exec ls -lh {} \; | awk '{ print $9 "": "" $5 }'"	<MISSING>
find . -type f -size +50000k | xargs du -sh	<MISSING>
find . -type f -size +500m	<MISSING>
find . -type f -size -10k	<MISSING>
find . -type f -size -1m -exec rm {} +	<MISSING>
find . -type f -size 0b	<MISSING>
find . -type f -size 10k	<MISSING>
find . -type f -user tom	<MISSING>
"find . -type f -user tommye -iname ""*.zip"""	<MISSING>
find . -type f -wholename \*.mbox	<MISSING>
find . -type f -wholename \*.mbox -print0	<MISSING>
find . -type f -wholename \*.mbox -print0 | \     while read i ; do         mv $i $(echo $i | sed 's/\.mbox//') ;     done ;	<MISSING>
find . -type f -wholename \*.mbox -print0 | parallel -0 mv {} {.}	<MISSING>
find . -type f -wholename \*.mbox | parallel mv {} {.}	<MISSING>
"find . -type f -wholename \*.mbox | sed 's/\(.*\)\.mbox/mv ""\1.mbox"" ""\1""/' | sh"	<MISSING>
find . -type f -writable | grep -v sites/default/files	<MISSING>
find . -type f \! -iregex '.\|./.git' -exec perl -i -pe 's/$1/$upper2/gi' {} \;	<MISSING>
find . -type f \! -iregex '.\|./.git' -exec perl -i -pe 's/$lower1/$lower2/g' {} \;	<MISSING>
"find . -type f \! -iregex '.\|./.git' -exec perl -i'' -pe ""s/$1/$upper2/gi"" {} +"	<MISSING>
"find . -type f \! -iregex '.\|./.git' -exec perl -i'' -pe ""s/$lower1/$lower2/g"" {} +"	<MISSING>
"find . -type f \! -name ""*.z"" \! -name "".comment"" -print | tee -a /tmp/list"	<MISSING>
find . -type f \! -name '*.xml' -print0 | xargs -0 rename 's/$/.xml/'	<MISSING>
"find . -type f \( ! -iname "".*"" \) -mtime +500 -exec ls {} \;"	<MISSING>
find . -type f \( -exec command1 \; -false -o -exec command2 \; \)	<MISSING>
find . -type f \( -exec grep -q '[[:space:]]' {} \; -o -print \)	<MISSING>
find . -type f \( -exec sh -c 'echo first; false' \; -false -o -exec echo second \; \)	<MISSING>
"find . -type f \( -iname ""*.c"" -or -iname ""*.asm"" \)"	<MISSING>
"find . -type f \( -iname ""*.sh"" -or -iname ""*.pl"" \)"	<MISSING>
"find . -type f \( -iname ""*.txt"" ! -iname "".*"" \)"	<MISSING>
"find . -type f \( -iname ""*.txt"" ! -perm -o=w \)"	<MISSING>
"find . -type f \( -iname ""*.txt"" -and -perm -o=w \)"	<MISSING>
"find . -type f \( -iname ""*.txt"" -not -perm -o=w \)"	<MISSING>
"find . -type f \( -iname "".*"" ! -iname "".htaccess"" \)"	<MISSING>
"find . -type f \( -iname ""es*"" -o -iname ""fs_*"" \)"	<MISSING>
find . -type f \( -iname “*.c” \) |grep -i -r “keyword”	<MISSING>
find . -type f \( -iname “*.c” \) |grep -i “keyword”	<MISSING>
"find . -type f \( -name ""*.[ss][hh]"" -o -name ""*.[pp][ll]"" \)"	<MISSING>
"find . -type f \( -name ""*.c"" -o -name ""*.sh"" \)"	<MISSING>
"find . -type f \( -name ""*.class"" -o -name ""*.sh"" \)"	<MISSING>
"find . -type f \( -name ""*.conf"" -or -name ""*.txt"" \) -print"	<MISSING>
"find . -type f \( -name ""*.dat"" \) -exec tail -n+5 -q ""$file"" {} + |tee concat.txt"	<MISSING>
"find . -type f \( -name ""*.htm*"" -o -name ""*.js*"" -o -name ""*.txt"" \) -exec sh -c 'echo ""$0""' {} \;"	<MISSING>
"find . -type f \( -name ""*.htm*"" -o -name ""*.js*"" -o -name ""*.txt"" \) -print0 | xargs -0 -n1 echo"	<MISSING>
"find . -type f \( -name ""*.js"" ! -name ""*-min*"" ! -name ""*console*"" \)"	<MISSING>
"find . -type f \( -name ""*.pas"" -o -name ""*.dfm"" \) -print0 | xargs --null grep --with-filename --line-number --no-messages --color --ignore-case ""searchtext"""	<MISSING>
"find . -type f \( -name ""*.php"" -o -name ""*.phtml"" \) -exec wc -l {} +;"	<MISSING>
"find . -type f \( -name ""*.sh"" -o -name ""*.pl"" \)"	<MISSING>
"find . -type f \( -name ""*.shtml"" -o -name ""*.css"" \) -print"	<MISSING>
"find . -type f \( -name ""*.shtml"" -or -name ""*.css"" \)"	<MISSING>
"find . -type f \( -name ""*.txt"" -o -name ""*.json"" \)"	<MISSING>
"find . -type f \( -name ""*cache"" -o -name ""*xml"" -o -name ""*html"" \)"	<MISSING>
find . -type f \( -name '*.c' -or -name '*.h' -or -name '*.cpp' \) -exec ls {} \;	<MISSING>
find . -type f \( -perm -u=x -o -perm -g=x -o -perm -o=x \) -exec test -x {} \; -print	<MISSING>
find . -type f print0 | sort -r	<MISSING>
find . -type f | awk -f/ '{print $nf}' | sort -f | uniq -i -d	<MISSING>
find . -type f | egrep '(sdw|sdc|sdd)$' > list_1	<MISSING>
find . -type f | egrep '\.(shtml|css)$'	<MISSING>
find . -type f | egrep -v '\.bz2' | xargs bzip2 -9 &	<MISSING>
find . -type f | grep -o -e '\.[^\.]+$' | sort -u	<MISSING>
"find . -type f | grep -p ""\.dll$|\.exe$"""	<MISSING>
"find . -type f | grep -vp ""\.dll$|\.exe$"""	<MISSING>
find . -type f | paste -d, -s	<MISSING>
find . -type f | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort -u	<MISSING>
find . -type f | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort -u;	<MISSING>
find . -type f | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort | uniq -c | sort -n	<MISSING>
"find . -type f | sed 's/.*/""&""/' | xargs ls -e | awk '{ print $6,"" "",$7 }' | sort | tail -1"	<MISSING>
"find . -type f | sed 's/.*/""&""/' | xargs ls -e | awk '{ print $6,"" "",$7,"" "",$9 }' | sort | tail -1"	<MISSING>
find . -type f | sed -e 's#.*\(\.[a-za-z]*\)$#\1#' | sort | uniq	<MISSING>
find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort -u	<MISSING>
find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort | uniq -c | sort -rn	<MISSING>
find . -type f | tac	<MISSING>
find . -type f | wc -l	<MISSING>
"find . -type f | while read f; do g=`md5sum $f | awk '{print $1}'`; echo ""$g $f""> $f-$g.md5; done"	<MISSING>
find . -type f | while read f; do g=`md5sum $f` > $f.md5; done	<MISSING>
"find . -type f | while read file; do sed -e 's/^m//g' -i ""$file""; done"	<MISSING>
find . -type f | xargs -d '\n' grep string	<MISSING>
find . -type f | xargs -i {} chmod --reference {} ../version1/{}	<MISSING>
find . -type f | xargs -i{} chmod -v 644 {}	<MISSING>
find . -type f | xargs -l 100 grep whatever	<MISSING>
find . -type f | xargs cat > out.txt	<MISSING>
find . -type f | xargs cat | wordfrequency | grep yourword	<MISSING>
find . -type f | xargs chmod -v 644	<MISSING>
find . -type f | xargs chmod 664	<MISSING>
find . -type f | xargs chown username	<MISSING>
find . -type f | xargs file	<MISSING>
"find . -type f | xargs grep ""magic"""	<MISSING>
"find . -type f | xargs grep ""text"""	<MISSING>
find . -type f | xargs grep 'string_to_find' -sl | xargs perl -pi -w -e 's/string_to_find//g;'	<MISSING>
"find . -type f | xargs grep -i ""needle text"""	<MISSING>
"find . -type f | xargs grep -l ""search-pattern"""	<MISSING>
"find . -type f | xargs grep -l ""texttosearch"" | cpio -pv $destination_path"	<MISSING>
find . -type f | xargs grep string	<MISSING>
find . -type f | xargs grep whatever	<MISSING>
find . -type f | xargs ls	<MISSING>
find . -type f | xargs ls -l	<MISSING>
find . -type f | xargs ls -ltr | tail -n 1	<MISSING>
find . -type f | xargs stat --format=%s | awk '{s+=$1} end {print s}'	<MISSING>
"find . -type f | xargs stat -c ""%a %n"" | awk '{print ""chmod ""$1"" ""$2}' > ./filespermissions.sh"	<MISSING>
find . -type f | xargs | wc -c	<MISSING>
find . -type f |sed '/.\/dir[12]\/[^/]*$/d'	<MISSING>
find . -type f |wc -l	<MISSING>
"find . -type f |xargs ls -la| awk '{print ""chmod ""$1"" ""$nf}'>./filespermissions.sh"	<MISSING>
find . -type f |xargs ls -ls |head -20	<MISSING>
find . -type f |xargs ls -ls |head -20 | awk '{print $9, $5}'	<MISSING>
find . -type f –iname stat*	<MISSING>
"find . -type f|grep -i ""\.jpg$"" |sort"	<MISSING>
"find . -type f|grep -i ""\.jpg$"" |sort| tee file_list.txt"	<MISSING>
find . -type l	<MISSING>
find . -type l -! -exec test -e {} \; -print	<MISSING>
find . -type l -daystart -mtime $date_dif -exec copy_it.sh $verbose -s {} -t $to_dir \;	<MISSING>
find . -type l -exec ls -l {} \;	<MISSING>
"find . -type l -exec readlink -f '{}' \; | grep -v ""^`readlink -f ${pwd}`"""	<MISSING>
"find . -type l -exec sh -c ""file -b {} | grep -q ^broken"" \; -print"	<MISSING>
"find . -type l -exec sh -c 'echo $(readlink -f ""{}"") ""<-- {}""' \; | grep -v ""^$(readlink -f ${pwd})"""	<MISSING>
find . -type l -exec test ! -e {} \; -printf '%y %p\n'	<MISSING>
find . -type l -ls	<MISSING>
find . -type l -name link1	<MISSING>
find . -type l -print | xargs ls -ld | awk '{print $10}'	<MISSING>
"find . -type l -printf ""%y %p\n"" | grep -w '^n'"	<MISSING>
find . -type l -xtype l	<MISSING>
"find . -type l | while read f; do /bin/cp -rf --remove-destination -f $(find . -name $(readlink ""${f}"")) ""${f}"";done;"	<MISSING>
find . -type l | xargs -i % ls -l % | grep targetfile.txt	<MISSING>
find . -type l | xargs ls -ld	<MISSING>
find . -type s	<MISSING>
find . -uid +500 -uid -1000 -type f	<MISSING>
find . -uid 0 -print	<MISSING>
find . -uid 120 -print	<MISSING>
find . -user 0 -perm -4000 -print	<MISSING>
find . -user <userid>	<MISSING>
find . -user aluno1 -exec chown aluno2 {}	<MISSING>
find . -user daniel	<MISSING>
find . -user daniel -type f -name *.jpg	<MISSING>
find . -user daniel -type f -name *.jpg ! -name autumn*	<MISSING>
find . -user john	<MISSING>
find . -user my_user -perm -u+rwx	<MISSING>
find . -user root -perm -4000 -print	<MISSING>
find . -user sedlav -type f	<MISSING>
find . -user tommye	<MISSING>
find . -user xuser1 -exec chown -r user2 {} \;	<MISSING>
find . -wholename './src/emacs' -prune , -print	<MISSING>
find . -wholename './src/emacs' -prune -o -print	<MISSING>
find . -wholename './src/emacs' -prune -print -o -print	<MISSING>
find . -wholename '/lib*'	<MISSING>
"find . -wholename \*.mbox | awk '{new=$0; gsub(""\.mbox$"", """", new) ; system(""mv \"""" $0 ""\"" \"""" new ""\"""") }'"	<MISSING>
find . -writable	<MISSING>
"find . -xdev -name ""wagoneer*"" -print"	<MISSING>
find . -xdev -print0	<MISSING>
find . -xdev -print0 | cpio -oa0v | gzip > path_to_save.cpio.gz	<MISSING>
find . -xdev -printf ‘%s %p\n’ |sort -nr|head -20	<MISSING>
"find . -xtype f \! -iname *.html   -exec mv -iv ""{}""  ""{}.html""  \;"	<MISSING>
find . -xtype l	<MISSING>
find . ... -exec cat {} \; -exec echo \;	<MISSING>
"find . ... -exec sh -c 'printf ""%s\n"" ""$1""; kill ""$ppid""' sh {} \;"	<MISSING>
find . ... -print -quit	<MISSING>
find . /home/admin/data/ -type d -exec chown admin.admin {} \;	<MISSING>
find . /home/admin/data/ -type f -exec chown admin.admin {} \;	<MISSING>
find . /home/admin/public_html/ -type f -exec chmod 644 {} \;	<MISSING>
find . 2>&1 | grep -v 'permission denied' > files_and_folders	<MISSING>
find . 2>&1 | grep -v 'permission denied' > some_file	<MISSING>
find . 2>/dev/null > files_and_folders	<MISSING>
find . 2>/dev/null > some_file	<MISSING>
find . 2>/dev/null >files_and_folders	<MISSING>
find . > files_and_folders	<MISSING>
find . \! -empty -type d	<MISSING>
"find . \! -name ""*.gz"" -exec gzip {} \;"	<MISSING>
"find . \! -name ""*.z"" -exec compress -f {} \;"	<MISSING>
find . \! -name '.'	<MISSING>
find . \! -name '[a-z] *' -exec lpr { }\;	<MISSING>
find . \! -name bbb -print	<MISSING>
"find . \! -path ""*cvs*"" -type f -name ""*.css"""	<MISSING>
"find . \! -path ""./.git*"" -a \! -name states_to_csv.pl"	<MISSING>
find . \( ! -name . -prune \)	<MISSING>
"find . \( ! -name . -prune \) -name ""*.c"" -print"	<MISSING>
"find . \( ! -path ""*target*"" -a ! -path ""*tools*"" -a ! -path ""*.git*"" -print \)"	<MISSING>
"find . \( ! -regex '.*/\..*' \) -type f -name ""whatever"""	<MISSING>
find . \( ! -regex '.*/\..*' \) -type f -print0 | xargs -0 sed -i 's/subdomaina.example.com/subdomainb.example.com/g'	<MISSING>
find . \( ! -regex '.*/\..*' \) | sed 's/^..//'	<MISSING>
"find . \( -iname ""*.jpg"" -o -iname ""*.jpeg"" -o -iname ""*.png"" \) -ls | awk '{total += $7} end {print total}'"	<MISSING>
"find . \( -iname ""*.png"" -o -iname ""*.jpg"" \) -print -exec tar -rf images.tar {} \;"	<MISSING>
"find . \( -iname ""*photo*"" -or -name ""*picture*"" \) -and ! -type d -and -mmin -30"	<MISSING>
"find . \( -name ""*.c"" -or -name ""*.cpp"" -or -name ""*.h"" -or -name ""*.m"" -or -name '*.java' \) -print0 | xargs -0 wc"	<MISSING>
"find . \( -name ""*.c"" -or -name ""*.cpp"" -or -name ""*.h"" -or -name ""*.m"" \) -print0 | xargs -0 wc"	<MISSING>
"find . \( -name ""*.php"" -o -name ""*.html"" \) -print0 | xargs -0 grep -hin ""joomla"""	<MISSING>
"find . \( -name ""*.php"" -or -name ""*.html"" \) | xargs grep -l stringa | xargs sed -i -e 's/stringa/stringb/g'"	<MISSING>
"find . \( -name ""*.php"" \) -exec grep -hn ""<\?php /\*\*/eval(base64_decode(.*));.*\?>"" {} \; -exec sed -i '/<\?php \/\*\*\/eval(base64_decode(.*));.*\?>/d' {} \;"	<MISSING>
"find . \( -name ""*.py"" -o -name ""*.py.server"" \)"	<MISSING>
"find . \( -name ""*.txt"" -o -name ""*.pdf"" \)"	<MISSING>
"find . \( -name ""foo"" -o -name ""bar"" \)"	<MISSING>
"find . \( -name ""my*"" -o -name ""qu*"" \) -print"	<MISSING>
find . \( -name '*.bak' -o -name *.backup \) -type f -atime +30 -exec rm '{}' ';'	<MISSING>
find . \( -name '*.mp3' -o -name '*.jpg' \) -name 'foo*' -print	<MISSING>
find . \( -name '*.mp3' -o -name '*.jpg' \) -print	<MISSING>
"find . \( -name '*.pdf' -or -name '*.pdf' \) -execdir sh -c 'mv -v ""$1"" ""$(echo ""$1"" | tr "" "" ""_"" | tr -d ""{()},\!'\''"" | tr ""a-z"" ""a-z"" | sed ""s/_-_/_/g"")""' _ {} \;"	<MISSING>
find . \( -name '*.svn*' -prune  -o ! -name '*.html' \) | xargs -d '\n' grep -hd skip 'searchstring'	<MISSING>
find . \( -name '*.txt'  -mtime +5 -o -name '*.html' \) -print0	<MISSING>
find . \( -name '*.txt' -o -name '*.html' \) -mtime +5 -print0	<MISSING>
find . \( -name '*.wmv' -o -name '*.wma' \) -exec rm {} \;	<MISSING>
find . \( -name '*jsp' -o -name '*java' \) -type f -ls	<MISSING>
find . \( -name 'secret' -a -prune \) -o -print	<MISSING>
"find . \( -name *.rb -or -name *.html -or -name *.js -or -name *.coffee -or -name *.css -or -name *.scss -or -name *.erb -or -name *.yml -or -name *.ru \) -print0 | xargs -0 sed -i '' -e ""s/[[:space:]]*$//"""	<MISSING>
find . \( -name . -o -prune \)	<MISSING>
find . \( -name .snapshot -prune -o -name '*.foo' \) -print	<MISSING>
find . \( -name 1.txt -o -name 2.txt -o -name 3.txt \) -print|xargs chmod 444	<MISSING>
find . \( -name a.out -o -name '*.' -o -name  'core' \) -exec rm {} \;	<MISSING>
find . \( -name a.out -o -name '*.o' -o -name 'core' \) -exec rm {} \;	<MISSING>
find . \( -name aaa -o -name bbb \) -print	<MISSING>
find . \( -name bbb -o -name yyy \) -prune -o -type f -print	<MISSING>
find . \( -name d -prune \) -o -name hi.dat	<MISSING>
"find . \( -name en -o -name es \) -prune , -mtime 0 ! -name ""*.swp"""	<MISSING>
find . \( -name junk -o -name dummy \) -exec rm '{}' \;	<MISSING>
find . \( -name omit-directory -prune -o -type f \) -print	<MISSING>
find . \( -name omit-directory -prune \) -o \( -type f -print \)	<MISSING>
"find . \( -name skipdir1 -prune , -name skipdir2 -prune -o -name ""*.txt"" \) -print"	<MISSING>
"find . \( -name somedir -prune \) , \( -name bin -prune \) -o \( -name ""*.txt"" -print \)"	<MISSING>
find . \( -not -path './dir1/*' -and -not -path './dir2/*' -or -path './dir1/subdir1/*' \) -type f	<MISSING>
find . \( -path '*/.*' -prune -o ! -name '.*' \) -a -name '*.[ch]'	<MISSING>
find . \( -path './*' -prune \)	<MISSING>
find . \( -path './dir1/*' -and -not -path './dir1/subdir1*' -or -path './dir2' \) -prune -or -type f -print	<MISSING>
find . \( -size +700k -and -size -1000k \)	<MISSING>
find . \( -size +700k -and -size -1000k \) -exec du -hs {} \; 2>/dev/null	<MISSING>
find . \( -size 100 -o -size -100 \)  -name '*.html' -exec  ls -l {} \;  2> /dev/null	<MISSING>
find . \( -size 100 -o -size -100 \)  -name '*.html' \    -exec  ls -l {} \;  2> /dev/null	<MISSING>
find . \( -type d ! -name . -prune \) -o \( -mtime -1 -print \)	<MISSING>
find . \( -type d -name '.svn' -o -type f -name '*.html' \) -prune -o -print0	<MISSING>
find . \( -type d -name aa -prune \) -o \( -type f -name 'file*' -print \)	<MISSING>
find . \( -type d -regex '^.*/\.\(git\|svn\)$' -prune -false \) -o -type f -print0	<MISSING>
"find . \( -type f -exec sudo chmod 664 ""{}"" \; \) , \( -type d -exec sudo chmod 775 ""{}"" \; \)"	<MISSING>
find . \( -user aa1 -o -name myfile \) -print	<MISSING>
find . \( \! -user xx -exec chown -- xx '{}' + -false \)	<MISSING>
"find . \( \( -name .svn -o -name pdv \) -type d -prune \) -o \( -name '*.[pwi]' -type f -exec grep -i -l ""search for me"" {} + \)"	<MISSING>
"find . \( \( -path ""\.?.*"" -type d \) -o -path ""*normal*"" \) -prune -o \( -type f \) -print"	<MISSING>
find . name *foo	<MISSING>
find . type -f -amin +2	<MISSING>
find . type -f -amin -2	<MISSING>
find . type -f -amin 2	<MISSING>
find . type -f -atime +2	<MISSING>
find . type -f -atime -2	<MISSING>
find . type -f -atime 2	<MISSING>
find . type -f -ctime +2	<MISSING>
find . type -f -ctime -2	<MISSING>
find . type -f -ctime 2	<MISSING>
find . type -f -mtime +2	<MISSING>
find . type -f -mtime -2	<MISSING>
find . type -f -mtime 2	<MISSING>
find . type f -print | fgrep -f file_list.txt	<MISSING>
"find . | awk '{ print ""file:"" $0 }'"	<MISSING>
"find . | awk '{fs = ""/"" ; print """", nf, $f}' | sort -n  | awk '{print $2}' | xargs grep -d skip ""search term"""	<MISSING>
"find . | awk '{printf ""%s "", $0}'"	<MISSING>
"find . | awk -f""/"" '{ print $2 }'"	<MISSING>
find . | cpio -pdumv /path/to/destination/dir	<MISSING>
find . | cpio -pdumv /path/to/destination/dirrectory	<MISSING>
"find . | egrep -v ""(exclude3|exclude4)"" | sort"	<MISSING>
"find . | egrep -v ""\.tex|\.bib"" | xargs rm"	<MISSING>
"find . | grep "".xml$"" | parallel bzip2"	<MISSING>
"find . | grep "".xml.bz2$"""	<MISSING>
"find . | grep ""foobar"" | (mapfile -t; cp ""${mapfile[@]}"" ~/foobar)"	<MISSING>
"find . | grep ""foobar"" | tr \\n \\0 | xargs -0 -i{} cp ""{}"" ~/foo/bar"	<MISSING>
find . | grep 'some string' | grep js	<MISSING>
"find . | grep -e ""(__pycache__|\.pyc|\.pyo$)"" | xargs rm -rf"	<MISSING>
find . | grep -e -v '\.png$|\.class$' | vim -	<MISSING>
find . | grep -i demo | grep -i sitesearch	<MISSING>
find . | grep -qi /path/to/something[^/]*$	<MISSING>
"find . | grep -v ""\.png$"" | grep -v ""\.class$"" | vim -"	<MISSING>
"find . | grep -v ""excluded files criteria"" | xargs rm"	<MISSING>
find . | grep -v '(dll|exe)$'	<MISSING>
find . | grep -v \.svn	<MISSING>
find . | grep -v xml | xargs rm -rf {}	<MISSING>
find . | grep -vf file.lst	<MISSING>
find . | grep favicon\.ico | xargs -n 1 cp -f /root/favicon.ico	<MISSING>
find . | grep foobar | xargs -i{} cp {} ~/foo/bar	<MISSING>
find . | grep html$ | xargs grep <string-to-find>	<MISSING>
"find . | paste -sd "" """	<MISSING>
find . | sed 's/.*/& &/'	<MISSING>
find . | sort	<MISSING>
find . | sort -f | uniq -i -d	<MISSING>
"find . | xargs -i rm -f ""{}"""	<MISSING>
find . | xargs -i'{}' mv '{}' ~/play/	<MISSING>
"find . | xargs -i{} printf ""%s%s\n"" {} {}"	<MISSING>
find . | xargs -n 1 echo	<MISSING>
find . | xargs echo	<MISSING>
"find . | xargs grep ""searched-string"""	<MISSING>
find . | xargs grep 'chrome'	<MISSING>
find . | xargs grep 'chrome' -ls	<MISSING>
find . | xargs grep 'word' -sl	<MISSING>
"find . | xargs grep -pl ""\x00"" | xargs grep -pl ""\x0c"""	<MISSING>
find . | xargs grep <string-to-find>	<MISSING>
find . | xargs grep regexp	<MISSING>
find . | xargs md5sum	<MISSING>
find . | xargs perl -p -i -e ‘s/something/else/g’	<MISSING>
find . | xargs perl -p -i.old -e 's/oldstring/newstring/g'	<MISSING>
find . | xargs sed -i ‘s/foo/bar/g’	<MISSING>
find . | xargs wc -l	<MISSING>
find . |sed 's,\(.*\)/\(.*\)$,\1/\2\t\1/\l\2,'|sort|uniq -d -f 1|cut -f 1	<MISSING>
find . |xargs grep abc | sed 's/abc/xyz/g'	<MISSING>
find . |xargs grep search string | sed 's/search string/new string/g'	<MISSING>
"find . –iname ""error"" –print ( -i is for ignore )  find . –iname ""error"" –print ( -i is for ignore )"	<MISSING>
"find . –name ""*.txt"" –mtime 5"	<MISSING>
find . –type f -mmin -10	<MISSING>
"find . — name ""*"" — print -о -name "".*"" — print -depth"	<MISSING>
"find . — name ""*.log"" — mtime +5 -ok rm {} \;"	<MISSING>
"find . — name ""*.txt"" — print"	<MISSING>
"find . — name ""[a‑z]*"" — print"	<MISSING>
"find . — name ""[a‑z][a‑z][0—9][0—9].txt"" — print"	<MISSING>
find . — size +10 -print	<MISSING>
find . — size +1000k -print	<MISSING>
find . — type f -exec ls -1 {} \;	<MISSING>
find .*	<MISSING>
find .-type f -user root -exec chown tom {} \;	<MISSING>
find .. -exec cp -t ~/foo/bar -- {} +	<MISSING>
find .. -type d -print0 | xargs -0 tar cf dirstructure.tar --no-recursion	<MISSING>
find ... -print -quit	<MISSING>
find ... -print0	<MISSING>
"find ../../$name-module -name 'name*' -type f -exec bash -c ""mv \""\$1\"" \""\${1/name/$name}\"""" -- {} \;"	<MISSING>
"find ../../$name-module -name 'name*' -type f -exec bash -c 'mv ""$1"" ""${1/name/$name}""' -- {} \;"	<MISSING>
"find ../../$name-module -print0 -name 'name*' -type f | xargs -0 rename ""s/name/$name/"""	<MISSING>
"find ../<dirname> -name '*.jpg' -exec sh -c 'mv ""$0"" ""$(basename $(dirname $0))-${0%.jpg}$.jpg""' {} \;"	<MISSING>
find ../[12][0-9][0-9][0-9] -type f -exec ln -s {} \;	<MISSING>
"find ../d44203 -iname '2.jpg' | while read fn; do name=$(basename ""$fn"") ; dir=$(dirname ""$fn"") ; mv ""$fn"" ""$dir/$(basename $(pwd))-$name"" ;done"	<MISSING>
find ./	<MISSING>
find ./ -ctime +30 -type f -exec rm -f {} \;	<MISSING>
find ./ -daystart -ctime +2	<MISSING>
find ./ -daystart -mtime +3	<MISSING>
find ./ -daystart -mtime -10 -and -mtime +1	<MISSING>
find ./ -daystart -mtime -3	<MISSING>
find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%tc %p\n'	<MISSING>
find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%tm %p\n'	<MISSING>
find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%ty %p\n'	<MISSING>
find ./ -daystart -mtime -3 -type f  ! -mtime -1 -exec ls -ld {} \;	<MISSING>
find ./ -depth -print | cpio -pvd newdirpathname	<MISSING>
find ./ -empty -type d -delete	<MISSING>
find ./ -exec grep -q 'slrn' '{}' \; -print	<MISSING>
find ./ -exec sed -i 's/apple/orange/g' {} \;	<MISSING>
find ./ -executable	<MISSING>
"find ./ -follow -lname ""*"""	<MISSING>
find ./ -iname ! -iname dirname	<MISSING>
"find ./ -iname ""*.bz2"" -exec bzip2 -d {} \;"	<MISSING>
find ./ -iname '*.jpg' -type f | wc -l	<MISSING>
find ./ -iname blah	<MISSING>
"find ./ -iname file_name ! -path ""./dirt to be excluded/*"""	<MISSING>
find ./ -inum 1316256 -delete	<MISSING>
"find ./ -maxdepth 1 -name ""some-dir"" -type d -print0 | xargs -0r mv -t x/"	<MISSING>
find ./ -mmin +1	<MISSING>
find ./ -mount -depth -print | cpio -pdm /destination_dir	<MISSING>
find ./ -mtime +3	<MISSING>
find ./ -mtime +31 -delete	<MISSING>
find ./ -mtime -0.5	<MISSING>
find ./ -mtime -3	<MISSING>
find ./ -mtime 3	<MISSING>
"find ./ -name ""* *"" -type f -d 1 | perl -ple '$file = $_; $file =~ s/\s+/_/g; rename($_, $file);'"	<MISSING>
"find ./ -name ""*"" -printf ""%f\n"" | xargs grep ""searchname"""	<MISSING>
"find ./ -name ""*"" | xargs grep ""searchname"""	<MISSING>
"find ./ -name ""*.[ch]pp"" -print > cscope.files"	<MISSING>
"find ./ -name ""*.dat"" -type f -cmin +60 -exec basename {} \;"	<MISSING>
"find ./ -name ""*.img"" -exec bzip2 -v {} \;"	<MISSING>
"find ./ -name ""*.php"" -type f | xargs sed -i '/./,$!d' 2>&1"	<MISSING>
"find ./ -name ""*.php"" -type f | xargs sed -i 's#<?php /\*\*/ eval(base64_decode(""awy.*?>##g'  2>&1"	<MISSING>
"find ./ -name ""*.plist"""	<MISSING>
"find ./ -name ""*.sqlite"""	<MISSING>
"find ./ -name ""*.sqlite"" -ls"	<MISSING>
"find ./ -name ""*.sqlite"" -printf '%tc %p\n'"	<MISSING>
"find ./ -name ""*.txt"" | rev | cut -d '/' -f1 | rev"	<MISSING>
"find ./ -name ""*sub*"""	<MISSING>
"find ./ -name ""*textforrename*"""	<MISSING>
"find ./ -name ""blabla"" -exec wc -l {} ;"	<MISSING>
"find ./ -name ""file_pattern_name""  -exec grep -r ""pattern"" {} \;"	<MISSING>
"find ./ -name ""foo.mp4"" -exec echo {} \;"	<MISSING>
"find ./ -name ""foo.mp4"" -printf ""%h\n"""	<MISSING>
"find ./ -name ""somename.txt"""	<MISSING>
find ./ -name '*.epub' -o -name '*.mobi' -o -name '*.chm' -o -name '*.rtf' -o -name '*.lit' -o -name '*.djvu'	<MISSING>
find ./ -name '*.jpg' -type f | wc -l	<MISSING>
find ./ -name '*.log' -print0 | xargs -0 rm	<MISSING>
"find ./ -name '*.log' | xargs -i{} sh -c ""if [ -f {}.gz ]; then rm {}; fi"""	<MISSING>
find ./ -name '*.log' | xargs rm	<MISSING>
find ./ -name '*~'	<MISSING>
find ./ -name '*~' | xargs> rm	<MISSING>
find ./ -name *.ogv -exec bash -c 'myfile {}' \;	<MISSING>
find ./ -name *.ogv -exec echo myfile {} \;	<MISSING>
find ./ -name *.ogv -exec myfile {} \;	<MISSING>
find ./ -name *.undo | xargs wc	<MISSING>
find ./ -name \*.txt | perl -p -e 's/^(.*\/(.*)\.txt)$/mv $1 .\/foo\/$2.bar.txt/' | bash	<MISSING>
find ./ -name blah	<MISSING>
find ./ -name desktop	<MISSING>
"find ./ -name doc.txt -printf ""found\n"""	<MISSING>
find ./ -name somename.txt -exec sed -e '1i my new text here` {} \;	<MISSING>
find ./ -newer start.txt -and ! -newer end.txt	<MISSING>
find ./ -newermt 2014-08-25 ! -newermt 2014-08-26 -print	<MISSING>
"find ./ -not -path ""*/node_modules/*"" -name ""*.js"" | xargs grep keyword"	<MISSING>
find ./ -path ./beta/* -prune -o -iname example.com -print	<MISSING>
find ./ -perm 755	<MISSING>
"find ./ -regex ""./cmn-.\.flac"""	<MISSING>
"find ./ -regex ""cmn-.*[\x4e00-\x9fa5]*\.xml"""	<MISSING>
find ./ -regex '.*\..*'	<MISSING>
find ./ -size +1000k	<MISSING>
find ./ -size +5m -type f | xargs -r ls -ssh	<MISSING>
find ./ -type d -exec rmdir --ignore-fail-on-non-empty {} 2>/dev/null \;	<MISSING>
find ./ -type d -name 'd'	<MISSING>
find ./ -type d -name 'd'|sed 's/d$//'	<MISSING>
find ./ -type d -print	<MISSING>
find ./ -type d -size 0c -print | xargs rmdir	<MISSING>
find ./ -type f -ctime -7 -exec ls {} \; > new.files	<MISSING>
find ./ -type f -empty -print0 | xargs -0 rm	<MISSING>
"find ./ -type f -exec bash -c 'echo ""mv \""$1\"" \""$(echo ""$1"" | sed -re '\''s/^([^-]*)-\s*([^\.]*)/\l\1\e-\2/'\'' -e '\''s/ /_/g'\'' -e '\''s/_-/-/g'\'')\""""' - {} \;"	<MISSING>
"find ./ -type f -exec bash -c 'mv ""$1"" ""$(echo ""$1"" | sed -re '\''s/^([^-]*)-\s*([^\.]*)/\l\1\e-\2/'\'' -e '\''s/ /_/g'\'' -e '\''s/_-/-/g'\'')""' - {} \;"	<MISSING>
find ./ -type f -exec chmod 644 {} \;	<MISSING>
find ./ -type f -exec grep -h 'text-to-find-here' {} \;	<MISSING>
"find ./ -type f -exec grep -hn ""text to find"" {} \;"	<MISSING>
"find ./ -type f -exec grep -l ""text to find"" {} \;"	<MISSING>
find ./ -type f -exec grep https://www.ksknet.net {} \;	<MISSING>
find ./ -type f -exec rm -rf {} \;	<MISSING>
"find ./ -type f -exec sed -i ""s/$1/$2/"" {} \;"	<MISSING>
find ./ -type f -exec sed -i '' 's#needle#replacement#' *.php {} \;	<MISSING>
find ./ -type f -exec sed -i 's/company/newcompany/' {} \;	<MISSING>
find ./ -type f -exec sed -i 's/string1/string2/' {} \;	<MISSING>
find ./ -type f -exec sed -i 's/string1/string2/g' {} \;	<MISSING>
find ./ -type f -exec sed -i -e 's/apple/orange/g' {} \;	<MISSING>
find ./ -type f -exec wc -l {}  \; | cut -d' ' -f1 | paste -sd+ | bc	<MISSING>
"find ./ -type f -iname ""*.cs"" -print0 | xargs -0 grep ""content pattern"""	<MISSING>
"find ./ -type f -iregex "".*\.html$"" -or -iregex "".*\.cgi$"""	<MISSING>
find ./ -type f -ls |grep '10 sep'	<MISSING>
"find ./ -type f -name ""$2"" -exec sed -i ""s/$3/$4/g"" {} \;"	<MISSING>
"find ./ -type f -name ""*"" ! -path ""./.*"" ! -path ""./*/.*"""	<MISSING>
"find ./ -type f -name ""*"" -not -name ""*.o"""	<MISSING>
"find ./ -type f -name ""*.[mh]"" -exec wc -l {}  \; | sed -e 's/[ ]*//g' | cut -d""."" -f1 | paste -sd+ - | bc"	<MISSING>
"find ./ -type f -name ""*.php""  | xargs -r rename ""s/php/html/"""	<MISSING>
"find ./ -type f -name ""pattern"" ! -path ""excluded path"" ! -path ""excluded path"""	<MISSING>
find ./ -type f -name '*.c*' -print0 | xargs -0 rm -rf &>> log_del.txt	<MISSING>
find ./ -type f -name '*.html' | xargs sed -i '$s/$/<\/description>/'	<MISSING>
find ./ -type f -name '*.html' | xargs sed -i '/^$/d	<MISSING>
find ./ -type f -name '*.html' | xargs sed -i '1,/sblmtitle/d'	<MISSING>
find ./ -type f -name '*.html' | xargs sed -i 's/<title>/sblmtitle\n<title>/g'	<MISSING>
"find ./ -type f -name '*.r*' -delete -printf ""%h\0"" | xargs -0 rmdir"	<MISSING>
find ./ -type f -name '*.r*' -print0 | xargs -0 rm -rf &> log_del.txt	<MISSING>
"find ./ -type f -name *"".html"" | xargs sed -i ""s/php/html/g"""	<MISSING>
find ./ -type f -name \*.php -exec sed -i ’s/^.*iframe bla bla bla.*$//g’ {} \;	<MISSING>
"find ./ -type f -name doc.txt -printf ""found\n"""	<MISSING>
find ./ -type f -newer /tmp/date.start ! -newer /tmp/date.end -exec rm {} \;	<MISSING>
find ./ -type f -print	<MISSING>
"find ./ -type f -print -exec grep -n -i ""stringyouwannafind"" {} \;"	<MISSING>
find ./ -type f -print | xargs    -i mv -f {} ./newdir	<MISSING>
find ./ -type f -print | xargs    -l56 -i {} mv -f {} ./newdir	<MISSING>
find ./ -type f -print0 | xargs -0 -n1 md5sum | sort -k 1,32 | uniq -w 32 -d --all-repeated=separate | sed -e 's/^[0-9a-f]*\ *//;'	<MISSING>
find ./ -type f -print0 | xargs -t -0 chmod -v 644	<MISSING>
"find ./ -type f -regex "".*\.[jj][pp][gg]$"" | wc -l"	<MISSING>
"find ./ -type f -regex "".*\.[jpgjpg]$"" | wc -l"	<MISSING>
find ./ -type f -size 0c -print | xargs rm	<MISSING>
find ./ -type f \( -iname \*.jpg -o -iname \*.png \)	<MISSING>
find ./ -type f \( -name '*.r*' -o -name '*.c*' \) -print	<MISSING>
find ./ -type f | tee /tmp/grep1 /tmp/grep2 >/dev/null	<MISSING>
"find ./ -type f | xargs grep ""foo"""	<MISSING>
find ./ -type l	<MISSING>
find ./ -type l -exec file {} \; |grep broken	<MISSING>
find ./ -user root	<MISSING>
find ./ -user tom	<MISSING>
"find ./ | grep ""sub"""	<MISSING>
find ./ | grep -e 'foo|bar'	<MISSING>
find ./ | wc -l	<MISSING>
find ./* -mtime +5	<MISSING>
find ./* | cpio -o > arch.cpio	<MISSING>
"find ./<source_dir>/ -type d | sed 's/\.\/<source_dir>//g' | xargs -i {} mkdir -p <dest_dir>""/{}"""	<MISSING>
find ./bin -name “cp”	<MISSING>
"find ./c -name ""*.c"" | xargs -n1  cp xyz.c"	<MISSING>
"find ./c -name ""*.c"" | xargs -n1  echo cp xyz.c"	<MISSING>
find ./cms/djangoapps/contentstore/management/commands/tests -iname *.css | xargs sed -i s/[ee][dd][xx]/gurukul/g	<MISSING>
find ./cms/djangoapps/contentstore/views -iname *.css | xargs sed -i s/[ee][dd][xx]/gurukul/g	<MISSING>
find ./debian -type d | xargs chmod 755	<MISSING>
find ./default/files -type d -exec chmod ug=rwx,o= '{}' \;	<MISSING>
find ./default/files -type f -exec chmod ug=rw,o= '{}' \;	<MISSING>
find ./desktop -type f	<MISSING>
find ./dir1 -type f -exec basename {} \;	<MISSING>
find ./dir1 ./dir2 -name foo.bar -print	<MISSING>
find ./in_save/ -type f -maxdepth 1| more	<MISSING>
"find ./js/ -name ""*.js.compiled"" -print0"	<MISSING>
"find ./js/ -type f -name ""*.js"" -exec java -jar compiler.jar --compilation_level simple_optimizations --js '{}' --js_output_file '{}'.compiled \;"	<MISSING>
"find ./js/ -type f -name ""*.js"" | xargs rm -f"	<MISSING>
find ./lib/app -type f | sort	<MISSING>
find ./lib/app -type f | sort | tee myfile	<MISSING>
"find ./lib/app -type f | sort | xargs awk 'endfile {print """"} {print}' > myfile"	<MISSING>
find ./machbook -exec chown 184 {} \;	<MISSING>
"find ./music -name ""*.mp3"" -print0 | xargs -0 ls"	<MISSING>
"find ./n* -name ""*.tcl"""	<MISSING>
"find ./online_admin/*/utf-8/* -type f -exec grep -h ""invalidtemplatename"" {} \;"	<MISSING>
find ./photos/john_doe -type f -name '*.jpg' -exec du -ch {} + | grep total$	<MISSING>
"find ./polkadots -name ""image.pdf"" -print0"	<MISSING>
find ./polkadots -name 'image.pdf'	<MISSING>
find ./polkadots -name 'image.pdf' -exec convert -transparent white -fuzz 10% {} image.png \; -print	<MISSING>
"find ./polkadots -type f -name ""*.pdf"""	<MISSING>
"find ./polkadots -type f -name ""image.pdf"""	<MISSING>
find ./randfiles/ -type f | wc -l	<MISSING>
find ./subdirectory -type f 2>>error.log	<MISSING>
find ./subdirectory/ -type f	<MISSING>
find ./subfolder ./subfolder/*/ -maxdepth 1 -type f	<MISSING>
"find ./test -printf ""././%f\n""| cpio -o -f newarch"	<MISSING>
find ./test -regextype posix-egrep -type d -regex '.*/[0-9]{5}$'	<MISSING>
find ./test -type d -name '[0-9][0-9][0-9][0-9][0-9]'	<MISSING>
find ./var/log	<MISSING>
"find ./work -print | xargs grep ""profit"""	<MISSING>
"find ./work/ -type f -name ""*.pdf"" -mtime +5 -size +2m  | xargs -r cp -t ./backup/"	<MISSING>
"find ./work/ -type f -name ""*.sh"" -mtime -20 | xargs -r ls -l"	<MISSING>
find .bmp or .txt files	
"find .cache/bower/ -name ""message.txt"" | xargs cat"	<MISSING>
find .cache/chromium/default/cache/ -mindepth 1 -size +100m -delete	<MISSING>
find .cache/chromium/default/cache/ -mindepth 1 -type d -size +100m -delete	<MISSING>
find .cache/chromium/default/cache/ -mindepth 1 -type d -size +100m -exec rm -rf {} \;	<MISSING>
find .cache/chromium/default/cache/ -type d -print0 | du -h | grep '[0-9]\{3\}m' | cut -f2 | grep -v '^.$'	<MISSING>
find .cpp files that differs in subdirectories path1 and path2.	
find .gif files in /var/www and below that were last changed between 90 and 180 days ago	
find .git -type f -print0 | xargs -0 sed -i 's/subdomainb\.example\.com/subdomaina.example.com/g'	<MISSING>
find .java files in the current directory tree that contain 'todo', and print their names	
find .java files in the current directory tree that contain 'todo', and print their pathnames	
"find .jpg files owned by user daniel in the current directory and its sub-directories but ignore any file beginning with ""autumn""."	
find .jpg files owned by user daniel in the current directory and its sub-directories.	
find .log files in the /var/log directory tree and copy them to a bzip2 archive	
find .rm files in the /home/me/download/ directory tree and convert them to the mp3 format	
find .rm files in the current directory tree and convert them to the mp3 format	
find .rmv files in the ./root directory recursively and copy them to directory /copy/to/here	
find .rmv files in the current directory recursively	
find .txt files on the system whose size is greater than 12000 bytes	
find .vim/ -maxdepth 1 -type d	<MISSING>
"find .|grep ""foobar""|xargs -i{} cp ""{}"" ~/foo/bar"	<MISSING>
"find .|grep ""foobar""|yargs -l 203 cp --after ~/foo/bar"	<MISSING>
find .|xargs perl -p -e 's/ /\n'|xargs grep aaa|wc -l	<MISSING>
find /	<MISSING>
find /       \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \              \( -size +100m -fprintf /root/big.txt  '%-10s %p\n' \)	<MISSING>
find /       \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \( -size +100m -fprintf /root/big.txt  '%-10s %p\n' \)	<MISSING>
find /    \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , ( -size +100m -fprintf /root/big.txt '%-10s %p\n' \)	<MISSING>
find /  -links 2 -print	<MISSING>
find /  -perm /u=s	<MISSING>
find /  -size +100m -exec rm -rf {} \;	<MISSING>
find /  -type f -group users	<MISSING>
find /  -type f -name *.mp3 -size +10m -exec rm  {} \;	<MISSING>
find /  \( -perm -2000 -o -perm -4000 \) -ls	<MISSING>
find / ! -newer /tmp/timestamp -exec touch {} \;	<MISSING>
find / -amin -60	<MISSING>
find / -atime +2	<MISSING>
find / -atime -1	<MISSING>
find / -atime -1 -amin +60	<MISSING>
find / -atime 0	<MISSING>
find / -atime 50	<MISSING>
find / -cmin -60	<MISSING>
find / -cmin -60 | head	<MISSING>
find / -ctime +3	<MISSING>
find / -ctime -1	<MISSING>
find / -ctime -50	<MISSING>
"find / -daystart -mtime +41 -mtime -408 \   -printf ""%m %n %u %g %10s %ty-%tm-%td %ta %th:%tm:%ts %h/%f\n"" | awk '($7==""fri""){print}'"	<MISSING>
find / -dev -size +3000 -exec ls -l {} ;	<MISSING>
find / -empty	<MISSING>
find / -executable	<MISSING>
find / -fstype ext2 -name document -print	<MISSING>
find / -fstype ext3 -name zsh -ls	<MISSING>
find / -fstype ext3 -name zsh -ls 2> /dev/null	<MISSING>
find / -fstype ext3 -name zsh*	<MISSING>
find / -fstype nfs -print	<MISSING>
find / -group 2000 -exec chgrp -h foo {} \;	<MISSING>
find / -group 999 -exec chgrp newgroup {} \;	<MISSING>
find / -group group2	<MISSING>
find / -group lighttpd -print	<MISSING>
find / -group managers -print	<MISSING>
find / -group name_of_group	<MISSING>
find / -group root	<MISSING>
find / -group root | head	<MISSING>
find / -group shadow	<MISSING>
find / -group staff -print	<MISSING>
"find / -group users -iname ""dateiname"""	<MISSING>
"find / -group users -iname ""filename"""	<MISSING>
"find / -iname ""*.mp3"" -exec mv {} /mnt/mp3 \;"	<MISSING>
"find / -iname ""*.mp3"" -print"	<MISSING>
"find / -iname ""*.mp3"" -type d -exec /bin/mv {} /mnt/mp3 \;"	<MISSING>
"find / -iname ""*.mp3"" -type f -exec /bin/mv {} /mnt/mp3 \;"	<MISSING>
"find / -iname ""*.mp3"" -type f -print0 | xargs -0 -i '{}' /bin/mv ""{}"" /mnt/mp3/"	<MISSING>
"find / -iname ""*.mp3"" -type f -print0 | xargs -0 -i '{}' /usr/bin/rsync -avr ""{}"" /mnt/mp3/"	<MISSING>
"find / -iname ""*.mp3"" -type f | xargs -i '{}' mv {} /mnt/mp3"	<MISSING>
"find / -iname ""*.what_to_find"" -type f -exec mv {} /new_directory \;"	<MISSING>
"find / -iname ""dateiname"""	<MISSING>
"find / -iname ""filename"""	<MISSING>
"find / -iname ""testfile.txt"""	<MISSING>
find / -iname '*.ogg'	<MISSING>
find / -iname '*.txt'	<MISSING>
find / -iname '*.txt' | xargs --replace=@ cp @ /tmp/txt	<MISSING>
find / -iname '*python*'	<MISSING>
find / -iname 'process.txt' -print	<MISSING>
find / -iname passwd	<MISSING>
find / -iname test123.txt	<MISSING>
find / -iname top	<MISSING>
find / -iname “*.mp3″ -type f -print0 | xargs -0 -i ‘{}’ mkdir -p /mnt/mp3/`basename {}`	<MISSING>
find / -inum 199053	<MISSING>
find / -links +2 -print	<MISSING>
find / -links -2 -print	<MISSING>
find / -lname foo.txt	<MISSING>
find / -maxdepth 1 -xdev -type f  -exec grep -li stringtofind '{}' \;	<MISSING>
"find / -maxdepth 1 -xdev -type f -exec grep -i ""stringtofind"" -l {} \; -exec sed -i '/./d' {} \;"	<MISSING>
"find / -maxdepth 1 -xdev -type f -exec grep -i ""stringtofind"" -q ""{}"" \; -print0 | xargs -0 sed '/./d"	<MISSING>
"find / -maxdepth 1 -xdev -type f -exec grep -i ""stringtofind"" -q ""{}"" \; -print0 | xargs -0 sed '/./d'"	<MISSING>
"find / -maxdepth 1 -xdev -type f -exec grep -li ""stringtofind"" {} + | parallel sed ""'/./d'"" '{}'"	<MISSING>
"find / -maxdepth 1 -xdev -type f -exec grep -zli ""stringtofind"" {} +"	<MISSING>
"find / -maxdepth 1 -xdev -type f -exec grep -zli ""stringtofind"" {} + |  while ifs= read -r -d $'\0' file; do sed '/./d' ""$file""; done"	<MISSING>
"find / -maxdepth 1 -xdev -type f -exec grep -zli ""stringtofind"" {} + | parallel -0 sed ""'/./d'"" '{}'"	<MISSING>
"find / -maxdepth 1 -xdev -type f -print -exec grep -i ""stringtofind"" -q {} \;"	<MISSING>
find / -maxdepth 1 -xdev -type f|xargs grep -l 'string'| xargs perl -pi -e 's/.*\n//g'	<MISSING>
find / -maxdepth 1 -xdev -type f|xargs grep -l 'string'| xargs perl -pi -e 's/.//g'	<MISSING>
find / -maxdepth 2 -name testfile.txt	<MISSING>
find / -maxdepth 2 \( -fstype vfat -or -fstype ntfs \) 2> /dev/null	<MISSING>
"find / -maxdepth 3  -name ""*log"""	<MISSING>
find / -maxdepth 3 -name passwd	<MISSING>
"find / -mindepth 3  -name ""*log"""	<MISSING>
find / -mmin +90	<MISSING>
find / -mmin -1	<MISSING>
find / -mmin -1 -print	<MISSING>
find / -mmin -10	<MISSING>
find / -mmin -30 -ls	<MISSING>
find / -mmin -60	<MISSING>
find / -mount -depth \( -type f -o -type l \) -print	<MISSING>
"find / -mount -name ""*.txt"""	<MISSING>
find / -mount -name 'win*'	<MISSING>
find / -mount \! -readable -prune  -o  -path /dev -prune  -o  -name '*.jbd' -ls	<MISSING>
find / -mtime +100 -print	<MISSING>
find / -mtime +31 -print	<MISSING>
find / -mtime +50 -mtime -100	<MISSING>
find / -mtime +50 -mtime -100 | head	<MISSING>
find / -mtime +50 –mtime -100	<MISSING>
find / -mtime -1	<MISSING>
find / -mtime -1 -print	<MISSING>
find / -mtime -2 -print	<MISSING>
find / -mtime -30 -print	<MISSING>
find / -mtime -5 -print	<MISSING>
find / -mtime 1	<MISSING>
find / -mtime 50	<MISSING>
"find / -name  ""*.txt"" -fstype vfat 2> /dev/null"	<MISSING>
"find / -name  ""*.txt"" -mount 2> /dev/null"	<MISSING>
"find / -name  ""*.txt"" -xdev 2> /dev/null"	<MISSING>
"find / -name ""*"" — print"	<MISSING>
"find / -name ""*.conf"""	<MISSING>
"find / -name ""*.conf"" 2>>/dev/null"	<MISSING>
"find / -name ""*.core"" -print -exec rm {} \;"	<MISSING>
"find / -name ""*.core"" | xargs rm"	<MISSING>
"find / -name ""*.dbf"""	<MISSING>
"find / -name ""*.dbf""  -exec dirname {} \; 2> /dev/null | sort -u"	<MISSING>
"find / -name ""*.jpg"" -print"	<MISSING>
"find / -name ""*.log"""	<MISSING>
"find / -name ""*.md"" -type f -exec markdown -o {}.html {} \;"	<MISSING>
"find / -name ""*.md"" -type f -exec sh -c 'markdown ""$0"" > ""$0.html""' {} \;"	<MISSING>
"find / -name ""*.md"" -type f -exec sh -c 'markdown ""${0}"" > ""${0%.md}.html""' {} \;"	<MISSING>
"find / -name ""*.old"" -delete"	<MISSING>
"find / -name ""*.old"" -exec /bin/rm {} \"	<MISSING>
"find / -name ""*.php"""	<MISSING>
"find / -name ""*.php"" -print -o -path '/media' -prune"	<MISSING>
"find / -name ""*.txt"""	<MISSING>
"find / -name ""*.txt"" -size +12000c"	<MISSING>
"find / -name ""*conf"" -mtime 7"	<MISSING>
"find / -name ""*fink*"" -print"	<MISSING>
"find / -name ""*gif"" -print"	<MISSING>
"find / -name ""*~"" | grep -v ""/media"""	<MISSING>
"find / -name ""[xx]*"""	<MISSING>
"find / -name ""apache-tomcat*"""	<MISSING>
"find / -name ""dir-name-here"""	<MISSING>
"find / -name ""my.txt"""	<MISSING>
"find / -name ""oldstuff*.txt"" -delete"	<MISSING>
"find / -name ""process.txt"""	<MISSING>
"find / -name ""testfile.txt"""	<MISSING>
"find / -name ""имя_файла"""	<MISSING>
find / -name '#*' -atime +7 -print | xargs rm	<MISSING>
find / -name '*.pdf'	<MISSING>
find / -name '*.py' -exec cat \{} \; | tqdm --unit loc --unit_scale true | wc -l	<MISSING>
find / -name '*.tif ' –print	<MISSING>
find / -name '*.txt' -exec du -hc {} \;	<MISSING>
find / -name '*python*'	<MISSING>
find / -name '<name_pattern>' -type d | sort | uniq	<MISSING>
find / -name '<name_pattern>' | perl -pe 's/(.*\/).*$/$1/' | sort | uniq	<MISSING>
find / -name 'metallica*' -exec ls -l {} \;	<MISSING>
find / -name 'my*'	<MISSING>
find / -name 'program.c' 2>/dev/null	<MISSING>
find / -name 'program.c' 2>errors.txt	<MISSING>
find / -name 'secret.keys' -print 2>/dev/null	<MISSING>
find / -name 'top*'	<MISSING>
find / -name 'top???'	<MISSING>
find / -name 'top?????*'	<MISSING>
find / -name *.c | wc	<MISSING>
find / -name *.class -printf '%h\n' | sort --unique	<MISSING>
find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz	<MISSING>
find / -name *.jpg 2>/dev/null	<MISSING>
find / -name *.mp3	<MISSING>
find / -name *.mp3 -fprint nameoffiletoprintto	<MISSING>
find / -name *.rpm -exec chmod 755 '{}' \;	<MISSING>
find / -name .profile	<MISSING>
find / -name .profile -print	<MISSING>
find / -name .ssh* -print | tee -a ssh-stuff	<MISSING>
find / -name /transfer -prune -o -print	<MISSING>
find / -name \*.dbf -print0 2>/dev/null | xargs -0 -n1 dirname | sort | uniq	<MISSING>
find / -name \*.dbf -print0 | xargs -0 -n1 dirname | sort | uniq	<MISSING>
find / -name arrow.jpg	<MISSING>
find / -name autoload.php	<MISSING>
find / -name chapter1 -type f	<MISSING>
find / -name chapter1 -type f -print	<MISSING>
find / -name composer.json	<MISSING>
find / -name composer.json -exec grep -n drush {} /dev/null \;	<MISSING>
find / -name core -exec rm -f {} \;	<MISSING>
find / -name core -group mycomp -print -exec rm -f {} \; >> mycompcore	<MISSING>
find / -name core -print | xargs echo > /tmp/core.log	<MISSING>
find / -name document -print	<MISSING>
find / -name drush	<MISSING>
find / -name expect 2>/dev/null	<MISSING>
find / -name file	<MISSING>
find / -name file1	<MISSING>
find / -name filedir	<MISSING>
find / -name filename	<MISSING>
find / -name filename -exec  nano '{}' \;	<MISSING>
find / -name filename -exec nano '{}' \;	<MISSING>
find / -name filename -print	<MISSING>
find / -name filename.txt -print	<MISSING>
find / -name findme.txt -type f -print	<MISSING>
find / -name fluidpoint 2> /dev/null	<MISSING>
find / -name foo	<MISSING>
find / -name foo.bar -print	<MISSING>
find / -name foo.bar -print -xdev	<MISSING>
find / -name foo.bar -print 2>/dev/null	<MISSING>
find / -name foo.txt	<MISSING>
find / -name foo.txt -type f	<MISSING>
find / -name foo.txt -type f -print	<MISSING>
find / -name game	<MISSING>
find / -name grub.conf	<MISSING>
find / -name grub.conf 2>/dev/null	<MISSING>
find / -name grub.conf >& /dev/null	<MISSING>
find / -name httpd.conf	<MISSING>
find / -name httpd.conf -newer /etc/apache-perl/httpd.conf	<MISSING>
find / -name jan92.rpt -print	<MISSING>
find / -name linux	<MISSING>
find / -name local -type d	<MISSING>
find / -name myfile -type f -print	<MISSING>
find / -name myfile -type f -print 2> /dev/null	<MISSING>
find / -name mysql -type d	<MISSING>
find / -name passwd	<MISSING>
find / -name photo.jpg	<MISSING>
find / -name ssh|grep bin|xargs dirname	<MISSING>
find / -name top	<MISSING>
find / -name vimrc	<MISSING>
"find / -name whatever -not -path ""/10_recommended*"" -not -path ""/export/repo/*"""	<MISSING>
find / -name xyzzy -print0 > list	<MISSING>
find / -name ‘*.*’ -exec grep -il “foobar” {} \;	<MISSING>
find / -name “*.jpg”	<MISSING>
find / -name “*.mp3” -atime +01 -type f	<MISSING>
find / -name ”*filename*”	<MISSING>
find / -newer /tmp/checkpoint	<MISSING>
find / -newer /tmp/t	<MISSING>
find / -newer /tmp/t1 -and -not -newer /tmp/t2	<MISSING>
find / -newer myfile	<MISSING>
find / -newer ttt -user wnj -print	<MISSING>
find / -newerct '1	<MISSING>
find / -newerct '1 minute ago' -print	<MISSING>
find / -newerct '1 minute ago' -print | xargs rm	<MISSING>
find / -nogroup	<MISSING>
find / -nogroup -print	<MISSING>
find / -nogroup \( -fstype jfs -o -fstype jfs2 \) -ls	<MISSING>
find / -nogroup staff -print	<MISSING>
find / -noleaf -wholename '/proc' -prune -o -wholename '/sys' -prune -o -wholename '/dev' -prune -o -perm -2 ! -type l  ! -type s ! \( -type d -perm -1000 \) -print	<MISSING>
find / -not -newer /tmp/t	<MISSING>
find / -nouser	<MISSING>
find / -nouser -exec rm {} +	<MISSING>
find / -nouser -exec rm {} \;	<MISSING>
find / -nouser -exec rm {}\;	<MISSING>
find / -nouser -nogroup	<MISSING>
find / -nouser -o  -nogroup	<MISSING>
find / -nouser -ok rm {} \;	<MISSING>
find / -nouser -print	<MISSING>
find / -nouser \( -fstype jfs -o -fstype jfs2 \) -ls	<MISSING>
find / -nouser | xargs -0 rm	<MISSING>
find / -path /media -prune -o -size +200000 -print	<MISSING>
find / -path /proc -prune -o -nouser -o -nogroup	<MISSING>
find / -path /proc -prune -o -perm -2 ! -type l -ls	<MISSING>
find / -path /proc -prune -o -type d | wc -l	<MISSING>
find / -path /proc -prune -o -type f -perm +6000 -ls	<MISSING>
find / -path /proc -prune -o -user <account> -ls	<MISSING>
find / -path /proc -prune -o -user account -ls	<MISSING>
find / -path /usr -prune -o \( -name rsync -o -name bash \) -print 2>/dev/null	<MISSING>
find / -path /usr/lib/important/*/file.txt	<MISSING>
find / -path /usr/share -prune -o \( -name rsync -o -name bash \) -print 2>/dev/nul	<MISSING>
find / -path excluded_path -prune -o -type f -name myfile -print	<MISSING>
find / -perm +2000	<MISSING>
find / -perm +4000	<MISSING>
find / -perm +6000 -type f	<MISSING>
find / -perm +6000 -type f -exec ls -ld {} \; > setuid.txt &	<MISSING>
find / -perm +g=s	<MISSING>
find / -perm +u=s	<MISSING>
find / -perm -0002	<MISSING>
find / -perm -644	<MISSING>
find / -perm -u+rw,g+r,o+r	<MISSING>
find / -perm -u+s	<MISSING>
find / -perm -u+s -print	<MISSING>
find / -perm /222	<MISSING>
find / -perm /711	<MISSING>
find / -perm /a+w	<MISSING>
find / -perm /a=x	<MISSING>
find / -perm /g+w,o+w	<MISSING>
find / -perm /g=s	<MISSING>
find / -perm /g=w,o=w	<MISSING>
find / -perm /u+rw,g+r,o+r	<MISSING>
find / -perm /u+w,g+w,o+w	<MISSING>
find / -perm /u=r	<MISSING>
find / -perm /u=r | head	<MISSING>
find / -perm /u=s	<MISSING>
find / -perm 0551	<MISSING>
find / -perm 1551	<MISSING>
find / -perm 2644	<MISSING>
find / -perm 644	<MISSING>
"find / -perm 777 -iname ""dateiname"""	<MISSING>
"find / -perm 777 -iname ""filename"""	<MISSING>
find / -print	<MISSING>
find / -print0 -type d | xargs -0 ls -al	<MISSING>
"find / -print0 | perl -ln0e 'print ""found $_"" if -p'"	<MISSING>
find / -print0 | tar -t- --null --no-recursive -cjf tarfile.tar.bz2	<MISSING>
find / -print0 | xargs -0 tar cjf tarfile.tar.bz2	<MISSING>
find / -readable	<MISSING>
"find / -regex "".*\.\(xls\|csv\)"""	<MISSING>
find / -samefile passwd	<MISSING>
find / -size  +5000000c 2> /dev/null	<MISSING>
find / -size +1.1g	<MISSING>
find / -size +1000 -mtime +30  -exec ls -l {} \;	<MISSING>
find / -size +1000 -mtime +30 -exec ls -l {} \;	<MISSING>
find / -size +10000k	<MISSING>
find / -size +1000k -exec ls -l {} \; -print	<MISSING>
find / -size +100m	<MISSING>
find / -size +100m -exec /bin/rm {} \;	<MISSING>
find / -size +100m -exec rm -rf {} \;	<MISSING>
find / -size +100m -print	<MISSING>
find / -size +10m -printf “%12s %t %h/%fn”	<MISSING>
find / -size +3 -print	<MISSING>
find / -size +3g	<MISSING>
"find / -size +50m -iname ""dateiname"""	<MISSING>
"find / -size +50m -iname ""filename"""	<MISSING>
find / -size +50m -size -100m	<MISSING>
find / -size +600m -print	<MISSING>
find / -size +700m	<MISSING>
find / -size +900m	<MISSING>
find / -size -50c	<MISSING>
find / -size 0 -ok rm { } \;	<MISSING>
find / -size 0 -print	<MISSING>
find / -size 15m	<MISSING>
find / -size 20	<MISSING>
find / -size 2048c	<MISSING>
find / -size 42	<MISSING>
find / -size 50c	<MISSING>
find / -size 50m	<MISSING>
find / -type c	<MISSING>
find / -type d  -perm -1000  -exec ls -ld {} \; 2> /dev/null	<MISSING>
find / -type d  -perm 777 -print -exec chmod 755 {} \;	<MISSING>
find / -type d -gid  100	<MISSING>
"find / -type d -name ""*99966*"" -print 2>/dev/null"	<MISSING>
"find / -type d -name ""needle"""	<MISSING>
"find / -type d -name ""needle"" 2>/dev/null"	<MISSING>
"find / -type d -name ""ora10"""	<MISSING>
"find / -type d -name ""ora10*"""	<MISSING>
find / -type d -name 'httpdocs'	<MISSING>
find / -type d -name 'man*' -print	<MISSING>
find / -type d -name httpdocs	<MISSING>
find / -type d -name httpdocs 2> /dev/null	<MISSING>
find / -type d -name root	<MISSING>
find / -type d -name tecmint	<MISSING>
find / -type d -perm 0777	<MISSING>
find / -type d -perm 777 -print -exec chmod 755 {} \;	<MISSING>
find / -type d -print	<MISSING>
find / -type d -size +50k	<MISSING>
find / -type d | wc -l	<MISSING>
find / -type f ! -perm 644	<MISSING>
find / -type f ! -perm 777	<MISSING>
find / -type f ! perm 777	<MISSING>
find / -type f -atime -10 > march.files	<MISSING>
find / -type f -exec echo {} - ';' -o -exec echo {} + ';'	<MISSING>
find / -type f -exec echo {} \;	<MISSING>
find / -type f -exec grep -hi 'the brown dog' {} +	<MISSING>
find / -type f -exec grep -i 'the brown dog' {} +;	<MISSING>
"find / -type f -exec grep -l ""text-to-find-here"" {} \;"	<MISSING>
find / -type f -exec grep bananas {} \; -print	<MISSING>
"find / -type f -iname ""dateiname"""	<MISSING>
"find / -type f -iname ""filename"""	<MISSING>
"find / -type f -name ""*"" -newermt ""$newerthan"" ! -newermt ""$olderthan""  -printf '%t@ %p\n' | sort -k 1 -n | sed 's/^[^ ]* //'"	<MISSING>
"find / -type f -name ""*"" -newermt ""$newerthan"" ! -newermt ""$olderthan"" -ls"	<MISSING>
"find / -type f -name ""*"" -newermt ""$newerthan"" ! -newermt ""$olderthan"" -printf ""%t+\t%p\n"" | sort"	<MISSING>
"find / -type f -name ""*"" -newermt ""$newerthan"" ! -newermt ""$olderthan"" -printf ""%t+\t%p\n"" | sort | awk '{print $2}'"	<MISSING>
"find / -type f -name ""*.conf"""	<MISSING>
"find / -type f -name ""*.txt"" -print | xargs rm"	<MISSING>
"find / -type f -name ""your_pattern"" 2>/dev/null"	<MISSING>
find / -type f -name *.jpg  -exec cp {} . \;	<MISSING>
find / -type f -name *.mp3 -size +10m -exec rm {} \;	<MISSING>
find / -type f -name *.zip -size +100m -exec rm -i {} \;	<MISSING>
find / -type f -name dummy 2>/dev/null	<MISSING>
find / -type f -name dummy 2>/dev/null -exec cat {} \;	<MISSING>
find / -type f -name dummy 2>/dev/null -exec cat {} \; >tesst.txt	<MISSING>
find / -type f -name httpd.log	<MISSING>
find / -type f -name lilo.conf 2>/dev/null -exec cat {} \; >lilo.txt	<MISSING>
find / -type f -perm -002	<MISSING>
find / -type f -perm -002 -print0	<MISSING>
find / -type f -perm -002 -printf '%p has world write permissions\n'	<MISSING>
find / -type f -perm 0777	<MISSING>
find / -type f -perm 0777 -print -exec chmod 644 {} \;	<MISSING>
find / -type f -perm 0777 -print -exec chmod 755 {} \;	<MISSING>
find / -type f -perm 777	<MISSING>
find / -type f -perm 777 -print -exec chmod 644 {} \;	<MISSING>
find / -type f -print | xargs file	<MISSING>
"find / -type f -print | xargs grep ""device"""	<MISSING>
find / -type f -print0 | xargs -0 grep -i pattern	<MISSING>
find / -type f -print0 | xargs -0 grep -liwz gui | xargs -0 rm -f	<MISSING>
"find / -type f -printf ""\n%ab %p"" | head -n 11"	<MISSING>
"find / -type f -printf ""\n%ab %p"" | head -n 11 | sort -k1m"	<MISSING>
"find / -type f -printf ""\n%ad %at %p"" | head -n 11"	<MISSING>
"find / -type f -printf ""\n%ad %at %p"" | head -n 11 | sort -k1.8n -k1.1nr -k1"	<MISSING>
find / -type f -regextype posix-extended -regex '.*/.{1,24}$'	<MISSING>
find / -type f -size +100m | xargs du -sh	<MISSING>
find / -type f -size +20000k	<MISSING>
"find / -type f -size +20000k -exec ls -lh {} \; 2> /dev/null | awk '{ print $nf "": "" $5 }' | sort -nrk 2,2"	<MISSING>
"find / -type f -size +20000k -exec ls -lh {} \; | awk '{ print $8 "": "" $5 }'"	<MISSING>
"find / -type f -size +20m -exec ls -lh {} \; 2> /dev/null | awk '{ print $nf "": "" $5 }'"	<MISSING>
"find / -type f -size +20m -exec ls -lh {} \; 2> /dev/null | awk '{ print $nf "": "" $5 }' | sort -nk 2,2"	<MISSING>
"find / -type f -size +20m -exec ls -lh {} \; | awk '{ print $nf "": "" $5 }'"	<MISSING>
find / -type f -size +50m -size -100m	<MISSING>
find / -type f -size -10k 2>/dev/null -print0 | xargs -0 egrep '\bsomeknowncontent\b'	<MISSING>
find / -type f -size 0 -exec ls -l {} \;	<MISSING>
find / -type f -user bluher -exec ls -ls {}  \;	<MISSING>
find / -type f -user root -perm -4000 -exec ls -l {} \;	<MISSING>
"find / -type f \( -name ""*.xls"" -o -name ""*.csv"" \) -exec ls -l {} \;"	<MISSING>
find / -type f \( -perm -4000 -o -perm -2000 \) -exec ls -l {} \;	<MISSING>
find / -type f \( -perm -4000 -o -perm -2000 \) -ls	<MISSING>
find / -type f | egrep '.*/.{1,24}$'	<MISSING>
find / -type f | xargs grep 'text-to-find-here'	<MISSING>
"find / -type f| egrep -o ""/[^/]{0,24}$"" | cut -c 2-"	<MISSING>
find / -type f|awk -f'/' '{print $nf}'| awk 'length($0) < 25'	<MISSING>
"find / -type f|egrep ""/[^/]{0,24}$"""	<MISSING>
find / -type l -lname '/mnt/oldname*'	<MISSING>
find / -type l -print | perl -nle '-e || print';	<MISSING>
find / -type l -print0 | xargs -0 file | grep broken	<MISSING>
find / -uid 1005	<MISSING>
find / -uid 1005 2>/dev/null	<MISSING>
find / -user 1005 -exec chown -h foo {} \;	<MISSING>
find / -user 999 -exec chown newuser {} \;	<MISSING>
find / -user admin -print	<MISSING>
find / -user comp	<MISSING>
"find / -user edwarda -exec chgrp pubs ""{}"" \;"	<MISSING>
"find / -user edwarda -exec chown earnestc ""{}"" \;"	<MISSING>
"find / -user edwarda -exec rm ""{}"" \;"	<MISSING>
"find / -user edwarda -ok rm ""{}"" \;"	<MISSING>
find / -user edwarda -print | cpio -ovbc > /dev/rfd0	<MISSING>
find / -user edwarda -print | xargs chown earnestc	<MISSING>
find / -user lal -exec chown ravi {} \;	<MISSING>
find / -user news -type d -perm 775 -print	<MISSING>
find / -user olduser  -type f  -exec chown newuser {} \	<MISSING>
"find / -user pat -iname ""dateiname"""	<MISSING>
"find / -user pat -iname ""filename"""	<MISSING>
find / -user roger -print	<MISSING>
find / -user root	<MISSING>
"find / -user root -iname ""*.txt"""	<MISSING>
"find / -user root -iname ""*.txt"" | head"	<MISSING>
find / -user root -name findcommandexamples.txt	<MISSING>
find / -user root -name tecmint.txt	<MISSING>
find / -user root | head	<MISSING>
find / -user seamstress -iname “*.pdf”	<MISSING>
find / -user syslog	<MISSING>
find / -user test1 -exec du -sm {} \;|awk '{s+=$1}end{print s}'	<MISSING>
"find / -user tutonics -name ""file.txt"""	<MISSING>
find / -user user1	<MISSING>
find / -user username -group groupname -name filename	<MISSING>
find / -user vivek	<MISSING>
"find / -user vivek -name ""*.sh"""	<MISSING>
find / -user www -print	<MISSING>
find / -wholename  '/proc' -prune  -o  -type f -perm -0002 -exec ls -l {} \;	<MISSING>
"find / -xdev -name ""*.log"""	<MISSING>
"find / -xdev -name ""*.rpm"""	<MISSING>
"find / -xdev -name ""*.txt"""	<MISSING>
find / -xdev -name \*.rpm	<MISSING>
find / -xdev -name document -print	<MISSING>
find / /usr -xdev -name document -print	<MISSING>
find / [опция_поиска] [значение]	<MISSING>
"find / \! -name ""*.c"" -print"	<MISSING>
find / \! -readable -prune -o -name '*.jbd' -ls	<MISSING>
find / \! \( -newer ttt -user wnj \) -print	<MISSING>
find / \( -name '*.txt' -o -name '*.doc' -o -size +5m \)	<MISSING>
find / \( -name 10_recommended* -o -name share \) -prune -o -type f -name java -print 2>/dev/null	<MISSING>
find / \( -name 10_recommended* -o -name share \) -prune -o -type f \( -name firefox -0 -name thunderbird -0 -name seamonkey \) -print 2>/dev/null	<MISSING>
find / \( -name tmp -o -name '*.xx' \) -atime +7 -exec rm {} \;	<MISSING>
find / \( -newer ttt -or -user wnj	<MISSING>
find / \( -newer ttt -or -user wnj \) -print	<MISSING>
find / \( -nogroup -o -noname \) -ls	<MISSING>
"find / \( -path /export -o -path ""/*recommended*"" \) -prune -o \   \( -name iceweasel -o -name thunderbird -type f \) -print 2>/dev/null"	<MISSING>
find / \( -perm -006 -o -perm -007 \) \( ! -type -l \) -ls	<MISSING>
find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \  \( -size +100m -fprintf /root/big.txt '%-10s %p\n' \)	<MISSING>
find / \( -perm 2000 -o -perm 4000 \) -print | diff - files.secure	<MISSING>
find / \( -type d -a -perm -777 \) -print	<MISSING>
find / \( -type f -or -type d \) -name \*fink\* -ls	<MISSING>
find / \( -type f -or -type d \) -name \*fink\* -print	<MISSING>
find / – perm -0002	<MISSING>
find /. -name 'tobesearched.file' 2>&1 | grep -v 'permission denied'	<MISSING>
find /. -name 'tobesearched.file' 2>/dev/null	<MISSING>
find //path/to/source/directory -type f -exec md5sum {} + | awk '{print $0}' > output.txt	<MISSING>
find /abs/path/to/directory -maxdepth 1 -name '.*invalidtemplatename.*'	<MISSING>
"find /applications -type d -name ""*.app"""	<MISSING>
"find /applications/ -name ""*.java"" -exec grep -i todo {} +"	<MISSING>
"find /applications/ -name ""*.java"" -exec grep -i todo {} \;"	<MISSING>
"find /applications/ -name ""*.java"" -print0 | xargs -0 grep -i ""todo"""	<MISSING>
find /apps -group accts -print	<MISSING>
"find /apps -xdev -name ""*.log"" -type f -mtime +60 | xargs rm"	<MISSING>
find /apps/ -user root -type f -amin -2 -name *.rb	<MISSING>
find /apps/audit -perm -7 -print | xargs chmod o‑w	<MISSING>
find /base/path/of/proj/d‌​ata -name target.txt | xargs simplegrepscript.sh > overallenergy.out	<MISSING>
find /basedir/ -iname '*company*' -print0	<MISSING>
find /basedir/ \( -iname '*company*' -and \( -iname '*.txt' -or -iname '*.html' \) \) -print0	<MISSING>
find /bin -type f -follow | xargs    ls -al | awk ' nf==9 { print $3 }'|sort -u	<MISSING>
find /book -print | xargs grep '[nn] utshell'	<MISSING>
find /data -type f -perm 400	<MISSING>
find /data -type f -perm 400 -exec echo modifying {} \;	<MISSING>
find /data -type f -perm 400 -exec echo modifying {} \; -exec chmod 755 {} \;	<MISSING>
find /data -type f -perm 400 -print	<MISSING>
find /data -type f -perm 400 -print -quit	<MISSING>
find /data -type f -perm 400 -print | xargs chmod 755	<MISSING>
find /data -type f -perm 400 -print0	<MISSING>
find /data/ -name 'command-*-setup' | sort -t - -v -k 2,2	<MISSING>
"find /data/bin/test -type d -mtime +10 -name ""[0-9]*"" -exec rm -rf {} \;"	<MISSING>
find /data/bin/test -type d -mtime +10 -name '[0-9]*' -print | xargs rm -rf ;	<MISSING>
find /data/images -newer /tmp/foo	<MISSING>
find /data/images -type f -newer /tmp/start -not -newer /tmp/end	<MISSING>
find /data/images -type f -newer /tmp/start -not -newer /tmp/end > output.txt	<MISSING>
find /data/spoolin -name job.history	<MISSING>
find /data/spoolin -name job.history -exec grep -l fail {} \+ | wc -l	<MISSING>
find /data/spoolin -name job.history -exec grep -l fail {} \; | wc -l	<MISSING>
find /data/spoolin -name job.history | xargs grep -l fail | wc -l	<MISSING>
find /data/spoolin -name job.history | xargs grep -o -m 1 -h 'fail\|abor' | sort | uniq -c	<MISSING>
find /data1/marcel -size +1024  \( -mtime +365 -o -atime +365 \) -ls -exec file {} \;	<MISSING>
find /data1/marcel -size +1024 \( -mtime +365 -o -atime +365 \) -ls	<MISSING>
find /data1/realtime -mmin -60 -mmin +5 -type d	<MISSING>
find /data1/realtime -mmin -60 -type d	<MISSING>
find /dev -group audio	<MISSING>
"find /dev -user ""peter"" |more"	<MISSING>
find /dev/sd*[a-z] -printf . | wc -c	<MISSING>
find /dev/sd*[a-z] | wc -l	<MISSING>
find /dev/shm /tmp -type f -ctime +14	<MISSING>
find /dev/shm/split/ -type f -exec split -l 1000 {} {} \;	<MISSING>
find /dir -amin -60	<MISSING>
find /dir -cmin -60	<MISSING>
find /dir -mmin -60	<MISSING>
"find /dir -name ""filename*"" -type f -delete"	<MISSING>
"find /dir -name ""filename*"" -type f -exec rm {} \;"	<MISSING>
"find /dir -name ""filename*"" -type f -print | xargs rm"	<MISSING>
find /dir -newer yesterday.ref -a \! -newer today.ref -print	<MISSING>
find /dir -regex '.*2015.*\(album.*\|picture.*\)'	<MISSING>
find /dir -type f -print0 | tr -dc '\0' | wc -c	<MISSING>
find /dir -type f -print0 | xargs -0i cat {} | grep whatever	<MISSING>
find /dir -type f -size 0 -print	<MISSING>
"find /dir \( -name foo -prune \) -o \( -name bar -prune \) -o -name ""*.sh"" -print"	<MISSING>
"find /dir \( -name node_modules -prune \) -o -name ""*.sh"" -exec grep --color -hn ""your text to find"" {} 2>/dev/null \;"	<MISSING>
find /dir/containing/unsigned -name '*.pdf' -print0	<MISSING>
find /dir/dir -type f -mtime +540 -mtime -720 -printf \”%p\”,\”%s\”,\”%ad\”,|”%td\”\\n > /dir/dir/output.csv	<MISSING>
"find /dir/path/look/up -name ""dir-name-here"""	<MISSING>
"find /dir/path/look/up -name ""dir-name-here"" -print"	<MISSING>
find /dir/to/search -path '*/.*' -ls	<MISSING>
find /dir/to/search -path '*/.*' -print	<MISSING>
"find /dir/to/search/ -name "".*"" -ls"	<MISSING>
"find /dir/to/search/ -name "".*"" -print"	<MISSING>
"find /dir/to/search/ -not -name ""*.c"" -print"	<MISSING>
"find /dir/to/search/ -type d -iname "".*"" -ls"	<MISSING>
"find /dir/to/search/ -type f -iname "".*"" -ls"	<MISSING>
find /dir/to/search/ -type f -name 'expression -and expression' -print	<MISSING>
find /dir/to/search/ -type f -name 'expression -or expression' -print	<MISSING>
find /dir/to/search/ -type f -name 'regex' -print	<MISSING>
"find /dir/to/search/ \! -name ""*.c"" print"	<MISSING>
"find /dir1 -type f -printf ""%f\n"""	<MISSING>
find /directory -newermt $(date +%y-%m-%d -d '1 day ago') -type f -print	<MISSING>
find /directory-path  -type d -exec sudo chmod 2775 {} +	<MISSING>
find /directory/ -maxdepth 1 -type d -print| wc -l	<MISSING>
find /directory/containing/files -type f -exec grep -h 'pattern_to_search' {} +	<MISSING>
"find /directory/containing/files -type f -name ""*.txt"" -exec grep -h 'pattern_to_search' {} +"	<MISSING>
"find /directory/containing/files -type f -print0 | xargs -0 grep ""test to search"""	<MISSING>
"find /directory/containing/files -type f -print0 | xargs -0 grep ""text to search"""	<MISSING>
find /directory/whatever -name '*.tar.gz' -mtime +$days	<MISSING>
"find /directory/whatever -name '*.tar.gz' -mtime +$days | grep 'tar.gz' || echo ""you don't have files older than $days days"""	<MISSING>
find /directory1/directory2/ -maxdepth 1 -type f | sort | tail -n 5 | xargs md5sum	<MISSING>
find /directory_path -mtime -1 -print	<MISSING>
find /directory_path -type f -mtime -1 -print	<MISSING>
find /dirpath \( -name \*.trc -a -mtime +30 \) -exec rm {} \;	<MISSING>
find /dir|egrep '2015.*(album|picture)'	<MISSING>
find /dump -type f -name '*.xml' -exec java -jar processfile.jar {} \;	<MISSING>
find /dump -type f -name '*.xml' | parallel -j8 java -jar processfile.jar {}	<MISSING>
find /dump -type f -name '*.xml' | sed -e 's/\.xml$/.out/' | xargs make -j8	<MISSING>
find /eserver6 -l	<MISSING>
"find /eserver6 -name ""orm.properties"""	<MISSING>
"find /eserver6/share/system/config/cluster -name ""orm.properties"""	<MISSING>
find /etc   ! -name /etc	<MISSING>
find /etc -atime -1	<MISSING>
find /etc -ctime -1	<MISSING>
find /etc -daystart -ctime -1	<MISSING>
find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \;	<MISSING>
"find /etc -execdir echo ""{}"" ';'"	<MISSING>
find /etc -iregex '.*xt.*'	<MISSING>
"find /etc -maxdepth 1 -name ""*.conf"" | tail"	<MISSING>
"find /etc -maxdepth 2 -name ""*.conf"" | tail"	<MISSING>
find /etc -mtime -1	<MISSING>
"find /etc -name ""*.conf"""	<MISSING>
"find /etc -name ""*.conf"" -mmin -30"	<MISSING>
"find /etc -name ""*.conf"" -printf ""%f %a, %t\n"""	<MISSING>
"find /etc -name ""*.conf"" -printf ""%f accessed %af %ar, modified %tf %tr\n"""	<MISSING>
"find /etc -name ""*.txt"" -exec ls -l {} \;"	<MISSING>
"find /etc -name ""*.txt"" -ls"	<MISSING>
"find /etc -name ""*.txt"" | xargs -i {} ls -l {}"	<MISSING>
"find /etc -name ""*.txt"" | xargs -i {} mv {} {}.bak"	<MISSING>
"find /etc -name ""*.txt"" | xargs ls -l"	<MISSING>
"find /etc -name ""httpd.conf"""	<MISSING>
find /etc -name '*.conf'	<MISSING>
find /etc -name *fstab*	<MISSING>
find /etc -name hosts	<MISSING>
find /etc -name mysql -type d	<MISSING>
find /etc -name ppp.conf	<MISSING>
find /etc -newer /etc/motd	<MISSING>
find /etc -newer /tmp/foo	<MISSING>
find /etc -newer /var/log/backup.timestamp -print	<MISSING>
"find /etc -print0 -name ""*.txt"" | xargs -i {} -0 mv {} {}.bak"	<MISSING>
find /etc -print0 | grep -azz test | xargs -0 file	<MISSING>
find /etc -print0 | xargs -0 file	<MISSING>
find /etc -size +100k	<MISSING>
find /etc -size +100k -size -150k	<MISSING>
find /etc -size +5m -exec ls -sh {} +	<MISSING>
find /etc -type d -print	<MISSING>
find /etc -type f -ctime -1	<MISSING>
find /etc -type f -exec cat '{}' \; | tr -c '.[:digit:]' '\n'  | grep '^[^.][^.]*\.[^.][^.]*\.[^.][^.]*\.[^.][^.]*$'	<MISSING>
find /etc -type f -exec cat '{}' \; | tr -c '.[:digit:]' '\n' \ | grep '^[^.][^.]*\.[^.][^.]*\.[^.][^.]*\.[^.][^.]*$'	<MISSING>
find /etc -type f -exec cat '{}' \; | tr -c '.[:digit:]' '\n' | grep '^[^.][^.]*\.[^.][^.]*\.[^.][^.]*\.[^.][^.]*$'	<MISSING>
find /etc -type f -mmin -10	<MISSING>
find /etc -type f -print | xargs grep -il '128\.200\.34\.'	<MISSING>
find /etc -type f -print | xargs grep -il old1\.old2\.co\.com	<MISSING>
find /etc -type f -print0 2>/dev/null | xargs -0 grep --color=auto -hn 'nameserver' 2>/dev/null	<MISSING>
find /etc -type f |  xargs --max-lines=1  -r --max-procs=20  ./do1.sh	<MISSING>
"find /etc -type f | xargs grep -l -i ""damian"""	<MISSING>
find /etc -type l	<MISSING>
find /etc -type l -print	<MISSING>
"find /etc /srv \! -path ""./srv/tftp/pxelinux.cfg*"" -a \! -name /etc/mtab"	<MISSING>
find /etc /srv \( -path /srv/tftp/pxelinux.cfg -o -path /etc/mtab \)  -prune -o -print	<MISSING>
"find /etc/ -iname ""*"" -type f -print0 | xargs -0 grep -h ""nameserver"""	<MISSING>
"find /etc/ -iname ""*"" | xargs grep '192.168.1.5'"	<MISSING>
find /etc/ -mtime -30 | xargs -0 cp /a/path	<MISSING>
find /etc/ -type f -exec ls -s {} + | sort -n | head -3	<MISSING>
find /etc/ -type f -mtime -1	<MISSING>
"find /etc/ -type f -name ""*.conf"" -print0 | xargs -i {} -0 grep ""nameserver"" ""{}"""	<MISSING>
find /etc/ -user root -mtime 1	<MISSING>
find /etc/. ! -name . -prune	<MISSING>
find /etc/. ! -name /etc/.	<MISSING>
find /etc/apache-perl -newer /etc/apache-perl/httpd.conf	<MISSING>
find /etc/logs/server.log -exec grep error {} \; -print	<MISSING>
find /etc/nginx -name '*.conf' -exec echo {} ;	<MISSING>
find /etc/sysconfig -amin -30	<MISSING>
find /etc/sysconfig -amin -30 -type f	<MISSING>
find /export/home/someone -exec curl -u someone:password -vt {} ftp://somehost/tmp/	<MISSING>
"find /file/path ! -newermt ""jul 01"""	<MISSING>
"find /file/path ! -newermt ""jul 01"" -type f -print0 | xargs -0 rm"	<MISSING>
find /folder/of/stuff -type f | sort	<MISSING>
find /folder/path/* -mmin +120 -delete	<MISSING>
find /foldername | sort -n | tail -1	<MISSING>
find /foo -maxdepth 1 -type f ! -name 'runscript*' -exec ln -s {} /bar/tmp/ \;	<MISSING>
"find /foo -name ""*.txt"" -delete"	<MISSING>
"find /foo -name ""*.txt"" -exec du -hc {} + | tail -n1"	<MISSING>
"find /foo/ -name ""*.txt"" -exec rm -v {} \;"	<MISSING>
find /foo/bar -name '*.mp4' -exec mv -t /some/path {} +	<MISSING>
find /foo/bar -name '*.mp4' -print0 | xargs -0 mv -t /some/path {}	<MISSING>
find /foo/bar -name '*.mp4' -print0 | xargs -i{} -0 mv -t /some/path {}	<MISSING>
find /foo/bar -type d -depth -exec rmdir -p {} +	<MISSING>
find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir	<MISSING>
find /foot/bar/ -name '*.mp4' -exec mv -t /some/path {} +	<MISSING>
"find /fss/fin -d 1 -type d -name ""*"" -print"	<MISSING>
find /fss/fin -type d	<MISSING>
"find /fss/fin -type d -name  ""essbase"" -print"	<MISSING>
"find /ftp/dir/ -size +500k -iname ""*.jpg"""	<MISSING>
find /full/path/dir -name '*.txt' -exec /bin/rm {} \;	<MISSING>
find /full/path/dir -name '*.txt' -print0 | xargs -0 rm	<MISSING>
find /full/path/to/dir -name '*.txt' -print0 | xargs -0 >/tmp/logfile	<MISSING>
find /ghi /jkl -type f -name abc.def 2> /dev/null -exec grep -h ^# {} \;	<MISSING>
find /ghi /jkl -type f -name abc.def 2> /dev/null -exec ls {} \; -exec cat {} \;	<MISSING>
find /git/our_repos -type d -exec chmod g+s {} +	<MISSING>
find /home ! -group test	<MISSING>
"find /home ! -group test -printf ""%p:%g\n"""	<MISSING>
"find /home ! -name ""*.txt"""	<MISSING>
find /home -atime +100	<MISSING>
find /home -atime +7	<MISSING>
find /home -depth -print | cpio -ov -0 /dev/rmt0 | tee -a tape.log	<MISSING>
find /home -group developer	<MISSING>
find /home -group test	<MISSING>
"find /home -iname ""*.txt"""	<MISSING>
find /home -iname tecmint.txt	<MISSING>
find /home -maxdepth 1 -type d	<MISSING>
find /home -mindepth 1 -maxdepth 1 -type d -name '*[aeiou][aeiou]*' -printf '*' | wc -c	<MISSING>
find /home -mtime -7	<MISSING>
"find /home -name ""*.c"""	<MISSING>
"find /home -name ""*.txt"""	<MISSING>
"find /home -name ""*.txt"" -size +100k"	<MISSING>
"find /home -name ""*.txt"" -size -100k"	<MISSING>
"find /home -name ""*.txt"" -size 100k"	<MISSING>
"find /home -name "".*"""	<MISSING>
find /home -name '*.jpg	<MISSING>
find /home -name *.txt	<MISSING>
find /home -name .rhosts -print0 | xargs -0 rm	<MISSING>
find /home -name core -exec rm {} \;	<MISSING>
find /home -name filename.txt	<MISSING>
"find /home -name foo.bar -type f -exec rm -f ""{}"" ';'"	<MISSING>
find /home -name tecmint.txt	<MISSING>
find /home -name trash -exec ls -al {} \;	<MISSING>
find /home -name trash -exec rm {} \;	<MISSING>
find /home -not -group test	<MISSING>
find /home -nouser -print	<MISSING>
find /home -perm /a=x	<MISSING>
find /home -perm /u=r	<MISSING>
find /home -perm /u=s	<MISSING>
find /home -perm 1553	<MISSING>
find /home -size +100000 -ls 2>/dev/null	<MISSING>
find /home -size +10m -size -50m	<MISSING>
find /home -size +200m -exec ls -sh {} \;	<MISSING>
"find /home -size +5000000b -name ""error_log"" -exec rm -rf {} \;"	<MISSING>
find /home -size 10m	<MISSING>
find /home -type d ! -exec test -e '{}/bin' \; -print	<MISSING>
find /home -type d -empty	<MISSING>
find /home -type d -name testdir	<MISSING>
find /home -type d -perm 777 -print -exec chmod 755 {} \;	<MISSING>
find /home -type f -exec du -s {} \; | sort -r -k1,1n | head	<MISSING>
find /home -type f -exec file {} \;	<MISSING>
find /home -type f -mtime +90 -mtime -100  -exec rm  {} \;	<MISSING>
"find /home -type f -name ""*.ext"" -exec perl -pi -e 's/\r//g' {} \;"	<MISSING>
"find /home -type f -name ""*.ext"" -exec sed -i -e ""s/\r$//g"" {} \;"	<MISSING>
"find /home -type f -name ""*.ext"" -exec sed -i -e ""s/\x0d$//g"" {} \;"	<MISSING>
"find /home -type f -name ""*.ext"" -exec sed -i -e 's/^m$//' {} \;"	<MISSING>
"find /home -type f -name ""*.ext"" -print0 | while read -r -d ""$(printf ""\000"")"" -r path; do awk '{ sub(""\r$"", """"); print }' $path > $path""_new""; done"	<MISSING>
"find /home -type f -name ""*.ext"" -print0 | while read -r -d ""$(printf ""\000"")"" -r path; do cat $path | tr -d '\r' > $path""_new""; done"	<MISSING>
"find /home -type f -name ""*.ext"" -print0 | while read -r -d ""$(printf ""\000"")"" -r path; do dos2unix $path $path""_new""; done"	<MISSING>
"find /home -type f -name ""*.sxw"" -atime -3 -user bruno"	<MISSING>
find /home -type f -name '*.aac'	<MISSING>
find /home -type f -name '*.mp3'	<MISSING>
find /home -type f -name *.log -size +100m -exec rm -f {} \;	<MISSING>
find /home -type f -name *.mp4 -size +10m -exec rm {} \;	<MISSING>
find /home -type f -name *.sxw -atime -3 -user bruno	<MISSING>
find /home -type f -name test.txt -exec rm -f {} \	<MISSING>
find /home -type f -perm /u=r	<MISSING>
find /home -type f -perm 0777 -print	<MISSING>
find /home -type f -perm 0777 -print -exec chmod 700 {} \;	<MISSING>
find /home -type f -print0 | xargs -0 file	<MISSING>
"find /home -type f -printf ""%i@%p\n"""	<MISSING>
find /home -type f -size +100m -delete	<MISSING>
find /home -type f -size +100m -print0 |xargs -0 rm	<MISSING>
find /home -type f -size +10485760c -print	<MISSING>
find /home -user <usernmae> -print	<MISSING>
find /home -user bob	<MISSING>
"find /home -user exampleuser -mtime 7 -iname "".db"""	<MISSING>
find /home -user joe	<MISSING>
find /home -user sam	<MISSING>
find /home -user tecmint	<MISSING>
"find /home -user tecmint -iname ""*.txt"""	<MISSING>
find /home -xdev -inum 2655341	<MISSING>
find /home -xdev -inum 2655341 | xargs rm	<MISSING>
find /home -xdev -samefile file1	<MISSING>
find /home -xdev -samefile file1 -exec rm {} +	<MISSING>
find /home -xdev -samefile file1 -print0 | xargs -0 rm	<MISSING>
find /home -xdev -samefile file1 | xargs ls -l	<MISSING>
find /home -xdev -samefile file1 | xargs rm	<MISSING>
find /home /opt -name test.txt	<MISSING>
find /home/ -exec grep -l “mp3” {} \; | xargs rm	<MISSING>
find /home/ -maxdepth 1 -print | sudo cpio -pamvd /newhome	<MISSING>
find /home/ -mtime -1 \! -type d	<MISSING>
"find /home/ -name 'myfile' -type f | rev | cut -d ""/"" -f2- | rev | sort -u"	<MISSING>
find /home/ -name monfichier	<MISSING>
find /home/ -type f -newer /tmp/after -not -newer /tmp/before	<MISSING>
"find /home/ -type f -regextype posix-extended -regex "".*(string1|string2|$(hostname)).*"""	<MISSING>
find /home/ -type f -size +512k -exec ls -lh {} \;	<MISSING>
find /home/ -type f -size 6579c -exec ls {} \;	<MISSING>
"find /home/*/public_html/ -type f -iwholename ""*/modules/system/system.info"" -exec grep -h ""version = \"""" {} \;"	<MISSING>
"find /home/*/public_html/ -type f -iwholename ""*/wp-includes/version.php"" -exec grep -h ""\$wp_version ="" {} \;"	<MISSING>
find /home/*/public_html/ -type f -iwholename “*/wp-includes/version.php” -exec grep -h “\$wp_version =” {} \;	<MISSING>
"find /home/*/public_html/ -type f -wholename *includes/constants.php -exec grep -h ""phpbb_version"" {} \;"	<MISSING>
find /home/*/public_html/ -type f \( -iwholename '*/libraries/joomla/version.php' -o -iwholename '*/libraries/cms/version.php' -o -iwholename '*/libraries/cms/version/version.php' \) -print0 -exec perl -e 'while (<>) { $release = $1 if m/ \$release\s+= .([\d.]+).;/; $dev = $1 if m/ \$dev_level\s+= .(\d+).;/; } print qq( = $release.$dev\n);' {} \;	<MISSING>
"find /home/<user> -type f -exec file {} + | grep -e ""mpeg v4|ebml|microsoft asf|macromedia flash video|webm|apple quicktime movie|avi"""	<MISSING>
find /home/abcd/ -mindepth 1 -type f -print	<MISSING>
find /home/abcd/ -type f -print	<MISSING>
find /home/admin/public_html/ -type d -exec chmod 755 {} \;	<MISSING>
find /home/apache -size 100c -print	<MISSING>
"find /home/archive -type f -name ""*.csv""  -mtime -2 -exec gzip -9f {} \;"	<MISSING>
"find /home/backups -printf ""%t@ %p\n"" | sort -n | head -1 | cut -d"" "" -f2- | xargs ls -al"	<MISSING>
find /home/backups -type f -iregex '.*\.t?gz$' -mtime +60 -exec rm {} \;	<MISSING>
find /home/backups -type f \( -name \*.tgz -o -name \*.gz \) -print0 | xargs -0 ls -t | tail -1 | xargs rm	<MISSING>
find /home/baumerf/public_html/ -mmin -60 -not -name \*.log	<MISSING>
find /home/baumerf/public_html/ -mmin -60 -not -name error_log	<MISSING>
find /home/bluher -name \*.java	<MISSING>
find /home/bozo/projects -mtime -1	<MISSING>
find /home/bozo/projects -mtime 1	<MISSING>
find /home/calvin/ -iname “picasso”	<MISSING>
find /home/calvin/ -maxdepth 2  -name “*.txt”	<MISSING>
find /home/calvin/ -mindepth 2  -name “*.txt”	<MISSING>
find /home/calvin/ -mmin -45	<MISSING>
find /home/calvin/ -name “*.txt” > /tmp/search.log	<MISSING>
"find /home/d -type f -name ""*.txt"" -printf ""%s\n"" | awk '{s+=$0}end{print ""total: ""s"" bytes""}'"	<MISSING>
find /home/david -amin -10 -name '*.c'	<MISSING>
find /home/david -atime -2 -name '*.c'	<MISSING>
find /home/david -iname 'index*'	<MISSING>
find /home/david -mmin -10 -name '*.c'	<MISSING>
find /home/david -mtime -2 -name '*.c'	<MISSING>
find /home/david -name 'index*'	<MISSING>
"find /home/dm -name ""*uniform*"""	<MISSING>
find /home/dm/video -mtime +10	<MISSING>
find /home/dm/video -mtime -7	<MISSING>
"find /home/exampleuser/ -name ""*conf"" -mtime 3"	<MISSING>
"find /home/family/music -name '*.m4a' -exec ffmpeg -i ""{}"" -acodec libvorbis -aq 6 -vn -ac 2 ""{}.ogg"" \;"	<MISSING>
"find /home/family/music -name '*.m4a' -exec sh -c 'ffmpeg -i ""$0"" -acodec libvorbis -aq 6 -vn -ac 2 ""${0%.m4a}.ogg""' '{}' \;"	<MISSING>
find /home/family/music -name '*.m4a' -print0	<MISSING>
find /home/family/music -name '*.m4a' -print0 | xargs -0 -i ffmpeg -i {} -acodec libvorbis -aq 6 -vn -ac 2 {}.ogg	<MISSING>
find /home/family/music -name *.m4a -print0	<MISSING>
find /home/feeds/data	<MISSING>
find /home/feeds/data -type d \( -name 'def/incoming' -o -name '456/incoming' -o -name arkona \) -prune -o -name '*.*' -print	<MISSING>
"find /home/feeds/data -type f -not -path ""*def/incoming*"" -not -path ""*456/incoming*"""	<MISSING>
find /home/folder1 /home/folder2 -type f -mtime +5 -exec compress {} \;	<MISSING>
"find /home/folder1/*.txt -type f -exec ln -s {} ""folder1_"" +\;"	<MISSING>
"find /home/folder1/*.txt -type f -exec ln -s {} ""folder2_"" + \;"	<MISSING>
find /home/folder1/*.txt -type f -exec ln -s {} \;	<MISSING>
"find /home/folder1/*.txt -type f | awk -f '.txt' '{printf ""ln -s %s %s_custom_text.txt\n"", $0, $1}'"	<MISSING>
"find /home/folder1/*.txt -type f | awk -f '.txt' '{printf ""ln -s %s %s_custom_text.txt\n"", $0, $1}' | sh"	<MISSING>
find /home/folder2/*.txt -type f -exec ln -s {} \;	<MISSING>
"find /home/foo -name ""*.gz"""	<MISSING>
find /home/foo \( -name '.ds_store' -or -name '._.ds_store' -or -name '._*' -or -name '.temporaryitems' -or -name '.apdisk' \) -exec rm -rf {} \;	<MISSING>
find /home/hobbes/ /home/calvin/ -name “*.txt”	<MISSING>
find /home/hobbes/ /home/calvin/ -name “*.txt” 2>/dev/null	<MISSING>
"find /home/jassi/ -name ""aliencoders.[0-9]+"""	<MISSING>
"find /home/jassi/ -name ""aliencoders.[0-9]+"" -exec ls -lrt {} + | awk '{print $9}'"	<MISSING>
"find /home/jassi/ -name ""aliencoders.[0-9]+"" 2>&1 | xargs ls -lrt | awk '{print $9}'"	<MISSING>
"find /home/jassi/ -name ""aliencoders.[0-9]+"" | xargs -r ls -lrt | awk '{print $9}'"	<MISSING>
"find /home/jassi/ -name ""aliencoders.[0-9]+"" | xargs ls -lrt | awk print '$9'"	<MISSING>
"find /home/jassi/ -name ""aliencoders.[0-9]+"" |& xargs ls -lrt | awk '{print $9}'"	<MISSING>
"find /home/jassi/ -type f -name ""aliencoders.[0-9]+"""	<MISSING>
"find /home/john -name ""*.sh"" -type f -print"	<MISSING>
"find /home/john -name ""landof*"" -type f -print"	<MISSING>
find /home/john -type d -name test -print	<MISSING>
"find /home/john/script -name ""*.sh"" -type f -exec chmod 644 {} \;"	<MISSING>
"find /home/john/scripts -type f -not -name ""*.ksh"" -print"	<MISSING>
"find /home/jul/here -type f -iname ""*.php"" ! -path ""$exclude/*"" -o -iname ""*.js"" ! -path ""$exclude/*"""	<MISSING>
"find /home/jul/here -type f -iname ""*.php"" ! -path ""/home/jul/here/exclude/*"" -o -iname ""*.js"" ! -path ""/home/jul/here/exclude/*"""	<MISSING>
"find /home/jul/here -type f -iname ""*.php"" -o -iname ""*.js"" ! -path ""/home/jul/here/exclude/*"""	<MISSING>
"find /home/jul/here -type f \( -iname ""*.php"" -o -iname ""*.js"" \) ! -path ""/home/jul/here/exclude/*"""	<MISSING>
find /home/kibab -name '*.png' -exec echo '{}' ';'	<MISSING>
find /home/kibab -name file.ext -exec echo . ';'	<MISSING>
find /home/kos -name *.tmp -print	<MISSING>
find /home/luser -type f -name '*.mpg' -exec rm -f {} \;	<MISSING>
find /home/luser -type f -name '*.mpg' -print0 | xargs -0 rm -f	<MISSING>
"find /home/luser -type f -name '*.mpg' | tr ""\n"" ""\000"" | xargs -0 rm -f"	<MISSING>
find /home/luser -type f -name '*.mpg' | xargs rm -f	<MISSING>
find /home/luser -type f -name ‘*.mpg’ | parallel rm -f	<MISSING>
find /home/madhu/release/workspace -type d -name '.git'	<MISSING>
find /home/me -type d	<MISSING>
"find /home/me/""$d"" -type d"	<MISSING>
"find /home/me/download/ -type f -name ""*.rm"" -exec ffmpeg -i \{} -sameq \{}.mp3 \; -exec rm \{} \;"	<MISSING>
find /home/me/target_dir_1 -type d	<MISSING>
find /home/michael/foxpro/mount/a[1fv]/[12][0-9][0-9][0-9] -name '*.dbf' -type f -exec ln -s {} \;	<MISSING>
"find /home/mine -iname ""*.png"" -exec sh -c 'cp $0 /home/mine/pngcoppies/copy/$0' {} \;"	<MISSING>
"find /home/mine -iname ""*.png"" -execdir cp {} /home/mine/pngcoppies/copy{} \;"	<MISSING>
"find /home/musicuser/music/ -type f  -iname ""*$1*"" -iname ""*$2*"" -exec echo {} \;"	<MISSING>
"find /home/musicuser/music/ -type f  -iname ""*$1*"" -iname ""*$2*"" -exec mplayer {} \;"	<MISSING>
find /home/my_dir -name '*.txt' | xargs grep -c ^.*	<MISSING>
find /home/myfolder -type f -print0 | xargs -0 grep -l -e 'abc.*def.*ghi'	<MISSING>
find /home/myhome/data/archive/. -name . -o -type d -prune -o -name '*201512*' -print | xargs -i mv {} /home/myhome/archive/tempfolder/.	<MISSING>
find /home/myuser -mtime +7 -print	<MISSING>
find /home/mywebsite -type f -ctime -7	<MISSING>
"find /home/mywebsite -type f -name ""*.php"" -ctime -30"	<MISSING>
"find /home/mywebsite -type f -name ""foobar.txt"""	<MISSING>
find /home/mywebsite/public_html/sites/all/modules -type d -exec chmod 750 {} +	<MISSING>
find /home/mywebsite/public_html/sites/all/modules -type f -exec chmod 640 {} +	<MISSING>
find /home/nobody/public_html -type d -exec chmod 755 {} \;	<MISSING>
find /home/nobody/public_html -type f -exec chmod 644 {} \;	<MISSING>
"find /home/nobody/public_html -type f -name .htaccess -exec replace ""php_admin_flag"" ""#php_admin_flag"" -- {} \;"	<MISSING>
find /home/oracle /home/database -name '*zip*'	<MISSING>
find /home/pankaj -maxdepth 1 -cmin -5 -type f	<MISSING>
"find /home/pat -iname ""*.conf"""	<MISSING>
"find /home/pat -iname ""*.conf"" | less"	<MISSING>
find /home/peter -name *~ -print0 |xargs -0 rm	<MISSING>
find /home/peter -name *~ |xargs rm	<MISSING>
find /home/peter -name no-such-thing* |xargs rm	<MISSING>
find /home/peter -nouser -exec ls -l {} \; -ok chown peter.peter {} \;	<MISSING>
"find /home/sdt5z/tmp -name ""accepted_hits.bam"""	<MISSING>
"find /home/spenx/src -name ""a1a2*txt"" | xargs -n 1 dirname | xargs -i list mv list /home/spenx/dst/"	<MISSING>
find /home/tecmint/downloads/ -type f -exec du -sh {} + | sort -rh | head -n 5	<MISSING>
"find /home/tecmint/downloads/ -type f -printf ""%s %p\n"" | sort -rn | head -n 5"	<MISSING>
find /home/test -name '.ssh'	<MISSING>
find /home/testuser/log/ -mtime +1 | xargs  tar -czvpf  /opt/older_log_$(date +%f).tar.gz	<MISSING>
find /home/the_peasant -type f	<MISSING>
"find /home/u20806/public_html -daystart -maxdepth 1 -mmin +25 -type f -name ""*.txt"" \ -exec rm -f {} \;"	<MISSING>
"find /home/u20806/public_html -maxdepth 1 -mmin +25 -type f -name ""*.txt"" -delete"	<MISSING>
"find /home/u20806/public_html -maxdepth 1 -mmin +5 -type f -name ""*.txt"" ! -name ""robots.txt"" -delete"	<MISSING>
"find /home/u20806/public_html -maxdepth 1 -mmin +5 -type f -name ""*.txt"" -delete"	<MISSING>
"find /home/u20806/public_html -name ""robots.txt"" -o -maxdepth 1 -mmin +5 -type f -name ""*.txt"" -delete"	<MISSING>
"find /home/ubuntu/wars -type f -name ""*.war"" -exec rm {} \\;"	<MISSING>
find /home/user -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents	<MISSING>
find /home/user/ -cmin 10 -print	<MISSING>
find /home/user/demo -type f -perm 777 -print	<MISSING>
find /home/user/demo -type f -perm 777 -print -exec chmod 755 {} \;	<MISSING>
find /home/user/demo -type f -print	<MISSING>
find /home/user/desktop -name '*.bmp' -o -name '*.txt'	<MISSING>
find /home/user/desktop -name '*.pdf'	<MISSING>
find /home/user/desktop -name '*.pdf' -o -name '*.txt' -o -name '*.bmp'	<MISSING>
find /home/user/maildir/.spam/cur -type f -exec rm '{}' +	<MISSING>
find /home/user/maildir/.spam/cur -type f -exec rm -f '{}' '+'	<MISSING>
find /home/user/maildir/.spam/cur -type f | xargs rm	<MISSING>
find /home/user/myusername/ -name myfile.txt -print	<MISSING>
find /home/user/series/ -iname '*sample*' -exec rm {} \;	<MISSING>
"find /home/user/workspace -mindepth 1 -maxdepth 1 -type d -mtime +30 -execdir echo ""it seems that {} wasn't modified during last 30 days"" ';'"	<MISSING>
"find /home/user/workspace -mindepth 1 -maxdepth 1 -type d -mtime +30 -printf ""\t- it seems that %p wasn't modified during last 30 day\n"""	<MISSING>
"find /home/user1 -name ""*.bin"""	<MISSING>
find /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents	<MISSING>
find /home/user1 -name \*.bin	<MISSING>
find /home/user1/data1/2012/maindir -name '*.gz' | wc -l	<MISSING>
"find /home/username/ -name ""*.err"""	<MISSING>
"find /home/username/public_html/images -name ""articles.jpg"""	<MISSING>
find /home/username/public_html/modules -type d -exec chmod 750 {} +	<MISSING>
find /home/username/public_html/modules -type f -exec chmod 640 {} +	<MISSING>
find /home/username/public_html/sites/all/modules -type d -exec chmod 750 {} +	<MISSING>
find /home/username/public_html/sites/all/modules -type f -exec chmod 640 {} +	<MISSING>
find /home/username/public_html/sites/all/themes -type d -exec chmod 750 {} +	<MISSING>
find /home/username/public_html/sites/all/themes -type f -exec chmod 640 {} +	<MISSING>
find /home/username/public_html/sites/default/files -type d -exec chmod 770 {} +	<MISSING>
find /home/username/public_html/sites/default/files -type f -exec chmod 660 {} +	<MISSING>
find /home/username/public_html/themes -type d -exec chmod 750 {} +	<MISSING>
find /home/username/public_html/themes -type f -exec chmod 640 {} +	<MISSING>
find /home/username/tmp -type d -exec chmod 770 {} +	<MISSING>
"find /home/vmail/ -type d -path ""*/*/maildir/.learnasham/cur"" -exec sh -c '(cd {} && mv ./* ../../.inbox/cur)' ';'"	<MISSING>
"find /home/vmail/ -type d -path ""*/*/maildir/.learnasham/new"" -exec sh -c '(cd {} && mv ./* ../../.inbox/new)' ';'"	<MISSING>
"find /home/vmail/ -type d -path ""*/*/maildir/.learnasspam/cur"" -exec sh -c '(cd {} && mv ./* ../../.junk/cur)' ';'"	<MISSING>
"find /home/vmail/ -type d -path ""*/*/maildir/.learnasspam/new"" -exec sh -c '(cd {} && mv ./* ../../.junk/new)' ';'"	<MISSING>
find /home/web-server/ -type f -iname httpd.log	<MISSING>
find /home/web-server/ -type f -name httpd.log	<MISSING>
find /home/weedly -name myfile -type f -print	<MISSING>
"find /home/wsunid/ -name ""*.txt"""	<MISSING>
find /home/wsunid/ -name file1.txt	<MISSING>
"find /home/www -name ""*.java"" -type f -print0 | xargs -0 sed -i 's/subdomaina\.example\.com/subdomainb.example.com/g'"	<MISSING>
find /home/www -type f	<MISSING>
find /home/www -type f -name '*.cpp'  -exec sed -i 's/previousword/newword/g' '{}' \;	<MISSING>
find /home/www -type f -print0 | xargs -0 sed -i 's/subdomaina.example.com/subdomainb.example.com/g'	<MISSING>
find /home/www -type f -print0 | xargs -0 sed -i 's/subdomaina\.example\.com/subdomainb.example.com/g'	<MISSING>
find /home/www/ ! -executable	<MISSING>
find /home/www/ -type f -exec perl -i.bak -pe 's/subdomaina\.example\.com/subdomainb.example.com/g' {} +	<MISSING>
find /home/www/ -type f -exec sed -i 's/subdomaina\.example.com/subdomainb.example.com/g' {} +	<MISSING>
find /home/www/ -type f -exec sed -i 's/subdomaina\.example\.com/subdomainb.example.com/g' {} +	<MISSING>
find /home/www/ -type f | xargs perl -pi -e 's/subdomaina\.example\.com/subdomainb.example.com/g'	<MISSING>
find /home/www/ -type f|xargs perl -pi -e 's/subdomaina\.example\.com/subdomainb.example.com/g'	<MISSING>
"find /home/you -iname ""*.c"" -atime -30 -type -f"	<MISSING>
"find /home/you -iname ""*.mp3"" -atime 10 -type -f"	<MISSING>
"find /home/you -iname ""*.mp3"" -daystart -type f -mtime 1"	<MISSING>
"find /home/you -iname ""*.pdf"" -atime -60 -type -f"	<MISSING>
"find /home/you -iname ""*.txt"" -mtime -60 -exec cat {} \;"	<MISSING>
"find /home/you -iname ""*.txt"" -mtime -60 -print"	<MISSING>
"find /home/you -iname ""*.txt"" -mtime -60 | wc -l"	<MISSING>
find /home/you -iname “*.mp3” -atime 01 -type -f	<MISSING>
find /hometest -name trash -exec ls -s {} \;	<MISSING>
find /incoming -mtime -5 -user nr -exec ln -s '{}' /usr/local/symlinks ';'	<MISSING>
find /lib/modules -name '*.o'	<MISSING>
find /lib/modules/`uname -r` -regex .*perf.*	<MISSING>
find /logs -type f -mtime +5 -exec rm {} \;	<MISSING>
find /mail -type f | cpio -pvdmb /home/username	<MISSING>
find /media/1tb/videos -maxdepth 1 -type d -mtime +7 -exec rm -rf {} \;	<MISSING>
find /media/movies -type f -mtime -30 -exec ln -s {} /media/movies/new/ \;	<MISSING>
find /media/new\ volume/bhajans -maxdepth 1 -type d | xargs -0 mkdir -p	<MISSING>
"find /media/shared \( -iname ""*.mp3"" -o -iname ""*.ogg"" \)"	<MISSING>
find /mnt/hda1/zdjecia/test1/ -iname “*.jpg” -type f -exec cp {} -rv /mnt/hda1/test{} ‘;’	<MISSING>
find /mnt/hda1/zdjecia/test1/ -type f -iname ‘*.jpg’ -printf ‘%’h’\'”0″ | xargs -0 -i ‘{}’ mkdir -p /mnt/hda1/test/{} \;	<MISSING>
"find /mnt/iso -name *.avi -printf ""%s\n"" | paste -sd+ - | bc"	<MISSING>
"find /mnt/msdos  -name ""*.txt"" 2> /dev/null"	<MISSING>
find /mnt/naspath -mtime 0  -name .snapshot -prune -o \( \! -name *~ -print0 \) | du --files0-from=- -hc | tail -n1 >> /tmp/size.log	<MISSING>
find /mnt/naspath -mtime 0 -print0 | du --files0-from=- -hc | tail -n1 >> /tmp/size.log	<MISSING>
find /mnt/naspath -name .snapshot -prune -o \( -type f -mtime 0 -print0 \)	<MISSING>
find /mnt/naspath \! \(-name .snapshot -prune\) -type f -mtime 0 -print0	<MISSING>
find /mnt/raid -type d	<MISSING>
find /mnt/raid -type d -print	<MISSING>
find /mnt/raid/upload -mtime +5 -print	<MISSING>
find /mnt/raid/upload -mtime -7 -print	<MISSING>
"find /mnt/usb -name  ""*.mp3"" -print"	<MISSING>
"find /mnt/zip -name ""*doc copy"" -execdir rm ""{}"" \;"	<MISSING>
"find /mnt/zip -name ""*prefs copy"" -print | xargs rm"	<MISSING>
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs    -0 -p /bin/rm"	<MISSING>
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs -0 -p /bin/rm"	<MISSING>
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs -p rm"	<MISSING>
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs rm"	<MISSING>
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs>    -0 rm"	<MISSING>
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs>    -p rm"	<MISSING>
find /mount/point -maxdepth 1 -type d | wc -l	<MISSING>
find /mount/point -type d | wc -l	<MISSING>
find /mountpoint -type f -links +1	<MISSING>
find /mp3-collection -name 'metallica*' -and -size +10000k	<MISSING>
find /mp3-collection -name 'metallica*' -or -size +10000k	<MISSING>
"find /mp3-collection -size +10000k ! -name ""metallica*"""	<MISSING>
find /mp3collection -name '*.mp3' -size -5000k	<MISSING>
"find /my/source/directory -ctime -2 -type f -printf ""%p\n"" | xargs -ifile rsync -avr /my/./source/directory/file /my/dest/directory/"	<MISSING>
"find /mycool/project/ -type f -name ""*.py"" -print0 | xargs -i {} -0 grep -h --color ""methodnamehere"" ""{}"""	<MISSING>
find /mydir -atime +100 -ok rm {} \;	<MISSING>
find /mydir -mindepth 1 -mtime +7 -delete	<MISSING>
find /mydir -mindepth 1 -mtime 7 -delete	<MISSING>
find /mydir -mindepth 1 -mtime 7 -exec rm -rf {} \;	<MISSING>
find /mydir -mtime 7 -exec rm -rf {} \;	<MISSING>
"find /mydir -name ""log*"" -ctime +7 -exec bzip2 -zv {} \;"	<MISSING>
find /mydir -name 'log*' -and -not -name '*.bz2' -ctime +7 -exec bzip2 -zv {} \;	<MISSING>
find /mydir -type d -delete	<MISSING>
find /mydir -type f -exec sed -i 's/<string1>/<string2>/g' {} +	<MISSING>
"find /mydir -type f -name ""*.txt"" -execdir chown root {} ';'"	<MISSING>
"find /mydir -type f -name ""*.txt"" -print0 | xargs -0 chown root $(mktemp)"	<MISSING>
find /mydir \(-mtime +20 -o -atime +40\) -exec ls -l {} \;	<MISSING>
find /mydir | xargs -i{} basename {}	<MISSING>
find /mydir1 /mydir2 -size +2000 -atime +30 -print	<MISSING>
find /myfiles -atime +30	<MISSING>
find /myfiles -atime +30 -exec rm {} ;	<MISSING>
find /myfiles -atime +30 -exec rm {} \;	<MISSING>
find /myfiles -exec ls -l {} ;	<MISSING>
find /myfiles -mtime 2	<MISSING>
find /myfiles -name '*blue*'	<MISSING>
find /myfiles -size 5	<MISSING>
find /myfiles -type d	<MISSING>
find /myfiles -type f -perm -647	<MISSING>
find /myfiles -type f -perm -o+rw	<MISSING>
find /myfiles -type l	<MISSING>
find /myprojects -type f -name '*.cpp' -print0 |    xargs -0 echo sed -i 's/previousword/newword/g'	<MISSING>
find /myprojects -type f -name '*.cpp' -print0 | xargs -0 -n 1 sed -i 's/previousword/newword/g'	<MISSING>
find /myprojects -type f -name *.cpp -print0 | xargs -0 sed -i 's/previousword/newword/g'	<MISSING>
find /nas -type d	<MISSING>
find /nas -type d -ls	<MISSING>
"find /nas/projects -name ""*.h"""	<MISSING>
"find /nas/projects/mgmt/scripts/perl -mtime 1 -daystart -iname ""*.pl"""	<MISSING>
"find /nas/projects/mgmt/scripts/perl -mtime 8 -mtime -10 -daystart -iname ""*.pl"""	<MISSING>
"find /nas01/backups/home/user/ -type d -name "".*"" -print0 -exec ls -lrt {} \;"	<MISSING>
find /nfs/office -name .user.log -print	<MISSING>
"find /old/wordpress/ -type f -regex "".*\.\(php\|css\|ini\|txt\)"" -exec rm {} \;"	<MISSING>
find /opt -atime 20	<MISSING>
find /opt -cmin -120	<MISSING>
find /opt -mtime +30 -mtime -50	<MISSING>
find /opt -mtime 20	<MISSING>
find /opt -type f -empty	<MISSING>
find /opt /usr /var -name foo -type f	<MISSING>
find /opt /usr /var -name foo.scala -type f	<MISSING>
find /opt \( -name error_log -o -name 'access_log' -o -name 'ssl_engine_log' -o -name 'rewrite_log' -o  -name 'catalina.out' \) -size +300000k -a -size -5000000k	<MISSING>
"find /opt/chromium/src -wholename '*/.svn' -prune -o -type f -regex "".*\.\(c\|cc\|h\|js\)"" -print > csrc.lst"	<MISSING>
find /opt/lampp/htdocs -type d -exec chmod 711 {} \;	<MISSING>
find /opt/lampp/htdocs -type d -exec chmod 755 {} \;	<MISSING>
find /opt/lampp/htdocs -type f -exec chmod 644 {} \;	<MISSING>
find /original -name '*.processme' -exec echo ln -s '{}' . \;	<MISSING>
find /parent -maxdepth 1 -type d -print0 | xargs -0 chmod -r 700	<MISSING>
find /path ! -perm -022	<MISSING>
find /path ! -perm /020	<MISSING>
find /path ! -perm /022	<MISSING>
find /path ! -perm /g+w	<MISSING>
find /path -iname '*.txt' | perl -lane '$sum += -s $_; end {print $sum}'	<MISSING>
find /path -mtime +30m	<MISSING>
"find /path -name ""file_name*"""	<MISSING>
"find /path -name ""file_name*"" | grep ""bar"""	<MISSING>
find /path -name '*.foo'	<MISSING>
"find /path -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep --with-filename --label=""{}"" --color ""your pattern""' \;"	<MISSING>
"find /path -name 'pattern' -exec bash -c 'for file; do somebashstatement ""$file""; done' -- {} +"	<MISSING>
"find /path -name 'pattern' -exec bash -c 'somebashstatement ""$1""' -- {} \;"	<MISSING>
find /path -name 'pattern' -exec somecommand {} +	<MISSING>
find /path -name 'pattern' -exec somecommand {} \;	<MISSING>
find /path -name file_name	<MISSING>
find /path -nouser -or -nogroup	<MISSING>
"find /path -path ""/path/bar*"" -name ""file_name*"""	<MISSING>
find /path -perm -022	<MISSING>
find /path -perm -g+w,o+w	<MISSING>
find /path -perm -go+w	<MISSING>
find /path -perm /011	<MISSING>
find /path -perm /g+w,o+w	<MISSING>
find /path -perm /ugo+x	<MISSING>
find /path -perm 777	<MISSING>
find /path -perm ugo+rwx	<MISSING>
"find /path -type d -exec chmod 0755 ""{}"" \;"	<MISSING>
find /path -type d -exec chmod 0755 {} \;	<MISSING>
"find /path -type d -printf ""%f\n"" | awk 'length==33'"	<MISSING>
find /path -type d | xargs chmod 0755	<MISSING>
find /path -type f	<MISSING>
find /path -type f -delete	<MISSING>
find /path -type f -exec chmod 644 {} +;	<MISSING>
find /path -type f -exec ls -l \{\} \;	<MISSING>
find /path -type f -exec rm '{}' +	<MISSING>
find /path -type f -exec rm '{}' \;	<MISSING>
"find /path -type f -iname ""*.ext"" -printf ""%h\n"""	<MISSING>
"find /path -type f -iname ""*.txt"""	<MISSING>
"find /path -type f -name ""*.ext"" -printf ""%p:%h\n"""	<MISSING>
"find /path -type f -name ""*.py"" -exec md5sum ""{}"" +;"	<MISSING>
"find /path -type f -name ""*txt"" -printf ""cp '%p' '/tmp/test_%f'\n"" | bash"	<MISSING>
"find /path -type f -name ""10*jpg"" | sed 's/.*/mv &/' | sed 's/mv \(.*\/\)\(.[^/]*\)/& \120\2/' | sh"	<MISSING>
"find /path -type f -name ""???-???_[a-za-z]*_[0-9]*_*.???"""	<MISSING>
find /path -type f -name '*.ext' -exec my_cool_script \{\} \;	<MISSING>
find /path -type f -name '*~' -print0 | xargs -0 -i % cp -a % ~/backups	<MISSING>
"find /path -type f -not -name ""*.*"" -exec mv ""{}"" ""{}"".jpg \;"	<MISSING>
"find /path -type f -not -name ""*.*"" -print0 | xargs -0 rename 's/(.)$/$1.jpg/'"	<MISSING>
find /path -type f -print | xargs rm	<MISSING>
find /path -type f -print0 | xargs -0 md5sum	<MISSING>
find /path -type f -print0 | xargs -0 rm	<MISSING>
find /path -type f | sort -u | xargs cat | md5sum	<MISSING>
"find /path \( -path ""/path/bar*"" -o -path ""/path/foo* \) -name ""file_name*"""	<MISSING>
find /path-to-directory -mtime +60 -exec rm -f {} \;	<MISSING>
find /path-to-directory -type f -mtime +60 -exec ls -l {} \; > /path-to-directory/filenames.txt	<MISSING>
"find /path-to-directory -type f -mtime +60 -printf ""%t@ %p\n"" | sort"	<MISSING>
find /path/ -type f -daystart -mtime +0	<MISSING>
find /path/* -maxdepth 0 -type d -exec sudo tar -zcpvf {}.tar.gz {} \;	<MISSING>
"find /path/bar* -name ""file_name*"""	<MISSING>
find /path/subfolder -maxdepth 1 -type f -name '*' -exec mv -n {} /path \;	<MISSING>
find /path/to/base/cache /path/to/base/tmp /path/to/base/logs -type d -exec chmod 755 {} +	<MISSING>
find /path/to/base/dir -type d	<MISSING>
find /path/to/base/dir -type d -exec chmod 755 {} +	<MISSING>
find /path/to/base/dir -type d -print0 | xargs -0 chmod 755	<MISSING>
find /path/to/base/dir -type f	<MISSING>
find /path/to/base/dir -type f -exec chmod 644 {} +	<MISSING>
find /path/to/base/dir -type f -print0 | xargs -0 chmod 644	<MISSING>
find /path/to/check/* -maxdepth 0 -type f	<MISSING>
find /path/to/dest -type d \( ! -name tmp \) -o \( ! -name cache \) -print	<MISSING>
find /path/to/dest -type d \( ! -name tmp \) -print	<MISSING>
find /path/to/dir ! -perm 0644	<MISSING>
find /path/to/dir ! -perm 0644 -exec chmod 0644 {} \;	<MISSING>
find /path/to/dir ! -perm 644	<MISSING>
"find /path/to/dir -mindepth 1 -maxdepth 1 -type d -execdir sh -c 'd=${1##*/}; sudo tar -zcpvf ""$d"".tar.gz ""$d""' - {} \;"	<MISSING>
find /path/to/dir -mindepth 1 -maxdepth 1 -type d -execdir sudo tar -zcpvf {}.tar.gz {} \;	<MISSING>
"find /path/to/dir -name ""*.gz"" -type f"	<MISSING>
"find /path/to/dir -name ""test"" -type d -delete"	<MISSING>
"find /path/to/dir -name ""test"" -type d -exec rm -rf {} \;"	<MISSING>
find /path/to/dir -name '*.gz' -exec zgrep -- 'pattern' {} +	<MISSING>
find /path/to/dir -name '*.pdf' -exec convert -thumbnail x80 {}[0] {}-thumb.png \;	<MISSING>
find /path/to/dir -name \*.c	<MISSING>
find /path/to/dir -newermt yyyy-mm-dd ! -newermt yyyy-mm-dd -ls	<MISSING>
find /path/to/dir -newermt “feb 07”	<MISSING>
find /path/to/dir -print0 | xargs -0 touch	<MISSING>
find /path/to/dir -type d -exec chmod 0755 '{}' \; -o -type f -exec chmod 0644 '{}' \;	<MISSING>
find /path/to/dir -type d -exec chmod 755 {} +	<MISSING>
find /path/to/dir -type d -exec chmod 755 {} \;	<MISSING>
"find /path/to/dir -type d | tac | while read line; do target=$(dirname ""$line"")/$(basename ""$line"" | tr -d ' '); echo mv ""$line"" ""$target""; done"	<MISSING>
find /path/to/dir -type f -exec bzip2 {} \;	<MISSING>
find /path/to/dir -type f -exec chmod 644 {} +	<MISSING>
find /path/to/dir -type f -exec printf %.sx {} + | wc -c	<MISSING>
find /path/to/dir -type f -exec sed '/@group/,/@end_group/!d' {} + | grep '_start'	<MISSING>
find /path/to/dir -type f -exec sed '/@group/,/@end_group/!d' {} \; | grep '_start'	<MISSING>
find /path/to/dir -type f -mtime -7 -print0	<MISSING>
find /path/to/dir -type f -mtime -7 -print0 | xargs -0 ls -lt | head	<MISSING>
"find /path/to/dir -type f -print0 | xargs -0 grep -l ""foo"""	<MISSING>
"find /path/to/dir -type f | perl -ne 'chomp(@files = <>); my $p = 9; foreach my $f (sort { (stat($a))[$p] <=> (stat($b))[$p] } @files) { print scalar localtime((stat($f))[$p]), ""\t"", $f, ""\n"" }' | tail"	<MISSING>
"find /path/to/dir -type f | sed -r 'p;s:.*/(.*)/.*:\1:' | xargs -n 2 sh -c 'sed -i ""s/^/$1 /"" $0'"	<MISSING>
"find /path/to/dir -type f | xargs grep -l ""foo"""	<MISSING>
"find /path/to/dir -type l -exec sh -c 'cp --remove-destination ""$(readlink ""{}"")"" ""{}""' \;"	<MISSING>
find /path/to/dir/ -mindepth 1 -maxdepth 1 -type d	<MISSING>
find /path/to/dir/ -mindepth 1 -maxdepth 1 -type d -print0	<MISSING>
find /path/to/dir/ -type f ! -perm 0644 -print0 | xargs -0 chmod 644	<MISSING>
"find /path/to/dir/ -type f -name ""*.py"" -exec md5sum {} + | awk '{print $1}' | sort | md5sum"	<MISSING>
"find /path/to/dir/ -type f -name ""file-pattern"" -print0 | xargs -i {} -0 grep -l ""foo"" ""{}"""	<MISSING>
find /path/to/dir/ -type f -name *.py -exec md5sum {} + | awk '{print $1}' | sort | md5sum	<MISSING>
find /path/to/dir/ -type f -print0 | xargs -0 chmod 644	<MISSING>
"find /path/to/dir/* -printf ""%t@|%p|%l"" -exec stat -lc ""|%y.0000000000"" {} \;"	<MISSING>
"find /path/to/dir/* -printf ""%ty%tm%td%th%tm%ts|%p|%l\n"""	<MISSING>
"find /path/to/dir1 -printf ""%u %g %m %p\n"" > /tmp/dir1.txt"	<MISSING>
find /path/to/directory -type d \! -name . -prune -exec printf x \; | wc -c	<MISSING>
find /path/to/directory -type f -exec chmod 644 {} +	<MISSING>
find /path/to/directory -type f -mtime +30 -exec chmod 644 {} +	<MISSING>
find /path/to/directory -type f -mtime 61 -exec rm -f {} \;	<MISSING>
"find /path/to/directory -type f -size +1024k -exec ls -lh {} \; | awk '{ print $8 "": "" $5 }'"	<MISSING>
find /path/to/directory/* -maxdepth 0 -type d	<MISSING>
find /path/to/directory/* -maxdepth 0 -type d -exec basename -a {} +	<MISSING>
"find /path/to/directory/* -maxdepth 0 -type d -printf ""%p\n"" -exec sudo tar -zcpvf {}.tar.gz {} \;"	<MISSING>
find /path/to/directory/* -maxdepth 0 -type d -printf '%f\n'	<MISSING>
find /path/to/directory/folder{1..50} -name '*.txt'  2>/dev/null	<MISSING>
find /path/to/directory/folder{1..50} -name '*.txt' -exec basename {} .txt \; 2>/dev/null	<MISSING>
find /path/to/directory/folder{1..50} -name '*.txt' -exec basename {} \; 2>/dev/null	<MISSING>
find /path/to/directory/folder{?,[1-4]?,50} -name '*.txt'	<MISSING>
"find /path/to/drive -type f -exec file -b '{}' \; -printf '%s\n' | awk -f , 'nr%2 {i=$1} nr%2==0 {a[i]+=$1} end {for (i in a) printf(""%12u %s\n"",a[i],i)}' | sort -nr"	<MISSING>
find /path/to/file -type f -size +51200c 2>/dev/null	<MISSING>
find /path/to/files -exec truncate.sh {} \;	<MISSING>
find /path/to/files -iname '*.jpg' -exec mogrify -format pdf {} +	<MISSING>
find /path/to/files -iname '*.jpg' -newer timestamp -exec mogrify -format pdf {} +; touch timestamp	<MISSING>
find /path/to/files -type d -name '.git' -exec dirname {} +	<MISSING>
find /path/to/files -type f ! -newer dummyfile -delete	<MISSING>
find /path/to/files -type f -name \*.cfg  -print -exec cat {} \; -exec sleep 2 \;	<MISSING>
find /path/to/files* -mtime +2 -delete	<MISSING>
find /path/to/files* -mtime +5 -exec rm {} \;	<MISSING>
find /path/to/files/ -newermt 20131204 -not -newermt 20131205 -type f -print0 | cpio --create --null  --format=ustar  | gzip > /tmp/dec-4.tar.gz	<MISSING>
"find /path/to/files/* -printf ""%ty%tm%td%th%tm%ts|%p|%l"" -exec stat -lc ""|%y"" {} \; | sed -r ""s/(.*\|)([0-9]{4})\-([0-9]{2})\-([0-9]{2}) ([0-9]{2})\:([0-9]{2})\:([0-9]{2}\.[0-9]{9}).*/\1\2\3\4\5\6\7/g"""	<MISSING>
"find /path/to/folder -name filename.txt -not -path ""*/ignored_directory/*"""	<MISSING>
"find /path/to/folder -path ""*/ignored_directory"" -prune -o -name filename.txt -print"	<MISSING>
find /path/to/folders/ -name \*.emlx -print0 > filelist	<MISSING>
find /path/to/folders/ -name \*.emlx -print0 | xargs -0 -i {} mv {} ./messages/	<MISSING>
"find /path/to/folders/* -type d  -exec mv {} {}.mbox \; -exec mkdir {}.mbox/messages \; -exec sh -c ""mv {}.mbox/*.emlx {}.mbox/messages"" \;"	<MISSING>
find /path/to/folders/* -type d -exec mv {} {}.mbox \; -exec mkdir {}.mbox/messages \;	<MISSING>
find /path/to/input/ -type f -exec grep -qif spammer@spammy.com \{\} \; -delete	<MISSING>
find /path/to/input/ -type f -exec grep -qif spammer@spammy.com \{\} \; -print	<MISSING>
"find /path/to/inputfiles -name ""*.txt"" -exec /path/to/myprogram.sh {} \; > out.txt"	<MISSING>
find /path/to/junk/files -type f -mtime +31 -exec rm -f {} \;	<MISSING>
find /path/to/junk/files -type f -mtime +31 -print0 | xargs -0 -r rm -f	<MISSING>
find /path/to/look/in/ -type d -name '.texturedata'	<MISSING>
find /path/to/look/in/ -type d -name '.texturedata' -exec chmod 000 {} \; -prune	<MISSING>
find /path/to/look/in/ -type d -name '.texturedata' -prune	<MISSING>
find /path/to/look/in/ -type d -name '.texturedata' -prune -print0 | xargs -0 chmod 000	<MISSING>
find /path/to/look/in/ -type d | grep .texturedata	<MISSING>
find /path/to/search                    \   -type d                               \     \( -path /path/to/search/exclude_me \        -o                               \        -name exclude_me_too_anywhere    \      \)                                 \     -prune                              \   -o                                    \   -type f -name '*\.js' -print	<MISSING>
find /path/to/search -daystart -ctime -1	<MISSING>
find /path/to/search -type l -exec test ! -e {} \; -print	<MISSING>
find /path/to/search -type l -xtype l	<MISSING>
find /path/to/search -user owner	<MISSING>
find /path/to/search -xtype l	<MISSING>
find /path/to/search/in -name 'catalina*'	<MISSING>
find /path/to/some/dir/*[0-9] -type d -maxdepth 1	<MISSING>
find /path/to/somedirectory -type d -print0 | xargs -0 sudo chmod 755	<MISSING>
find /path/to/somedirectory -type f -print0 | xargs -0 sudo chmod 644	<MISSING>
find /path/to/source -type d | cpio -pd /path/to/dest/	<MISSING>
find /path/to/srcdir -type f -print0 | xargs -0 -i% mv % dest/	<MISSING>
find /path/to/start/from/ -type f | xargs perl -pi -e 's/applicationx/applicationy/g'	<MISSING>
find /path/to/the/folder -depth -type d -print0 | xargs -0 rmdir	<MISSING>
find /path/to/your/directory -regex '.*\.\(avi\|flv\)'	<MISSING>
find /path/to/your/directory -regex '.*\.\(avi\|flv\)' -exec cp {} /path/to/specific/folder \;	<MISSING>
"find /path/with/files -type f -name ""*txt*"" -exec ln -s {} . ';'"	<MISSING>
find /path/you/need -type f -exec md5sum {} \; > checksums.md5	<MISSING>
find /path_to_search -ls | sort -n | awk '!seen[$1]++'	<MISSING>
find /private/ 2>/dev/null | grep /flash	<MISSING>
find /proc -exec ls '{}' \;	<MISSING>
find /proc -print0 | xargs -0	<MISSING>
find /proc -type d | egrep -v '/proc/[0-9]*($|/)' | less	<MISSING>
find /proc -user myuser -maxdepth 1 -type d -mtime +7 -exec basename {} \; | xargs kill -9	<MISSING>
find /proc | xargs	<MISSING>
find /proc/$1/exe -printf '%l\n'	<MISSING>
find /proc/scsi/ -path '/proc/scsi/usb-storage*' -type f | xargs grep -l 'attached: yes'	<MISSING>
find /prod -maxdepth 1 -type d	<MISSING>
"find /prod -type d -exec sh -c 'cd ""{}"" && for f in *.json; do /tmp/test.py ""$f""; done' \;"	<MISSING>
"find /prod -type d -execdir sh -c 'for f in *.json; do /tmp/test.py ""$f""; done' \;"	<MISSING>
find /prog -type f -size +1000 -print -name core -exec rm {} \;	<MISSING>
find /project/directory -iname '*.php' -or -iname '*.phtml' | grep -iv '/some/directory' | xargs xgettext	<MISSING>
"find /public/html/cosi -name ""wiki.phtml -exec echo ""<a href=\""{}\"">{}</a>"" \;"	<MISSING>
"find /public/html/cosi -name ""wiki.phtml"""	<MISSING>
"find /raid -type d -name "".local_sd_customize"" -ok cp /raid/04d/mcad-apps/i_custom/sd_custom/site_sd_customize/user_filer_project_dirs {} \;"	<MISSING>
"find /raid -type d -name "".local_sd_customize"" -print"	<MISSING>
find /res/values-en-rus /res/xml -iname '*.xml'	<MISSING>
"find /res/values-en-rus /res/xml -iname '*.xml' -print0 | xargs -0 -d '\n' -- grep -i ""hovering_msg"" --"	<MISSING>
"find /res/values-en-rus /res/xml -iname '*.xml' | while read file; do grep -i ""hovering_msg"" ""$file""; done"	<MISSING>
find /root -name findcommandexamples.txt	<MISSING>
"find /root -type f -iname ""*linux*"""	<MISSING>
"find /root -type f -size +500m -printf ""the %p file is greater than 500mb\n"""	<MISSING>
find /root/ -name 'work' -prune -o -name myfile -type f -print	<MISSING>
find /root/ -name myfile -type f	<MISSING>
find /root/ -path '/root/work' -prune -o -name myfile -type f -print	<MISSING>
find /root/directory/to/search -name 'filename.*'	<MISSING>
find /root/maildir/ -mindepth 1 -type f -mtime +14 | xargs rm	<MISSING>
find /root/of/where/files/are -name *company*	<MISSING>
"find /root_path -type f -iname ""*.class"" -printf ""%h\n"" | sort -u"	<MISSING>
find /some/dir -maxdepth 1 \( -name '*.c' -o -name '*.h' \) -print	<MISSING>
find /some/dir -mmin -$((currtime + (24 * 60))) -a -mmin +$((${currtime} + 1))	<MISSING>
"find /some/dir -name ""*.pdf"" ! -name ""*_signed.pdf"" -print0"	<MISSING>
find /some/dir -type d -exec find {} -type f -delete \;	<MISSING>
find /some/dir/ -maxdepth 0 -empty	<MISSING>
"find /some/dir/ -maxdepth 0 -empty -exec echo ""huzzah"" \;"	<MISSING>
find /some/dir/ -type f > somefile	<MISSING>
find /some/directory -type f -exec file -n -i -- {} + | sed -n 's!: video/[^:]*$!!p'	<MISSING>
find /some/directory -type l -print	<MISSING>
find /some/directory -user joebob -print	<MISSING>
"find /some/parrent/dir -type d | while read d ; do ls ""$d""/* &>/dev/null || rm -r ""$d""; done"	<MISSING>
"find /some/path -name ""*rb"" -o -name ""*yml"" | xargs grep -sl ""some_phrase"" | xargs sed -i -e 's/some_phrase/replacement_phrase/g'"	<MISSING>
find /some/path -name '*.coffee' -print0 | xargs -0 perl /path/to/your/program	<MISSING>
find /some/path -type f ! -perm -100 -ls	<MISSING>
find /some/path -type f ! -perm -111 -ls	<MISSING>
"find /somefolder -type f '(' ""${args[@]}"" ')'"	<MISSING>
find /somefolder -type f -name $file_pattern	<MISSING>
find /somefolder -type f | grep -i '\(.*error.*\)\|\(^second.*\log$\)\|\(.*ffpc\.log$\)'	<MISSING>
find /somelocation/log_output -type f -ctime +40 -exec ls -l {} \;	<MISSING>
find /somepath -type d -name ‘somenameprefix*’ -mtime +10 -print | xargs rm -rf ;	<MISSING>
"find /somepath -type f -iregex "".*\.(pdf\|tif\|tiff\|png\|jpg\|jpeg\|bmp\|pcx\|dcx)"" ! -name ""*_ocr.pdf"" -print0"	<MISSING>
find /source -type f -print0 | xargs -0 -n 1 -p $cores gzip -9	<MISSING>
find /source_path -name *.data -exec cp {} /target_path \;	<MISSING>
"find /source_path -name \*.data  | while read -r filename; do cp ""${filename}"" ""$(printf ""%s\n"" ""${filename}"" | sed ""s/^.*[/]\(category[^/]*\)[/]\(.*[.]data\)$/\/target_path\/\1_\2/"")""; done"	<MISSING>
"find /source_path -name \*.data  | while read -r filename; do printf ""print version: cp %s %s\n"" ""${filename}"" ""$(printf ""%s\n"" ""${filename}"" | sed ""s/^.*[/]\(category[^/]*\)[/]\(.*[.]data\)$/\/target_path\/\1_\2/"")""; done"	<MISSING>
find /srv/${x} -mindepth 1 -type f -not -amin -10080 -exec rm {} \;	<MISSING>
find /srv/${x} -type d -empty -exec rmdir {} \;	<MISSING>
find /srv/abc/ -type d -empty -exec rmdir {} \;	<MISSING>
"find /srv/www /var/html -name ""*.?htm*"" -type f"	<MISSING>
"find /srv/www/*/htdocs/system/application/ -name ""*.php"" -exec grep ""debug ("" {} \; -print"	<MISSING>
"find /srv/www/*/htdocs/system/application/ -name ""*.php"" -exec grep -h ""debug ("" {} +"	<MISSING>
"find /srv/www/*/htdocs/system/application/ -name ""*.php"" -print0 | xargs -0 grep -h ""debug ("""	<MISSING>
find /starting/directory -type f -name '*.css' | xargs -ti grep '\.exampleclass' {}	<MISSING>
find /starting/path -name target.out | xargs /path/to/simplegrepscript.sh	<MISSING>
"find /storage -name ""*.mp4"" -o -name ""*.flv"" -type f | sort | head -n500"	<MISSING>
find /storage -type f \( -name '*.mp4' -o -name '*.flv' \) -printf '%t@ %p\0' | sort -zn)	<MISSING>
"find /store/01 -name ""*.fits"""	<MISSING>
"find /store/01 -name ""*.fits"" -exec chmod -x+r {} \; -exec ls -l {} \; | tee all_files.log"	<MISSING>
"find /store/01 -name ""*.fits"" -exec chmod -x+r {} \; \"	<MISSING>
find /students -type l -print 2> /dev/null	<MISSING>
find /students -type l -print 2> /dev/null |wc -l	<MISSING>
find /stuff -maxdepth 1 -type d -exec script.py {} +	<MISSING>
find /stuff -type d -exec script.py {} +	<MISSING>
find /stuff -type d -printf '%p\0' | xargs -0 script.py	<MISSING>
find /stuff/* -type d -maxdepth 1 -print0 | xargs -0 script.py	<MISSING>
find /target -type l -xtype l	<MISSING>
find /target/ | grep -v '\.disabled$' | sort	<MISSING>
find /target/dir -type l ! -exec test -e {} \; -exec rm {} \;	<MISSING>
find /target/dir -type l ! -exec test -e {} \; -print	<MISSING>
find /target/path -type f -exec your_command_here \{\} \;	<MISSING>
find /target/path -type f -print0 | xargs -0 your_command_here	<MISSING>
find /tbd -mtime +1 -type d	<MISSING>
find /tbd -mtime +1 -type d | xargs rm -f -r	<MISSING>
find /tbd/* -mtime +1 -exec rm -rf {} \;	<MISSING>
find /tbd/* -mtime +1 | xargs rm -rf	<MISSING>
"find /the/path -depth -name ""*.abc"" -exec rename 's/\.abc$/.edefg/' {} +"	<MISSING>
"find /the/path -depth -name ""*.abc"" -exec sh -c 'mv ""$1"" ""${1%.abc}.edefg""' _ {} \;"	<MISSING>
"find /the/path -depth -type f -name ""*.abc"" -exec sh -c 'mv ""$1"" ""$(dirname ""$1"")/$(basename ""$1"" .abc).edefg""' _ {} \;"	<MISSING>
find /the/path -type f -name '*.abc' -execdir rename 's/\.\/(.+)\.abc$/version1_$1.abc/' {} \;	<MISSING>
find /thepath -type d -empty -print0 | xargs -0 rmdir -v	<MISSING>
find /tmefndr/oravl01 -type f -newer /tmp/$$	<MISSING>
find /tmp  | head	<MISSING>
find /tmp -depth -name core -type f -delete	<MISSING>
find /tmp -iname '*.mp3' -print0 | xargs -0 rm	<MISSING>
"find /tmp -maxdepth 1 -name ""$user.*"""	<MISSING>
find /tmp -maxdepth 1 -type f -delete	<MISSING>
find /tmp -maxdepth 2 -mindepth 1 -type d	<MISSING>
find /tmp -mtime +30 -print	<MISSING>
"find /tmp -name ""*.tmp"" -print0 | xargs -0 rm"	<MISSING>
"find /tmp -name ""*.tmp"" -print0 | xargs -0 rm   find /tmp -name ""*.tmp"" -print0 | xargs -0 rm"	<MISSING>
"find /tmp -name ""*.tmp"" | xargs rm"	<MISSING>
"find /tmp -name ""*.tmp""| xargs rm"	<MISSING>
find /tmp -name '*.swp' -exec rm {} \;	<MISSING>
find /tmp -name *.txt	<MISSING>
find /tmp -name core -type f -print | xargs /bin/rm -f	<MISSING>
find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f	<MISSING>
find /tmp -name core -type f -print0 | xargs -0 /bin/rm -i	<MISSING>
"find /tmp -regex "".*file[0-9]+$"""	<MISSING>
find /tmp -size +10k -size -20k	<MISSING>
find /tmp -size -100c	<MISSING>
find /tmp -size 0 -atime +10 -exec ls -l {} \; > /tmp/checkold.txt	<MISSING>
find /tmp -size 0 -atime +10 -exec rm -f {} \;	<MISSING>
find /tmp -type d -empty	<MISSING>
find /tmp -type f	<MISSING>
find /tmp -type f -empty	<MISSING>
find /tmp -type f -empty -print | xargs rm -f	<MISSING>
find /tmp -type f -exec grep 'search string' '{}' /dev/null \+	<MISSING>
find /tmp -type f -mtime +30 -exec rm -f {} \;	<MISSING>
find /tmp -type f -mtime -30 -exec cp {} /tmp/backup \;	<MISSING>
"find /tmp -type f -name "".*"""	<MISSING>
find /tmp -type f -name '*' -mtime +7 -print0 | xargs -0 rm -f	<MISSING>
find /tmp -type f -name sess* -exec rm -f {} \;	<MISSING>
find /tmp -type f -name ‘*.txt*’ | sed -e ‘s/.*/\”&\”/’ |xargs -n 1 grep -l hello|sed -e ‘s/.*/\”&\”/’	<MISSING>
find /tmp -type f -name ‘*.txt*’ | sed -e ‘s/.*/\”&\”/’ |xargs -n 1 grep -l hello|sed -e ‘s/.*/\”&\”/’|xargs -n 1 rm -f	<MISSING>
"find /tmp -type f -perm -002 | awk -- '1{print ""found world write permissions:"";print};end{if(nr==0)print ""no world writable found.""}'"	<MISSING>
find /tmp -type f -perm -002 | sed '1s/^/found world write permissions:\n/'	<MISSING>
find /tmp -type f -print0	<MISSING>
find /tmp -type f \( -name '*.txt' \) |cut -c14- | nl	<MISSING>
find /tmp -user ian	<MISSING>
find /tmp -user me -ls	<MISSING>
"find /tmp /var/tmp -iname ""testfile.txt"""	<MISSING>
find /tmp /var/tmp -size +30m -mtime 31 -ls	<MISSING>
find /tmp /var/tmp -size +30m -mtime 31 -print0 | xargs -0 ls -l	<MISSING>
find /tmp /var/tmp ~ -type f -size +10m -mtime +60 -ctime -100 -exec file -n -i -- {} + | sed -n 's!: video/[^:]*$!!p'	<MISSING>
find /tmp/ -ctime +15 -type f -exec rm {} \;	<MISSING>
"find /tmp/ -ctime -1 -name ""x*"" -exec mv '{}' ~/play/"	<MISSING>
"find /tmp/ -ctime -1 -name ""x*"" | xargs -i '{}' mv '{}' ~/play/"	<MISSING>
"find /tmp/ -ctime -1 -name 'x*' -exec sh -c '   exec mv ""$@"" ~/play/' sh {} +"	<MISSING>
find /tmp/ -ctime -1 -name 'x*' -print0 | xargs -r0 mv -t ~/play/	<MISSING>
find /tmp/ -ctime -1 -name x*	<MISSING>
"find /tmp/ -depth -name ""* *"" -execdir rename "" "" ""_"" ""{}"" "";"""	<MISSING>
"find /tmp/ -depth -name ""* *"" -execdir rename 's/ /_/g' ""{}"" \;"	<MISSING>
"find /tmp/ -exec ls ""{}"" +"	<MISSING>
find /tmp/ -type f -mtime +1 -delete	<MISSING>
find /tmp/ -type f -mtime +1 -exec rm {} +	<MISSING>
find /tmp/ -type f -mtime +1 -exec rm {} \;	<MISSING>
find /tmp/ -type f -mtime +1 -print0 | xargs -0 -n1 rm	<MISSING>
find /tmp/* -atime +10 -exec rm -f {} \;	<MISSING>
find /tmp/*/* -mtime +7 -type d -exec rmdir {} \;	<MISSING>
find /tmp/1 -iname '*.txt' -not -iname '[0-9a-za-z]*.txt'	<MISSING>
find /tmp/a1	<MISSING>
find /tmp/a1 -exec tar -rvf dirall.tar {} \;	<MISSING>
find /tmp/a1 -print0 | tar --null -t- -cvf dirall.tar	<MISSING>
find /tmp/a1 | xargs tar cvf foo.tar	<MISSING>
find /tmp/dir1 -exec basename {} \;	<MISSING>
find /tmp/dir1 -exec echo {} \;	<MISSING>
find /tmp/foo -exec /tmp/echoargs {} +	<MISSING>
find /tmp/foo -exec /tmp/echoargs {} \;	<MISSING>
find /tmp/foo -path /tmp/foo/bar -print	<MISSING>
find /tmp/foo -path /tmp/foo/bar -print /tmp/foo/bar	<MISSING>
find /tmp/test/ -maxdepth 2 -mindepth 1 -type d	<MISSING>
"find /tmp/test/ -maxdepth 2 -mindepth 1 -type d | while read dir; do printf ""%s : "" ""$dir""; find ""$dir"" -maxdepth 1 -type f | wc -l; find ""$dir"" -maxdepth 1 -type f ; done;"	<MISSING>
find /tmp/test/* -daystart -mtime +0	<MISSING>
find /tmp/test/* -daystart -mtime +1	<MISSING>
find /tmp/test/* -daystart -mtime -0	<MISSING>
find /tmp/test/* -daystart -mtime -1	<MISSING>
find /tmp/test/* -mtime +0	<MISSING>
find /tmp/test/* -mtime +1	<MISSING>
find /tmp/test/* -mtime -0	<MISSING>
find /tmp/test/* -mtime -1	<MISSING>
"find /travelphotos -type f -size +200k -not -iname ""*2015*"""	<MISSING>
find /u/bill -amin +2 -amin -6	<MISSING>
find /u/netinst -print | xargs chgrp staff	<MISSING>
find /u/netinst -print | xargs chmod 500	<MISSING>
find /u/netinst -print | xargs chown netinst	<MISSING>
"find /user/directory/ -name ""*txt"" -mtime 0 -type f -exec printf '%s: ' {} \; -exec tail -1 {} \;"	<MISSING>
"find /user/directory/ -name ""*txt"" -mtime 0 -type f -printf '%p: ' -exec tail -1 {} \;"	<MISSING>
"find /user/directory/* -name ""*txt"" -mtime 0   -type f -exec awk '{s=$0};end{print filename, "": "",s}' {} \;"	<MISSING>
"find /user/directory/* -name ""*txt"" -mtime 0 -type f"	<MISSING>
find /users -type d -iname '*.bak' -print0 | xargs -0 rmdir	<MISSING>
find /users/al -name cookbook -type d	<MISSING>
find /users/david/desktop -type f \( -name '*.txt' -o -name '*.mpg' -o -name '*.jpg' \)	<MISSING>
find /users/david/desktop/ -type f	<MISSING>
find /users/david/desktop/-type f	<MISSING>
find /users/me/desktop -readable	<MISSING>
find /users/me/desktop -user popo -perm 777	<MISSING>
"find /users/tom -name ""*.pl"""	<MISSING>
"find /users/tom -name ""*.pl"" -name ""*.pm"""	<MISSING>
find /users/tom -name '*.p[lm]' -exec grep -l -- '->get(' {} + | xargs grep -l '#hyphenate'	<MISSING>
find /users/tom -name '*.p[lm]' -exec grep -l -- '->get(\|#hyphenate' {} +	<MISSING>
find /usr ! -newer /firstfile -print	<MISSING>
find /usr -follow -name '*.sh'	<MISSING>
find /usr -group staff	<MISSING>
find /usr -iname centos	<MISSING>
find /usr -inum 1234 -print	<MISSING>
find /usr -maxdepth 1 -print	<MISSING>
find /usr -maxdepth 4 -name document -print	<MISSING>
find /usr -mmin 5	<MISSING>
find /usr -mtime +356 -daystart	<MISSING>
"find /usr -name ""*.c"""	<MISSING>
"find /usr -name ""chapter*"" -type f"	<MISSING>
find /usr -name '*.foo' -print	<MISSING>
find /usr -name '*.sh'	<MISSING>
find /usr -name *stat	<MISSING>
find /usr -name \*.sh	<MISSING>
"find /usr -name core -atime +7 -exec rm ""{}"" \;"	<MISSING>
find /usr -name date	<MISSING>
find /usr -name doc -type d	<MISSING>
find /usr -name filename.txt -print	<MISSING>
find /usr -name java	<MISSING>
find /usr -name lib64 -type d|paste -s -d:	<MISSING>
find /usr -name temp -atime +7 -print	<MISSING>
find /usr -name temp -print	<MISSING>
find /usr -name tkconfig.sh	<MISSING>
find /usr -newer /tmp/stamp	<MISSING>
find /usr -newer /tmp/stamp$$	<MISSING>
find /usr -newer /usr/firstfile -print	<MISSING>
"find /usr -newermt ""feb 1"""	<MISSING>
find /usr -perm 0777 -print	<MISSING>
find /usr -print	<MISSING>
find /usr -type b -name backup -print	<MISSING>
find /usr -type c -name backup -print	<MISSING>
find /usr -type d -name 'my files' -exec rsync -avr '{}' /iscsi \;  -exec rm -rf '{}'\;	<MISSING>
find /usr -type d -name backup -print	<MISSING>
find /usr -type d -name my\ files -exec rsync -avr '{}' /iscsi \;	<MISSING>
find /usr -type f -name backup -print	<MISSING>
find /usr -type f | samefile -g 10000 >usr.dups	<MISSING>
find /usr -type f | wc -l	<MISSING>
find /usr -type l	<MISSING>
"find /usr /bin /sbin /opt -name ""$1*"" -type f -ls"	<MISSING>
find /usr /bin /sbin /opt -name sar	<MISSING>
"find /usr /home  /tmp -name ""*.jar"""	<MISSING>
"find /usr /home  /tmp -name ""*.jar"" 2>/dev/null"	<MISSING>
find /usr /home -name chapter1 -type f	<MISSING>
find /usr /home -name chapter1.txt -type f	<MISSING>
find /usr /home -name findme.txt -type f -print	<MISSING>
find /usr \( -name doc -and -type d \)	<MISSING>
find /usr/ -lname *javaplugin*	<MISSING>
"find /usr/ -path ""*local*"""	<MISSING>
find /usr/* -size 0c -exec rm {} \;	<MISSING>
"find /usr/app/etl/01/oth/log/tra -type f ! -name "".*"" -mtime -10 | egrep -vf /usr/app/etl/01/cle/par/files_to_skip.par"	<MISSING>
"find /usr/bin  -type l  -name ""z*"" -exec ls  -l {} \;"	<MISSING>
find /usr/bin -name '*vim*' -type l	<MISSING>
find /usr/bin -name [ef]*x	<MISSING>
"find /usr/bin -type  l  -name ""z*"" -ls"	<MISSING>
find /usr/bin -type f -atime +100	<MISSING>
find /usr/bin -type f -atime +20	<MISSING>
find /usr/bin -type f -mtime -10	<MISSING>
find /usr/bin -type f -size -50c	<MISSING>
find /usr/bin -type f -size -50c -exec ls -l '{}' ';'	<MISSING>
find /usr/bin | xargs file	<MISSING>
"find /usr/include -type f -mtime -400 -name ""*.h"""	<MISSING>
"find /usr/local -iname ""*blast*"""	<MISSING>
find /usr/local -maxdepth 1 -type d -name '*[0-9]'	<MISSING>
find /usr/local -mtime -1	<MISSING>
find /usr/local -mtime 1	<MISSING>
"find /usr/local -name ""*.html"" -type f"	<MISSING>
"find /usr/local -name ""*.html"" -type f -exec chmod 644 {} \;"	<MISSING>
"find /usr/local -name ""*blast*"""	<MISSING>
find /usr/local -size +10000k	<MISSING>
find /usr/local -type d -name '*[0-9]'	<MISSING>
find /usr/local -type f -perm /a=x | xargs file |  grep 'not stripped' | cut -d: -f1	<MISSING>
"find /usr/local/apache/logs/ -type f -name ""*_log""|xargs du -csh"	<MISSING>
find /usr/local/doc -name '*.texi'	<MISSING>
find /usr/local/etc/rc.d -type f | awk -f/ '{print $nf}'	<MISSING>
find /usr/local/fonts -user warwick	<MISSING>
"find /usr/local/games -name ""*xpilot*"""	<MISSING>
find /usr/local/man /opt/local/man -name 'my*'	<MISSING>
find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -exec echo /usr/local/backup{} \;	<MISSING>
"find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -printf ""%f\0"" | xargs -0 -i{} echo svnadmin hotcopy /usr/local/svn/repos/\{\} /usr/local/backup/\{\}"	<MISSING>
find /usr/lpp/financials -print | xargs chown roger.staff	<MISSING>
find /usr/pcapps/ -mount -type f -size +1000000c | perl -lpe ' s{ }{\\ }g ' | xargs ls -l | sort +4nr | head -200	<MISSING>
find /usr/ports/ -name '*patch-*' -exec grep `printf '\15'` -l '{}' '+' | wc -l	<MISSING>
find /usr/ports/ -name makefile -exec grep '^master_site.*cpan' '{}' '+' | wc -l	<MISSING>
find /usr/ports/ -name makefile -exec grep '^master_site_subdir.*\.\./.*authors' '{}' '+' | wc -l	<MISSING>
find /usr/ports/ -name makefile -exec grep ^use_rc_subr '{}' '+' | wc -l	<MISSING>
find /usr/ports/ -name makefile\* -exec grep -l qmakespec '{}' '+' | wc -l	<MISSING>
find /usr/ports/ -name makefile\* -exec grep -l qtdir '{}' '+' | wc -l	<MISSING>
find /usr/ports/ -name makefile\* -exec grep `printf '\15'` -l '{}' '+' | wc -l	<MISSING>
"find /usr/ports/ -name makefile\* -mindepth 3 -maxdepth 3 -exec egrep ""noportdocs|noportexamples"" '{}' '+' | wc -l"	<MISSING>
find /usr/ports/ -name pkg-plist\* -exec grep 'unexec.rmdir %d' '{}' '+' | wc -l	<MISSING>
find /usr/ports/ -name pkg-plist\* -exec grep -l etc/rc.d/ '{}' '+' | wc -l	<MISSING>
find /usr/ports/ -name pkg-plist\* -exec grep dirrmtry '{}' '+' | wc -l	<MISSING>
find /usr/ports/ -name work -type d -print -exec rm -rf {} \;	<MISSING>
"find /usr/sbin /usr/bin -lname ""*/systemctl"""	<MISSING>
find /usr/share -name '*farm*'	<MISSING>
find /usr/share -name readme	<MISSING>
find /usr/share -type d	<MISSING>
find /usr/share \! -type d wc -l	<MISSING>
"find /usr/share/data -regextype posix-extended -regex "".*/20140624.*"" -fprint /home/user/txt-files/data-as-of-20140624.txt"	<MISSING>
find /usr/share/doc -iname readme\*	<MISSING>
"find /usr/share/doc -name ""copyright"""	<MISSING>
find /usr/share/doc -name '[rr][ee][aa][dd][mm][ee]*'	<MISSING>
find /usr/share/doc -name readme	<MISSING>
find /usr/share/doc -name readme\*	<MISSING>
find /usr/share/doc /usr/doc /usr/locale/doc -name instr.txt	<MISSING>
find /usr/share/man/ -regex .*/grep*	<MISSING>
find /usr/share/man/ -regex .*grep*	<MISSING>
find /usr/share/man/ -regex grep.*	<MISSING>
find /usr/share/man/ -type f -exec ls -s {} + 2>/dev/null | head	<MISSING>
find /usr/spool/uucp -type d -print	<MISSING>
find /usr/src ! \( -name '*,v' -o -name '.*,v' \) '{}' \; -print	<MISSING>
"find /usr/src -name ""*.html"" -exec grep -l foo '{}' ';' | wc -l"	<MISSING>
"find /usr/src -name ""*.html"" -execdir /usr/bin/grep -h ""foo"" {} ';' | wc -l"	<MISSING>
"find /usr/src -name ""*.html"" | xargs grep -l foo | wc -l"	<MISSING>
find /usr/src -name '*.c' -size +100k -print	<MISSING>
find /usr/src -name cvs -prune -o -depth +6 -print	<MISSING>
find /usr/src -name cvs -prune -o -mindepth +6 -print	<MISSING>
find /usr/src -name cvs -prune -o -mindepth 7 -print	<MISSING>
find /usr/src -name fprintf.c	<MISSING>
"find /usr/src -not \( -name ""*,v"" -o -name "".*,v"" \) '{}' \; -print"	<MISSING>
"find /usr/src/linux -name ""*.html"""	<MISSING>
find /usr/tom | egrep '*.pl| *.pm'	<MISSING>
find /usr/tom | egrep '*.pl| *.pm' | xargs cat | grep <pattern>	<MISSING>
find /usr/x11/man/man5 -print	<MISSING>
"find /var  -type f -exec grep ""param1"" {} \; -print"	<MISSING>
find /var -iname \*.log -exec bzip {} \;	<MISSING>
find /var -iname \*.log | xargs bzip -	<MISSING>
"find /var -maxdepth 2 -type d -exec stat  -c ""%n %y"" {} \;"	<MISSING>
"find /var -maxdepth 2 -type d -printf ""%p %ty-%tm-%td %th:%tm:%ts %tz\n"""	<MISSING>
find /var -maxdepth 2 -type d;	<MISSING>
find /var -name lighttpd	<MISSING>
find /var -regex '.*/tmp/.*[0-9]*.file'	<MISSING>
find /var -size +10000k -print0 | xargs -0 ls -lsh	<MISSING>
"find /var -type f  | xargs grep ""param1"""	<MISSING>
find /var/ -size +10m -exec ls -lh {} \;	<MISSING>
find /var/ -size +10m -ls	<MISSING>
find /var/adm -mtime +3 -print	<MISSING>
"find /var/adm/logs/morelogs/* -type f -prune -name ""*.user"" -print"	<MISSING>
"find /var/adm/logs/morelogs/* -type f -prune \( -name ""admin.*"" -o -name ""*.user"" -o -name ""*.user.gz"" \) -print"	<MISSING>
find /var/ftp/mp3 -name '*.mp3' -type f -exec chmod 644 {} \;	<MISSING>
find /var/log	<MISSING>
find /var/log -daystart -mtime 0	<MISSING>
"find /var/log -group adm -name ""*.log"""	<MISSING>
"find /var/log -name ""*.log"" -print0"	<MISSING>
"find /var/log -name ""*.log"" -print0 2>/dev/null"	<MISSING>
"find /var/log -name ""syslog"" -type d"	<MISSING>
find /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2	<MISSING>
find /var/log -size +10m -ls	<MISSING>
"find /var/log -type f -size +100000k -exec ls -lh {} \; | awk '{ print $9 "": "" $5 }'"	<MISSING>
find /var/log/	<MISSING>
find /var/log/ -iname anaconda*	<MISSING>
find /var/log/ -iname anaconda.*	<MISSING>
find /var/log/ -iname anaconda.* -exec tar -cvf file.tar {} \;	<MISSING>
find /var/log/ -mmin +60	<MISSING>
find /var/log/ -mmin -60 -mmin +10	<MISSING>
find /var/log/ -mtime +60 -type f -exec ls -l {} \;	<MISSING>
find /var/log/ -mtime +7 -mtime -8	<MISSING>
find /var/log/ -type f -exec grep -h ‘19:26′ {} \;	<MISSING>
"find /var/log/apache2/access*.gz -type f -newer ./tmpoldfile ! -newer ./tmpnewfile \ | xargs zcat | grep -e ""$month\/$year.*get.*ad=$advertiser http\/1"" -c"	<MISSING>
find /var/log/crashes -name app-\*\.log -mmin -5	<MISSING>
find /var/log/crashes -name app-\*\.log -mmin -5 -print | head -n 1	<MISSING>
find /var/log/remote/ -daystart -mtime +14 -type f -exec rm {} \;	<MISSING>
find /var/named -type f -name *.db	<MISSING>
find /var/spool -mtime +60	<MISSING>
find /var/spool/mail -type f | cpio -pvdmb /home/username/mail	<MISSING>
find /var/spool/postfix/{deferred,active,maildrop,incoming}/ -type f	<MISSING>
find /var/tmp -uid 1000	<MISSING>
find /var/tmp/stuff -mtime +90 -delete	<MISSING>
find /var/tmp/stuff -mtime +90 -exec /bin/rm {} \+	<MISSING>
find /var/tmp/stuff -mtime +90 -exec /bin/rm {} \;	<MISSING>
find /var/tmp/stuff -mtime +90 -execdir /bin/rm {} \+	<MISSING>
find /var/tmp/stuff -mtime +90 -print	<MISSING>
find /var/tmp/stuff -mtime +90 -print | xargs /bin/rm	<MISSING>
find /var/tmp/stuff -mtime +90 -print0 | xargs -0 /bin/rm	<MISSING>
find /var/tmp/stuff1 -mtime +90 -delete &	<MISSING>
find /var/www	<MISSING>
find /var/www ! -user apache -print0 | xargs -0	<MISSING>
"find /var/www -cmin -10 -printf ""%c %pn"""	<MISSING>
"find /var/www -cmin -10 -type f -printf ""%c %pn"""	<MISSING>
find /var/www -group root -o -nogroup -print0 | xargs -0 chown :apache	<MISSING>
find /var/www -maxdepth 4 -name 'restore.php' -exec rm -r {} \;	<MISSING>
find /var/www -name *.gif	<MISSING>
find /var/www -name *.gif -ctime +90 -ctime -180	<MISSING>
find /var/www -name *.gif -o -name *.jpg	<MISSING>
find /var/www -name *.gif -size +5k -size -10k	<MISSING>
find /var/www -name logo.gif	<MISSING>
find /var/www -print0 | xargs -0 chown www-data:www-data	<MISSING>
find /var/www -type d -mtime 0 -name logs -exec sudo rm -fr {} \;	<MISSING>
find /var/www -type d -print0 | xargs -0 chmod 755	<MISSING>
find /var/www -type d -print0 | xargs -0 chmod g+s	<MISSING>
"find /var/www -type d \( ! -wholename ""/var/www/web-release-data/*""  ! -wholename ""/var/www/web-development-data/*"" \)"	<MISSING>
"find /var/www -type f -name ""*.html"""	<MISSING>
find /var/www -type f -name «access.log*» -size +100m	<MISSING>
find /var/www -type f -print0 | xargs -0 chmod 644	<MISSING>
find /var/www | more	<MISSING>
find /var/www/ -name wp-config.php	<MISSING>
find /var/www/ -name wp-config.php -maxdepth 2	<MISSING>
find /var/www/ -path '*wp-admin/index.php' -exec mv {} $(dirname {})/index_disabled	<MISSING>
find /var/www/ -path '*wp-admin/index.php' | xargs -i sh -c 'mv {} $(dirname {})/index_disabled'	<MISSING>
"find /var/www/ -type f -iname ""*.php"" -exec chmod 700 {} \;"	<MISSING>
"find /var/www/ -type f -iname ""*.php"" -print"	<MISSING>
"find /var/www/ -type f -iname ""*.pl"" -print"	<MISSING>
"find /var/www/ -type f -name ""*"" -size +100m -exec du -h '{}' \;|grep -v /download/"	<MISSING>
"find /var/www/ -type f -name ""*.pl"" -print"	<MISSING>
find /var/www/ -type f -name «access.log*» -exec du -k {} \;|awk '{s+=$1}end{print s}'	<MISSING>
find /var/www/* -type d -print | tar -zcpvf {}.tar.gz -c /var/www/ --files-from - {} \;	<MISSING>
find /var/www/*.php -type f -exec rm {} \;	<MISSING>
find /var/www/html -type d -perm 777 -print -exec chmod 755 {} \;	<MISSING>
"find /var/www/html/ -type d -name ""build*"" | sort -r"	<MISSING>
"find /var/www/html/ -type d -name ""build*"" | sort | tail -n +5 | xargs -i % echo -rf %"	<MISSING>
find /var/www/html/zip/data -type d -mtime +90 | uniq	<MISSING>
find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90	<MISSING>
find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90  | sed 's|/[^/]*$||'	<MISSING>
"find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90 -printf ""%h\n"" | sort | uniq"	<MISSING>
"find /var/www/vhosts/*/httpdocs -type f -iwholename ""*/wp-includes/version.php"" -exec grep -h ""\$wp_version ="" {} \;"	<MISSING>
find /var/www/vhosts/*/httpdocs -type f -iwholename “*/wp-includes/version.php” -exec grep -h “\$wp_version =” {} \;	<MISSING>
find /var/www/vhosts/*/httpdocs -type f \( -iwholename '*/libraries/joomla/version.php' -o -iwholename '*/libraries/cms/version.php' -o -iwholename '*/libraries/cms/version/version.php' \) -print0 -exec perl -e 'while (<>) { $release = $1 if m/ \$release\s+= .([\d.]+).;/; $dev = $1 if m/ \$dev_level\s+= .(\d+).;/; } print qq( = $release.$dev\n);' {} \;	<MISSING>
"find /var/www/vhosts/*/httpdocs/ -type f -iwholename ""*/modules/system/system.info"" -exec grep -h ""version = \"""" {} \;"	<MISSING>
"find /var/www/vhosts/*/httpdocs/ -type f -iwholename ""*/wp-includes/version.php"" -exec grep -h ""\$wp_version ="" {} \;"	<MISSING>
"find /var/www/vhosts/*/httpdocs/ -type f -wholename *includes/constants.php -exec grep -h ""phpbb_version"" {} \;"	<MISSING>
"find /volume1/photo/ipcam -maxdepth 1 -type d -name ""????-??-??"" -mtime +0 -exec sh -c 'echo /home/pi/dropbox-uploader/dropbox_uploader.sh move /ipcam/$(basename {}) /ipcam/archive' \;"	<MISSING>
"find /volume1/uploads -name ""*.mkv"""	<MISSING>
"find /volume1/uploads -name ""*.mkv"" -exec /tmp/rename.sh \{\} \;"	<MISSING>
"find /volume1/uploads -name ""*.mkv"" -exec mv \{\} \{\}.avi \;"	<MISSING>
"find /volume1/uploads -name ""*.mkv"" -exec rename 's/\.mkv$/.avi/' \{\} \;"	<MISSING>
find /win/c -iname *jpg	<MISSING>
find /work -name 'memo*' -user ann -print	<MISSING>
find /work -name chapter1	<MISSING>
find /work -user olivier -print	<MISSING>
find /work \( -fprint /dev/stderr \) , \( -name 'core' -exec rm {} \; \)	<MISSING>
find /working -type f -name '*.mp4'	<MISSING>
find /your/dir -type f -exec touch {} +	<MISSING>
find /your/dir -type f -size +5m -exec du -h '{}' + | sort -hr	<MISSING>
find /your/dir -type f -size +5m -print0 | xargs -0 ls -1ssh	<MISSING>
"find /your/path/ -type f -name ""*.html"" | xargs zip all_html_files.zip"	<MISSING>
"find /your/project -maxdepth 1 ! -name ""configfile"" -exec ln -s \{\} ./ \;"	<MISSING>
find /your/project -type f ! -name 'configfile' -exec ln -s \{\} ./ \;	<MISSING>
find /your/source/dir/ -iname '*.txt.mrg' -exec ln -s '{}' /your/dest/dir/ \;	<MISSING>
find /your/target/path/ -type f -exec rename 's/special/regular/' '{}' \;	<MISSING>
find /your/webdir -type f | xargs chmod 644	<MISSING>
find /your/webdir/ -type d -print0 | xargs -0 chmod 755	<MISSING>
find 0001 -type d | sed 's/^0001/0002/g' | xargs mkdir	<MISSING>
find 10 largest files in the current directory and its subdirectories	
find 10 most recently changed files in the current directory tree	
find <dir> -mtime +7	<MISSING>
find <directory> -type f -size +1m -delete	<MISSING>
find <directory> -type f -size -1m -delete	<MISSING>
find <directory> -type f -size -1m -print0  | xargs -0 rm	<MISSING>
"find <directory_name> -type d -exec sh -c ""cd {} && [ -d live ] && [ -d test ] && cd ../ && echo \""deleting {}\"" && rm -rvi {} "" {} \;"	<MISSING>
"find <directory_name> -type d -exec sh -c ""cd {} && [ -d live ] && [ -d test ] && echo \""deleting test from {}\"" && rm -rvi test "" {} \;"	<MISSING>
"find <file path> -name ""myfile.*"" -exec rm -f {} ;"	<MISSING>
find <filename> files/directories under current directory	
find <path> -name '.*' -prune -o -type d -print	<MISSING>
find <path> -type f -exec sh -c 'for f; do echo process $f;  done' sh {} +	<MISSING>
find <path> -xdev -type f -name *.txt -exec ls -l {} \;	<MISSING>
"find [directory] -name ""pattern_to_exclude"" -prune -o -name ""another_pattern_to_exclude"" -prune -o -name ""pattern_to_include"" -print0 | xargs -0 -i filename grep -ir ""pattern"" filename"	<MISSING>
find [path] -type f -not -name 'expr' | xargs rm	<MISSING>
find [whatever] -exec cat {} +	<MISSING>
find [whatever] -exec cat {} \;	<MISSING>
find [whatever] -print0 | xargs -0 cat	<MISSING>
find [whatever] | xargs cat	<MISSING>
"find \! -name ""query_to_avoid"""	<MISSING>
find \! -name . -type d -print0 | xargs -0 rmdir	<MISSING>
"find \( -name ""*.htm"" -o -name ""*.html"" \) -a -ctime -30 -exec ln {} /var/www/obsolete \;"	<MISSING>
find \( -name '*.cpp' -o -name '*.h' \) -print	<MISSING>
"find \( -name 'messages.*' ! -path ""*/.svn/*"" ! -path ""*/cvs/*"" \) -exec grep -iw uint {} +"	<MISSING>
"find \( -name 'messages.*' ! -path ""*/.svn/*"" \) -exec grep -iw uint {} +"	<MISSING>
find \( -size +100m -fprintf /root/big.txt %-10s %p\n \)	<MISSING>
find \( -size +100m -fprintf /root/big.txt '%-10s %p\n' \)	<MISSING>
find _cache_*	<MISSING>
"find `echo ""${searchpath}""` -type f -print0 | xargs -0 grep -l -e '""${string1}"".*""${string2}"".*""${string3}""'"	<MISSING>
find `gen_root_dirs.sh` -type f -size 0 -ls	<MISSING>
find `ls -d /[ubso]*` -name sar	<MISSING>
find `pwd` -group staff -exec find {} -type l -print ;	<MISSING>
"find `pwd` -iname "".*"" -type f > all-hidden-files.txt"	<MISSING>
find `pwd` -maxdepth 1	<MISSING>
find `pwd` -mtime -1 -type f -print	<MISSING>
"find `pwd` -name ""*.log"" -exec grep ""the sas system"" {} \;"	<MISSING>
"find `pwd` -name ""*.log"" > sas_log_list.txt"	<MISSING>
"find `pwd` -name ""*log"" -type f"	<MISSING>
"find `pwd` -name ""*rc.conf""  -execdir /bin/chmod o+r {} \;"	<MISSING>
"find `pwd` -name ""accepted_hits.bam"""	<MISSING>
"find `pwd` -name ""accepted_hits.bam"" | xargs -i echo somecommand {}"	<MISSING>
"find `pwd` -name ""file.ext"" -exec dirname {} \;"	<MISSING>
"find `pwd` -name ""file.ext"" -exec echo $(dirname {}) \;"	<MISSING>
"find `pwd` -name ""file.ext"" -printf ""%f\n"""	<MISSING>
find `pwd` -name .htaccess	<MISSING>
find `pwd` -name core -ctime +4 -execdir /bin/rm -f {} \;	<MISSING>
find `pwd` -name file.ext |xargs -l1 dirname	<MISSING>
"find `pwd` -perm 111 -type f | sort -r | xargs -n1 -i{} sh -c ""dirname {};basename {}"" | awk '/^\// {dir=$0 ; if (dir != lastdir) {print;lastdir=dir}} !/^\// {print}'"	<MISSING>
find `pwd` -type f -exec ls -l {} \; | wc -l	<MISSING>
find `string' in all *.java files ignoring the case of that string	
find a	<MISSING>
find a 'fool.scala' named regular file under /opt /usr /var those directories.	
find a -type d -name 'd'	<MISSING>
"find a -type d \( ! -wholename ""a/a/*"" \)"	<MISSING>
"find a -type f -name '4' -delete -printf ""%h\0"" | xargs -0 -r rmdir"	<MISSING>
find a 400 permission file under /data directory	
"find a \! -path ""a/a/*"""	<MISSING>
"find a \! -path ""a/a/*"" -a \! -path ""a/a"""	<MISSING>
"find a difference between website content of ""http://tldp.org/ldp/abs/html/"" and ""http://www.redhat.com/mirrors/ldp/ldp/abs/html/"""	
find a directory named 'project.images' case insensitively in the entire filesystem and show it in long listing format	
find a directory named 'project.images' in the entire filesystem	
find a directory named 'project.images' in the entire filesystem and show it in long listing format	
"find a file ""foo.bar"" without showing ""permission denied"" messages"	
find a file in current folder and discard the errors	
find a file in current folder and show all errors apart from permission denied	
find a file/directory named modules under current directory and exit with the number of files/directories named 'modules'  found in this path	
find a hostname that resolves to ip '173.194.33.71'	
find a more recent version of httpd.conf file than /etc/apache-perl/httpd.conf in entire file system	
find a single file called findcommandexamples.txt under current directory and remove it	
find a single file called tecmint.txt and remove it	
find a size of only the target directory in mb format	
find a specfic video file in the current directory	
find a used disk space of a target directory and files inside of it	
find a.out and object files in the current directory tree	
find a.out, *.o and core files under the current directory and sub-directories and delete them.	
find aaa/ -maxdepth 1 -type f	<MISSING>
"find absolute path of command with pid ""$pid"""	
find al the files that are modified exactly 2 days ago	
find al the files which have been accesed in the last 6 days and display their details	
find al the tmp directories in the current directory and create a dump of it	
find all  'custlist*' files under current directory	
find all  *.csv files which  modify within last 2 days in /home directory then zip ( archive )-	
"find all  files that match ""[a-f0-9\-]{36}\.jpg"" of grep"	
find all  tools generated files  a.out , *.o and core dump files which not required to us these all junk files & delete from  current  directory .	
"find all "".flac"" files in current folder starting with ""cmn-"""	
"find all "".flac"" files starting with ""cmn-"" and search for files having cjk characters using unicodes"	
"find all "".gz"" files in directory tree ""files/"" and use a count and the filename as arguments to ""..."""	
"find all ""g*.html"" files modified more than 7 days ago in the current directory tree"	
"find all ""g*.html"" files modified more than 7 days ago in the current directory tree and pass them as arguments to script /path/to/script_7zipi"	
"find all ""tar.gz"" files in a folder and sort them according to the name and display the first 2 files"	
"find all ""yourprogramname"" regular files in the current directory tree and print the full paths to the directories containing them"	
find all $1 files/directories under current directory and enter into the parent directory of the first one found	
find all $2 files in $1 path and search for the regex expanded by $3 in those files	
find all $2 files in $1 path and search for the regex expanded by $3 in those files excluding the files with /proc in their paths	
find all $2 files in $1 path excluding /proc and search for the regex expanded by $3 in those files	
find all $tofind* files/directories under $parentdir	
find all '*.c' files under $home directory which context contains sprintf	
find all '*~' files under current directory	
find all '*~' files under current directory and delete them	
find all 'js' suffix files  exclue the path *exclude/this/dir*' under current dirctory	
find all 'test' directories in the current directory tree	
find all 'test' directories in the current directory tree and remove them	
find all * * regular files under current directory	
find all *$version* files/directories under current directory where $version is a variable	
find all *-* files under current directory	
find all *.$input_file_type files/directories under $source_dir	
find all *.$input_file_type files/directories under $source_dir with the null character as the delimiter	
find all *.* directories under /home/feeds/data directory	
"find all *.* files not within .git directory and run $sed_cmd -i ""s/$1/$2/g"" on each of them"	
find all *.* files under current directory	
find all *.[ch] files under current directory	
find all *.axvw files/directories under current directory	
find all *.bmp files in the current directory tree and convert them to the jpeg format	
find all *.c files in /usr/src bigger than 100k	
find all *.c files located under /home and below	
find all *.c files on the system and feed the output to wc	
find all *.c files under /home	
"find all *.c files under and below the current directory that contain ""hogehoge"""	
"find all *.c files under and below the current directory that contain ""wait_event_interruptible"""	
find all *.cgi (case insensitive) files/directories under current directory and change their permission to 755	
find all *.cgi files/directories under current directory and change their permission to 755	
find all *.cgi files/directories under current directory and change their permission to 775	
"find all *.cls files/directories under current directory and print '{if(length($0) > l) { line=$0; l = length($0)}} end {print line""l""l}' for each of them where $0 is expanded to the file/directory path"	
find all *.coffee files under /some/path and run 'perl /path/to/your/program' with all of the file paths as its arguments	
"find all *.cpp files in the current directory tree that contain ""sub"" in their names"	
find all *.css files under $dir and print the lines matching the regex '\.exampleclass.{/,/}' from those files	
find all *.css files under /starting/directory and print filenames and the lines matching the regex '\.exampleclass' from those files	
find all *.csv files under /foo/bar and move them to some_dir	
find all *.csv files under /foot/bar/ and move them to some_dir	
find all *.data files under jcho directory	
find all *.dbf files/directories in entire file system	
find all *.dbf files/directories in entire file system and print their sorted and unique parent directory paths	
find all *.dbf files/directories in entire file system discarding errors and print their sorted and unique parent directory paths	
find all *.dbf files/directories in entire file system discarding errors and print their sorted and unique parent directory pathsg	
find all *.epub, *.mobi, *.chm, *.rtf, *.lit and *.djvu files/directories under current directory	
find all *.err files under current directory that are larger than 5120 bytes in size	
find all *.ext files/directories under current directory and print their path and parent directory path	
find all *.ext regular files under /path and execute my_cool_script for each of them with the file path as argument	
find all *.foo files under current directory and print their contents	
find all *.foo files under current directory and search for 'bar' in those files	
find all *.gz files in the current directory and decompress them using gunzip	
find all *.gz files under asia and emea directory and print their names and line counts to file_count.txt	
find all *.gz files/directories under asia and emea directory	
find all *.htm files under current directory	
find all *.htm files under current directory and change their names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format	
find all *.htm files under current directory and print the changed names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format	
find all *.html files under current directory	
find all *.html files under current directory and for each file replace the first occurrence of string and previous lines with the content of common_header file	
find all *.ini files	
find all *.java files in the current directory tree	
find all *.java files under current directory	
find all *.java files under current directory and archive them to myfile.tar	
find all *.java files under current directory and change their encoding to utf-8 from cp1252	
find all *.java files under current directory and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files	
find all *.java files under current directory containing the string 'string'	
find all *.java files/directories under current directory	
find all *.jpg (case insensitive) files under current directory	
"find all *.jpg (case-insensitive) files under  maximum 2 levels down the temp/medium/* paths and run `mogrify -resize 428x270""^"" -quality 80 -compress jpeg -monitor -strip` with the file paths as arguments"	
"find all *.jpg (case-insensitive) files under maximum 2 levels down the temp/images/* paths and run `mogrify -resize 100x100"">"" -quality 80 -compress jpeg -monitor -strip` with the file paths as arguments"	
"find all *.jpg (case-insensitive) files under maximum 2 levels down the temp/large/* paths and run `mogrify -resize 428x270"">"" -quality 80 -compress jpeg -monitor -strip` with the file paths as arguments"	
"find all *.jpg (case-insensitive) files under maximum 2 levels down the temp/medium/* paths and run `mogrify -resize 428x270"">"" -quality 80 -compress jpeg -monitor -strip` with the file paths as arguments"	
find all *.jpg files and copy them to /	
find all *.jpg files in */201111 paths	
find all *.jpg files in */201111/* paths and numerically sort them according to the second field in the file name with a delimiter '_'	
find all *.jpg files in cam2/2013* paths and send the contents to a ffmpeg command to create a video file	
find all *.jpg files on the system	
find all *.jpg files under current directory	
find all *.jpg files under current directory and print only duplicate names	
find all *.jpg files under current directory and print only unique names	
find all *.jpg files/directories under current directory	
"find all *.log files under current directory that contain the string ""exception"""	
find all *.log files under path/	
"find all *.log files under path/ that do not contain ""string that should not occur"""	
find all *.m4a files under /home/family/music directory	
find all *.m4a files under /home/family/music directory and convert them to ogg	
find all *.m4a files/directories under /home/family/music directory	
find all *.md files in entire file system and convert them to html (*.html) files	
find all *.md files in entire file system and convert them to html (*.md.html) files	
find all *.mov (case insensitive) files under current directory and execute /path/to/myffmpeg.sh with each file path as its argument	
find all *.mov (case insensitive) files under current directory and list their paths with their names	
find all *.mov (case insensitive) files under current directory and run an echo command with the path and the name for each file	
find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the literal '%p' and '%f' as the path and name respectively for each file	
find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the path and the name for each file	
find all *.mov files under current directory	
find all *.mp3 (case insensitive) files/directories under /tmp and remove them	
find all *.mp3 files in entire file system greater than 10mb and delete them	
find all *.mp3 files in file system with more than 10mb and delete them using rm command	
find all *.mp3 files under current directory	
find all *.mp3 files under current directory and run mplayer with these files	
find all *.mp3, *.aif*, *.m4p, *.wav, *.flac files under $musicdir directory	
find all *.mp4 files under /foo/bar and move them to /some/path	
find all *.mp4 files under /working	
find all *.mp4 files under directory named 'working' and show the first one found	
find all *.mpg (regular) files under current directory and run an ffmpeg command on each of them	
find all *.ogg (case insensitive) files under your home directory that are less than 100mb in size	
find all *.ogg (case insensitive) files/directories in entire file system	
find all *.ogg (case insensitive) files/directories under your home directory	
find all *.ogg (case insensitive) files/directories under your home directory that are greater than 100mb in size	
find all *.ogg (case insensitive) files/directories under your home directory that are greater than 20mb in size	
find all *.ogg (case insensitive) files/directories under your home directory that are not greater than 20mb in size	
find all *.ogg and *.mp3 (case insensitive) files/directories under your home directory	
find all *.ogg files on the system ignoring the case	
find all *.ogg files under the home directory ignoring the case	
find all *.old files and move them to directory oldfiles	
find all *.p[lm] files under /users/tom directory that matches both the regex '->get(' and '#hyphenate' in their contents	
find all *.p[lm] files under /users/tom directory that matches the regex '->get(\|#hyphenate' in their contents	
find all *.p[lm] files/directories under current directory	
find all *.page (case insensitive) files/directories under current directory and run ~/t.sh for each of them with the file path as argument, then sort the output	
find all *.pdf files under ./polkadots	
find all *.pdf.marker files under ${input_location} and move them to ${output_location} also move any *.pdf files with the same name under current directory to ${output_location}	
find all *.php (case insensitive) and *.js files (case insensitive) under /home/jul/here excluding  /home/jul/here/exclude/* paths	
find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding $exclude/* paths	
find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding *.js files/directories under /home/jul/here/exclude/* paths	
find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding /home/jul/here/exclude/* paths	
find all *.php files under current directory and change their permission to 640	
find all *.php files under current directory and change their permission to 644	
find all *.plist files/directories under current directory	
find all *.ps files under $startdir	
find all *.ps files under $startdir and run ps2pdf for each files with the file path as a argument	
find all *.py (case insensitive) files/directories under dir directory ignoring .git path	
"find all *.py files under and below the current directory and search them for ""xrange"""	
find all *.py files under current directory	
find all *.py files under current directory and run 'perl script.pl' with the file paths as arguments	
find all *.py files under current directory and search for regular expressions taken from the search_terms.txt file	
find all *.py files/directories under current directory	
find all *.rb (regular) files under current directory	
find all *.rb (regular) files under current directory and change their mode to 600	
find all *.rb (regular) files under current directory and count their line numbers	
find all *.rb (regular) files under current directory and count their line numbers ensuring white space safety on file name/path.	
find all *.rb (regular) files under current directory and print them on stdout putting the file name/path in-between two string literals 'hello,' and '!'	
find all *.rb (regular) files under current directory ensuring white space safety and print at most two file names/paths per line	
find all *.rb and *.py files/directories under current directory	
find all *.rb files/directories under current directory	
find all *.rpm files/directories under current directory	
find all *.sh files owned by user vivek	
find all *.so files under $s directory and run doexe command with minimal invocation for those files	
find all *.so files under current directory and search for mysymbol in their symbol tables	
find all *.so files/directories under current directory and run mycommand with the file/directory paths as its argument then search for expectedresult in the output of mycommand	
find all *.so files/directories under current directory and run mycommand with the file/directory paths as its argument, then search for expectedresult in the output	
find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file	
find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command	
find all *.srt files under directory named 'working' and show the first one found	
find all *.swp files/directories under current directory	
find all *.swp files/directories under current directory and print the list to a file named 'rm'	
find all *.tar.gz files/directories under /directory/whatever which were modified more than $days ago	
find all *.tar.gz files/directories under /directory/whatever which were modified more than $days ago and show a message if no files were found	
find all *.tex files/directories in maximum 2 levels down the current directory	
find all *.tex regular files in maximum 2 levels down the current directory	
find all *.tex regular files under current directory	
find all *.texi files in /usr/local/doc	
find all *.txt (case insensitive) files of user root under / directory and show a few lines of output from the beginning	
find all *.txt and *.json files	
find all *.txt and *.json files in current directory	
find all *.txt file (case insensitive) in the entire system and copy them to /tmp/txt	
find all *.txt file and replace old word to new word with sed command	
find all *.txt files except for those on other file systems	
find all *.txt files in directory tree /mnt/msdos suppressing error messages	
find all *.txt files of user tecmint under /home directory	
find all *.txt files on the vfat file system	
find all *.txt files that reside under and below /home/wsunid/	
find all *.txt files under / and print their sizes and paths	
find all *.txt files under /foo and delete them	
find all *.txt files under /foo and print their total size	
find all *.txt files under current directory and copy them to ./tmp	
find all *.txt files under current directory and print their timestamps and paths	
find all *.txt files under current directory that contains the regex 'pattern' and list them with their filenames and matches	
find all *.txt files under current directory that match the regex c|d|z in their names	
find all *.txt files under current directory with their timestamps and paths, sort them and print the last entry only	
find all *.txt files under current directory, change their permission to 666 and copy them to /dst/ directory	
"find all *.txt files under the current directory whose names are not ""file.txt"""	
find all *.txt files/directories in entire file system	
find all *.txt files/directories under current directory	
find all *.txt files/directories under current directory and execute process command for each of them	
find all *.txt files/directories under current directory and execute process for each of them	
find all *.txt files/directories under current directory and execute process once with all of them as arguments	
find all *.txt files/directories under current directory and execute process_one for each of them	
find all *.txt files/directories under current directory and execute the python code 'import sys; print sys.argv[1:]' with the file paths as arguments	
find all *.txt files/directories under current directory and execute the python script hello.py for each of them with the file path as an argument to the script	
find all *.txt files/directories under current directory and execute the python script hello.py with all their paths as arguments	
find all *.txt files/directories under current directory and execute the python script myscript.py with all their paths as arguments to the script	
find all *.txt files/directories under current directory discarding 'permission denied' errors	
find all *.txt files/directories under current directory discarding errors	
find all *.txt files/directories under current directory terminating their names/paths with null character	
find all *.txt files/directories under your home directory	
find all *.txt, *.html files under /basedir that match the case insensitive pattern *company* in their names	
find all *.wav files under current directory that match 'export' in their names and pipe the output to ./calc_space	
find all *.xml files under current directory	
find all *.xml files under current directory, search for '<?xml' in those files and print the paths of the matched files.	
find all *.xml.bz2 files under current directory	
find all *.xml.bz2 files under current directory and run the command find_graph with -build_graph, $i.graph and $i as it's arguments where $i is expanded to each file path	
find all *.zip files under current directory and unzip them in the same directory as the files	
find all *1234.56789* files/directories under current directory	
find all *bar files/directories under current directory	
find all *blue* files/directories under /myfiles	
find all *company* (case-insensitive) files/directories under /basedir with null character as the delimiter	
find all *company* files/directories under /root/of/where/files/are directory	
find all *conf* files recursively under current directory	
find all *conf* files recursively under current directory, search for any lines matching the string 'matching_text' in those files and redirect the output to matching_text.conf.list	
find all *fink* files/directories in entire file system	
find all *fink* files/directories under current directory	
find all *foo files/directories under current directory	
find all *foo files/directories under current directory (error prone)	
find all *foo* files/directories under current directory and copy them to /your/dest	
find all *foobar* files/directories under current directory and copy them to ~/foo/bar	
find all *fstab* files under and below /etc	
find all *gz files under asia and emea directory	
find all *gz files under asia and emea directory and print their names and line counts to file_count.txt	
find all *shp* directories under current directory and move '*' (literal) file/directory inside those directories to shp_all	
find all *shp* directories under current directory and move all regular files inside those directories to ../shp_all/	
find all *shp* directories under current directory and move their contents to ../shp_all/	
find all *shp* files/directories under current directory	
find all *shp* files/directories under current directory and move them to ../shp_all/	
find all *stat files/directories under /usr	
find all *text files/directories under current directory	
find all *weservice* (case insensitive) files under current directory and restart the services provided by them	
find all *~ files/directories under dir and  print an rm command for each of them for deletion	
find all .* files excluding list_files (case insensitive) under current directory	
find all .bak files in or below the current directory and move them to ~/.old.files directory:	
find all .bak files starting from the current directory and delete them	
"find all .c and .c files in the current directory tree that contain ""main("" and copy them to directory test1/"	
"find all .c and .h files in the current directory tree and search them for ""expr"""	
"find all .c, .h files in the current directory tree and search them for string ""expr"""	
find all .core files on the system starting from / and delete them	
find all .gif and .jpg files in the /var/www directory tree	
find all .gif files in the /var/www directory tree	
find all .gif files in the /var/www directory tree that are between 5 kb and 10 kb in size	
find all .gz archives in the /path/to/dir directory tree	
find all .gz archives in the current directory tree	
find all .gz archives in the current directory tree and check if they are valid	
find all .java files  under current directory	
find all .java files starting from the current folder	
find all .java files under and below the current directory	
"find all .java files whose name contains ""message"""	
find all .jpg files in the current directory and below	
find all .jpg files in the current directory and below.	
find all .js files in the $d directory tree whose pathnames do not contain whitespaces	
find all .js files in the current directory tree that do not contain a whitespace	
find all .less files in the current directory tree	
find all .log files in the /var/log directory tree and compress them using bzip2	
find all .mp3 files starting from the current directory	
find all .mp3 files starting from the current directory and delete them	
find all .mp3 files with more than 10mb and delete them	
find all .mp3 files with more then 10mb and delete them from root directory .	
find all .mpg files in the current ditrectory tree and convert them to the mp4 format	
"find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string ""debug ("""	
find all .php files in the current directory tree	
find all .php files starting from the root directory /	
find all .php files starting from the root directory and ignoring /media	
find all .pm, .pl files in /users/tom and search for a pattern in these files and display the matched file names	
find all .pm, .pl files in /users/tom and search for multiple pattern in same files and display the matched file names	
"find all .py files in the current directory except ""setup.py"" and those beginning with ""test_"""	
"find all .rb and .yml files in the /some/path directory tree and replace ""some_phrase"" with ""replacement_phrase"" in them"	
find all .rb files owned by root in the /apps/ folder and below that have been accessed in the last two minutes.	
find all .rpm files and change their permissions to 755	
find all .sh files in or below the current directory and move them to folder ~/back.scripts	
find all .sh files in the current directory tree and remove them	
"find all .sql files in the current directory recursively and apply script ""scriptname"" to them"	
find all .sql files in the current directory recursively and print their path names separated by zeroes	
find all .svn directories under current directory and delete them	
find all .tmp files under and below the /tmp/ directory and remove them	
find all .txt  files list & list the first lines of text files	
find all .txt files except readme.txt	
find all .txt files from current directory , redirecting errors to /dev/null	
find all .txt files in current  directory and rename with  .html .	
find all .txt files in the /home/user directory tree and copy them to /home/backup	
find all .txt files in the /home/user1 directory tree and copy them to /home/backup	
find all .txt files in the current directory tree and edit them with `vim'	
find all .txt files in the current directory tree and save their path names to /tmp/logfile	
find all .txt files in the current directory tree on a bsd system and edit them with `vim'	
find all .txt files in the dir/ directory tree and copy them along with times, permissions, and ownership to dir_txt/	
find all .txt files in the user's home directory and below.	
find all .txt files of user tecmint under /home directory	
find all .txt files under the current directory and below	
find all .txt files under the current directory and below suppressing error messages	
find all .zip files in the current directory tree	
find all .zip files in the current directory tree and unzip them	
find all .zip files in the current directory tree and unzip them deleting the archives on success	
find all .zip files starting from the current directory which are owned by user tommye	
find all /home/folder1/*.txt files and create symlinks appending '_custom_text.txt' in their names	
find all /path/to/check/* regular files without descending into any directory	
find all 0644 permission files/directories under current directory tree and show only the first 10 of them	
find all 1.txt, 2.txt and 3.txt files under current directory and change the permission to 444	
find all 100mb files in file system and delete them using rm command	
find all 100mb+ files and delete them	
find all 15mb files	
find all 15mb files in entire file system	
find all 1us* files/directories under current directory	
find all 2*.data files/directories under jcho directory	
find all 400 permission files under /data directory	
find all 400 permission files under /data directory and change their permission to 755	
find all 400 permission files under /data directory and print 'modifying ' appended with file path for each of them	
find all 400 permission files under /data directory with null character as the delimiter	
find all 400 permission files under /data directory, print 'modifying ' appended with file path for each of them and change their permission to 755	
find all 50mb files	
find all 50mb files in file system	
find all 664 permission files/drectories under current directory tree	
find all 755 permission regular files under current directory tree	
find all 777 permission directories and use chmod command to set permissions to 755	
find all 777 permission directories under current directory and  set permissions to 755	
find all 777 permission files and use chmod command to set permissions to 644	
find all 777 permission files in entire file system and set permissions to 644	
find all 777 permission files/directories under current directory tree	
find all 777 permission regular files and use chmod command to set permissions to 644	
"find all `doc.txt' files in the current directory tree printing ""found"" for each of them"	
find all aliencoders.[0-9]+ files under /home/jassi/ directory	
find all aliencoders.[0-9]+ files/directories under /home/jassi/ directory	
find all broken symlinks in maximum 1 level down the $path directory	
find all broken symlinks including cyclic links under /path/to/search directory	
find all broken symlinks under /path/to/search directory	
find all broken symlinks under current directory	
find all btree*.c files under current directory	
find all build* directories under /var/www/html/ and print all but first 5 appending with the string 'rf '	
find all build* directories under /var/www/html/ and reverse sort them	
find all build* directories under current directory and reverse sort them	
find all c & c++ files in the current directory and save output names to another file	
"find all c source code files from the current directory tree that contain ""keyword"" in their pathnames, ignoring the case"	
find all c, cpp files in current folder	
find all case-insensitive php or pthml files, which whole path does not contain /some/directory case-insensitivily , and excute xgettext which whole name as   parameter	
find all catalina* files/directories under /path/to/search/in	
find all catalina* files/directories under current directory	
find all cdc* files under current directory that were accessed less than 1 day ago and delete the first and last lines from those files	
find all cdc* files under current directory that were accessed less than 1 day ago and delete the first and last lines from those files and count the number of lines in the output	
find all class files or sh script files  in the current folder	
find all configration files in home directory & subtitute permanently in files	
find all configuration files in a folder	
find all css files	
find all css files that do something with html id #content	
find all css files that do something with your html id #content	
find all css files under currenty directory and use sed to edit them	
find all data files in current folder which have not been changed in the last 60 minutes and display their name without extension	
find all dir* files/directories under parent	
find all directories and for each of them, print an mv command to move it to /new/location	
find all directories at level 3 of directory tree $from_dir	
find all directories by the name `httpdocs' on the system	
find all directories containing 'linux' in their names under '/root' directory tree	
find all directories in /path/to/dir/ without going into sub-directories	
find all directories in /path/to/dir/ without going into sub-directories and append a null character at the end of each paths	
find all directories in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print only unique paths	
find all directories in 1 level down the /home directory that have two consecutive vowels in their names and count them	
find all directories in 1 level down the current directory	
find all directories in current directory (non-recursive) excluding . and print a sorted list in the file a	
find all directories in current directory without going into sub-directories	
find all directories in directory tree `httpdocs'	
find all directories in entire file system which are larger than 50kb	
find all directories in level 1 down the $queue directory	
find all directories in maximum 1 level down the $front_element directory, sort them according to modification time and list them excluding the $front_element path from the list	
find all directories in maximum 1 level down the current directory and remove the . entry from the output	
find all directories in maximum 1 level down the current directory that were modified less than 1 day ago	
find all directories in maximum 2 levels down the /tmp directory	
find all directories in maximum 2 levels down the /tmp/test directory	
find all directories in the /data1/realtime directory tree that were last modified more than 5 minutes ago but less than 60 minutes ago	
find all directories in the /data1/realtime directory tree that were modified within the last 60 minutes	
find all directories in the /path/to/base/dir tree	
find all directories in the current directory	
find all directories in the current directory tree	
"find all directories in the current directory tree excluding hidden directories and create them in ""../demo_bkp"""	
find all directories in the current directory tree that are not accessible by all	
find all directories in the current directory tree that do not have `execute' permissions for anyone	
find all directories in the current directory tree that were last modified more than 5 minutes ago but less than 60 minutes ago	
find all directories in the current directory tree whose names do not contain '.' and move their contents to the current directory	
"find all directories in the current directory tree with ""music_files"" in their names"	
"find all directories in the current directory which have the name foo and do not have the extension ""bar"""	
find all directories in the current folder	
find all directories in the current folder and do not search in sub directories	
"find all directories in the current one recursively which have the write bit set for ""other"""	
"find all directories in the current one with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp"	
"find all directories matching pattern ""*log*"" in the current directory tree and print the last 2 lines of their 'ls' listing"	
find all directories matching the regex '.texturedata' in their names under '/path/to/look/in/' directory tree	
find all directories name nasa in the current directory and below.	
"find all directories named ""0"" in the current directory tree and create a single tar archive of their rs* subdirectories"	
"find all directories named ""0"" in the current directory tree and create a tar archive of their rs* subdirectories"	
"find all directories named ""d"" in the ""a"" directory tree"	
"find all directories named ""d"" in the current directory tree"	
"find all directories named ""d"" in the current directory tree and print their parents"	
"find all directories named ""nasa"""	
find all directories named $1 under $home directory tree and remove them	
find all directories named '.texturedata' under '/path/to/look/in/' directory tree	
find all directories named 'files' under current directory and set read-write-execute permission for owner and group and no permission for other for those directories	
find all directories named 'local' in entire file system	
find all directories named 'modules' that don't include any other directory named 'modules'	
find all directories named 'mydir' under 'local' and '/tmp' directory tree	
find all directories named 'octave' under current directory tree	
find all directories named build under the current directory	
find all directories named cvs, and deletes them and their contents.	
find all directories named essbase under /fss/fin	
find all directories named postgis-2.0.0 under / directory	
find all directories on the system whose size is greater than 50k	
find all directories recursively starting from / and count them	
find all directories recursively starting from / and skipping the contents of /proc/, and count them	
find all directories starting from / that have permissions 777	
"find all directories starting from root that contain the string ""99966"" in their names"	
find all directories starting from the current directory	
"find all directories starting from your_starting_directory that contain the string ""99966"" in their names"	
"find all directories that do not contain ""main.cpp"""	
find all directories that have been accessed $ftime days ago under current directory tree	
find all directories that have been modified in the last seven days.	
find all directories that names are 'apt' and display details	
find all directories that names are 'project.images'	
find all directories that names are 'project.images' and display details	
find all directories that start with stat	
find all directories under $1/.hg and set their sgid bit	
find all directories under $d directory and set read-write-execute permission for owner and group and no permission for other for those directories	
find all directories under $folder, take the first fields (dot (.) as the delimiter) from their timestamps and reverse sort them numerically	
find all directories under $path	
find all directories under $root and replace all newlines with : (colon) in the output	
find all directories under $root_dir and show the sub-directories of the directories before the directories themselves	
find all directories under $x directory and set read-write-execute permission for owner and group and no permission for other for those directories	
find all directories under ${1:-.} directory without descending into any sub-directories	
find all directories under '.cache/chromium/default/cache' that are bigger than 100 mb in size excluding single letter directory names	
find all directories under '/nas' directory tree	
find all directories under '/var/www' directory tree excluding '/var/www/web-release-data' and '/var/www/web-development-data' directories and their sub-directories	
find all directories under 'a' directory tree excluding paths containing the directory 'a'	
find all directories under 'project' directory without going into subdirectories that do not match the posix egrep regex $pattern in their paths and are not empty	
find all directories under 'test' directory tree that match the regex '.*/course[0-9.]*' in their paths	
find all directories under 'test' directory tree that match the regex '[course*]' in their paths	
find all directories under 'test' directory tree whose paths match the regex '.*/course[0-9]\.[0-9]\.[0-9]\.[0-9]$'	
find all directories under /directory-path and change their permission to 2755	
find all directories under /fss/fin	
find all directories under /home that doesn't contain a file/directory named 'bin'	
find all directories under /home/me	
"find all directories under /home/me/""$d"""	
find all directories under /home/me/target_dir_1	
find all directories under /home/mywebsite/public_html/sites/all/modules and set their permission to 750	
find all directories under /home/username/public_html/modules  and set their permission to 750	
find all directories under /home/username/public_html/sites/all/modules and set their permission to 750	
find all directories under /home/username/public_html/sites/all/themes and set their permission to 750	
find all directories under /home/username/public_html/sites/default/files and set their permission to 770	
find all directories under /home/username/public_html/themes and set their permission to 750	
find all directories under /home/username/tmp and set their permission to 770	
find all directories under /myfiles directory	
find all directories under /path whose names are 33 characters long	
find all directories under /path/to/base/cache, /path/to/base/tmp, /path/to/base/logs  and change their permission to 755	
find all directories under /path/to/base/dir and change their permission to 755	
find all directories under /path/to/dir (no sub-directories) and archive them (with relative paths excluding the preceding './') into files with .tar.gz extension	
find all directories under /path/to/dir (no sub-directories) and archive them (with relative paths) into files with .tar.gz extension	
find all directories under /path/to/dir and change their permission to 755	
find all directories under /path/to/dir and set their permission to 755	
find all directories under /var/www directory and set their permission to 755	
find all directories under /var/www/some/subset and set their sgid bit	
find all directories under <path> excluding hidden directories and their subdirectories	
find all directories under and below /home/admin/public_html/, and change their permissions to 755	
"find all directories under and below /root that match pattern ""*linux*"", case insensitive"	
"find all directories under and below directory ""folder_name"", and change their permissions to 775"	
find all directories under and below parent_directory	
find all directories under current directory	
find all directories under current directory and change their permission to 500	
find all directories under current directory and change their permission to 644	
find all directories under current directory and change their permission to 700	
find all directories under current directory and change their permission to 755	
find all directories under current directory and make them read, write, and executable for owner & group and remove read-write-execute permission for other	
find all directories under current directory and replace all null delimiters with : in the output then remove the last :	
find all directories under current directory and run  /path/to/script.sh for each of them	
find all directories under current directory and run ./script.sh for each of them	
find all directories under current directory and run a command changing into every directory/sub-directory	
find all directories under current directory and set read & execute permission for group and other for these files	
find all directories under current directory and set read-write-execute permission for owner and group and no permission for other for those directories	
find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and execute permission for other for those directories	
find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and no permission for other for those directories	
find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and other for those directories	
find all directories under current directory and set their permission to 755	
find all directories under current directory and set their permission to 775	
find all directories under current directory excluding  directories (along with their contents) that start with a . (dot) in their names	
find all directories under current directory excluding those which match the regex /\. in their names	
find all directories under current directory having dirname in their name	
find all directories under current directory tree that match the case insensitive regex '^\./course\([0-9]\.\)*[0-9]$' in their paths	
find all directories under current directory tree that were modified $ftime days ago	
find all directories under current directory whose names are 33 characters long	
find all directories under current directory whose paths are 5 characters long	
find all directories under current directory with 755 permission and change their permission to 644	
find all directories under dir whose names are 33 characters long	
find all directories under foldername directory and set their permission to 755	
find all directories under htdocs directory and set their permission to 775	
find all directories under maximum 1 level down the /parent  directory and set their permission to 700 recursively	
find all directories under maximum 1 level down the current directory and set their permission to 700	
find all directories under maximum 1 level down the current directory and set their permission to 700 recursively	
find all directories under media/ directory and change their permission to 700	
find all directories under minimum 1 level down the  $given_dir directory	
find all directories under minimum 1 level down the  $given_dir directory with null character as the delimiter	
find all directories under minimum 1 level down the current directory and set their permission to 755	
find all directories under minimum 1 level down the current directory excluding  directories (along with their contents) that start with a . (dot) in their names	
find all directories under minimum 2 levels down the mydir directory	
find all directories under mydir	
find all directories under path_to_dir directory	
find all directories under present working directory	
"find all directories under the current directory that is on the same filesystem, execute ""/tmp/count_em_$$"" with the directory as an argument, sort the result numerically from least value to greatest value"	
find all directories under var/ directory and change their permission to 700	
find all directories under ~/code and replace all newlines with : in the output then remove the last :	
find all directories under ~/code excluding hidden directories and replace all newlines with : in the output then remove the last :	
find all directories under ~/code excluding hidden directories and their subdirectories and replace all newlines with : in the output then remove the last :	
find all directories under ~/code without descending into hidden directories and print them appended with : (colon)	
find all directories whose name is root in / directory	
find all directories whose name is tecmint in / directory	
find all directories whose status were changed $ftime days ago	
find all directories with 755 permission and change the permission to 700	
find all directories with permissions 777 under and below /var/www/html, and change their permissions to 755	
find all directories with space in their names under current directory and rename them by replacing all spaces with _	
"find all directories with the name ""lib64"" in the usr folder and replace space with ':'"	
"find all directories with the name like ""????-??-??"" and which have not been modified in the last 24 hours in the folder /volume1/photo/ipcam and send them as input to the script in the exec section"	
find all directories with the name root in the entire file system.	
find all directories with the name test in a directory	
find all directory list which have empty list in /tmp directory	
find all directory list which have empty list in /tmp directory .	
"find all duplicate "".jar"" files in the current directory tree"	
find all empty directories in minimum 2 levels down the root directory	
find all empty directories in the current one and delete them	
find all empty directories recursively starting from the current one and delete them	
find all empty directories under $somedir and copy /my/configfile into those directories	
find all empty directories under /tmp	
find all empty directories under /tmp and below	
find all empty directories under a certain path	
find all empty directories under current directory	
find all empty files	
find all empty files (zero byte files) in your home directory and its sub-directories.	
find all empty files in /tmp	
find all empty files in /tmp directory .	
find all empty files in home directory	
find all empty files in the current directory ( empty file = size 0 bytes )	
find all empty files in the current directory and delete them	
find all empty files starting from the current directory and delete them	
find all empty files under /tmp	
find all empty files under /tmp and below	
find all empty files under a certain path	
find all empty folders in the current directory and below	
find all empty regular files in the current directory and below	
find all empty regular files in the current directory tree	
find all es* and fs_* files under current directory	
find all executable files	
find all executable files in /home directory.	
find all executable files in the file system	
find all executable files under current directory and reverse sort them	
find all executable files under current directory and show a few lines of output from the beginning	
find all executable files under the current directory and below	
find all executable files under {} and reverse sort them	
find all executable files under {} and take their names only and reverse sort them	
find all executable symlinks or upvoter-* files under maximum 1 level down the {} directory	
find all executable upvoter-* files (following symlinks) under maximum 1 level down the current directory	
find all executable upvoter-* files/symlinks under maximum 1 level down the {} directory	
find all executables in the current directory tree	
find all executables under /path directory	
find all fglrx-libgl* files under and below debian/fglrx/	
find all fglrx-libglx* files under and below debian/fglrx/	
find all file in current directory with have .c extenstion & have 777 permission . delete then	
find all file name in curent directory ,  -exec will file all file output  awk used here for print only file name .	
"find all file names in the current directory tree that begin with ""headdump"" and write them to file `delete.txt'"	
find all file paths under current directory, perform a reverse numerical sort and show first 10 file paths with their status change time	
find all file paths under current directory, perform a reverse sort and show first 10 file paths with their status change time	
find all file paths under current directory, sort them numerically and show last 10 lines of output with only their paths	
find all file which have more the 2 hard link	
find all file.ext files/directories under /home/kibab directory and print . for each of them	
"find all file.ext files/directories under current directory with ""foobar"" in their paths and copy them into the current directory"	
find all file.ext files/directories under present working directory and print . for each of them	
find all file1 and file9 files/directories under current directory	
find all filename.* files/directories under /root/directory/to/search	
find all filenames ending with .c in the /usr directory tree	
find all filenames ending with .c in the current directory tree	
find all filenames ending with .c in the current directory tree, case insensitive	
find all files  that names are 'apt'	
find all files  that names are 'apt' and display detailed list	
find all files  the current folder which have not been accessed in the last 7 days and which are bigger than 20kb	
find all files & dircetiry in current directory which  have .tmp extension and delete them .	
find all files & directory which have write permission for group , remove the permission from group	
find all files accessed on the 29th of september, 2008, starting from the current directory	
find all files and directories and count them	
"find all files and directories containing ""disc"" in their names"	
find all files and directories in the current directory recursively that contain spaces in their names	
"find all files and directories in the current directory tree except those whose name is ""dirname"", case insensitive"	
"find all files and directories in the current directory tree with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp"	
"find all files and directories in the current directory with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp, preserving path hierarchy"	
"find all files and directories last modified less than a day ago and copy to ""../changeset"" creating directories as needed"	
find all files and directories on the system whose name is `filedir'	
find all files and directories starting from the current directory	
find all files and directories starting from the current directory and excluding hidden files and directories	
find all files and directories that do not match the pattern given as the $controlchars variable	
find all files and directories that have been modified in the last seven days	
find all files and directories that have been modified in the last seven days.	
find all files and directories under current directory	
find all files and directories under current directory without crossing over to other partitions	
find all files and directories under current directory without crossing over to other partitions and archive them into path_to_save.cpio.gz	
find all files and directories under the current directory and display the blocksize and the quoted filename, using the stat command	
find all files and directories under the current directory and display the filesize followed by the filename, using the stat command on freebsd/osx	
find all files and directories under the current directory and display the inode of each one, using printf	
find all files and directories under the current directory and display the inode of each one, using the stat command on freebsd/osx	
"find all files and directories whose names end in "".rpm"" and change their permissions to 755"	
"find all files and directories whose names end in "".rpm"", ignoring removable media, such as cdrom, floppy, etc."	
find all files and directories with permissions 664	
find all files beneath the current directory that begin with the letters 'foo' and delete them.	
find all files beneath the current directory that end with the extension .java and contain the characters string ignoring case.  print the name of the file where a match is found.	
find all files beneath the current directory that end with the extension .java and contain the characters stringbuffer.  print the name of the file where a match is found.	
"find all files called ""file1.txt"" that reside under and below /home/wsunid/"	
"find all files called ""input.txt"" in the current directory tree and remove lines starting with # in them, saving backup copies as input.txt.bak"	
find all files called wp-config.php in the /var/www directory and below	
find all files changed on the 29th of september, 2008, starting from the current directory	
"find all files ending with "".fq"" and give is as input to the fastqc command"	
"find all files ending with ""js.compiled"" in current folder"	
"find all files ending with ""js.compiled"" in current folder (print0 is used to handle files with newlines in their names)"	
"find all files ending with ""js.compiled"" in current folder and rename them."	
find all files except files with '.gz' extension in the current directory non-recursively and compress them with gzip	
find all files excluding *.gz files in the current directory tree and compress them with gzip	
find all files excluding files ending with 'gz', 'tmp' and 'xftp' in their names in the current directory tree and compress them with gzip not preserving timestamp and original name	
find all files files under the current directory except *.txt	
find all files having certain word in its name in the current folder	
find all files ignoring hidden files under current directory and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files	
find all files in  /mydir  and replace every occurrences of <string1> with <string2> in those files invoking sed as few times as possible	
"find all files in ""/home/"" which contain ""string1"", ""string2"" or the host name in its filename"	
find all files in $dir directory (non-recursive) and count them	
find all files in $dir directory without going into sub-directories	
find all files in $dir directory without going into sub-directories and print only their names preceded by 3 spaces	
find all files in /dir1 and print only the filenames (not paths)	
"find all files in /home/kos and below whose names end in "".tmp"""	
find all files in /home/user/ that were created or changed 10 minutes ago	
"find all files in /tmp whose names begin with the current user's name followed by ""."""	
"find all files in /usr/bin and run the ""file"" command on them."	
find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days	
find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print only unique parent directory paths	
find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print their parent directory paths	
find all files in a  directory with default depth size and compress them to lpicpio.2 file	
find all files in and below all subdirectories of the current directory	
find all files in and below the home directory that have been modified in the last 90 minutes	
find all files in and under the current directory that have read, write and execute permissions set for all users.	
find all files in current directory and execute 'echo first; false' for each file	
find all files in current directory and execute command1 and command2 for each file	
find all files in current directory and execute multiple commands for each file	
find all files in current directory and search for 'searchname' in those files	
find all files in current directory and search for 'searchname' in those files and show errors for files that are not directly on the current directory	
find all files in current directory excluding hidden files and put the output into full_backup_dir variable	
find all files in current directory excluding hidden files, archive them and put the output into variable  full_backup_dir	
find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them and put the output into the variable file_changed	
find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them to /media/caca/extract/full$date.cpio	
find all files in current directory that were modified less than 1 day ago excluding hidden files and put the output to full_backup_dir variable	
find all files in current directory that were modified less than 1 day ago, and create cpio archive in $backup_dir	
"find all files in current directory with the extension "".ext"" and remove all ""^m"" in those files"	
find all files in current folder and display the total lines in them	
"find all files in current folder having the name pattern ""some_pattern"" and move them to folder target_location (gnu version)"	
"find all files in current folder having the name pattern ""some_pattern"" and move them to target_location (bsd version)"	
"find all files in current folder having the name pattern ""some_pattern"" and move them to the folder target_location (gnu version)"	
find all files in current folder using name patterns	
find all files in current folder which are bigger than 1 mb and move them to another folder	
find all files in current folder which are bigger than 1 mb and move them to another folder after user confirmation	
find all files in current folder which are bigger than 1mb	
find all files in current folder which are bigger than 270mb and less than 300mb	
find all files in current folder which are exactly 300mb	
find all files in current folder which are less than 300mb	
find all files in current folder which are more than 300mb	
find all files in current folder which have been accessed exactly 10 minutes ago	
"find all files in directory tree ""dirname"""	
find all files in directory tree /tmp/foo and pass them as arguments to script /tmp/echoargs	
find all files in entire file system which are larger than 20000kb	
find all files in entire file system which are larger than 20000kb and show file name/path followed by its size	
find all files in etc which have been changed in the last 1 day	
find all files in etc which have been changed in the last 25 hours	
find all files in home folder which have been modified after a timestamp	
find all files in home folder which have been modified exactly 1 day before	
find all files in maximum 1 level down the current directory that were modified less than 1 day ago	
find all files in maximum 1 level down the current directory that were modified less than 1 day ago from today	
find all files in maximum 2 levels down the current directory	
find all files in the /etc folder that have been modified within the last 30 days and copy them to /a/path/.	
find all files in the /home/ directory tree that are owned by bob	
find all files in the /home/ directory tree that were last accessed more than 7 days ago	
find all files in the /home/ directory tree that were last modified less than 7 days ago	
find all files in the /home/myuser directory recursively that are older than 7 days	
find all files in the /myfiles directory tree following symbolic links	
find all files in the /usr directory tree that are owned by group `staff'	
find all files in the /var/tmp directory tree with uid=1000	
find all files in the `sourcedir' directory	
find all files in the `sourcedir' directory tree	
"find all files in the `work' directory tree, pass them to grep and search for ""profit"""	
find all files in the a direcotry which have been modified in exactly 1 day back	
"find all files in the current directory and below with extension .php and replace ""php"" with ""html"" in their names"	
find all files in the current directory and its sub-directories that have been modified sometime in the last 24 hours.	
find all files in the current directory and its sub-directories that have not been assessed in more than 30 days.	
find all files in the current directory and sub-directories that were accessed after modifying /etc/hosts	
find all files in the current directory and sub-directories that were modified after the /etc/passwd file was modified	
find all files in the current directory do not display the files which are not readable	
find all files in the current directory do not display the files which do not have read permission to all users	
find all files in the current directory excluding those that end with .js or have the words .min or console in their name	
find all files in the current directory recursively that were last modified more than 5 days ago	
"find all files in the current directory recursively with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp"	
"find all files in the current directory recursively with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp, preserving path hierarchy"	
find all files in the current directory that are less than 1 byte size	
find all files in the current directory tree and count them	
find all files in the current directory tree and replace string $1 with string $2 in them	
"find all files in the current directory tree containing ""foo"" in their names"	
find all files in the current directory tree except .html, ignoring .svn directories	
"find all files in the current directory tree ignoring the "".git"" directory"	
find all files in the current directory tree named 'files.ext'	
find all files in the current directory tree that are newer than some_file	
find all files in the current directory tree that are not newer than some_file	
find all files in the current directory tree that match pattern 'a(b*'	
find all files in the current directory tree that were last changed $minutes minutes ago	
find all files in the current directory tree which do not belong to any user	
"find all files in the current directory tree whose names are "".ds_store"""	
"find all files in the current directory tree whose names are "".ds_store"" and delete them"	
"find all files in the current directory tree whose names are ""file_name"", except for those with pathnames matching pattern ""./dirt to be excluded/*"""	
"find all files in the current directory tree whose names are ""yourprogram"", change to the directories they are in, and execute them"	
find all files in the current directory tree whose names begin with '-'	
"find all files in the current directory tree whose names end with the suffix "".keep.$1"", where $1 is the first command line argument, and remove that suffix"	
find all files in the current directory tree whose path names match pattern './sr*sc'	
"find all files in the current directory tree whose pathnames match pattern ""./sr*sc"""	
find all files in the current directory tree whose pathnames match pattern '*/1/lang/en.css'	
find all files in the current directory tree whose size is greater than 1mb	
"find all files in the current directory tree whose size is greater than 1mb, and move them to the ""files"" folder"	
"find all files in the current directory tree whose size is greater than 1mb, and move them to the ""files"" folder with confirmation"	
"find all files in the current directory tree with extension .html and replace all occurences of ""php"" with ""html"" inside them"	
find all files in the current directory tree with size bigger than 5 mb and sort them by size	
find all files in the current directory tree, except git files	
find all files in the current directory which are bigger than 2mb	
find all files in the current directory which are bigger than 4mb	
find all files in the current directory whose size is 24 or 25 bytes.	
find all files in the current directory with default depth size and compress them to lpicpio.1 file	
find all files in the current directory аргумент and its sub-directories with the optional constraints of опция_поиска, значение and/or значение.	
find all files in the current folder and search for a word in them.	
find all files in the current folder that are modified exactly 1 minute ago	
find all files in the current folder that are modified exactly 2 minutes ago	
find all files in the current folder that are not modified in the last 10 minutes	
find all files in the current folder that are not modified in the last 240 hours	
"find all files in the current folder that end with "",txt"""	
find all files in the current folder that have a single letter in their name and have not been modified today	
find all files in the current folder which are bigger than 10bytes	
find all files in the current folder which are bigger than 10mb and less than 50 mb	
find all files in the current folder which are of size 0 bytes.	
find all files in the current folder which end with macs	
find all files in the current folder which have been accessed in the last 30 minutes	
find all files in the current folder which have been modified after /etc/passwd	
find all files in the current folder which have been modified after a specific time stamp and do not search in the subfolders;	
find all files in the current folder which have been modified in the last 24 hours	
find all files in the current folder which have been modified in the last 24 hours and whose file name is of length 1	
find all files in the current folder which have not been accessed in the last 30 days in the current folder	
find all files in the current folder which have not been accessed in the last 7 days or which are bigger than 20kb	
find all files in the current folder which have not been changed in the last 48 hours	
find all files in the current folder which have not been modified today and whose file name is of length 1	
find all files in the current folder which have only the write permission for the others	
find all files in the current folder which start with pro	
find all files in the current folder whose size is less than 50kb	
find all files in the current folder with the permission 777 and modify the permissions as 755.	
find all files in the current user's home directory and its sub-directories with the optional constraints of опция_поиска, значение and/or опция_действия.	
find all files in the directory $directory or below with the permissions specificed by $permissions.	
find all files in the entire file system whose size is more than 100mb	
"find all files in the file system having the name ""filename"""	
find all files in the file system which are modified after the file /tmp/checkpoint	
find all files in the file system which belong to no user or which have no user	
"find all files in the file system which belong to the group users and having the word ""filename"" in their name."	
"find all files in the file system which belong to the user pat and having the word ""filename"" in their name."	
find all files in the file system which have been accessed in the last 24 hours	
find all files in the file system which have no user and no group	
find all files in the file system which have not been accessed in the last 2 days	
find all files in the file system whose size is bigger than 3gb	
find all files in the file system whose size is exactly 2kb	
"find all files in the file system with the permissions 777 and having the word ""filename"" in their name."	
find all files in the file system with the suid bit	
"find all files in the folder ""myfiles"" which are exactly 5 bytes"	
"find all files in the folder ""myfiles"" which have not been accessed in the last 30*24 hours"	
find all files in the folder /etc which have been modified after /tmp/foo	
find all files in the folder /path/to/dir which have been modified between two dates	
find all files in the home directory tree that are owned by another user	
find all files in the home directory tree that are owned by another user and change their ownership to the current user	
find all files in the home directory with open permissions	
find all files in the home folder that are modified in the last 24 hours	
find all files in the home folder that are modified in the last 7 days	
find all files in the home folder which are modified in the last 2 days.	
find all files in the home folder which have been modified between 72 and 96 hours before	
find all files in the level 6 subdirecotries of /usr/src and below, ignoring cvs files	
find all files in your home directory and below that are exactly 100m.	
find all files in your home directory and below that are larger than 100m.	
find all files in your home directory and below that are smaller than 100m.	
find all files in ~/clang+llvm-3.3/bin/ and print 'basename /file/path' for each file	
find all files inside all directories (non-recursive) in /tmp/test directory (recursive) and print the number of files in each directory and also print the file name and directory paths	
find all files inside all directories (non-recursive) in /tmp/test directory (recursive) and print the number of files in each directory and also print the file/directory paths	
find all files inside all directories (non-recursive) in maximum 2 levels down the /tmp/test directory and print the number of files in each directory and also print the file/directory paths	
find all files larger than 100m and delete them	
find all files larger than 20000k	
find all files larger than 20000k and print their names and sizes	
"find all files matching ""abc*"" in the current directory and append ""\tok"""	
"find all files matching ""abc*"" in the current directory and append a column with ""ok"""	
find all files matching pattern '.#*' in the current directory tree	
"find all files matching pattern '.#*' in the current directory tree and execute ""foobar"" for each of them with the file name as an argument"	
"find all files matching shell pattern ""foo/bar"" in the foo directory tree"	
"find all files matching the pattern ""${pattern}"" in their name and execute ${my_command} for each of them with the file path as argument"	
find all files modified less than 5 minutes ago, and page interactively through the output.	
"find all files modified on ""mar 4"" and unzip and search their contents for ""12345"""	
find all files modified on the 7th of june, 2007, starting from the current directory	
find all files more than 700 megabytes	
find all files name passwd in the root directory and all its sub-directories.	
"find all files named ""file.ext"" in the current directory tree and print the path names of the directories they are in"	
"find all files named ""file.ext"" under the current working directory tree and print its filename"	
"find all files named ""file.ext"" within the current folder and print the path where each one is located"	
"find all files named ""filename"""	
"find all files named ""filename"" in the current directory tree, not descending into ""folder1"" directories"	
"find all files named ""foo_bar"" in the current directory recursively"	
"find all files named ""mycprogam.c"" (ignoring the case) and calculate each file's md5sum."	
"find all files named ""something"" in the current folder and below and run them through the ls -l command in a one batch."	
"find all files named ""something"" in the current folder and below and run them through the ls -l command, one by one."	
"find all files named ""test2"" in the current directory"	
"find all files named ""test2"" in the current directory tree"	
find all files named 'aaa.txt' under current directory tree and display their contents	
find all files named 'file' in 1 level down the current directory whose status were changed more than 1 day ago	
find all files named 'file' in 1 level down the current directory whose status were changed more than 1 hour ago	
find all files named 'file' in 1 level down the current directory whose status were changed more than 1 hour ago and redirect the ouput to /tmp.$$	
find all files named 'foo' under current directory tree without descending into directories named 'foo'	
find all files named 'foo' under your home directory and list them with confirmation prompt	
find all files named 'makefile' in the /usr/ports directory tree and count the number of lines in them beginning with use_rc_subr	
find all files named 'makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^master_site.*cpan'	
find all files named 'makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^master_site_subdir.*\.\./.*authors'	
find all files named 'new' under current directory tree and display their contents	
"find all files named 'test' in the current directory tree, not descending into ""test"" directories"	
find all files named 'text.txt' under current directory tree and display their contents	
find all files named `file1' on the system	
find all files named `file1' starting from /	
find all files named `linux' on the system	
find all files newer than httpd.conf under and below the current directory	
"find all files not ending in "".html"""	
find all files of the user with uid=1000	
"find all files on local host whose name contains ""labra"" and copy them to remote  host 11.11.11.11 connecting as ssh user ""masi"" and copying the files to the desktop directory this user's home directory - this will not work with file/path names containing spaces."	
find all files on smbfs mounts and print its information and file type	
find all files on the system that are larger than 600 mb	
find all files on the system that are world writable	
find all files on the system that are world writeable	
find all files on the system that have been modified in the last 10 minutes	
find all files on the system whose names are 'autoload.php'	
find all files on the system whose names are 'composer.json'	
"find all files on the system whose names are 'composer.json' and search them for ""drush"""	
find all files on the system whose names are 'drush'	
find all files on your system that are world writable	
find all files owned by group `group2'	
find all files owned by group `root' in the current directory tree and change their user to `temp'	
find all files owned by the user daniel in the current directory and below.	
find all files owned by user `comp'	
find all files owned by user vivek	
find all files read less than 1 minute ago	
find all files recursively starting from / that have been modified in the past 30 minutes and list them	
"find all files recursively which end in "".php"""	
find all files residing in /home/dm/video or below that were changed less than 7 days ago	
find all files residing in /home/dm/video or below that were last changed at least 10 days ago	
find all files starting from / that belong to user1	
"find all files starting from / whose names end with "".rpm"" and change their permissions to 755"	
find all files starting from the current directory that contain '.java' in their pathnames	
find all files starting from the current directory that match regular expression '.*message.*\.java'	
find all files starting from the current directory which are exactly 100mb in size	
find all files starting from the current directory which are larger than 100mb	
find all files starting from the current directory which are owned by the user tommye	
find all files starting from the current directory which are smaller than 100mb	
find all files starting with capital letter in the current folder	
find all files that are exactly 50 bytes	
find all files that are less than 50 bytes	
find all files that are modified in last 3 days	
find all files that are readable and writable by their owner	
find all files that are readable or writable by their owner	
find all files that are set group id to 10	
find all files that are set group id to staff	
find all files that are set user id to root	
find all files that aren't owned by user www-data	
find all files that belong to group developer	
find all files that belong to group root	
find all files that belong to root user	
find all files that belong to user root	
find all files that belongs to group 'root' under / directory and show a few lines of output from the beginning	
find all files that belongs to group developer under /home directory	
find all files that belongs to user root under / directory and show a few lines of output from the beginning	
find all files that belongs to user tecmint under /home directory	
find all files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory without descending into other partitions	
find all files that do not have execute permission to all	
find all files that do not have read permission to all	
find all files that have additional permissions	
find all files that have been modified in the last seven days.	
find all files that have been modified yesterday	
find all files that have been used more than two days since their status was last changed	
find all files that have either a .php or a .js extension	
find all files that have the suid bit set	
find all files that have wrong permission	
find all files that matches both the case insensitive patterns *$1* and *$2* under /home/musicuser/music/ directory and execute mplayer for each of them	
find all files that names are dir-name-here	
find all files that names are filename and open in nano text editor	
find all files that names are game	
find all files that were last accessed less than7 days ago under /home	
find all files that were last accessed more than 7 days ago under /home	
find all files that were last modified less than7 days ago under /home	
find all files that were modified between 90 to 100 days ago in home directory and delete then .	
find all files that were modified later than ordinary_file in the current directory and its sub-directories.	
find all files that were not accessed in the past 100 days	
find all files throughout the entire file hierarchy with the optional constraints of опция_поиска, значение and/or опция_действия.	
find all files under  current directory and rename them by replacing all white spaces with _	
"find all files under ""/path"" that do not contain a ""."" and append "".jpg"" to their file name"	
"find all files under ""/usr"""	
find all files under $1 directory excluding hidden files and append a null character at the end of each of their paths	
find all files under $1 not matching the regex '.*/\..*' and execute hashmove on each of them with the file path as its argument	
find all files under $1, calculate their md5sum and redirect the result to checksums.md5	
find all files under $1, calculate their md5sums and redirect the results to $1__checksums.md5	
find all files under $d directory (no sub-directories) that are executable by owner and print only their names	
find all files under $d directory and set read-write permission for owner and group and no permission for other for those files	
find all files under $dir	
find all files under $dir directory	
find all files under $musicdir directory	
find all files under $root_dir	
find all files under $source_dir that match the regex .*\.\(avi\|wmv\|flv\|mp4\) in their paths and print them with null character as the delimiter	
find all files under $source_dir that match the regex expanded by $input_file_type in their paths	
find all files under $x directory and set read-write permission for owner and group and no permission for other for those files	
find all files under $your_dir	
find all files under ${searchpath} that match the regex ${string1}.*${string2}.*${string3}  in their contents where ${string1} etc.. will be expanded	
"find all files under ${searchpath} that match the regex '""${string1}"".*""${string2}"".*""${string3}""' (${string1} ... won't be expanded) in their contents"	
find all files under 'dir' directory and print their md5 sums into file.txt	
find all files under 'dir' directory with white space safety in their paths and print their md5 sums into file.txt	
find all files under ./lib/app and redirect their sorted list to myfile	
find all files under ./lib/app and sort them	
find all files under ./lib/app and sort them, then print their contents to myfile	
find all files under /home that belong to user tecmint	
find all files under /home/feeds/data without descending into *def/incoming* and *456/incoming* paths	
find all files under /home/myfolder that match the regex 'abc.*def.*ghi' in their contents	
find all files under /home/mywebsite/public_html/sites/all/modules and set their permission to 640	
find all files under /home/username/public_html/modules  and set their permission to 640	
find all files under /home/username/public_html/sites/all/modules and set their permission to 640	
find all files under /home/username/public_html/sites/all/themes and set their permission to 640	
find all files under /home/username/public_html/sites/default/files and set their permission to 660	
find all files under /home/username/public_html/themes and set their permission to 640	
find all files under /mnt/naspath directory without descending into .snapshot directory that were modified in last 24 hours with null character as the delimiter	
find all files under /mountpoint and below which have hard links	
find all files under /myfiles with 647 permission	
find all files under /myfiles with read-write access for others	
find all files under /path and below executable by `group' or `other'	
find all files under /path and below writable by `group' and `other'	
find all files under /path and below writable by `group' or `other'	
find all files under /path and calculate their md5sum	
find all files under /path/to/base/dir and change their permission to 644	
find all files under /path/to/dir and change their permission to 644	
find all files under /path/to/dir and set their permission to 644	
find all files under /path/to/dir that were modified less than 7 days ago and show only first several lines of output	
find all files under /path/to/dir that were modified less than 7 days ago with null character as the delimiter	
find all files under /path/to/file which are greater than 25600kb	
find all files under /path/to/input/ that match the case insensitive string literal 'spammer@spammy.com' in their contents	
find all files under /path/you/need, calculate their md5sums and redirect the results to checksums.md5	
find all files under /somefolder matching the case insensitive regex '\(.*error.*\)\|\(^second.*\log$\)\|\(.*ffpc\.log$\)' in their paths	
find all files under /somefolder matching the extended case insensitive regex '\./(.*\.error.*|second.*log|.*ffpc\.log)$' in their paths	
find all files under /somefolder matching the extended regex '\./(.*\.error.*|second.*log|.*ffpc\.log)$' in their paths	
find all files under /somefolder matching the pattern expanded by $file_pattern in thier names	
find all files under /usr/tom that matches the extended regex '*.pl| *.pm'   in their names and also matches the regex <pattern> in their contents	
find all files under /var/www directory and set their permission to 644	
find all files under and below /dir that were accessed less than 60 minutes ago	
find all files under and below /dir that were changed or created less than 60 minutes ago	
find all files under and below /dir that were modified less than 60 minutes ago	
find all files under and below the current working directory with the word california in the file	
find all files under and below the current working directory with the word california in the file (case insensitive), and count the number of lines in the output	
find all files under and below the current working directory with the word california in the file, and count the number of lines in the output	
find all files under current directory	
find all files under current directory and append a null character at the end of each of their paths	
find all files under current directory and change their permission to 400	
find all files under current directory and change their permission to 600	
find all files under current directory and change their permission to 644	
find all files under current directory and count the output line number	
find all files under current directory and make them read-only for owner, read & writable by group and remove read-write-execute permission	
find all files under current directory and pipe their contents to the wordfrequency command and then search for 'yourword' in the output	
find all files under current directory and print only the filenames (not paths)	
find all files under current directory and print their md5 sums	
find all files under current directory and print them appending a null character at the end of each file paths	
find all files under current directory and print them by removing the leading ./ in their paths	
find all files under current directory and replace the match of the regex '^.*/s' with 's' in every line of the output	
find all files under current directory and run /tmp/clever.sh for each of them with each file path as an argument	
find all files under current directory and run the command fromdos for each of them with the file path as argument	
find all files under current directory and search for 'something' in those files	
find all files under current directory and set read permission for group and other for these files	
find all files under current directory and set read-write permission for owner and group and no permission for other for those directories	
find all files under current directory and set read-write permission for owner, read permission for group and no permission for other for those files	
find all files under current directory and set read-write permission for owner, read permission for group and other for those directories	
find all files under current directory and set their permission to 775	
find all files under current directory and show their file information	
find all files under current directory and upload them to https://path_to_nexus/	
find all files under current directory and write the paths without the leading ./ in the file outputfile	
find all files under current directory excluding hidden directories	
find all files under current directory excluding hidden files	
find all files under current directory excluding the $output file, calculate their md5sum with $md5sum_options options and redirect the result to $output	
find all files under current directory matching either of the patterns 'error.[0-9]*', 'access.[0-9]*', 'error_log.[0-9]*', 'access_log.[0-9]*', 'mod_jk.log.[0-9]*' in their names	
find all files under current directory matching the pattern '[error,access,error_log,access_log,mod_jk.log]*.[0-9]*' in their names	
find all files under current directory matching the posix-egrep type regex '^.*/[a-z][^/]*$'  in their names	
find all files under current directory matching the posix-egrep type regex '^.*/[a-z][^/]*$' in their names with locale set to default c locale	
find all files under current directory matching the regex '.*\(\(error\|access\)\(_log\)?\|mod_jk\.log\)\.[0-9]+' in their paths	
find all files under current directory that are larger than 10kb in size	
find all files under current directory that are read less than 1 minute ago	
find all files under current directory that match the case insensitive regex .\|./.git and replace (all occurrences) the text matching the case insensitive regex expanded by $1 with $upper2 in these files	
find all files under current directory that match the case insensitive regex .\|./.git and replace (all occurrences) the text matching the regex expanded by $lower1 with $lower2 in these files	
find all files under current directory that match the case insensitive regex .\|./.git and replace all occurrences of the regex $1 (literal) with $upper2 (literal) in these files	
find all files under current directory that match the case insensitive regex .\|./.git and replace the text matching the regex '$lower1'  (literal) with $lower2 (literal)in these files	
find all files under current directory that match the regex ^.*666$ in their names	
find all files under current directory that were modified in the last 24 hours	
find all files under current directory that were modified in the last 24 hours and also include the files that were modified in less than 1 day ago	
find all files under current directory that were modified less than 1 day ago	
find all files under current directory that were modified more than 1 day ago	
find all files under current directory that were modified more than 7 days ago and delete them	
find all files under current directory tree named 'filename_regex' excluding '.svn' and '.pdv' directories and files then search for the case insensitive pattern 'your search string' in those files	
"find all files under current directory whose file type description contains ""image"", display only path to each file."	
"find all files under current directory whose file type description contains ""image"", display the paths to files and file type descriptions."	
find all files under current directory whose status was changed less than 3 days ago and show last 5 lines of output	
find all files under current directory whose status was changed less than 3 days ago, sort them and show last 5 lines of output with only their paths	
find all files under current directory with 755 permission and change their permission to 644	
find all files under current directory with their size and paths, reverse sort them numerically, then print first 4 entries	
find all files under current directory with their size and paths, reverse sort them numerically, then print the 2nd field (with space as the delimiter) of the first 4 entries	
find all files under current directory with their size and paths, reverse sort them numerically, then print the first 4 entries by removing all matches to the regex [0-9]+\s from each line of the output	
find all files under current directory with their timestamp and paths and print a sorted list	
find all files under current directory without descending into .git directory and replace the match of the regex \q$1\e with \l$2\e in those files where $1 and $2 will be expanded in the current shell	
find all files under current directory without descending into .snapshot directory that were modified in last 24 hours with null character as the delimiter	
find all files under current directory, calculate their md5sum	
find all files under current directory, calculate their md5sum and print each of the hash and file name to filename-hash.md5 files	
find all files under current directory, calculate their md5sum and print each of the outputs to filename.md5 files	
find all files under current directory, calculate their md5sum and print the output to md5sums	
find all files under dir and calculate their md5sum and save the output to dir.md5	
find all files under directory tree /path/to/dir whose permissions are not 644	
find all files under foldername directory and set their permission to 644	
find all files under images directory	
find all files under mainfolder directory and redirect the output to outputfle	
find all files under maximum 1 level down the ./subfolder and ./subfolder/*/  paths	
find all files under media/ directory and change their permission to 600	
find all files under minimum 1 level down the current directory	
find all files under path_to_dir	
find all files under relative/path/to/dir, calculate their md5sum and redirect the result to sums.md5	
find all files under the /etc directory and display any ip address patterns in them	
find all files under the /etc directory and display ip address patterns in them	
find all files under the /etc/sysconfig directory that were accessed in the last 30 minutes	
"find all files under the current directory and copy their permissions to the same file in ""../version1"""	
"find all files under the current directory that are not the same file as ""/home/nez/file.txt"""	
"find all files under the current directory that end in ""foo"" and execute somecommand on each quoted filename"	
"find all files under the current directory that end in ""foo"" and, using xargs, execute somecommand once for each filename found"	
"find all files under the current directory whose filenames are not ""file.txt"", ignoring the case"	
"find all files under the current directory whose pathnames do not end with ""video"", ignoring the case"	
find all files under the current directory, filtering the output through a regular expression to find any lines that contain the word foo or bar.	
"find all files under the current directory, redirecting error messages to the output and filtering any lines containing the text ""permission denied"", writing the remaining output to some_file"	
find all files under the current folder except dir1 dir2 dir3  folder	
find all files under trunk directory and upload them to https://path_to_nexus/trunk/	
find all files under var/ directory and change their permission to 600	
find all files under ~/code that are executable by owner without descending into hidden directories and print their parent directories appended with : at the beginning and remove all newlines and the last : (colon)	
find all files which  are accessed after modifying /etc/passwd files.	
find all files which  begin with 'a' or 'b' from current directory downwards and print them.	
find all files which belong to user lal and change their ownership to ravi	
find all files which have 211028 inode number in current directory then locating and renaming unprintable directories	
find all files which name contain 'foo' and path is not dir1 or dir2	
find all files whose filename does not end with *.html.	
"find all files whose name or type description includes ""text"", display only paths to files."	
find all files whose names begin with 'makefile' at the /usr/ports directory tree's level 3 and count the number of lines with noportdocs or noportexamples in them.	
find all files whose names begin with 'makefile' in the /usr/ports directory tree and count how many of them contain 'qmakespec'	
find all files whose names begin with 'makefile' in the /usr/ports directory tree and count how many of them contain 'qtdir'	
find all files whose names begin with 'makefile' in the /usr/ports directory tree and count the number of lines in them containing ^m	
find all files whose names contain 'patch-' in the /usr/ports directory tree and count the number of lines with ^m in them	
find all files whose names contain the string 'xpilot' which exist within '/usr/local/games'	
"find all files whose names do not begin with ""zsh"" on ext3 file systems"	
"find all files whose names end with ""macs"" in and below the current directory"	
"find all files whose names end with ""~"" in the /home/peter directory tree, following symlinks, and delete them"	
find all files whose owner is `user1'	
find all files whose permission are 777	
find all files with '.conf' extension under '/etc' directory going into at most 2 level deep and show the last 10 of them	
find all files with '.conf' extension under '/etc' directory tree that have been modified in the last 30 minutes	
find all files with '.db' extension (case insensitive) that belong to user 'exampleuser' and were modified exactly 7 days ago under '/home' directory tree	
find all files with '.jpg' extension in the current directory ignoring sub-directories and archive them to a file named jpeg.tgz	
find all files with '.txt' (case insensitive) extension under $dir directory non-recursively and sort them numerically	
find all files with '.txt' extension under '/home/my_dir' dirctory tree and display the number of lines in these files	
find all files with 644 permission and change the permission to 664	
find all files with extension .aac in the /home directory tree	
"find all files with name ""file.ext"" under the current working directory tree and print each full path directory name"	
find all files with name ending with .txt and display only the filenames without full paths	
find all files with pattern` '*.mp3'	
find all files with pattern` '*.mp3' and send output into nameoffiletoprintto file	
"find all files with pattern` '*song*abc2009*.jpg' and replace ""abc2009"" with ""def2010"""	
find all files with space in their names under current directory	
find all files with the extension jpg regardless of case	
find all files with the first letter “e” or “f” and last one x in /usr/bin directory:	
"find all files with the name ""myprogram.c"" in the current directory and all of it's sub-directories."	
"find all files with the name ""myprogram.c"" in the current directory and its sub-directories while ignoring the case of the file name."	
find all files with the suid bit set	
find all files with the suid bit set beginning with the root directory	
find all files with the suid bit set, starting from /	
find all files without 777 permision	
find all files you have modified in the last two days	
find all files, folders, symlinks, etc in the current directory recursively	
"find all files, folders, symlinks, etc matching pattern ""*.php"" in the current directory recursively"	
"find all files, starting from / but ignoring removable media, whose names end with "".rpm"""	
find all files/directoires that were modified more than 3 days ago under $dir directory tree	
find all files/directores that are newer than /etc/motd and conain the string 'top' at the beginning of their names under user's home directory tree	
find all files/directores under '/usr/local' directory tree that case insensitively contain the word 'blast' in their names	
find all files/directores under '/usr/local' directory tree that contain the word 'blast' in their names	
find all files/directores under /etc and run the file command on each of them	
find all files/directores under /etc filter them by searching for 'test' in their name and run the file command on each of them	
find all files/directories  under  /eserver6 directory and follow symlinks if needed	
find all files/directories 1 level down the current directory and redirect the sorted output to file a	
find all files/directories 1 level down the current directory that are enlisted in file 1	
find all files/directories 1 level down the ~/bin/filesdvorak/ directory and redirect the sorted output to file b	
find all files/directories case insensitively containing 'xt' in their names under '/etc' directory tree	
find all files/directories containing 'blah' (case insensitive) in their names that were modified in less than 2 days ago uder current directory tree	
find all files/directories containing 'farm' in their names under '/usr/share' directory tree	
find all files/directories containing 'foo' in their names under current directory tree	
find all files/directories containing the case insensitive string something' in their names under current directory tree	
find all files/directories excluding paths that match '.git' or '.gitignore'	
find all files/directories following symbolic links under current directory tree that are owned by 'root' user	
find all files/directories following symlinks under /path/to/dir/* paths and print the timestamp in ymdhms format along with their paths	
find all files/directories greater than 100mb and print their list along with their size in /root/big.txt file	
find all files/directories ignoring *~ files/directories without descending into .snapshot directory with null character as the delimiter	
find all files/directories in 1 level down the current directory	
find all files/directories in all paths expanded by the glob pattern *	
find all files/directories in current directory and execute multiple anded commands (cmd1 and cmd2) for each file	
find all files/directories in current directory and execute multiple commands (cmd1, cmd2) for each file/directory	
find all files/directories in current directory and execute myscript for each of them	
find all files/directories in current directory and execute myscript with minimal invocation for those files/directories	
find all files/directories in current directory and execute the script itself with minimal invocation for those files/directories	
find all files/directories in current directory and run the command 'command' on each of them invoking the command as few times as possible	
find all files/directories in directories/files taken from the glob pattern '/folder/path/*' recursively that have not been modified in the last 2 hours and delete them	
find all files/directories in directories/files taken from the glob pattern '/tmp/test/*' recursively that have not been modified from the start of the day	
find all files/directories in directories/files taken from the glob pattern '/tmp/test/*' that were modified within the last day (day counted from today)	
find all files/directories in entire file system for which owner has at least read/write permissions, or the group has at least read permission, or others have at least read permission	
find all files/directories in entire file system for which owner has read/write/execute permissions, or the group has at least execute permission, or others have at least execute permission	
find all files/directories in entire file system less than 50 bytes	
find all files/directories in entire file system more than 700 megabytes	
find all files/directories in entire file system that are exactly 50 bytes	
"find all files/directories in entire file system that are owned by ""shadow"" group"	
"find all files/directories in entire file system that are owned by ""syslog"" user"	
"find all files/directories in entire file system that have  ""write"" bit set for either the owner, the group, or others"	
find all files/directories in entire file system that match the pattern '<name_pattern>' in their names and print a sorted list of their unique parent directory paths	
find all files/directories in entire file system with 644 permission	
find all files/directories in level $i down the current directory with all positional parameters appended with the find command	
find all files/directories in level 1 down the $queue directory with all positional parameters appended with the find command	
find all files/directories in level 2 down the current directory	
find all files/directories in maximum 1 level down the current directory which do not have only read permission for 'other'	
find all files/directories in the entire file system and redirect the output to masterfilelist.out file	
find all files/directories in the paths expanded by the glob pattern '.*'	
find all files/directories matching the regex .*sql.*	
"find all files/directories matching the regex pattern "".*\\.rb$"" under current directory"	
find all files/directories named $something under current directory	
find all files/directories named '.todo' under $storagefolder directory tree and print the parent directory names	
find all files/directories named '.todo' under $storagefolder directory tree and print their parent paths	
find all files/directories named 'apt' in the entrie filesystem	
find all files/directories named 'articles.jpg' under '/home/username/public_html/images' directory tree	
find all files/directories named 'articles.jpg' under 'images' directory tree	
find all files/directories named 'articles.jpg' under current directory tree	
find all files/directories named 'com.apple.syncedpreferences.plist' (case insensitive) under ~/library directory tree	
find all files/directories named 'date' under /usr	
find all files/directories named 'desktop' under current directory	
find all files/directories named 'document' in maximum 4 levels down the '/usr' directory	
find all files/directories named 'document' in the entire filesystem	
find all files/directories named 'document' in the root filesystem partition	
find all files/directories named 'file' and print them with null character as the delimiter instead of newline	
find all files/directories named 'file' without descending into directories with the same name under current directory tree	
find all files/directories named 'file1' under current directory tree	
find all files/directories named 'file_name' under current directory tree	
find all files/directories named 'filename' that belong to user 'username' and group 'groupname' in the entire filesystem	
find all files/directories named 'findcommandexamples.txt' (case insensitive) in the entire filesystem	
find all files/directories named 'findcommandexamples.txt' that belong to the user 'root' in the entire filesystem	
find all files/directories named 'findcommandexamples.txt' under '/root' directory tree	
find all files/directories named 'foo' in the entire filesystem	
find all files/directories named 'foo' under current directory tree without descending into directories named 'foo'	
find all files/directories named 'foo.bar' in the entire filesystem	
find all files/directories named 'foo.bar' under './dir1' and './dir2' directory trees	
find all files/directories named 'foo.rb' under current directory tree	
find all files/directories named 'fprintf.c' under '/usr/src' directory tree	
find all files/directories named 'game' under current directory tree	
find all files/directories named 'java' under /usr directory	
find all files/directories named 'javac' under current directory	
find all files/directories named 'my.txt' in the entire filesystem	
find all files/directories named 'myfile' under your home directory	
find all files/directories named 'openssl' under current directory tree without printing 'permission denied' error messages	
find all files/directories named 'pattern' under current directory tree	
find all files/directories named 'photo.jpg' (case insensitive) under current directory tree	
find all files/directories named 'photo.jpg' under current directory tree	
find all files/directories named 'photo?.jpg' under current directory tree	
find all files/directories named 'photoa.jpg' under current directory tree	
find all files/directories named 'query' (case insensitive) under current directory	
find all files/directories named 'query' (case insensitive) under current directory tree	
find all files/directories named 'query' under current directory	
find all files/directories named 'query' under current directory tree	
find all files/directories named 'test' under current directory tree	
find all files/directories named 'testfile.txt' under current directory tree	
find all files/directories named 'text' under current directory	
find all files/directories named 'top' (case insensitive) in the entire filesystem	
find all files/directories named 'top' in the entire filesystem	
find all files/directories named 'vimrc' in the entire filesystem	
find all files/directories named 'waldo' under 'books' directory tree that is located in user's home directory	
find all files/directories named 'имя_файла' in the entire filesystem	
find all files/directories named file in 2 and 3 levels down the current directory	
find all files/directories named file in minimum 4 levels down the current directory	
find all files/directories named file1 in maximum 2 levels down the current directory	
find all files/directories named file1 under current directory	
find all files/directories named modules under current directory	
find all files/directories named modules under current directory and list them twice	
find all files/directories named orm.properties in entire file system	
find all files/directories named orm.properties under  /eserver6 directory	
find all files/directories named orm.properties under  /eserver6/share/system/config/cluster directory	
find all files/directories named orm.properties under current directory	
find all files/directories named root under current directory and copy them to newroot	
find all files/directories newer than ttt or owned by user 'wn' in entire file system	
find all files/directories not with the name 'query_to_avoid' under current directory	
find all files/directories owned by the user 'bob' under '/home' directory tree	
find all files/directories owned by user 'joebob' under '/some/directory' directory tree	
find all files/directories owned by user 'michel' under current directory	
find all files/directories starting with 'app-' and ending with '.log' in their names and have been modified in the last 5 minutes	
find all files/directories starting with 'onlyme' in their names under current directory tree in minimum 1 level deep	
find all files/directories starting with 'readme' (case insensitive) under '/usr/share/doc' directory tree	
find all files/directories startring with 'onlyme' in their names under current directory without going into sub-directories	
find all files/directories that are bigger than 100 bytes under '/home/apache' directory tree	
find all files/directories that are newer than 'backup.tar.gz' by modification time	
find all files/directories that are newer than 'ttt' by modification time or owned by the user 'wnj' in the entire filesystem	
find all files/directories that are not newer than jul 01 by modification time	
find all files/directories that are owned by user 'dave' under current user's home directory tree	
find all files/directories that are owned by user 'eric' under current directory tree	
find all files/directories that are owned by user 'takuya' under current directory tree	
find all files/directories that are owned by user 'wnj' and are newer than 'ttt' by modification time in the entire filesystem	
find all files/directories that belong to the group 'accts' under '/apps' directory tree	
find all files/directories that belong to the group 'audio' under '/dev' directory tree	
find all files/directories that belong to the group 'staff' under '/usr' directory tree	
find all files/directories that contain 'packet' (case insensitive) in their names excluding directories that are bigger than 1500 bytes in size	
find all files/directories that contain 'target' (case insensitive) in their names under current directory no-recursively	
find all files/directories that contain the string literal '$version' in their names under current directory tree	
find all files/directories that contain the string literal '`$version`' in their names under current directory tree	
find all files/directories that do not belong to any user under '/home' directory tree	
find all files/directories that do not contain 'photo' in their names under current directory tree	
find all files/directories that have read, write, execution permission for user and belong to the user 'my_user' under current directory tree	
find all files/directories that start with 'a1a2' and end with 'txt' in their names and move their parent directories to '/home/spenx/dst/' directory	
find all files/directories that start with 'onlyme' in their names under maximum 2 levels down the current directory	
find all files/directories that start with 'readme' (case insensitive) in their names under '/usr/share/doc' directory tree	
find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree	
find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree and show them by paging through one screenful at a time	
find all files/directories that start with 'test' in their names under current directory tree	
find all files/directories that were modified after february 1st under '/usr' directory tree	
find all files/directories that were modified more than 2 days ago and redirect the list to ~/output.file	
find all files/directories under  current directory and rename them by replacing all blank spaces with _ in their paths	
find all files/directories under $1 which have at least execute permission for their owner and set execute permission for group for these files/directories	
find all files/directories under $1 which have at least read permission for their owner and set read permission for group for these files/directories	
find all files/directories under $1 which have at least write permission for their owner and set write permission for group for these files/directories	
find all files/directories under $dir directory	
find all files/directories under $dir directory tree which have been modified in the last 3 days	
find all files/directories under $something directory	
"find all files/directories under $target_dir directory tree matching the posix extended regular expression \"".*/$now.*\"" (where $now is a variable) and save the output in file $file_list"	
find all files/directories under ${curr_dir} directory	
find all files/directories under '/abs/path/to/directory' directory non-recursively that match the pattern '.*invalidtemplatename.*' in their names	
find all files/directories under '/directory_path' directory tree that have been modified within the last day	
find all files/directories under '/etc' directory tree that are greater than 5mb and print their sizes and names	
find all files/directories under '/etc' directory tree that have been modified after '/etc/motd'	
find all files/directories under '/home/exampleuser/' directory tree whose names end with 'conf' and were modified exactly 3 days ago	
find all files/directories under '/home/user/' directory tree whose status was changed exactly 10 minitues ago	
find all files/directories under '/home/user/' directory tree whose status were changed 10 minutes ago	
find all files/directories under '/usr' directory tree that have been modified exactly 5 minutes ago	
find all files/directories under '/usr' directory tree that have not been modified in the last 356 days counting days from today	
find all files/directories under '/usr/local' containing 'blast' (case insensitive) in their names	
find all files/directories under '/usr/local/games' directory tree that contain the string 'xpilot' in their names	
"find all files/directories under '/usr/share/data' directory tree that match the posix extended regex "".*/20140624.*"" in their paths and save the list to '/home/user/txt-files/data-as-of-20140624.txt'"	
find all files/directories under '/usr/share/doc' directory tree that contain 'readme' (case insensitive) at the beginning of their names	
find all files/directories under '/usr/share/doc' directory tree whose name start with 'readme'	
find all files/directories under '/var/log' directory tree that bave been modified today (from the start of the day)	
find all files/directories under '/var/tmp' directory tree that belong to a user with user id 1000	
find all files/directories under 'a' directory tree excluding directory 'a/a' and all of it's contents	
find all files/directories under 'a' directory tree excluding the paths containing the directory 'a'	
find all files/directories under 'my key phrase' directory	
find all files/directories under 'my key phrase' directory and redirect the output to mylist.txt	
find all files/directories under .. directory and copy them to ~/foo/bar	
find all files/directories under ./var/log directory	
find all files/directories under /export/home/someone directory in a remote host (somehost) and upload the files/directories to ftp://somehost/tmp/	
find all files/directories under /home/baumerf/public_html/ that were modified less than 60 minutes ago excluding *.log files/directories	
find all files/directories under /home/baumerf/public_html/ that were modified less than 60 minutes ago excluding error_log files/directories	
find all files/directories under /home/bozo/projects directory that were modified 1 day ago	
find all files/directories under /home/feeds/data directory	
find all files/directories under /home/foo/public_html/ that were modified less than 60 minutes ago	
find all files/directories under /myfiles following symlinks if needed	
find all files/directories under /myfiles that are 2560 bytes in size	
find all files/directories under /myfiles that were accessed more than 30 days ago	
find all files/directories under /myfiles that were modified 2 days ago	
find all files/directories under /non-existent/directory directory with ~/bin/find	
find all files/directories under /path directory that were modified more than 30 minutes ago	
find all files/directories under /path/to/dir and set directory permission to 0755 and file permission to 0644	
find all files/directories under /path/to/dir/* paths and print the timestamp along with their paths and stat them	
find all files/directories under /path/to/dir/* paths and print the timestamp in ymdhms format along with their paths and object of symlinks	
"find all files/directories under /path/to/files/* paths and print the timestamp in ymdhms format along with their paths and object of symlinks, stat them and apply the sed replacement ""s/(.*\|)([0-9]{4})\-([0-9]{2})\-([0-9]{2}) ([0-9]{2})\:([0-9]{2})\:([0-9]{2}\.[0-9]{9}).*/\1\2\3\4\5\6\7/g"" on the output"	
find all files/directories under /proc and run ls command on each.	
find all files/directories under /usr/tom which matches the extended regex '*.pl| *.pm'  in their names	
find all files/directories under /var/log directory	
find all files/directories under /var/www/some/subset and change their owner and group to www-data	
find all files/directories under _cache_* directories	
find all files/directories under current /export/home/someone directory and upload them to ftp://somehost/tmp/	
find all files/directories under current directory	
find all files/directories under current directory and append a null character at the end of each path	
find all files/directories under current directory and count the number of lines for the output	
find all files/directories under current directory and print only 2nd field from output delimited by '/'	
find all files/directories under current directory and print their paths	
find all files/directories under current directory and print them	
find all files/directories under current directory and print them twice in each line	
find all files/directories under current directory and print them with newline as the delimiter	
find all files/directories under current directory and put the output into full_backup_dir variable	
find all files/directories under current directory and run <script> for each of them	
find all files/directories under current directory and run ipython nbconvert for each of them with the file/directory path as a argument by changing into the parent directory	
find all files/directories under current directory and set their permission to 775	
find all files/directories under current directory and sort them	
find all files/directories under current directory appending a null character at the end of each file name/path	
find all files/directories under current directory bypassing file hierarchies in lexicographical order	
"find all files/directories under current directory excluding the paths that match the posix extended regex "".*def/incoming.*|.*456/incoming.*"""	
find all files/directories under current directory following symlinks if needed	
find all files/directories under current directory in maximum 3 levels deep	
find all files/directories under current directory matching the case insensitive pattern 'pattern'	
find all files/directories under current directory that are 10mb in size	
find all files/directories under current directory that are greater than 10mb in size	
find all files/directories under current directory that match the case insensitive extended regex .*/(ea|fs)_.*	
find all files/directories under current directory that match the case insensitive glob pattern {ea,fs}_*	
find all files/directories under current directory that match the case insensitive regex .*/\(ea\|fs\)_.*	
find all files/directories under current directory that match the case insensitive regex ./\(ea\|fs\)_.*	
find all files/directories under current directory that match the case insensitive regex ./\(rt\|ed\).* and show several lines of output from the beginning	
find all files/directories under current directory that were accessed 30 minutes ago	
find all files/directories under current directory that were accessed less than 1 day ago	
find all files/directories under current directory that were accessed more than 25 but less than 35 minutes ago	
find all files/directories under current directory that were modified exactly 30 minutes ago	
find all files/directories under current directory that were modified later than /reference/file	
find all files/directories under current directory tree	
find all files/directories under current directory tree excluding files/directories with name 'query_to_avoid'	
find all files/directories under current directory tree excluding hidden files/directories	
find all files/directories under current directory tree that are newer than backup.tar.gz by modification time	
find all files/directories under current directory tree that are owned by 'root'	
find all files/directories under current directory tree that belong to the group 'compta'	
find all files/directories under current directory tree that belong to the user 'tom'	
find all files/directories under current directory tree that belong to user 'john'	
find all files/directories under current directory tree that contain '1' or 'k' in their names	
find all files/directories under current directory tree that contain 'pattern' in their names	
find all files/directories under current directory tree that have modified in the last 2 days and contain 'blah' (case insensitive) in their names	
find all files/directories under current directory tree that start with 'r' and end with 'ver' in their names and were modified more than 1 day ago	
find all files/directories under current directory tree that start with 'test' in their names without descending into directories with the same name pattern	
find all files/directories under current directory tree whose names start with '(test)' followed by two digits and end with '.txt' extension	
find all files/directories under current directory tree whose names start with 'some_text_2014.08.19'	
find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension	
find all files/directories under current directory tree whose paths match the pattern '*ack*1'  (case insensitive)	
find all files/directories under current directory tree whose paths match the regex 'filename-regex.\*\.html'	
find all files/directories under current directory tree whose paths start with './sr' and end with 'sc'	
find all files/directories under current directory tree wihout descending into './src/emacs' directory	
find all files/directories under current directory tree with '.old' extension	
find all files/directories under current directory tree with inode number 211028 and move them to 'newname.dir'	
find all files/directories under current directory which have read-write permission for owner and only read permission for group and others	
find all files/directories under current directory with 'foo' in their paths and copy them to ~/bar	
find all files/directories under current directory with 'foobar' (case insensitive) in their names and copy them to ~/foo/bar	
find all files/directories under current directory with 'foobar' in their paths and copy them to ~/foo/bar	
find all files/directories under current directory with a depth-first search	
find all files/directories under current directory with null character as the delimiter	
find all files/directories under current directory with null character as the delimiter and then replace the null characters with :	
find all files/directories under current directory with the null character as the delimiter	
find all files/directories under current directory without descending into './bookshop/mediaimg', '*/cvs*', './files', './images/cms', './internal', './limesurvey171plus_build5638' and './gallery2' paths, then run cvs command with 'status' and each path as arguments and redirect the output to output.txt fle	
find all files/directories under directory '.cache/chromium/default/cache/' which are bigger than 100mb and which are atleast 1 level deep and delete them	
find all files/directories under mainfolder directory and redirect the output to outputfle	
find all files/directories under maximum 1 level down the current directory and print their inode numbers and names	
find all files/directories under minimum 1 level down the $folder directory and sort them	
find all files/directories under minimum 2 level down the current directory and set their permission to 700	
find all files/directories under mnt/naspath that were modified in last 24 hours, calculate the total size and redirect the result to /tmp/size.log file	
find all files/directories under mnt/naspath without descending into .snapshot directory, calculate the total size and redirect the result to /tmp/size.log file	
find all files/directories under test directory	
find all files/directories under whatever and ... directory and copy them to /var/tmp	
find all files/directories which have been modified from the start of the day in directories/files taken from the glob pattern '/tmp/test/*'	
find all files/directories which have been modified within the last day in the drectories/files taken from the glob pattern '/tmp/test/*'	
find all files/directories whose names start with 'readme' (case insensitive) under '/usr/share/doc' directory tree	
find all files/directories with '.bar' extension in maximum 2 levels down the current directory	
find all files/directories with '.c' or '.h' extension under current directory tree and search for the regex expanded by the variable $i and show the output by paging through one screenful at a time	
find all files/directories with '.c' or '.h' extension under current directory tree and search for the regex provided by first positional argument and show the output by paging through one screenful at a time	
find all files/directories with '.err' extension under '/home/username' directory tree	
find all files/directories with '.in' extension in the directory $directory and its subdirectories	
find all files/directories with '.js' extension under current directory tree excluding paths that contain the directory './directory'	
find all files/directories with '.js' extension under current directory tree without descending into  and ignoring './directory' completely	
find all files/directories with '.js' extension under current directory tree without descending into './directory'	
find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree	
find all files/directories with '.log' extension whose names start with 'app-', have been modified in the last 5 minutes and show the first one found	
find all files/directories with '.mp4' extension and all regular files with '.flv' extension, sort them according to their names and display the first 500 of them	
find all files/directories with '.o' extension under '/lib/modules' directory tree	
find all files/directories with '.pdf' extension excluding 'pdfs' directory and all of its contents	
find all files/directories with '.tar.gz' extension under $dir/tmp/daily/ directory tree, sort them numerically and show the last 3 of them	
find all files/directories with '.txt' extension that are less than 100 kb in size under '/home' directory tree	
find all files/directories with '.txt' extension under '/home' directory tree that are exactly 100kb in size	
find all files/directories with '.txt' extension under '/home' directory tree that are greater than 100kb in size	
find all files/directories with '.what_to_find' extension under current directory tree and show the list by excluding paths that contain 'excludeddir1' and 'excludeddir2'	
find all files/directories with '.xml' extension that start with 'log4j' in their names under '/cygdrive/e/mydocs/downloads/work/oats domain related/' directory tree, search for files that contain the string 'console' in their contents, then search for the string 'async' in the matched files and display the matched lines along with their filenames	
find all files/directories with 'my key phrase' in their names under current directory	
find all files/directories with 'my key phrase' in their names under current directory and redirect the output to mylist.txt	
find all files/directories with 'my key phrase' in their names under current directory, search for 'my key phrase' in all files under current directory and print a sorted and unique list of output	
find all files/directories with 644 permission in entire file system	
find all files/directories with 664 permission under current directory tree	
find all files/directories with 755 permission under current directory tree	
find all files/directories with 777 permission under '/apps/audit' and strip write permission for 'other' from them	
find all files/directories with 777 permission under current directory tree	
find all files/directories with case insensitive name pattern $target that are located in minimum 10 level down the current directory	
find all files/directories with execute permission by group or others	
find all files/directories with inode number 16187430 and move them to 'new-test-file-name'	
find all files/directories with name pattern $nombre that are at most 2 levels down the $dir_temporal and $dir_descarga directories and show only the file names (without parent path) appended with '.torrent'	
find all files/directories with permission $permissions under $directory directory tree	
find all files/directories with space in their names under  /tmp/ directory and rename them by replacing all spaces with _	
find all files/directories with space in their names under $1 directory	
find all files/directories with space in their names under current directory	
find all files/directories with space in their names under current directory and rename them by replacing all spaces with _	
find all files/directories with spaces in their names under ~/library directory	
find all files/directories with user id 120 under current directory tree	
find all files/drectories under '/u/bill' directory tree that have been accessed in the last 2 to 6 minutes	
find all first occurrences of directories named '.texturedata' under '/path/to/look/in' directory tree	
find all flies under current directory excluding *.png files and print the file paths (with match count) that match the case insensitive regex 'foo=' in their contents	
find all fonts (in '/usr/local/fonts') that belong to the user 'warwick'	
find all foo.bar files in the entire file system	
find all foo.bar files in the entire file system and discard the errors	
find all foo.bar files in the entire file system and which are present in the same partition as root.	
find all foo.mp4 files in the current directory tree	
find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories	
find all gif files in the file system	
find all gzip files in a folder	
find all hard links to file /path/to/file that exist under the current directory tree	
find all hard links to file1 under /home directory	
find all headers file *.h in /nas/projects directory	
find all hidden (regular) files under /tmp	
find all hidden directories starting from the current directory	
find all hidden files	
find all hidden files in the current directory	
find all hidden files in the current folder which have been modified after profile file	
find all hidden files starting from the directory given as variable $folder	
find all hidden files under /tmp	
find all hidden files under current directory and remove them excluding the files specified in /tmp/list_files	
find all hidden regular files starting from the current directory	
find all hidden regular files under /tmp and below	
find all html files in the current directory which have size greater than 100 bytes and display their details and discard all the errors.	
find all html files starting with letter 'a' in the current directory and below	
find all html files starting with letter 'a' in the current directory and below ignoring the case	
find all html or cgi files in current folder	
find all httpd.conf files in entire file system	
find all identical files in the /usr directory tree that are bigger than 10000 bytes and write the result to usr.dups	
find all identical files in the home directory and subdirectories and tell if there are hard links	
find all image.pdf files under ./polkadots	
find all image.pdf files/directories under ./polkadots	
find all image.pdf files/directories under ./polkadots with null character as the delimiter	
find all index.* files/directories under current directory	
find all instances of a file in current folder and discard the errors	
find all instances of a file in current folder and display all errors apart from permission denied	
find all instances of a file in current folder and save the errors to a file	
find all instances of a file in the current folder and create a backup of it in the floppy	
find all instances of a specific file in the current directory and discard all the errors and remove all permission denied statements from search results	
find all instances of a specific file in the current directory and discard all the errors.	
find all instances of a specific file in the entire file system and discard the errors	
find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.	
find all ip addresses in /etc directory files	
find all jar files in current folder and search for a file in all these jar's	
find all jar files in current folder and search for a file in all these jar's and display the jar names along with searched file	
find all java files in current folder and trim extra spaces, tab spaces	
find all java files in the current folder and search for the pattern regex	
find all javascript files under the current folder	
find all jpg files in current folder	
find all jpg files in the current folder	
"find all jpg files in the folder which are in the path ""/201111/"" and sort them based on name"	
find all jpg files residing in the current directory tree and edit them in gimp	
"find all jpg files under the ""$source"" directory and below"	
"find all jpg images starting with image in the folder ""dir"" and give them as input to the script, script.ksh"	
"find all jpg,png,jpeg,pdf,tif,tiff,bmp and other image formats using regular expressions excluding those ending with ""_ocr.pdf"""	
find all js files under the build direcotry except build/external and build/log directory.	
find all js files under the build direcotry except build/external directory.	
"find all js files which path does not contain ./node_modules/* nor './vendor/*"""	
find all js files which path neither ./dir1 nor ./dir2	
find all js files which path neither ./dir1 nor ./dir2 nor  ./dir3	
find all l files in the 'foo' folder but ones with name like '*music*' to the 'bar' folder.	
"find all leaf directories that include only one occurrence of ""modules"""	
find all lemon*.mp3 files under current directory and run mplayer with these files	
find all level 1 subdirectories of the current directory	
"find all lines matching ""$user"" in ""file"" and number the output"	
find all links pointing to /path/to/foo.txt	
find all links to path/to/file	
find all log files larger then 100mb  in /home directory and delete them .	
find all m? directories under current directory and run ./fixmbox with all of the directory paths as its arguments	
find all makefile's in the current directory tree	
find all makefile's in the current directory tree and look for line 235 in each of them	
find all makefile's in the current directory tree and print the line 235 of each of them	
find all mp3 files in the home directory tree that were modified in the last 24 hours	
find all mp3s in the /home directory tree	
find all mysong.ogg files/directories under your home directory	
find all name* files under ../../$name-module and rename them by replacing 'name' with $name (will be expanded in the current shell) in their names	
find all name* files under ../../$name-module and rename them by replacing 'name' with $name (will be expanded in the sub-shell) in their names	
find all normal/regular files in current folder an save the output to the files /tmp/grep1 & /tmp/grep2	
find all normal/regular files in current folder and display the total lines in them	
find all normal/regular files in current folder and display them in sorted order	
find all normal/regular files in current folder and replace a word in all these files	
"find all normal/regular files in current folder which end with ""~"" or which begin and end with ""#"" and and and delete them"	
"find all normal/regular files in current folder which end with ""~"" or which begin and end with ""#"" and and move them to  temp folder"	
find all normal/regular files in the current directory	
"find all normal/regular files in the entire file system having the word ""filename"" in their name."	
"find all normal/regular files in the folder ""//path/to/source/directory"" and calculate the md5sum of them and save the output to  file output.txt"	
"find all normal/regular files in the folder /some/dir and save the output to the file ""somefile"""	
find all of jzb's files	
find all of the character devices on the system	
find all of the distinct file extensions in current directory	
find all of the executable files on your computer	
find all of the files that are readable	
find all of the hidden files in the current directory and its sub-directories.	
find all ogg files in the home directory larger than 20 megabytes	
find all ogg files in the home directory that are at most 20 megabytes in size	
find all or single file called findcommandexamples.txt under / directory of owner root	
find all or single file called tecmint.txt under the / directory of owner root	
find all orm* files/directories under current directory	
find all orm.* files/directories under current directory	
find all pdf files excluding *_signed.pdf files under /some/dir with null character as the delimiter	
"find all pdf files in /path and search for ""your pattern"" in the converted text output and print the paths to the matching files"	
"find all pdf files in current directory and grep with the regex expanded by ""$1"" in the converted text output and print the paths to the matching files"	
find all pdf files in current folder and rename all these files	
find all pdf files in the current directory and its sub-directories that are not currently stored in the ./pdfs directory and move them into the ./pdfs directory.	
find all pdf files in the current folder	
find all pdf files under /dir/containing/unsigned with null character as the delimiter	
find all pdfs owned by user “seamstress”	
find all perl source code files	
find all php files in a directory	
find all php files in current directory and delete lines matching the regex '<\?php \/\*\*\/eval(base64_decode(.*));.*\?>' in those files	
"find all php files in current directory and delete text matching the regex '<?php /\*\*/ eval(base64_decode(""awy.*?>' in those files"	
find all php files in the current directory	
find all php files in the current directory recursively	
"find all php files in the current directory recursively and search them for string ""$test"" with 8 simultaneous processes"	
find all php files in the folder  /var/www/	
find all php files that belong to user 'takuya' and have been modified in the last 1 day	
find all php files under current directory	
find all php files under current directory and delete empty lines from the beginning in those files	
find all php files under current directory that contain only one line	
find all php files under current directory that contain only one non-blank line	
find all php files whose name is tecmint.php in a current working directory	
find all php files whose name is tecmint.php in the current directory	
find all png and jpg files and append them to archive `images.tar'	
find all png files in the current folder	
find all png images in the current folder and convert the to jpg images.	
find all png images in the current folder and convert the to jpg images. print0 is used to handle the files which have new lines in their names	
"find all posix-extended regex  ""[a-f0-9\-]\{36\}\.jpg"" files"	
find all python files (.py files) in $topdir directory tree and search for 'makefile' in all these folders and display all distinct folders having 'makefile'	
find all python files in current folder and test if there is a makefile in all these fodlers where these are present	
find all python files under current directory tree, save the list to 'output.txt' and search for 'something' in those files	
find all raw images in the current folder and pass them one at a time to the xargs command and enable parallel processing of the files	
find all read me files in a folder	
find all read only files	
find all read only files in  /home directory	
find all read only files in entire file system and show a few lines of output from the beginning	
find all read only files in the file system	
find all read-only files	
find all readable files	
find all readme files in a folder	
find all readme's in /usr/share	
find all readme.txt files/directories under your home directory	
"find all regex  "".*/[a-f0-9\-]\{36\}\.jpg"" files"	
find all regex  '\./[a-f0-9\-]\{36\}\.jpg' files	
"find all regex ""./[a-f0-9\-]\{36\}\.jpg"" files"	
find all regular *.css files	
"find all regular .abc files under and below /the/path and rename them prefixing their names with ""version_1"""	
find all regular .html files in the /var/www directory tree	
find all regular .mp3 files larger than 10m and delete them	
find all regular file and create jw-htmlfiles.tar	
find all regular files  then display the number of occurrences of banana without lines not proper end	
find all regular files 1 level down the $dir directory	
find all regular files exclude .o and exclude *.swp and output line number of soc_attach if it has	
find all regular files in .git and replace every occurrences of 'subdomainb.example.com'  with 'subdomaina.example.com' in those files	
find all regular files in /usr/bin accessed more than 20 days ago	
find all regular files in /usr/bin modified less than within the last 10 days	
find all regular files in <path> and execute process with all of them as arguments	
find all regular files in a folder using regular expressions which do not have a specific name pattern and send these files as input to the script.bash script file	
find all regular files in and below the home directory that have been modified in the last 90 minutes	
find all regular files in current directory and /home/www directory	
find all regular files in current directory and replace the word searc to replace in them.	
find all regular files in current folder which are atleast 1 level deep and search in the alphabetical order of the directory names	
find all regular files in minimum 1 level down the $dir directory	
"find all regular files in the ""$dir"" directory"	
"find all regular files in the ""aaa"" directory"	
find all regular files in the /path/to/base/dir tree	
find all regular files in the current director and set their permissions to '644'.	
find all regular files in the current directory and its subdirectories.	
"find all regular files in the current directory and search them for ""example"""	
find all regular files in the current directory tree and count them	
find all regular files in the current directory tree and print a command to move them to the current directory	
"find all regular files in the current directory tree and search them for ""example"""	
find all regular files in the current directory tree ignoring directory ./source/script	
find all regular files in the current directory tree ignoring git and svn directories	
find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using find's -ls option	
find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%tc %p\n'	
find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%tm %p\n'	
find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%ty %p\n'	
find all regular files in the current directory tree that are not readable by all	
find all regular files in the current directory tree that are not readable by anyone	
find all regular files in the current directory tree that do not contain a whitespace	
find all regular files in the current directory tree that have been modified within the last 10 minutes	
find all regular files in the current directory tree that match pattern 'btree*.c'	
"find all regular files in the current directory tree whose names are ""yourprogramname"", change to the directories they are in, and execute them with parameter ""yourparameterfile"""	
"find all regular files in the current directory tree whose names end with "".ds_store"" and delete them"	
find all regular files in the current directory tree, except git files	
find all regular files in the entire filesystem that belong to the group 'users'	
find all regular files in the home directory tree that were modified in the last 24 hours	
"find all regular files in the the user's home/mail directory and search for the word ""linux""."	
find all regular files matching the name pattern '*.?htm*' under '/srv/www' and '/var/html' directory tree	
find all regular files named 'chapter1' under current directory tree	
find all regular files named 'waldo' under 'books' directory tree that is located in user's home directory	
find all regular files named 'waldo' under ~/books directory tree	
find all regular files named 'whatever' under current directory tree excluding all paths that contain any hidden directory	
find all regular files named postgis-2.0.0 under current directory	
find all regular files named postgis-2.0.0 under your home directory	
find all regular files newer than '/tmp/$$' (where $$ expands to current process id) under '/tmefndr/oravl01' directory tree	
find all regular files on the system whose names are 'myfile'	
find all regular files on the system whose size is greater than 20000k	
find all regular files on the system whose size is greater than 20000k and print their names and sizes	
find all regular files or symlinks in the entire file system	
find all regular files recursively in the current directory	
"find all regular files residing in the current directory tree and search them for string ""/bin/ksh"""	
find all regular files starting from / that have permissions 777	
find all regular files starting from level 3 of directory tree ~/container and move them one level up	
find all regular files starting from level 3 of directory tree ~/container and move them to the current directory	
find all regular files starting from level 3 of directory tree ~/container and move them to the current directory's parent	
find all regular files starting from the current directory	
find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree	
find all regular files that reside in the current directory tree and were last modified 1 day ago	
find all regular files that reside in the current directory tree and were last modified at least 1 day ago	
find all regular files that reside in the current directory tree and were last modified more than 1 day ago	
find all regular files that reside in the current directory tree and were last modified more than 2 days ago	
find all regular files that reside in the current directory tree and were last modified more than 3 days ago	
find all regular files that reside in the current directory tree and were last modified more than 4 days ago	
find all regular files that reside in the current directory tree and were last modified more than 5 days ago	
find all regular files that reside in the current directory tree and were last modified more than 7 days ago	
find all regular files that start with stat	
find all regular files that were modified $ftime days ago under current directory tree	
find all regular files that were modified more than 60 days ago under '/path-to-directory' directory tree, sort them according to timestamp and print the filenames preceded with the timestamps	
find all regular files undee '/usr/bin' directoryt tree that are less than 50 bytes in size	
find all regular files under  $somedir directory and print each of their paths after a string literal 'found unexpected file '	
find all regular files under $d directory tree and change their permissions to 777	
find all regular files under $dir	
find all regular files under $dir directory tree that are bigger than $size mb in size and print them along with their sizes in decreasing order of size	
"find all regular files under $dir directory tree whose paths match the regex "".*\.${types_re}"" where ${types_re} expands as a variable"	
"find all regular files under $dir directory tree with "".$type"" extension (case insensitive) where $type expands in the current shell"	
find all regular files under $dir directory tree with name pattern provided by the first positional parameter and show only the $num'th line from each of those files	
find all regular files under $dir/tmp/daily/, sort them in reverse numerical order and copy the first two files to $dir/tmp/weekly/	
"find all regular files under $directory_to_process matching the case insensitive regex "".*\.$files_to_proces"" where $files_to_proces is a variable and not matching the name pattern '$find_excludes' where $find_excludes is another variable, then print the files with null delimiter instead of newline"	
find all regular files under $files_path directory tree and save the output to 'files' variable	
"find all regular files under $folder directory tree that start with '"".' and end with '""' in their names and were modified in less than $retention days excluding the files whose contents match one of the regular expressions defined per line in file $skip_file"	
find all regular files under $source directory tree that were modified more than $keep days ago and show only the names without the paths	
find all regular files under ${path} without following symlinks	
find all regular files under ${s} directory	
find all regular files under '/directory_path' directory tree that have been modified within the last day	
find all regular files under '/home/john' directory tree that start with 'landof' in their names	
find all regular files under '/home/john/scripts' directory tree excluding files with '.ksh' extension	
find all regular files under '/usr/bin' directory tree that are less than 50 bytes in size	
find all regular files under ./desktop directory	
find all regular files under /home/www and replace every occurrences of 'subdomaina' with 'subdomainb' in those files (may produce 'agument too long' error)	
find all regular files under /home/www and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files	
find all regular files under /home/www and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files invoking perl as few times as possible and also keep backups with .bak extension.	
find all regular files under /home/www and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files invoking sed as few times as possible	
find all regular files under and below /home/admin/public_html/, and change their permissions to 644	
find all regular files under and below /home/user/demo/	
"find all regular files under and below /root that match pattern ""*linux*"", case insensitive"	
"find all regular files under and below /somepath that have extensions pdf, tif, tiff, png, jpg, jpeg, bmp, pcx, or dcx, ignoring the case and excluding ""*_ocr.pdf"" files"	
find all regular files under and below dir/ and change their names from utf8 to the ascii/translit encoding	
find all regular files under current directory	
find all regular files under current directory (excluding hidden directories) and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files	
find all regular files under current directory (no subdirectories) and replace every occurrences of 'toreplace' with 'replace' in those files	
find all regular files under current directory non-recursively that have execute permission set for all (user, group and other)	
find all regular files under current directory tree and replace all '1.2.3.4' with '5.6.7.8' in these files modiying the files in-place	
find all regular files under current directory tree containing 'some text' in their names without descending into hidden directories and excluding hidden files	
find all regular files under current directory tree excluding files from './dir1' (except './dir1/subdir1/) and './dir2' directories	
find all regular files under current directory tree that contain 'some text' in their names excluding paths that contain dot files/directories	
find all regular files under current directory tree that match the regex 'tgt/etc/*' in their paths	
find all regular files under current directory tree that were accessed $ftime days ago	
find all regular files under current directory tree whose names end with 'cache' or 'xml' or 'html'	
find all regular files under current directory tree without descending into './dir1' (except './dir1/subdir1*' pattern) and './dir2' directories	
find all regular files under current directory tree, prepend '#' at the beginning of the lines that contain 'abc' in those files and modify them in-place	
find all regular files under test directory	
find all regular files under the /etc/sysconfig directory that were accessed in the last 30 minutes	
find all regular files which have been modified in the last 48 hours in home folder	
"find all regular files whose names contain ""@"" in directory tree ~/$folder"	
find all regular files whose names contain a case insensitive pattern composed of space separated positional arguments and display a long listing of them	
"find all regular files whose names do not end in ""*.html"""	
find all regular files with '.jpg' (case insensitive) extension, sort them by name, print the output  and also save the list to file 'file_list.txt'	
find all regular files with '.r' and '.c' in their names under current directory tree	
find all regular files with '.txt' extension excluding 'readme.txt' files under current directory tree	
find all regular files with '.what_to_find' extension in the entire filesystem and move them to directory '/new_directory'	
find all regular files with 400 permission under '/data' directory tree	
find all regular files with 755 permission under current directory tree and change their permission to 644	
find all regular files with case insensitive pattern '*$1*' ($1 expands to first positional parameter and falls back to empty string when not given) under current directory tree and execute a command given by $2 (falls back to 'file' command when $2 is not given) with each of those files as arguments	
find all regular files with name pattern $filename under $fileloc directory tree	
find all regular files with permissions 777 under and below /home/user/demo/	
find all regular files with permissions 777 under and below /home/user/demo/, and change their permissions to 755	
find all regular files with space in their names under current directory and rename them by replacing all spaces with _	
find all regular files with the group read permission set in your home directory and below and output detailed information about each file.	
find all regular non-hidden files in the current directory and its subdirectories	
find all regular/normal files in current folder and display the filename and size	
find all regular/normal files in current folder which have been modified in the last 60 minutes	
find all regular/normal files in the current folder	
find all regular/normal files in the current folder and display them in the a format.	
find all regular/normal files in the current folder that have been modified in the last 120 hours	
find all regular/normal files in the current folder whose name has the word photo or picture and which have been modified in the last 30 minutes	
"find all regular/normal files in the folder ""myfiles"" which have read and write permission to the other users"	
"find all regular/normal files in the folder ""pathfolder"" and display the count of files, save all the errors to err.txt file"	
find all regular/normal files which have cpp folder in their path	
find all regular/normal files which have execute permission in current folder and copy them to another folder	
find all sample* files/directories under current directory and print 'program {}-out {}' where {} will expand to file paths	
find all sample*_1.txt files/directories under current directory	
find all sample*_1.txt files/directories under current directory and print 'program  sample*-out sample*_1.txt sample*_2.txt' for each of them	
find all sample*_1.txt files/directories under current directory, remove _1.txt from the end of file paths and pipe them to the command `parallel program {}-out {}_1.txt {}_2.txt`	
find all sgid files	
find all sgid files in entire file system	
find all sgid set files	
find all sgid set files in the file system	
find all sgid set files under current directory and show a few lines of output from the beginning	
find all socket files in the current directory and its sub-directories.	
find all sqlite files in the current directory.	
find all status.c files in the current directory tree and show stat's information on them	
"find all strings matching pattern ""^${key}${delimiter}"" in $file file and print rest of string after $delimiter"	
"find all subdirectories of the current directory and run comand ""cmd2"" for each of them"	
find all subdirectories of the current directory except hidden ones	
find all subscription.java files/directories under current directory and enter into the parent directory of the first one found	
find all suid and sgid files on the system and save the list of them to `setuid.txt'	
find all suid files .	
find all suid files in entire file system	
find all suid set files	
find all suid set files in the file system	
find all suid set files under current directory and show a few lines of output from the beginning	
find all symbolic links containg 'vim' in their names under '/usr/bin' directory tree	
find all symbolic links containing 'javaplugin' in their names under '/usr' directory tree	
find all symbolic links containing 'vim' in their names uder '/usr/bin' directory tree	
find all symbolic links in the current directory tree	
find all symbolic links in the current folder	
find all symbolic links in the current working directory that link to files outside the current working directory	
find all symbolic links starting from the current directory and list them	
find all symbolic links under '/proc/$pid/fd' directory tree with name pattern '$save_path/sess_\*' and update their timestamps	
find all symbolic links under '/some/directory' driectory tree	
find all symbolic links under '/some/directory' tree	
find all symbolic links under /usr	
find all symbolic links under current directory that are not hard links	
find all symbolic links under the current folder and below	
find all symlinks in the /myfiles directory tree	
find all symlinks under /myfiles directory	
find all symlinks under /path/to/dir and replace them with the actual files they are pointing at	
find all symlinks under current directory	
find all syslog directories under /var/log directory	
find all target files outside the current working directory with symbolic links in the current working directory	
find all teh script files in a directory	
find all test.txt files/directories under current directory	
find all test1.h files under current directory	
find all test2.h files under current directory	
find all text files in current folder and delete all the files that have the word foo in their name	
find all text files in current folder and delete them	
find all text files in current folder and display all files that have the alphabet a in their name	
find all text files in current folder and trim the extra spaces in all lines in these files	
find all text files in current folder and trim the extra spaces in all lines in these files ( mac version )	
find all text files in current folder and trim the extra spaces in all lines in these files and save it to the original file	
find all text files in current folder; which have been modified exactly 5 days ago	
find all text files in the current directory	
find all text files in the current directory and compress them to a cpio file	
find all text files in the current directory and display them page wise	
find all text files in the current folder	
"find all text files in the current folder excluding those that are presenti n the folder ""/svn"" and search for a pattern."	
find all text files in the current folder which have been modified after the file /tmp/newerthan	
"find all text files in the folder ""fff"" and find the md5sum for them"	
"find all text files in the folder ""fff"" and find the md5sum for them and save the output to a file"	
find all text files in the home directory	
find all text files in user/directory/ and display the last line	
find all text files in user/directory/ which have been modified today and display the last line of these files	
find all text files which have extra extensions in the current folder	
"find all the "".c"" files in the folder ""/home/you"" which have been accessed in the last 30*24 hours"	
"find all the "".c"" files in the folder /home/david which have been modified in the last 48 hours"	
"find all the "".flac"" files in the current folder and convert them to mp3 with 128k bit rate"	
"find all the "".flac"" files in the current folder and convert them to mp3 with 160k bit rate"	
"find all the "".flac"" files in the current folder and create a sub shell and convert these to mp3 with 128k bit rate"	
"find all the "".jpg"" files in current folder and display their count"	
"find all the "".mov"" files in the current folder and give it as an input to the myffmpeg.sh script file"	
"find all the "".mov"" video files in the current folder and convert them to flv using ffmpeg. print0 is used to handle files with newline in their names"	
"find all the "".sh"" files in the current folder ( case insensitive search)"	
"find all the "".wma"" files in the folder ""$current_directory"""	
"find all the ""error_log"" files in the folder ""/home"" which are bigger than 5mb and force delete them"	
"find all the ""jpg"" file in a folder."	
"find all the ""passwd"" files in the entire file system"	
find all the *.c files at any level of directory programming under any 'src' directory	
find all the *.conf files under / (root)	
find all the *.conf files under / (root) redirecting error messages to /dev/null	
find all the *.pl files (perl files) beneath the current directory.	
find all the *.txt files in the current directory older than 48 hours	
find all the .c files in the current directory tree that contain the string ‘stdlib.h’	
find all the .jpg files in / and copy them to the current folder.	
find all the .mp3 files in the music folder and pass to the ls command, -print0 is required if any filenames contain whitespace	
find all the .mp3 files in the music folder recursively and pass them to the ls command	
find all the backup files in the current folder and delete them	
find all the backup files in the current folder and delete them after user confirmation	
find all the bit map files (.bmp) in the current folder and convert them to .png	
find all the config(.conf files) files in the folder /home/pat	
find all the configuration files in /etc folder along with the last access & modification time	
find all the configuration files in the file system	
find all the configuration files in the files system and donot display any errors.	
find all the configuration files which have been accessed in the last 30 minutes.	
find all the configuration or text files in current directory	
find all the core files in the entire file system and  delete them	
find all the core files in the temp folder and force delete them	
find all the cpp files in current folder	
find all the cpp files in the current folder	
find all the cpp files in the current folder and move them to another folder	
find all the cpp files in the current folder and move them to another folder(plus takes the bulk output of the find command and gives it as input to the move command in exec)	
find all the cpp(c++ source files), java, header files in the current directory	
find all the css files	
find all the database files in the folder /var/named	
find all the direcories in the current folder	
"find all the directories  with the name ""c"" in the current folder which are at least 3 levels deep and which are not present in the path ""/p/""."	
find all the directories in current folder and delete them	
find all the directories in current folder and do not search in sub directories	
find all the directories in current folder and do not search in sub directories and create the same directory structure in another folder	
find all the directories in current folder which start with test	
find all the directories in the $logdir folder which have been modified in the last 24 hours and compress them	
find all the directories in the current directory which dont have the execute permission.	
find all the directories in the current folder	
find all the directories in the current folder and change to these directories and run a command	
find all the directories in the current folder and create the same directory structure in a remote machine using ssh	
find all the directories in the current folder and replace the	
find all the directories in the current folder excluding search in the sub directories and create these directories in another path	
find all the directories in the current folder that are empty(size 0 bytes)	
"find all the directories in the current folder which begin with the words ""kt"" and end with a digit"	
find all the directories in the current folder which have been modified in 24 hours and move them to the folder  /path/to/target-dir	
find all the directories in the different folders excluding search in the sub directories and create these folders in the current directory	
find all the directories in the entire file system whose size is greater than 50kb	
"find all the directories in the file system which begin with ""man"""	
find all the directories in the file system which have read, write and execute to all the users	
find all the directories in the folder $logdir which have been modified in the last 5 days and delete them.	
find all the directories in the folder /raid with the extension local_sd_customize.	
find all the directories in the home folder and make create the directory junk. if any errors (like permission denied) occur discard them.	
find all the directories in the home folder do not search in sub directories	
"find all the directories starting with the name ""somenameprefix"" which have not been modified in the last 10 days and force delete them"	
"find all the directories with the name ""dirname"" in the current folder and force delete them"	
"find all the directories with the name ""some-dir"" in the current folder and move them to another folder and do not search in subfolders"	
"find all the directories with the name ""uploads"" in current folder"	
find all the directory's from root which have the sticky bit on and display their details. do not display any errors on the standard output.	
find all the empty directories in current folder and delete them	
find all the empty directories in the current folder	
find all the empty directories in the current folder and all its sub directories too	
find all the empty files and folders in your system	
find all the empty in the current folder do not search in sub directories	
find all the empty regular/normal files in the current folder and delete them	
find all the error, access, ssl_engine and rewrite logs which are bigger than 300mb and are less then 5gb in the folder /opt	
find all the file that have been modified exactly 3 days ago ( considers day starting not 24 hours )	
find all the file that have been modified in the last 3 days ( considers day starting not 24 hours )	
find all the file that have not been modified in the last 3 days ( considers day starting not 24 hours )	
find all the file which name (name can contains space) end with c or h and content contain 'thing'	
find all the file which name end with c or h and content contain 'thing'	
find all the files  in the entire file system which belong to the user with the uid 1005 and discard all the errors	
find all the files  in the folder /opt which have been changed in the last 120 minutes	
find all the files (under root file system /) that were changed within the last 24 hours	
find all the files (under root file system /) that were updated in the last 24 hours	
find all the files and folder that were created in 2012 on friday of every month	
find all the files called findcommandexamples.txt of owner root	
"find all the files ending with "".coffee"" in the current folder and search for the first occurence of the word ""re"" in each line"	
"find all the files ending with "".coffee"" in the current folder and search for the words ""re"" in each line"	
"find all the files ending with "".foo"" in the folder /usr"	
"find all the files ending with "".mkv"" in a folder and send them as an argument to a shell script"	
"find all the files ending with "".sh"" in the folder /dir excluding those wth the name node_modules and search for a pattern in these files"	
"find all the files ending with "".sh"" in the folder /dir excluding those wth the names foo and bar."	
"find all the files ending with ""clj"" in the current folder and search for a pattern"	
"find all the files ending with ""mkv"" in current folder"	
"find all the files ending with ""rb"" and display the first 10000 lines from these files."	
"find all the files ending with ""~"" in current folder and move them to temp folder"	
find all the files ending with .ini in the current directory.	
find all the files ending with .mp3 or .jpg	
find all the files ending with emlx in a folder and save the output to a list file	
find all the files ending with jpg in current folder and display their count ( case insensitive )	
find all the files ending with undo in the current folder and calculate the total size of these files	
find all the files from root folder which have nogroup or noname and dispaly their details.	
find all the files in current directory of size exactly 6mb.	
find all the files in current directory of size greater than 10mb and less than 20 mb.	
find all the files in current directory of size greater than 2gb.	
find all the files in current directory of size smaller than 10kb.	
"find all the files in current folder ending with ""ini"" and display all files which contain several patterns"	
"find all the files in current folder ending with ""ini"" and search for a word in all these files"	
"find all the files in current folder which end with "".bak"" or "".backup"" which have not been accessed in the last 30 days and delete the files if they exist"	
find all the files in current folder which end with a speicifc regular expression and display their count	
find all the files in current folder which have been updated in the last 60 minutes	
find all the files in current folder which have spaces and save the long listing of these files to log file before deleting them	
find all the files in entire file system  which are accessed 50 days back	
find all the files in entire file system  which are modified 50 days back.	
find all the files in entire file system  which are modified more than 50 days back and less than 100 days and show a few lines of output from the beginning	
find all the files in entire file system which are greater than 50mb and less than 100mb.	
find all the files in entire file system with the extensions txt or doc, as well as any file larger than 5mb in size	
find all the files in file system which are accessed 50 days back	
find all the files in file system which are accessed in last 1 hour	
find all the files in file system which are changed in last 1 hour	
find all the files in file system which are greater than 50mb and less than 100mb	
find all the files in file system which are modified 50 days back	
find all the files in file system which are modified in last 1 hour	
find all the files in file system which are modified more than 50 days back and less than 100 days	
find all the files in home folder which have been modified in the last 24 hours	
find all the files in some directory which have not been modified in the last 7*24 hours	
find all the files in the /usr folder that have been modified after the file /usr/firstfile.	
"find all the files in the /usr folder which have modification date less than or equal to the file ""/firstfile"""	
find all the files in the current directory	
find all the files in the current directory and change the permissions to 775.	
find all the files in the current directory and display them	
find all the files in the current directory and print them excluding those that have the name sccs.	
"find all the files in the current directory and search for the word ""pw0"" in them."	
find all the files in the current directory and sub-directories whose status was changed after /etc/fstab was modified	
find all the files in the current directory and sub-directories, that were edited within the last 1 hour and execute the list command with long listing format	
"find all the files in the current directory ending with "".i"""	
find all the files in the current directory recursively whose permissions are 644 and show the first 10 of them	
find all the files in the current directory recursively whose permissions are 777	
find all the files in the current directory recursively whose permissions are not 777	
"find all the files in the current directory that have the extension ""bar"" and donot search in the subdirecotries directories."	
"find all the files in the current directory that have the word ""bash"" in their name"	
"find all the files in the current directory that have the word ""lib"" in them"	
find all the files in the current directory which are bigger than 1000mb	
find all the files in the current directory which end with orig	
find all the files in the current directory which have been accessed in the last 1 day and move them to tmp folder.	
find all the files in the current directory which have been modified after a file	
find all the files in the current directory which have been modified in the  last 6 days.	
find all the files in the current directory which have been modified in the last 24 hours	
find all the files in the current directory which have been modified in the last 30 days and display the contents.	
find all the files in the current directory which have the inode number 31246 and remove them.	
find all the files in the current directory which have the size 40 bytes in the current disk partition.	
find all the files in the current directory which start with t and have been modified between one hour (60 minutes) and 12 hours (720 minutes) ago.	
find all the files in the current directory whose size is equal to exactly 126mb.	
"find all the files in the current directory with the name ""wagoneer"" which are in the current device."	
find all the files in the current directory with “linkin park” in their names	
find all the files in the current folder (handles files which contain newlines or only spaces in their names)	
find all the files in the current folder and create a backup of it in floppy	
find all the files in the current folder and display adding quotations to each file	
find all the files in the current folder and display adding quotations to each file and replace spaces with new line	
find all the files in the current folder and display them in the sorted order of their name	
"find all the files in the current folder and display those that are not present in the list ""file.lst"""	
find all the files in the current folder and replace old string with new string	
find all the files in the current folder and save the output to the file dir-list	
"find all the files in the current folder and search for the word ""vps admin"" in them."	
find all the files in the current folder ending with cpp or hpp or chpp and save the output to the file cscope.files.	
find all the files in the current folder that are modified after the modification date of a file	
find all the files in the current folder that end with the word bar	
find all the files in the current folder that have a single letter in their name which have been modified in the last 3 days but not today	
find all the files in the current folder that have been accessed in today	
find all the files in the current folder that have been accessed in today from the start of the day	
find all the files in the current folder that have been modified exactly 24*3 hours ago	
find all the files in the current folder that have been modified in the last 24*3 hours	
find all the files in the current folder that have been modified in the last 7 days	
find all the files in the current folder that have not been modified in the last 24*3 hours	
find all the files in the current folder which are bigger than 10mb and less than 50mb	
find all the files in the current folder which are bigger than 1mb	
find all the files in the current folder which are bigger than 9mb	
find all the files in the current folder which are exactly 1234 bytes	
find all the files in the current folder which are modified after /bin/sh.	
find all the files in the current folder which are readable	
find all the files in the current folder which are smaller than 9mb	
find all the files in the current folder which are writable	
find all the files in the current folder which belong to the user root.	
find all the files in the current folder which do not belong to any user	
find all the files in the current folder which do not have the execute permission	
find all the files in the current folder which do not have the read permission	
"find all the files in the current folder which end with ""ext1"" or ""ext2"" or ""ext3"""	
find all the files in the current folder which end with .o or with the name a.out and display them.	
find all the files in the current folder which have a set uid set	
find all the files in the current folder which have been accessed in the last 24 hours	
find all the files in the current folder which have been accessed in the last 60 minutes	
find all the files in the current folder which have been changed in the last 60 minutes	
find all the files in the current folder which have been modified after a specific timestamp and save the output to a file	
find all the files in the current folder which have been modified after the file disk.log	
find all the files in the current folder which have been modified for the ffiles that are at least one week old (7 days) but less then 30 days old	
find all the files in the current folder which have been modified in the 10 minutes ago	
find all the files in the current folder which have been modified in the last 60 minutes	
find all the files in the current folder which have been modified in the last 60 minutes, which are atleast 1 level deep and display a long listing of these files	
find all the files in the current folder which have been modified in the last one day	
find all the files in the current folder which have been modified in the last one minute	
find all the files in the current folder which have executable permission to all the users and display the ten files	
find all the files in the current folder which have execute permission	
find all the files in the current folder which have execute permission to all the users	
find all the files in the current folder which have not been modified in the last 90 days and force delete them	
find all the files in the current folder which have set guid bit on and list the top 10 files.	
find all the files in the current folder which have the name net or comm in them	
find all the files in the current folder which have the word cache in them and do not search in the sub directories of the folder.	
find all the files in the current folder which which have been modified yesterday and day before yesterday and whose name is of length 1	
find all the files in the current folder whose name starts with 2 alphabets and ends with 2 digits.	
"find all the files in the current folder with the name ""test-a"" and move them to the folder test-10"	
"find all the files in the current folder with the name ""test-a"" and move them to the folder test-10. execdir runs the command in the directory where the file is found."	
find all the files in the directory which is pointed by $1 variable ending with the name held in the variable $2 or having the extension of value saved in the argument $2.	
find all the files in the entire file system excluding the folder proc, which do not belong to any user or any group	
find all the files in the entire file system starting with the word top	
find all the files in the entire file system that have been accessed exactly  50 days ago	
find all the files in the entire file system that have been accessed in the last 60 days ago	
find all the files in the entire file system that have been changed exactly  60 days  and display ten files	
find all the files in the entire file system that have been modified between 50 to 100 days and display ten files	
find all the files in the entire file system that have been modified exactly  50 days ago	
"find all the files in the entire file system that have been modified exactly 7 days before which end with ""conf"""	
find all the files in the entire file system that start with the word top and have 3 letters next to it.	
find all the files in the entire file system that start with top	
find all the files in the entire file system that were modified in the last 10 minutes	
"find all the files in the entire file system which belong to the group ""staff"""	
"find all the files in the entire file system which belong to the user ""roger"""	
find all the files in the entire file system which have been modified in the last 120 hours	
find all the files in the entire file system which have been modified in the last 48 hours	
find all the files in the entire file system which have been modified in the last 5 days	
find all the files in the entire file system whose size is between 50mb to 100mb	
find all the files in the entire file system whose size is exactly 15mb	
find all the files in the entire file system whose size is greater than 20mb	
find all the files in the entire filesystem which belong to the group root and display the ten files.	
find all the files in the entire filesystem which belong to the user root and display the ten files.	
find all the files in the file system that belong to the user www	
"find all the files in the file system that start with ""win"" and searched only in the mounted file systems"	
find all the files in the file system whcih have been modified in the last 1 day	
find all the files in the file system which are bigger than 3 bytes	
"find all the files in the file system which belong to the groep ""users"" and with the name ""dateiname"""	
"find all the files in the file system which belong to the user ""pat"" and with the name ""dateiname"""	
find all the files in the file system which hae set uid enabled and save them to /root/suid.txt and those which have size greater than 100mb save them to /root/big.txt	
find all the files in the file system which have been accessed in the last 1 day	
find all the files in the file system which have been changed 1 minute ago.	
find all the files in the file system which have been changed in the last 24 hours.	
find all the files in the file system which have been modified in the last 10 minutes	
find all the files in the file system which have been modified in the last 30*24 hours	
find all the files in the file system which have been modified in the last 60 minutes	
find all the files in the file system which have not been modified in the last 100*24 hours	
find all the files in the file system which have read permission to the user and display the ten files	
find all the files in the file system which have sticky bit enabled to the user	
"find all the files in the file system which have the permission 777 and with the name ""dateiname"""	
find all the files in the filesystem which do not belong to any group	
"find all the files in the folder ""/mp3-collection"" which are bigger than 10mb excluding those that start with the word metallica"	
"find all the files in the folder ""/u/bill"" which have been accessed in the last 2-6 minutes"	
"find all the files in the folder ""/usr/app/etl/01/oth/log/tra"" which have been modified  in the last 240 hours  excluding hidden files and those with the name ""/usr/app/etl/01/cle/par/files_to_skip.par"""	
"find all the files in the folder ""myfiles"" which have been modified exactly 48 hours back."	
"find all the files in the folder ""myfiles"" which have not been accessed in the last 30 days"	
"find all the files in the folder ./machbook and change the owner of them to the user with id ""184"""	
find all the files in the folder .home/calvin which have been modified in th last 45 minutes	
find all the files in the folder /home which are bigger than 10mb and smaller than 50 mb	
find all the files in the folder /home which are exactly of size 10mb	
find all the files in the folder /opt which have been accessed exactly 20 days ago	
find all the files in the folder /opt which have been modified between 20 to 50 days ago	
find all the files in the folder /opt which have been modified exactly 20 days ago	
find all the files in the folder /path/to/dir which have been modified after a specific date (feb 07)	
find all the files in the folder /usr/bin which have been modified in the last 10 days	
"find all the files in the folder /work which belong to the user ""olivier"""	
find all the files in the folder musica and display them in a single line null separated	
"find all the files in the folder ~/music which begin with ""automatically add"""	
find all the files in the home folder that are modified day before yesterday	
find all the files in the home folder that belong to a specific user	
find all the files in the home folder that have been modified between 24 to 48 hours	
find all the files in the home folder that have not been modified in the last one year	
find all the files in the home folder which are bigger than 2mb and zip them	
find all the files in the home folder which are empty (size 0 bytes)	
find all the files in the home folder which are less than 300bytes	
find all the files in the home folder which are less than 42 bytes	
"find all the files in the home folder which end with "".tex"""	
find all the files in the home folder which have been modified after a file	
find all the files in the home folder which have been modified in 1 year or more ( which are not modified in the last 1 year ).	
find all the files in the home folder which have been modified in the last 24 hours	
find all the files in the home folder which have been modified in the last 30 minutes	
find all the files in the home folder which have been modified in the last 7 days	
find all the files in the home folder which have been modified today	
find all the files in the home folder which have not been modified in the last 1 year.	
find all the files in the present directory which have the group staff and check if is a symbolic link and display it.	
find all the files in the root folder which have been modified in the last 24 hours and print them	
find all the files named 'vimrc' anywhere on the system	
find all the files older than 30 days	
find all the files on the system that have been accessed within the last hour	
find all the files on the system that have been changed within the last hour	
find all the files on the system that have been modified within the last hour	
find all the files recursively in directories or files taken from the glob pattern /tmp/test/* that have been modified today	
"find all the files starting with ""config"" in the folder symfony"	
"find all the files starting with ""config"" in the folder symfony ( case insensitive search)"	
find all the files that are modified exactly one day ago	
find all the files that are modified in the last 1 day	
find all the files that are modified in the last 7 days	
find all the files that are not modified in the last 7 days	
"find all the files that are not named ""mycprogram.c"" in the current directory only and without regards to case."	
find all the files that end with the extension “.java” in the current directoy tree	
find all the files that have been changed exactly 24 hours ago	
find all the files that have been changed today	
find all the files that have been modified exactly 1 day ago	
find all the files that have been modified exactly 2 days ago	
find all the files that have been modified exactly 24 hours ago	
find all the files that have been modified exactly yesterday (from 00:00 to 23:59 yesterday)	
find all the files that have been modified in exactly 7*24 hours ago	
find all the files that have been modified in the last 1 day	
find all the files that have been modified in the last 1 day ago	
find all the files that have been modified in the last 12 hours	
find all the files that have been modified in the last 2 day	
find all the files that have been modified in the last 2 days	
find all the files that have been modified in the last 24 hours	
find all the files that have been modified in the last 4 days ( daystart is used to check files according to date i.e, all files modified from currentday-4 00:00:00 to current day) and copy them to folder.	
find all the files that have been modified in the last 60 minutes	
find all the files that have been modified in the last 7 days,	
find all the files that have been modified on a specific day and copy them to another directory	
find all the files that have been modified since the last time we checked	
find all the files that have been modified today	
find all the files that have been modified today(from the strart of the day)	
find all the files that have not been modified in the last (24*7) hours.	
find all the files that have not been modified in the last 2 days	
find all the files that have not been modified in the last 24 hours	
"find all the files that have the word ""fstab"" in their name in a folder"	
find all the files that were modified exactly one day ago	
find all the files that were modified more than one day ago	
find all the files that were modified two days ago	
find all the files that were modified within the last day	
find all the files that were modified yesterday in the current directory.	
find all the files under '/usr/local' directory tree which have been modified exactly 24 hours ago	
find all the files under /etc directory which are larger than 100k	
find all the files under /home directory with name tecmint.txt	
find all the files under /tmp directory and show a few lines of output from the beginning	
find all the files which are accessed 50 days back	
find all the files which are accessed in last 1 hour	
find all the files which are accessed in last 1 hour in entire file system	
find all the files which are changed in last 1 hour	
find all the files which are changed in last 1 hour in entire file system and show a few lines of output from the beginning	
find all the files which are greater than 50mb and less than 100mb	
find all the files which are greater than 50mb but less than 100mb in size	
find all the files which are modified 50 days back	
find all the files which are modified in last 1 hour	
find all the files which are modified in last 1 hour in entire file system	
find all the files which are modified more than 50 days back and less than 100 days	
find all the files which are of size 0 bytes.	
"find all the files which end with "".deb"" and display their base name (strip the extension)"	
find all the files which have been accessed after modifying the file /etc/hosts	
find all the files which have been changed after the modification of a file.	
find all the files which have been modified in the last 15 minutes excluding hidden files.	
find all the files which have not been modified in the last 1 year and display the total disk usage of them  in gb	
find all the files which have size 0 bytes in temp folder	
find all the files which have the write permission to the group and remove the write permission.	
"find all the files which start with the name ""metallica"" in the folder ""/mp3-collection"" and which are bigger than 10mb"	
find all the files which were accessed 50 days ago	
find all the files which were modified 50 days ago	
find all the files which were modified more than 50 days but less than 100 days ago	
find all the files whose name is findcommandexamples.txt and contains both capital and small letters in / directory	
find all the files whose name is findcommandexamples.txt in the current working directory	
find all the files whose name is tecmint.txt	
find all the files whose name is tecmint.txt and contains both capital and small letters in /home directory	
find all the files whose name is tecmint.txt in the current directory	
find all the files whose permissions are 777	
find all the files whose permissions are 777 in the current directory	
find all the files whose permissions are 777 under current directory	
find all the files with the extension .xml and print them in a single line and check for the validity of a command by giving the file as input	
"find all the files with the name ""datainame"" in the file system which are bigger than 50mb"	
find all the files with the name september ( case insensitive )	
find all the files with the name test in the current folder ( case insensitive )	
find all the files within your home folder accessed more than 100 days ago	
find all the files without permission 777	
find all the files without permission 777 in the file system	
find all the files without permission 777 under current directory and show a few lines of output from the beginning	
find all the files/directories in '/path/to/files' directory tree which have not been modified in the last 2 hours	
find all the files/directories in the current directory tree which have been modified between 2014-08-25 and 2014-08-26	
find all the files/directories in the entire filesystem that do not belong to user 'wnj' and are not newer than the file/directory 'ttt' by modification time	
find all the files/directories under '/usr/local' directory tree which have been modified within the last day	
find all the files/directories under '/var/adm' directory tree that have not been modified in the last 3 days	
find all the files/directories under user's home directory that do not belong to the user $user	
find all the files/directories with '.conf' extension under '/etc' directory non-recursively and display the last ten files	
find all the findme.txt files in the file system	
find all the fles that have .ssh in the end and redirect the output to ssh-stuff	
find all the foo.txt files in the current folder and move them to another directory	
find all the header files in /usr/include which have been modified in the last 399 days and display the number of lines, number of files, number of characters of all these files	
find all the header files in /usr/include which have been modified in the last 400 days	
find all the hidden files in the temp folder	
find all the html files in current folder and replace old string with new string	
find all the html files in current folder and replace some pattern in all these files	
find all the html files in the current folder	
find all the html files in the current folder and delete a line	
find all the html files in the current folder and rename them to .var files	
find all the html files in the current folder and replace the end of each line with a pattern	
find all the html files in the current folder and search for a pattern in these files	
find all the html files in the current folder which have been modified exactly 7 days ago	
find all the html files in the current folder which have been modified excatly 7 days before	
find all the html files in the current folder which have been modified in the last 7 days	
find all the html files in the current folder which have not been modified in the last 7 days	
find all the html files that are acces in the last 24 hours in the current folder	
find all the html files which are modified in the last 7 days	
find all the html, javascript and text files in the current folder	
"find all the instances of the file ""foo.txt"" in the current folder and move them to another folder"	
"find all the jar files in the current folder and display all the "".class"" files or files ending with jar"	
find all the java script files in a folder and display them in a sorted order based on their type and save the output to a file	
find all the java script files in a folder and give them as input to a jar	
find all the java script files in a folder and save the list to a file	
find all the javascript files in current folder using regular expressions	
find all the jpg files in a directory.	
find all the jpg files in current folder and sort them	
find all the jpg files in the current folder and resize them to 50% of their original size	
find all the jpg files in the directory /ftp/dir which are bigger than 500kb	
find all the jpg files in the entire file system and discard all the errors.	
"find all the jpg images in folders which are in the path ""/201111/""  and sort them according to name and convert them into the video output.mp4"	
find all the jpg images in the folder /path/to/files and convert them into pdf.	
"find all the jpg images in the folder /path/to/files which have been modified after after the file ""timestamp"" and convert them into pdf."	
"find all the json files in the directory ""prod/140725_d0"" and send them as input to the python script ""/tmp/test.py"""	
find all the links in somedirectory and print them in a single line (to avoid the problem of files having newline in their names)	
find all the links in the current directory and print them in each line and display their names.	
find all the links in the current folder and following it to the pointed path	
find all the links in the current folder which are broken	
find all the links in the directory students and print them. do not display any errors.	
find all the links in the root folder which point to nothing ( links with their original file deleted ) and display them.	
find all the links that have been modified on a specific day and copy them to another directory	
find all the log files in the file system	
find all the log files in the file system which are present in the current partition	
find all the mp3 files in the current folder and move them to another folder	
find all the mp3 files in the entire file system whose size is bigger than 10mb	
find all the mp3 files in the file system	
find all the mp3 files in the home folder which have been modified today	
find all the mp4 video files in the current folder and save the output to the file /tmp/$$	
find all the non compressed files in the current directory and compress them.	
find all the normal files in the home directory which have been accesed in the last 30 days with the size greater than or equal to 100k.	
find all the normal/regualar files in the current folder which have a size of 10kb and display a long listing details of them.	
find all the normal/regular files in /etc/sysconfig which have been accesses in the last 30 minutes	
find all the normal/regular files in current directory and display file names with new line as delimiter	
find all the normal/regular files in current folder and delete all the files which are not present in /some/dir	
find all the normal/regular files in current folder and search for a pattern	
find all the normal/regular files in current folder excluding sub directories and hidden folders and display the count	
find all the normal/regular files in the current directory	
find all the normal/regular files in the current directory and search for the word mail and display the file names	
find all the normal/regular files in the current directory which have been modified in the last 24 hours	
"find all the normal/regular files in the current folder which are present in the pattern file ""file_list.txt"""	
find all the normal/regular files in the current folder which have been accessed in the last 24 hours and display a long listing of them	
find all the normal/regular files in the current folder which have been modified in the last 24 hours and display a long listing of them	
find all the normal/regular files in the current folder which have been modified in the last day and display a long listing of them	
find all the normal/regular files in the current folder which have been modified two days ago and display a long listing of them	
"find all the normal/regular files in the folder ""pathfolder"" excluding all hidden files and display the count"	
"find all the normal/regular files in the folder ""pathfolder"" which are 2 levels deep, excluding all hidden files and display the count"	
find all the normal/regular files in the folder main-directory	
"find all the ogg files in the current directory which have the word ""monfichier"" in their name"	
find all the patch files in current folder and copy them to separate folder patches	
find all the pdf files in a folder which start with a specific name and display them in the sorted order of their time stamps	
find all the pdf files in current folder and create a tar ball of all these files	
find all the pdf files in the current directory and display only the directory name in which the pdf file is present	
find all the perl files in /var/www	
find all the perl files in /var/www ( case insensitive search )	
find all the perl files in the current folder	
find all the perl files in the current folder and search for a pattern	
find all the perl files in the current folder, print0 is used to handle files with new lines in their names or only spaces	
find all the php files	
find all the php files in current folder and search for multiple patterns in these files	
find all the php files in current folder and search for multiple patterns in these files and display the file names	
find all the php files in current folder using regular expressions	
find all the php files in the current folder	
"find all the php files in the current folder (discards any directory which has an extension of "".php"")"	
find all the php/javascript files in current folder using regular expressions	
find all the png files in current folder and pass them as input to the perl script and copy the result files to a folder	
"find all the png files in current folder which are present in the pattern list file ""search.txt"""	
"find all the png files in current folder which are present in the pattern list file ""search.txt"" and copy them to another directory"	
find all the png files in the current folder which are present in the pattern list search .txt	
find all the png files in the current folder which begin with the word image	
find all the png files in the current folder which begin with the word image and do not search in the sub directories	
find all the python files in the current folder and save the list to the file output.txt	
find all the reglar files which ahve been changed in the last 5 minutes and do not search in the sub directories.	
find all the reguar/normal php files in current directory.	
find all the regular files in $dir directory tree which have not been modified in the last 15 days and delete them	
find all the regular files in $dir directory tree which have not been modified in the last 450 days and delete them	
find all the regular files in a folder which do not start with the word find and assign the output to a variable	
find all the regular files in current folder, that have been changed in the last 3 days and display last 5 files	
find all the regular files in the current directory which do not have a read permission	
find all the regular files in the current folder which have specific word in their name and force delete all these files and save the log to the file log_del.txt	
"find all the regular files in the current folder which start with a ""some text"""	
find all the regular files under $dir directory tree which have been modified before the file $a excluding the file $a and delete them	
find all the regular files under '/your/dir' directory tree which are bigger than 5 mb and display them in decreasing order of their sizes	
find all the regular files under current directory tree that have not been modified in the last 31 days and delete them	
find all the regular files under directory 'dir1' that are at least n levels deep	
find all the regular files with '.tgz' and '.gz' extensions and delete the oldest file under '/home/backups' directory tree	
"find all the regular/normal files ending with "".mod"" in a folder and pass them as input to remodup command"	
"find all the regular/normal files ending with "".mod"" in a folder and send them as input to the remodup command"	
find all the regular/normal files in a folder and assign the output to a variable	
find all the regular/normal files in all the directories in the /some/dir and delete them	
find all the regular/normal files in the /path folder and delete them	
find all the regular/normal files in the current direcoty which have not been accessed in the last 30 days.	
find all the regular/normal files in the current directory and print them skip searching all the directories in the current folders.	
find all the regular/normal files in the current directory which do not have the extension comment and and redirect the output to /tmp/list	
find all the regular/normal files in the current folder	
find all the regular/normal files in the current folder and do not search in the sub directories	
find all the regular/normal files in the current folder and rename them to html files	
find all the regular/normal files in the current folder and replace everything expect the extension of the file and display unique file extensions	
"find all the regular/normal files in the current folder which belong to the group ""flossblog"""	
"find all the regular/normal files in the current folder which belong to the user ""sedlav"""	
find all the regular/normal files in the current folder which belong to the users with the user id's between 500 and 1000	
find all the regular/normal files in the current folder which have been accessed in the last 1440*24 hours and not modified in 1441*24 hours excluding those which are in the custom sub directory tree	
"find all the regular/normal files in the folder ""myfiles"" which have the permission 647."	
"find all the regular/normal files in the folder /travelphotos which are bigger than 200kb and which do not have the word ""2015"" in their name"	
find all the sgid bit files under current directory whose permissions set to 644 and show a few lines of output from the beginning	
find all the sgid bit files whose permissions set to 644	
find all the sgid bit files whose permissions set to 644 in the file system	
find all the sgid files in the current directory tree	
find all the shell scripts or perl files in the current directory	
find all the sticky bit files whose permission are 551	
find all the sticky bit set files in entire file system whose permission are 551	
find all the sticky bit set files whose permission are 551	
find all the sticky bit set files whose permission are 551 in the file system	
find all the suid files in the current directory tree	
find all the swap files (files ending with ~) in the current folder and delete them	
find all the symbolic links in the current folder	
find all the symbolic links in the current folder and check the file type and display the names of files which are broken	
find all the symbolic links in the current folder and check the file type and display the output of those files which are broken	
find all the symbolic links in the current folder and follow to the original file	
find all the symbolic links in the current folder and follow to the pointing file	
find all the symbolic links in the current folder that are broken	
find all the text files in  the current folder and do not search in somedir, bin directories	
find all the text files in current folder and change the extension of these files and move them to another folder	
find all the text files in current folder and force delete them	
"find all the text files in current folder and move all these to another folder appending "".bar"" at the end of these files"	
find all the text files in the current directory which have been modified in the last 4 days and not today and copy them to another folder	
find all the text files in the current folder	
find all the text files in the current folder and display the results pagewise	
find all the text files in the current folder and display their permissions and size along with their name	
find all the text files in the current folder and do not  search in the sub directories	
"find all the text files in the current folder expect those which are in the path ""sk"""	
"find all the text files in the current folder starting with ""somefiles-"""	
"find all the text files in the current folder starting with ""somefiles-""  and prepend the first line"	
find all the text files in the entire filesystem which belong to the user root and display the ten files.	
find all the text files in the file system and search only in the disk partition of the root.	
find all the text files in the folder /home/calvin and do not search beyond 2 levels	
find all the text files in the folder /home/calvin which are atleast below 2 levels	
find all the text files in the folder /tmp/1 and display only those files which have spaces in their names	
find all the text files in the home directory	
find all the text files in the home folder	
find all the text files in the home folder and display the first lines. save the output to the file report.txt	
find all the text files in the temp folder and search for the word hello in all these files and display the matched files	
find all the text files present in the current directory excluding the search in certain paths.	
find all the text files that have modified in the last 2 days and not modified today	
find all the text files which are present in the current directory excludinghidden files.	
find all the undo files in the current folder and display the toal lines, words, characters	
find all the video files in the folder /home/<user>	
find all the video files in the home folder	
find all the video files which are bigger than 10 mb which have not been modified in the last 60 days but have been changed in the last 100 days in /tmp and /var/tmp folder home folders	
find all the wav files in the current folder and do not search in the sub directories	
find all the word press configuration php files in the folder /var/www	
find all the word press configuration php files in the folder /var/www and do not search beyond two levels	
find all the xml files in a directory and pass it as an argument to a jar	
find all the xml files in a directory and pass it as an argument to a jar (parallel is used to achieve parallel processing)	
"find all the xml files in current folder and which are present in the pattern list file ""/tmp/a"""	
find all the xml files in the current folder except those that are present in the workspace folder and create a tarball of these files	
find all the xml files in the current folder which are present in the pattern text file	
find all the zip files in the current folder	
find all the zip files in the current folder and create a tar ball of these zip files	
find all thumb.png files in the temps/ directory tree	
find all top level directories under /home that doesn't contain a file/directory named 'bin'	
find all top level directories under current directory that doesn't contain a file/directory named 'bin'	
find all top-level files in the current folder but ones with name like '*music*' to the 'dest/' folder.	
"find all txt files in the current directory and copy them to directory ""$home/newdir"""	
find all txt files on the system and copy them to /tmp/txt	
find all txt files that belong to user root	
find all txt files under the current folder except ./directory folder	
find all txt files under the current folder except ./misc folder	
find all user files larger than 5mb	
find all xml files under current directory	
find all xml files under current directory and archive them to .bz2 archives	
find all xx* files/directories excluding 'xxx' files/directories under your home directory	
find all your jsp's, map them to your localhost webserver, and invoke a wget (fetch) on them	
find all your text files	
find all your text files and page through them	
find an inode and remove	
find and clear utf-8 files with bom	
find and compress all .pl files in the current directory tree	
find and copy all log files in the current directory tree to /tmp/log-files	
find and delete all .zip files in the current directory tree	
find and delete all core files in the user's home directory and below.	
find and delete all files with a used disk size of 0	
find and delete all hard links in the /home directory to file1	
find and delete all hard links in the /home directory tree to file1	
find and delete all the empty directories in the current folder and all its sub directories too	
find and delete all the files in the entire file system whose size is greater than 100mb.	
find and delete the file with inode number 1316256	
find and display contents of somefile.cf in a weblogic domain directory	
find and image in current folder (case insensitive search)	
find and kill a process by name	
find and list all files on your current directory and show a few lines of output from the beginning	
find and list all regular files	
find and print all pdf files in the current directory and its sub-directories except for any found in the ./pdfs directory.	
find and print detailed information about all regular files in your home directory and below that have only the group permission set	
find and print the full pathname of all pdf files in the current directory and its sub-directories.	
find and print the names of all files found in the current directory and all of its sub-directories	
find and print the names of all files found in the current directory and all of its sub-directories.	
find and remove all .core files	
find and remove all .mp3 regular files under the current directory and below	
find and remove all .txt regular files under the current directory and below	
find and remove multiple *.mp3 files	
find and remove multiple *.txt files	
find and remove multiple files such as *.mp3 or *.txt	
find and remove multiple files such as *.mp3 or *.txt under current directory	
find and remove the .rhosts file in the /home directory tree	
find and remove the file with inode number 782263 in the current directory tree	
find and remove zero bytes files from user's directories .	
find and replace xxx with yyy in whole directory tree	
find and show all files in the current directory tree that are exactly 2000 kb	
find and show all files in the current directory tree that are smaller than 500 kb	
find and show all files on the system that are larger than 900 mb	
find and the 5 largest regular files in the downloads folder of tecmint's home directory and output the file sizes in bytes.	
"find and uncompress all files in the current directory tree ending in "".csv.gz"""	
"find any file that has ""disc"" somewhere in its name in the current directory and all of its sub-directories."	
find any files in the current directory and its sub-directories that were last accessed more than 7 days and are larger than 20480 blocks in size.	
find any files in the current directory and its sub-directories that were last accessed more than 7 days or are larger than 10 * 1024 * 2 blocks in size, that is larger than 20480 blocks.	
find any files in the current directory and its sub-directories that were last accessed more than 7 days or are larger than 20480 blocks in size.	
find any files in the current directory that begin with a number	
"find any files or directories called "".svn"" under the current directory and run a long list on each one, displaying a line count of the resultant output."	
"find any files or directories called "".svn"" under the current directory and run a recursive delete (without prompting) command on each one."	
find any hidden regular files in the current directory and its sub-directories that were modified after .cshrc was last modified.	
find apparent size of a target directory	
find arch etc lib module usr xpic -type f | xargs chmod -x	<MISSING>
find arch/x86/usr/sbin arch/x86/usr/x11r6/bin usr/sbin/ -type f | xargs chmod a+x	<MISSING>
find asia emea -name \*.gz	<MISSING>
find asia emea -name \*.gz -print0 | xargs -0	<MISSING>
"find asia emea -type f -name ""*gz"""	<MISSING>
"find asia emea -type f -name ""*gz"" | while ifs= read -r fname; do printf ""%s %s\n"" ""$fname"" $(gzip -dc ""$fname"" | wc -l) >> file_count.txt; done"	<MISSING>
find b -cmin -5	<MISSING>
find b -type f -cmin -5	<MISSING>
find b -type f -cmin -5 -exec cp '{}' c \;	<MISSING>
find backup/ -type d -print0 | xargs -0 tar cf directory-structure.tar --no-recursion	<MISSING>
find backup/ -type d | tar cf directory-structure.tar -t - --no-recursion	<MISSING>
find backup/ -type d | xargs tar cf directory-structure.tar --no-recursion	<MISSING>
find bar -path /foo/bar/myfile -print	<MISSING>
find bar1 -name '*foo*' -not -type d -not -name '*.cc' -exec ln -s $pwd/'{}' bar2/ \;	<MISSING>
find bills -type f -execdir sort -o '{}.sorted' '{}' ';'	<MISSING>
find bills -type f | xargs -i xx sort -o xx.sorted xx	<MISSING>
"find bla -name ""*.so"""	<MISSING>
find bla -name *.so -print0 | sort -rz	<MISSING>
find blabla* files under current directory	
find broken links	
find broken links using the file command on each symlinks in the system and searching for the keword 'broken' with grep	
find broken symlinks	
find broken symlinks in current directory	
find broken symlinks in the current directory tree	
find bugzilla -type d -exec chmod 775 {} \;	<MISSING>
find build -not \( -path build/external -prune \) -name \*.js	<MISSING>
find build -not \( -path build/external -prune \) -not \( -path build/blog -prune \) -name \*.js	<MISSING>
find build.xml file in the current folder and run ant clean-all	
find c, c++ source and header files in current folder and create etags for them	
"find cam2/2013* -name ""*.jpg"" -print0 | xargs -0 cat | ffmpeg -f image2pipe -framerate 30 -vcodec mjpeg -i - -vcodec libx264 -profile:v baseline -level 3.0 -movflags +faststart -crf 19 -pix_fmt yuv420p -r 30 ""cam2-2013-30fps-19crf.mp4"""	<MISSING>
find case-insentive example.com file, and whole dose not contain beta	
find case-insentive example.com file, omit ./beta path	
find command will display top 10 big files from current directory .	
find command will display top 5 small files from curent directory . most probably you will get zero  bytes files .	
find command will list of all files & directories from current directory , before listing echo command will display ' list of files & directory '	
"find css files omitting results containing ""cvs"""	
"find css files, omitting results containing ""cvs"""	
"find data -xdev -name ""filepattern-*2009*"" -print0 | tar --null --no-recursion -uf 2009.tar --files-from -"	<MISSING>
"find data/ -name ""filepattern-*2009*"" | cpio -ov --format=ustar > 2009.tar"	<MISSING>
find data/ -name 'filepattern-*2009*' -exec tar uf 2009.tar '{}' +	<MISSING>
find data/ -name filepattern-*2009* -exec tar uf 2009.tar {} ;	<MISSING>
find data/ -name filepattern-*2009* -print > filesofinterest.txt	<MISSING>
find data/ -name filepattern-*2009* -print0 | xargs -0 tar uf 2009.tar	<MISSING>
find data/ -print0 | tar --null -t - --create -f archive.tar	<MISSING>
find data/ -print0 | tar -t - --null --create -f archive.tar	<MISSING>
find deb packages in the current directory recursively	
find deb packages in the current directory recursively and list them with `dpkg'	
find debian/fglrx-amdcccle/usr/lib/fglrx/bin/ -type f | xargs chmod a+x	<MISSING>
find debian/fglrx/ -name 'fglrx-libgl*'	<MISSING>
find debian/fglrx/ -name 'fglrx-libglx*'	<MISSING>
find demo -depth -name .git -prune -o -print0 | cpio -0pdv --quiet demo_bkp	<MISSING>
find dir -depth	<MISSING>
"find dir -name ""pattern"" 2>/dev/null"	<MISSING>
"find dir -name '*.jpg' -exec ln -s ""{}"" \;"	<MISSING>
find dir -name '?????????????????????????????????'	<MISSING>
find dir -name \*.jpg -print0 | xargs -0 -n1 ln -s	<MISSING>
find dir -name \*~ | xargs echo rm	<MISSING>
find dir -name \*~ | xargs echo rm | ksh -s	<MISSING>
find dir -name \\*~ -exec rm {} +	<MISSING>
find dir -name image\*.jpg -exec /bin/ksh script.ksh {} \;	<MISSING>
find dir -not -path '.git' -iname '*.py'	<MISSING>
find dir -not -path '.git' -iname '*.py' -print0 | xargs -0 sed --in-place=.bak 's/[[:space:]]*$//'.	<MISSING>
"find dir -not \( -path ""dir1"" -o -path ""dir2"" -prune \) -type f"	<MISSING>
"find dir -not \( -path ""dir1"" -prune \) -not \( -path ""dir2"" -prune \) -type f"	<MISSING>
find dir -type f -exec md5sum {} + > dir.md5	<MISSING>
find dir -type f -exec sed -i 's/ *$//' '{}' ';'	<MISSING>
find dir -type f -print0 | xargs -0 md5sum > dir.md5	<MISSING>
find dir -type f -print0 | xargs -0 md5sum >> file.txt	<MISSING>
"find dir -type f -print0 | xargs -0 sed -i .bak -e ""s/[[:space:]]*$//"""	<MISSING>
find dir -type f -print0 | xargs -r0 sed -i 's/ *$//'	<MISSING>
"find dir -type f -printf ""f %s %p\n"""	<MISSING>
find dir -type f | xargs md5sum >> file.txt	<MISSING>
find dir \( -name 2015\* -a \( -name \*album\* -o -name \*picture\* \) \) -delete	<MISSING>
find dir/ -name '*.txt' | tar -c --files-from=- | bzip2 > dir_txt.tar.bz2	<MISSING>
find dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents	<MISSING>
find dir/ -type f -exec mv {} $(echo {}.fix | iconv -f utf8 -t ascii//translit ) \;	<MISSING>
"find dir1 ! -type d -printf ""%s\n"" | awk '{sum += $1} end{print sum}'"	<MISSING>
"find dir1 ! -type d -printf ""%s\n"" | awk '{sum += $1} end{printf ""%f\n"", sum}'"	<MISSING>
find dir1 ! -type d |xargs wc -c	<MISSING>
find dir1 ! -type d |xargs wc -c |tail -1	<MISSING>
find dir1 -mindepth n -type f	<MISSING>
"find dir1 -type f -a \( -name ""*.java"" -o -name ""*.as"" -o -name ""*.xml"" \)"	<MISSING>
"find dir1 dir2 dir3 -type f -name ""*.java"" -exec grep -il 'foo' {} \;"	<MISSING>
find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;	<MISSING>
find dir2 ! -type d |xargs wc -c	<MISSING>
find dir_name -type f | wc -l	<MISSING>
find dir_to_start -name dir_to_exclude -prune -o -print0 | xargs -0 chown owner	<MISSING>
"find dir_to_start -not -name ""file_to_exclude""  -print0 | xargs -0 chown owner"	<MISSING>
find dirctory files which modification time is  7 days ago	
find directories  that have been modified in the last seven days	
find directories and regular files containing `blah' in their names modified less than 2 days ago, case insensitive	
"find directories in /home/vmail that match pathname ""*/*/maildir/.learnasham/cur"", and move them to folder .inbox/cur"	
"find directories in /home/vmail that match pathname ""*/*/maildir/.learnasham/new"", and move them to folder .inbox/new"	
"find directories in /home/vmail that match pathname ""*/*/maildir/.learnasspam/cur"", and move them to folder .junk/cur"	
"find directories in /home/vmail that match pathname ""*/*/maildir/.learnasspam/new"", and move them to folder .junk/new"	
find directories in /proc and show only those that doesn't match the regex '/proc/[0-9]*($|/)'	
find directories in the /path directory tree whose names are 33 characters in length	
find directories in the current directory (no sub-directories) and print them appended with a string literal 'directory: '	
"find directories in the current directory recursively that are not ""executable"" by all"	
find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir	
find directories in the current directory tree whose names are 33 characters in length	
find directories in the folder /usr/spool/uucp	
find directories modified in last 7 days	
find directories modified within the last 7 days	
find directories named 'work' under '/usr/ports/' directory tree and remove them	
find directories named `build'	
find directories named `doc' in /usr and below	
find directories owned by user news with permissions 775	
find directories starting from /tbd that were modified more than 1 day ago	
find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified less than 30 days ago	
find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified more than 30 days ago	
find directories that are directly under /home/user/workspace directory (no-subdirectories) and were modified more than 30 days ago and print a message saying that the directory wasn't modified during last 30 days	
"find directories that have ""755"" permissions and modify them to have ""700"" permissions"	
find directories under maximum 1 level down the directory $dir with 100 permission that are owned by the user $username	
find directories under the $logdir directory where there has been no modifications within the last 24 hours and compresses the files.	
find directories under the $logdir directory where there have been no modifications for 5 days and deletes them.	
find directories with permissions 777 and change them to 755 recursively	
"find directory ""/some/dir"" if it is empty"	
"find directory ""your/dir"" if it is empty"	
find directory -mindepth 1 -type d -empty -delete	<MISSING>
find directory names starts with 'bar'	
find directory which case-insensitive name is foo in current directory.	
find directory which name is cookbook under /users/al	
find directory_name -type f -print0 | xargs -0 grep -li word	<MISSING>
find dirname  -print0 | xargs -0 grep foo	<MISSING>
find dirname -exec echo found {} \;	<MISSING>
find dirname -exec grep foo {} +	<MISSING>
find disk usage of all files inside the directory	
find disk used space of only the target directory	
"find downloads  -iname ""*.gif"""	<MISSING>
find empty files and directories	
find empty files in the test directory	
find empty files under test directory	
find empty files/directories under test directory	
find empty regular files in /dir and its subdirectories	
find empty1 empty2 not_empty -prune -empty	<MISSING>
"find esofthub esoft -name ""*test*"" -type f -ls"	<MISSING>
find etc home apps -depth -print | cpio -ov > dev/rmt0	<MISSING>
"find euler/ -iname ""*.c*"" -exec echo {} \; -or -iname ""*.py"" -exec echo {} \;"	<MISSING>
"find every directory under ""0001"" and make new directories replacing ""0001"" with ""0002"" at the beginning of their names."	
find every file under the directory /home owned by the user joe.	
"find every file under the directory /usr ending in "".stat""."	
find every file under the directory /var/spool that was modified more than 60 days ago.	
find every file/directory under /var/spool that was modified more than 60 days ago.	
find every file/directory under the directory /home owned by the user joe	
find every javascript file in the wordpress directory	
find every javascript file in the wordpress directory tree	
find every vim undo file in the current directory tree	
find every vim undo file under current directory	
find executable files	
find executable regular files in the current directory tree	
"find fff -name ""*.txt"" -exec md5sum '{}' \;"	<MISSING>
"find fff -name ""*.txt"" -exec md5sum '{}' \; > $tmp_ori"	<MISSING>
find file -chour +1 -exit 0 -o -exit 1	<MISSING>
find file -prune -cmin +60 -print | grep -q .	<MISSING>
find file `chapter1' on the system	
find file `filename.txt' in the current directory tree and edit it with `vi'	
find file `foo.bar' and delete it	
find file `hosts'	
find file end with  '.txt' in current directory.	
find file named foo.txt under current directory.	
find file named foo.txt under root / directory.	
find file names *blast* in specfied directory	
find file names *blast* in specfied directory, case insensitive	
find file size in blocks	
find file size in bytes	
find file which case-insensitive name is foo in current directory.	
find file which name like 'foo.*' in current directory.	
find file1 -prune -newer file2	<MISSING>
find file1 in the level 1 directories and above	
find files (under root file system /) that were accessed within the last 24 hours	
find files accessed at 23:59	
find files and directories in the /tmp/ tree that contain spaces in their names and replace those spaces with underscores	
find files and directories modified in last 24 hours	
find files and directories modified in last 7 days	
find files and directories modified within the last 7 days	
find files and directories newer than comparefile under current directory	
find files and directories owned by xuser1 and change their ownership to user2	
find files and directories that are at least seven levels of nesting in the directory /usr/src	
find files and directories that are at least seven levels of nesting in the directory /usr/src excluding cvs directory	
find files and directories whose owner is daniel	
find files and directories with group id 1003	
find files and directories with the name raid but don't traverse a particular directory	
find files associated with an inode	
find files belonging to the given owner	
find files bigger than 20 megabytes in the home directory tree	
find files by type	
find files changed in the last 1 day	
find files containing `blah' in their names modified less than 2 days ago, case insensitive	
"find files containing string ""#!/bin/ksh"" and append their names and matching strings to /tmp/allfiles"	
find files created in the last minute; works on mac os x	
"find files ending in ""*macs"""	
"find files ending in ""config"""	
"find files ending in ""f"""	
find files ending with .jpg	
"find files having the extension ""bam"" in current directory"	
find files in $dir_to_clean that are older than $days_to_save days and print them with null character appended to their paths	
"find files in $home ending in ""txt"" or ""html"" and case insensitive search for the word ""vpn"""	
find files in /dir/path/look/up directory that names are dir-name-here	
find files in /tmp directory that named are core and deletes them	
find files in /tmp directory that named are core and deletes them, single or double quotes, spaces or newlines are correctly handled	
find files in /u/bill directory which are access an 2 to 6 minutes ago	
find files in /usr directory which are modified after february 1 of the current year	
find files in /var/tmp/stuff and below that have not been modified in over 90 days	
find files in a directory and exit the command if the syntax is correct or display invalid command if the syntax is wrong.	
"find files in and below the current directory whose names begin with ""not"" and remove one of them"	
find files in current directory and grep text and html files - but not index.html and report things that contain the word 'elevator' in four or more lines	
find files in current directory that names are game	
"find files in current folder ending with "".c"" or "".h"" or "".ch"" and search for a word in these files and enable color highlighting of the matched text"	
find files in current folder using name patterns and sort the display the file names in the sorted order	
find files in entire file system that are writable by group or other	
find files in entire file system with at least 644 permissions	
find files in home directory that accessed more than 100 days ago	
find files in home directory that names are game	
find files in home directory which are modified yesterday	
find files in root directory that names are game	
"find files in the ""dir"" directory tree whose names are 33 characters in length"	
find files in the /home/user directory tree changed exactly 10 minutes ago	
"find files in the /travelphotos that are greater than 200k in size but do not have ""2015"" anywhere in the file name"	
find files in the /usr/src directory with pattern` *.c  that larger than 100 kilobytes	
find files in the /var/log folder which were modified an hour or more ago	
find files in the /var/log folder which were modified between 60 minutes and 10 minutes ago	
find files in the /var/log folder which were modified modified 2 weeks ago	
find files in the current directory and below that are 2000 kb in size	
find files in the current directory and below that are less than 500 kb in size	
find files in the current directory and below that are newer than /bin/sh	
find files in the current directory and its sub-directories that begin with 'f'.	
find files in the current directory and sub-directories, that changed within last hour	
find files in the current directory and sub-directories, that were accessed within last hour	
find files in the current directory and sub-directories, whose content was updated within the last hour	
find files in the current directory excluding cvs, svn, git repository files and all binary files.	
"find files in the current directory having name ""filename"""	
find files in the current directory recursively that are not readable by all	
find files in the current directory tree of size between 700k and 1000k	
"find files in the current directory tree that are named ""some_pattern"" and move them to directory ""target_location"""	
find files in the current directory tree that have one link	
"find files in the current directory tree that match ""pattern"" and run ""git diff"" on them"	
"find files in the current directory tree that match pattern ""*sub*"""	
find files in the current directory tree that were accessed within the last 60 minutes	
find files in the current directory tree which are larger than 5 mb in size	
find files in the current directory tree which have permissions rwx for user and rw for group and others	
find files in the current directory tree whose content was changed within the last 60 minutes	
"find files in the current directory tree whose names are of the form ""cxx_data.txt"" where xx is a number from 30 to 70"	
"find files in the current directory tree whose names are of the form ""cxx_data.txt"" where xx is a number from 40 to 70"	
"find files in the current directory tree whose names begin with ""file"" and whose size is 0, and remove them"	
"find files in the current directory tree whose names match regular expression ""^.*~$\|^.*#$"""	
"find files in the current directory tree whose pathnames contain ""sub"""	
find files in the current directory tree whose permissions are 775	
find files in the current directory tree whose size is 24000 bytes	
find files in the current directory tree whose size is greater than 24000 bytes	
find files in the current directory tree whose size is less than 24000 bytes	
find files in the current directory tree whose status was changed within the last 60 minutes	
"find files in the current directory whose names begin with ""file"" and remove them"	
find files in the current directory with pattern` '*.[ch]' which are contain ‘thing’ string and print file names	
find files in the current directory with pattern` '*.[ch]' which are contain ‘thing’ string and print file names which can contain spaces	
find files in the home folder which have been modified in the last day. ( -daystart measures times from the beginning of today rather than from 24 hours ago.)	
find files in the users home directory and for each one, ask the user to confirm to delete the file.	
"find files in two different directories (esofthub and esoft) having the ""test"" string and list them"	
find files larger than 100mb in /var/www and exclude files with /download/ in their path from the output	
find files larger than 50k	
find files matching `.ssh*' and append their anmes to file `ssh-stuff'	
find files matching an exact set of permissions	
find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the bash script	
find files matching regular expression regexp	
"find files matching the pattern ""./sr*sc"" in their paths under current directory"	
find files matching the regex 'myregex' in their contents and append the list of these files to outfile.txt	
find files modified at least 5 days in the future	
find files modified between 6 and 9 minutes ago	
find files modified in last 7 days	
find files modified in the last 5 minutes starting from the current directory	
find files modified more recently than file poop	
find files modified within the past 24 hours	
"find files named ""assemblyinfo.cs"" in the current directory and below, and run ""git diff --name-status"" on them"	
"find files named ""assemblyinfo.cs"" in the current directory and below, and run ""git diff"" on them"	
"find files named ""blabla"" in the current directory tree and print the number of lines in each of them"	
"find files named ""needle"" ignoring the case"	
"find files named ""ppp.conf"" in the /etc directory tree"	
"find files named ""xxx"" and pass their names as arguments to the ""command"""	
find files named 'core' in or below the directory /tmp and delete them	
find files named 'filename.txt' under '/path/to/folder' directory tree ignoring 'ignored_directory'	
find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or directory names containing single or double quotes, spaces or newlines are correctly handled.	
find files named core in or below the directory /tmp and delete them. note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.	
find files named tecmint.txt  of owner root in the entire file system	
find files newer than `tmpfile' starting from the current directory	
find files newer than main.css in ~/src	
find files newer than start.txt but not newer than end.txt	
find files not matching shell pattern '*/vendor/*'	
find files not matching the patterns 'image*-70x70*' and 'image*-100x100*' in their names under folder1 and copy them to folder2	
find files not matching the posix extended regex '.+\-[0-9]{2,4}x[0-9]{2,4}\.jpg' in their paths under folder1 and copy them to folder2	
find files on the system accessed during the last 24 hours but not within the last hour	
find files on the system bigger than 50mb but smaller than 100mb	
find files on the system created during the last 50 days	
find files on the system modified more than 90 minutes ago	
find files on the system that are bigger than 20 megabytes	
find files on the system that are bigger than 20 megabytes and show the sorted list of their filenames	
find files on the system whose names begin with either x or x	
find files owned by no group	
find files owned by no user	
find files owned by nonexistent groups	
find files owned by nonexistent users	
"find files owned by the ""shadow"" group"	
"find files patching ""pattern"""	
find files readable only by the group	
"find files recursively with extension ""ext"""	
find files smaller than 40 blocks skipping directories on other file systems	
"find files starting with the word ""file"" in the current directory tree"	
"find files starting with the word ""file"" in the current directory tree, ignoring the case"	
find files that are 0 bytes in size in the current directory and remove them	
find files that are 0 bytes in size in the current directory tree and remove them	
find files that are 100k	
find files that are empty	
find files that are orphaned	
find files that are writable by both the “other” and the group	
find files that are writable by both the “other” and the group under the plsql directory	
find files that are writable by the user, the group, or both	
find files that are writable by the user, the group, or both under the current directory	
find files that are writable by the user, the group, or both under the plsql directory	
find files that do not have a listing in the /etc/passwd or /etc/group in the file system	
find files that don’t have 644 permissions	
"find files that end in "".gz"" and execute ""awk -f, '$1 ~ /f$/'"" on their unzipped contents"	
find files that have a modification time of a day ago	
find files that have been modified within the last month and copy them somewhere	
find files that match the executable bit for owner or group	
find files that were accessed in less than a day ago	
find files that were modified 7 days ago and archive them	
find files that were modified in less than 1 minute ago	
find files that were modified less than 7 days ago and archive them	
find files that were modified more than 7 days ago and archive them	
find files that were modified more than 7 days ago but less than 14 days ago and archive them	
find files that were modified second last week and archive them	
find files under '/travelphotos' directory tree which are bigger than 200kb and do not have 2015 in their names	
find files under /etc/apache-perl that are modified more recently than /etc/apache-perl/httpd.conf	
find files under /some/path that are not executable	
find files under /some/path that are not executable by the owner	
find files under /tmp that are larger than 10kb and smaller than 20kb	
find files under /usr that are newer than the first file `firstfile'	
find files under /usr that are the same age or older than file `firstfile'	
find files under [directory] that match 'pattern_to_include' in their names without descending into directories that match 'pattern_to_exclude' and 'another_pattern_to_exclude', then search for 'pattern' in those files	
find files under current directory that are newer than $date_time in regards of modification time	
find files under current directory that are not newer than $date_time in regards of modification time	
find files under current directory that contains the string '/bin/ksh'	
find files under current directory with name (or glob pattern) expanded by $1 and save the list to /tmp/safe_del.lst	
find files under current directory without descending into other file systems and append a null character at the end of each paths	
"find files under the current directory called ""foo"" or ""bar"""	
find files under the current directory containing a space in the filename and delete them	
"find files under the current directory ending in ""txt"" and list them, or ending in  ""html"" but do nothing."	
find files using file-name	
find files which are more than 2 days old under  ${userdir}/${i}/incoming directory	
find files which are more than 2 days old under  ${userdir}/${i}/incoming directory and remove them	
find files which do not have all permissions to all the users in the current directory	
find files which full path name is /tmp/foo/bar under /tmp/foo directory and print	
find files which full path name is /tmp/foo/bar under foo directory and print	
find files which full path name like '*/*config' at current directory and print	
find files which full path name like '*f' at current directory and print	
find files which have all permissions to all the users in the current directory	
find files which modification time is  7 days ago	
find files which modification time is  one day ago	
find files which were changed in the past 1 hour	
find files whose content was modified at least 1 minute ago	
find files whose data was modified within the given days of the month	
"find files whose name starts with ""myfile"", ignoring the case"	
find files whose names match the pattern given by the 2nd argument $2 of the bash script and replace string $3 with $4 in them	
"find files whose pathnames contain ""string"" and print these pathnames replacing 'search string' with 'new string'"	
"find files whose pathnames end in ""config"""	
"find files whose pathnames end in ""f"""	
find files with 002 permission in entire file system	
find files with 002 permission in entire file system and print them with the string 'has world write permissions' appended after every path	
find files with 002 permission in entire file system and print them with the string 'has world write permissions' printed at last	
find files with 002 permission in entire file system with the null character as the delimiter	
find files with 002 permission under /tmp and print them with the string 'found world write permissions:' printed as the first line of output	
find files with 002 permission under /tmp and print them with the string 'found world write permissions:' printed as the first line of output or print 'no world writable found' if no such files were found	
find files with 777 permissions and change them to 755	
find files with a question mark in their names	
find files with a question mark in their names and save the output as a file	
find files with extension .conf in the /etc directory tree	
find files with group write permission and remove the permission	
find files with inode number 199053	
find files with name `aaa.txt' under the current directory	
"find files with pattern ""*[!0-9][1-9].txt""  and execute chmod and ls command with and condition then sort the output"	
find files with pattern` '*.h' and print comparison between file and /tmp/master directory	
find files with sgid (2000) and suid(4000) permssions set in the file system	
find files with size more than 200557600b and which are more than 2 days old under  ${userdir}/${i}/incoming directory	
find files with size more than 200557600b and which are more than 2 days old under  ${userdir}/${i}/incoming directory and remove them	
find files with the extension .conf in the /etc directory	
"find files/ -name ""*.gz"" | nl -n rz | sed -e 's/\t/\n/' | xargs --max-args 2 ..."	<MISSING>
find files/directories containing 'test' in their names and display the directory contents before the directories themselves	
find files/directories greater than 10mb in your home directory	
find files/directories in entire file system newer than myfile	
find files/directories in entire file system that had their meta information changed more than 3 days ago	
find files/directories in entire file system that have been modified in the last minute	
find files/directories in entire file system that were accessed in less than a day ago	
find files/directories in entire file system that were modified a day ago	
find files/directories in entire file system with at least 644 permission	
find files/directories modified within the last day under /etc	
find files/directories modified within the last hour under current directory	
find files/directories named 'aaa.txt' under current directory tree	
find files/directories named 'articles.jpg' under current directory tree and change their permission to 644	
find files/directories named 'document' in 'ext2' partitions in entire filesystem	
find files/directories named 'document' in the entire filesystem and in the directory tree '/usr' even if it's in a different partition without traversing to other devices/partitions	
find files/directories named 'file.txt' in the path '/usr/lib/important/'	
find files/directories named 'file.txt' that belong to user 'tutonics' in the entire filesystem	
find files/directories named 'filename' in the entire filesystem	
find files/directories named 'foo' in the current partition of the root filesystem	
find files/directories named 'foo' under current directory tree without descending into directories named 'foo'	
find files/directories named 'foo.bar' in the root filesystem partition	
find files/directories named 'foo.bar' under './dir1' and './dir2' directory tree	
find files/directories named 'photo.jpg' in the entire filesystem	
find files/directories named 'sar' under '/usr', '/bin', '/sbin' and '/opt' directory tree	
find files/directories named 'sar' under directory trees whose path starts with '/u' or '/b' or '/s' or '/o'	
find files/directories named 'somename.txt' under current directory tree	
find files/directories named 'test_3' under current directory tree	
find files/directories named blah (case insensitive) under current directory	
find files/directories named blah under current directory	
find files/directories named<filetype> under current directory which were accessed less than 5 days ago	
find files/directories not changed in two weeks under /dev/shm	
find files/directories that are bigger than 10000 kb in size uder '/usr/local' directory tree	
find files/directories that are newer than 'foo.txt' under current directory tree	
find files/directories that are owned by the user 'syslog' in entire filesystem	
find files/directories that belong to user 'ian' under '/tmp' directory tree	
find files/directories that does not have write permssion for group	
find files/directories that does not have write permssion for group and others	
find files/directories that does not have write permssion for group or others	
find files/directories that have no owner or group under /path	
find files/directories that have not been modified in the last one day in directories or files taken from the glob pattern '/tmp/test/*'	
find files/directories that is under group 'root' or have no group and set their group to 'apache'	
find files/directories that isn't owned by the user 'apache' under /var/www	
find files/directories under '/dir' directory tree that are newer than 'yesterday.ref' file and older than 'today.ref' file by modification time	
find files/directories under '/usr' directory tree that are newer than /tmp/stamp$$ by modification time	
find files/directories under /tmp smaller than 100 bytes	
"find files/directories under /users/tom that matches both the pattern ""*.pl"" and  ""*.pm"""	
find files/directories under current directory and force xargs to print them one by one	
find files/directories under current directory and print them	
find files/directories under current directory and print them as null terminated strings.	
find files/directories under current directory and write them to a file as null terminated strings.	
find files/directories under current directory excluding the path ./src/emacs	
"find files/directories under current directory matching the posix-egrep type regex "".+\.(c|cpp|h)$"" in their names"	
find files/directories under current directory that are modified exactly one hour ago	
find files/directories under current directory that matches './projects/insanewebproject' in their paths	
find files/directories under current directory that matches './projects/insanewebproject' in their paths and show the first one	
find files/directories under current directory that matches 'projects/insanewebproject' in their paths	
find files/directories under current directory that matches the regex '/path/to/something'  in their paths	
find files/directories under current directory that matches the regex /path/to/something[^/]*$  in their paths	
find files/directories under current directory that matches the regex /projects/insanewebproject[^/]*$  in their paths	
find files/directories under current directory without descending into it	
find files/directories with exactly read,write and execute permission for all (owner, group and others) under /path	
find files/directories with inode number '212042' under '/var' directory tree without traversing other devices/partitions	
find files/directories writable by group and others under the /path directory	
find files/directories writable by group or others under the /path directory	
find find symlinks pointing to /mnt/oldname* in the entire file system	
find flash videos stored by browsers on a mac	
find folder -type f -exec gzip -9 {} \; -exec mv {}.gz {} \;	<MISSING>
find folder -type f -print0 | xargs -0 file --media-type | egrep 'image|video' | cut -f1 -d : | tr '\n' '\0'	<MISSING>
find folder* -name '*.a' -print | cpio -pvd /path/to/dest	<MISSING>
find folder1 -type f -print0	<MISSING>
"find folder1 -type f -print0 | xargs -0 -i % find folder2 -type f -exec diff -qs --from-file=""%"" '{}' \+"	<MISSING>
find folder1 -type f -regextype posix-extended \( ! -regex '.+\-[0-9]{2,4}x[0-9]{2,4}\.jpg' \) -print0 |  xargs -0 cp -p --target-directory=folder2	<MISSING>
find folder1 \( ! -name 'image*-70x70*' -a ! -name 'image*-100x100*' \) | xargs -i% cp -p % folder2	<MISSING>
find folder1 folder2 -iname '*.txt' -print0 | du --files0-from - -c -s | tail -1	<MISSING>
"find folder1/ -depth -type f -printf ""%d\t%p\n"""	<MISSING>
"find folder1/ -type f -printf ""%d\t%p\n"" | sort -n | sed -e ""s|[0-9]*\t||"""	<MISSING>
find folder_name -type d -exec chmod 775 ‘{}’ \;	<MISSING>
find folder_name -type f -exec grep your_text  {} \;	<MISSING>
"find foldername -exec chmod a+rwx {} "";"""	<MISSING>
"find foldername -type d -exec chmod 755 {} "";"""	<MISSING>
"find foldername -type f -exec chmod 644 {} "";"""	<MISSING>
find foo -name headers	<MISSING>
find foo -path /tmp/foo/bar -print	<MISSING>
find foo -path foo/bar -print	<MISSING>
find foo -type f ! -name '*music*' -exec cp {} bar \;	<MISSING>
"find foo bar -name ""*.java"""	<MISSING>
"find foo bar baz -name ""*.rb"""	<MISSING>
find foo, foo, foo, foo, etc.	
find foo, foo, foo, foo, etc., but only dirs	
find foo, foo, foo, foo, etc., but only files	
find foo/// bar/// -name foo -o -name 'bar?*'	<MISSING>
find for a filename with multiple patterns in the current folder	
find for a word in all the regular files in the current directory	
find for all *.txt files/directories in vfat file systems	
find for lighttpd in /var	
"find for the word ""dba_2pc_pending"" in all the files of current fodler having the word ""sql"" in their name"	
find for xml files in current folder using regular expressions	
"find from / a file called ""expect"", suppressing any error messages"	
"find from / a file called 'tobesearched.file', redirecting error messages to the output and filtering any lines containing the text ""permission denied"""	
find from / a file called 'tobesearched.file', suppressing any error messages	
find full_path_to_your_directory -type f -printf '%p %s\n'	<MISSING>
find grub.conf files in entire file system	
find grub.conf files in entire file system discarding errors	
find grub.conf files in entire file system discarding errors in csh or tcsh shell	
find hard links to the same file lpi104-6/file1 in the directory tree lpi104-6	
find home/magie/d2 -type f -perm +111 | wc -l	<MISSING>
find home/magie/d2 -type f -perm -u+rx | wc -l	<MISSING>
find how many directories are in a path (counts current directory)	
find how many files are in a path	
find htdocs -type d -exec chmod 775 {} +	<MISSING>
find htdocs -type f -exec chmod 664 {} + -o -type d -exec chmod 775 {} +	<MISSING>
"find htdocs cgi-bin -name ""*.cgi"" -type f -exec chmod 755 {} \;"	<MISSING>
find httpd.conf file in /etc directory	
find httpdocs -type d	<MISSING>
find image files and move them to the pictures directory	
find image-folder/ -type f	<MISSING>
"find images -name ""articles.jpg"""	<MISSING>
find images -type f	<MISSING>
find images/ -type f	<MISSING>
"find in $home files ending in ""txt"" and do nothing with them, or files ending in ""html"" and list them null separated."	
find in the current direcoty whose suffix is .tmp , find will not serach recursively limit of find is 2 subdirectory .	
find in the entire file system for the file mysql	
find in the entire file system for the files which have sticky bit.	
"find in the file system for the directories with the name ""httpdocs"""	
"find in the file system for the directories with the name ""httpdocs"" discard all the errors"	
find index.html | xargs -rt sed -i 's/<script>if(window.*<\/script>//g'	<MISSING>
"find jcho -name '*.data' | while read -r f; do cp ""$f"" ""$(echo ""$f"" | sed 's~\([^)]*\)/\([^()]*\)$~\1_\2~')""; done"	<MISSING>
find jcho -name *.data	<MISSING>
"find jcho -name *.data -exec sh -c 'f=""${0}""; d=$(echo ${f} | sed -re 's/0/2/' ); cp ${f} ${d} ' {} \;"	<MISSING>
find jcho -name 2*.data	<MISSING>
"find kat -name dok.txt -exec bash -c 'echo -e ""\nautor: jan kowalski"" >> {}' \;"	<MISSING>
"find kat -printf ""%f\n"""	<MISSING>
"find kat -type f \( -name ""*.c"" -o -name ""*.cpp"" -o -name ""*.h"" \)"	<MISSING>
"find kat -type f \( -name ""*~"" -p -name ""*.bak"" \) -delete"	<MISSING>
find katalogi -name wzorzec	<MISSING>
find largest file in linux with find command	
"find lib etc debian -name ""*.sh"" -type f | xargs chmod +x"	<MISSING>
find lib/ -name '*.c' -print0 | xargs -0 grep ^pyerr	<MISSING>
find links that point to nothing	
find links that point to nothing to find links that point to nothing, use the perl interpreter with find, like this:	
find links to any file that happens to be named `foo.txt'	
find links to file path/to/foo.txt	
find list directory  with sub-folder count .	
find list empty directories	
find list of all files with file permission , link , owner , group , reation time , size , file name	
find list of directories  with non-zero sub-folder count:	
find list of directory  with non-zero file count	
find local /tmp -name mydir -type d -print	<MISSING>
find lpi104-6 -inum 1988884	<MISSING>
find lpi104-6 -samefile lpi104-6/file1	<MISSING>
"find lpi104-6 research/lpi104-6 -lname ""*file1"""	<MISSING>
find lpi104-6 research/lpi104-6 -type l	<MISSING>
find main-directory -type f	<MISSING>
find main-directory -type f -exec mv -v '{}' '{}'.html \;	<MISSING>
find mainfolder -type f > outputfile	<MISSING>
find mainfolder > outputfile	<MISSING>
find man5 -print	<MISSING>
find master -type d | sort	<MISSING>
find md5sum of 'string to be hashed'	
find md5sum of 401	
"find md5sum of a string ""password"""	
find md5sum of a string stored in $pass	
find md5sum of an empty string	
"find md5sum of content from ""www.google.com"""	
find md5sum of string 'hi'	
"find md5sums of files named ""file*.txt"""	
find media/ -type d -exec chmod 700 {} \;	<MISSING>
find media/ -type f -exec chmod 600 {} \;	<MISSING>
find movies over a gigabyte in size	
"find my_folder -type f -exec grep -l ""needle text"" {} \; -exec file {} \; | grep text"	<MISSING>
find myapp.app -name headers -type d -delete	<MISSING>
"find myapp.app -name headers -type d -exec rm -rf ""{}"" \;"	<MISSING>
"find myapp.app -name headers -type d -exec rm -rf ""{}"" \; 2>/dev/null"	<MISSING>
"find myapp.app -name headers -type d -exec rm -rf ""{}"" \; || true"	<MISSING>
find myapp.app -name headers -type d -prune -exec rm -rf {} +	<MISSING>
find mydir -mindepth 2 -type d	<MISSING>
find mydir -type d	<MISSING>
find myfile -perm 0644 -print	<MISSING>
find myfiles | cpio -pmud target-dir	<MISSING>
find mysong.ogg anywhere under the home directory	
"find música/* -type f -name "".*"" -exec /usr/bin/rm -i {} \;"	<MISSING>
"find música/* -type f -name "".*"" -exec ls -l {} \;"	<MISSING>
find música/* | egrep -z \/\\. | xargs -0 echo	<MISSING>
"find non-hidden files (ones that do not start with the period ""."" chartacter) that were are modified in the last 15 minutes."	
find not case sensitive all directories that names are 'apt'	
find not case sensitive all directories that names are 'apt' and display details	
find not case sensitive all directories that names are 'project.images'	
find not-executable files under /home/www	
find number of different rows between file1 and file2.	
"find olddir -name script.sh -printf ""%p\0"" -printf ""newdir/%p\0"" | xargs -0l2 cp -n"	<MISSING>
"find olddir -type d -printf ""newdir/%p\0"" | xargs -0 mkdir -p"	<MISSING>
find one file or directory in the current directory whose name matches the pattern given as a variable $a	
find only directories	
find only files under /etc with the size of 100k-150k	
find only number of hard link & name of files from long list	
find only permission field & file name from long listing with find command .	
find original -type d -exec mkdir new/{} \;	<MISSING>
find original -type f -exec ln -s {} new/{} \;	<MISSING>
find originals -name '*.jpg' | xargs -1 -p 2 makeallsizes	<MISSING>
find originals -name '*.jpg' | xargs -1 makeallsizes	<MISSING>
"find other -maxdepth 1 -printf ""%p\n"""	<MISSING>
find out all *.sh owned by user vivek	
find out all files owned by user vivek	
find out all hard links in the /home directory to file1	
find out if there are any files on the system owned by user `account'	
find out what group a given user has	
find parent -name dir*	<MISSING>
find parent_directory -type d	<MISSING>
find path -type f -printf '%s\n' | awk '{sum += $1} end {print sum}'	<MISSING>
"find path/ -name ""*.log"""	<MISSING>
"find path/ -name '*.log' -print0 | xargs -r0 -i {} bash -c 'grep -q ""string that should not occur"" ""{}"" || echo ""{}""'"	<MISSING>
"find path/ -name '*.log' -print0 | xargs -r0 grep -l ""string that should not occur"""	<MISSING>
find path/to/folder -type f -print0  | sort -z | xargs -0 sha1sum; find path/to/folder \( -type f -o -type d \) -print0 | sort -z | xargs -0 stat -c '%n %a' | sha1sum	<MISSING>
find path/to/folder -type f -print0 | sort -z | xargs -0 cat | sha1sum	<MISSING>
find path/to/folder -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum	<MISSING>
find path/to/folder -type f -print0 | xargs -0 sha1sum | sha1sum	<MISSING>
find path_to_dir -type d	<MISSING>
find path_to_dir -type f	<MISSING>
find path_to_folder -maxdepth 1 -type f -exec bzip2 -zk {} \;	<MISSING>
find pathfolder -maxdepth 1 -type f -not -path '*/\.*' | wc -l	<MISSING>
find pathfolder -mindepth 2 -maxdepth 2 -type f -not -path '*/\.*' | wc -l	<MISSING>
find pathfolder -type f	<MISSING>
find pathfolder -type f  2> err.txt | wc -l	<MISSING>
"find pdfs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -c 2 -i --with-filename --label=""{}"" --color ""perry sound""' \;"	<MISSING>
"find pdfs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -i --with-filename --label=""{}"" --color ""perry sound""' \;"	<MISSING>
"find pdfs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -l -i --with-filename --label=""{}"" --color ""perry sound""' \;"	<MISSING>
"find pdfs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -l -z -i --label=""{}"" ""perry sound"" | xargs -0 -i{} grep -i -l --label=""{}"" ""october 26, 2004"" ""{}""' \;"	<MISSING>
"find pdfs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -l -z -i --with-filename --label=""{}"" --color ""perry sound"" | xargs -0 -i{} cp -v {} found/' \;"	<MISSING>
find php files containing 2 or more classes	
find php files with abstract classes	
find plsql -type f  -perm -220 -exec ls -l {} \; 2>/dev/null	<MISSING>
find plsql -type f  -perm -ug=rw -exec ls -l {} \; 2>/dev/null	<MISSING>
find plsql -type f  -perm /220 -exec ls -l {} \; 2>/dev/null	<MISSING>
find plsql -type f  -perm /ug=rw -exec ls -l {} \; 2>/dev/null	<MISSING>
find posns -type f -exec split -l 10000 {} \;	<MISSING>
"find process ""terminal"" displaying the searching process"	
find project ! -type d -print | egrep '/,|%$|~$|\.old$|sccs|/core$|\.o$|\.orig$' > exclude	<MISSING>
find project -maxdepth 1 -mindepth 1 -regextype posix-egrep ! -iregex  $pattern  ! -empty -type d	<MISSING>
find project -name '*.php' -type f -print0 | xargs -0 grep -l ireg	<MISSING>
find project -type f -print | egrep '(\.[ch]|[mm]akefile)$' > include	<MISSING>
"find project / src / -name ""* .o"" -exec rm -f {} \;"	<MISSING>
find projects/ -name '*.php' -print | cpio -pdm copy/	<MISSING>
find recursively all emacs backup files in the current directory and remove them	
find recursively all empty directories in the current directory	
find recursively all files changed within the last 5 minutes starting from directory b	
"find recursively all files in /path that end in ""txt"" and copy them to /tmp/"	
"find recursively all files in the ""."" directory tree whose names end with "".class"" and delete them"	
find recursively all files matching pattern 'file??' in the xargstest/ directory and print a sorted list of them	
"find recursively all files that match ""pattern"" starting from the directory ""dir"""	
find recursively all files under current directory tree that contain a colon in the filename	
"find recursively all files whose names begin with ""foo"""	
"find recursively all files whose names ends with ""foo"""	
find recursively all python files in the current directory and search them for the word ‘import’	
find recursively all python files in the current directory tree and count the number of lines in them	
find recursively all regular .txt files in the current directory tree except readme.txt	
find recursively all regular files changed within the last 5 minutes starting from directory b	
find recursively all regular files in directory tree b that were changed within the last 5 minutes and copy them to directory c	
find recursively all regular files in the current directory skipping hidden files and directories matching pattern '.?*'	
find recursively all regular files in the current directory tree ending in .dll or .exe	
find recursively all regular files in the current directory tree not ending in .dll or .exe	
"find recursively all regular files in the current directory whose names contain ""."""	
find recursively regular files in the current directory tree	
find recursively regular files in the directory given as the script's command line argument #1, skipping hidden files and directories	
"find recursively the files named ""file"" in the current directory ignoring all .git directories"	
"find recursively the files named ""file"" in the current directory ignoring the .git subdirectory"	
find recursively the latest modified .zip file in the current directory	
find recursively the latest modified file in the current directory	
find regular  file named foo.txt under root / directory.	
find regular file named foo.txt under root / directory.	
find regular files and directories that have been modified in the last seven days	
"find regular files in the ""mail"" folder under the user's home directory, displaying filenames and lines that contain the text ""linux"""	
find regular files in the current directory that are writable by at least somebody	
find regular files in the current directory that are writable by their owner	
find regular files in the current directory tree that are called findcommandexamples.txt and remove them	
find regular files in the current directory tree that have all executable bits set	
find regular files in the current directory tree that have any executable bits set	
find regular files in the current directory tree that have executable bits set for the user and group but not for the other	
find regular files in the current directory tree that have the user executable bit set	
find regular files in the current directory, without descending into sub-directories and display as a null separated list.	
find regular files larger than 500mb in the current directory tree	
"find regular files matching pattern ""*oraenv*"" and excecute the ""file"" utility for each of them"	
find regular files modified less than 14 days ago stripping ./ from each file name	
find regular files modified within the last 7 days	
find regular files modified within the last ten minutes under /etc	
"find regular files named ""expression -and expression"" under and below /dir/to/search/"	
"find regular files named ""expression -or expression"" under and below /dir/to/search/"	
"find regular files named ""regex"" under and below /dir/to/search/"	
find regular files named 'findme.txt' under '/usr' and '/home' directory tree	
find regular files named core under /tmp and delete them	
find regular files readable by the world	
find regular files that are bigger than 500 mb in size under current directoryt tree	
find regular files that are larger than 2gb	
find regular files that have suid or sgid set	
find regular files under '/somefolder' directory tree satisfying the options/conditions/operations provided in ${args[@]} array with find command	
"find regular files under / that contain ""string"" and clear out their contents"	
"find regular files under / that contain ""string"" and clear out their contents, including newlines"	
"find regular files under / that contain ""stringtofind"""	
"find regular files under / that contain ""stringtofind"" and clear out their contents"	
"find regular files under and below /path that match pattern ""???-???_[a-za-z]*_[0-9]*_*.???"""	
find regular files under the current directory and execute an md5sum command on each one	
find regular files under the current directory, whose name ends in .mbox and rename each file, to the same name without .mbox at the end	
find regular files under the current directory, whose name ends in .mbox and using awk run multiple system commands to rename each matched file, to the same name without .mbox at the end	
find regular files under the current directory, whose name ends in .mbox, piping the output to a while loop that renames each file, to the same name without .mbox at the end	
find regular files under the current directory, whose name ends in .mbox, piping the output to the gnu parallel command that will rename each file to not have a file extension.	
find regular files which have 644 permission	
find regular files which modification time is  7 days ago	
"find regular files whose filename is ""your_pattern"" and display the total size of the files in human readable format."	
"find regular files whose filename is ""your_pattern"", suppressing all error messages."	
find regular files whose names end in .jpg	
find regular files with permissions less than 111	
find regular non-hidden files containing 'some text' in their names	
find regular non-hidden files containing `some text' in their names with hidden directories optimization	
find regular which case-insensitive name is foo in current directory	
find regular/normal files in the current folder	
find relative/path/to/dir -type f -exec md5sum {} + > sums.md5	<MISSING>
find repository_dir/$f -type d -name needed_dir | xargs -r svn checkout	<MISSING>
find root -mindepth 2 -delete	<MISSING>
find root -mindepth 2 -type d -empty	<MISSING>
find root -mindepth 2 -type d -empty -delete	<MISSING>
find root -mindepth 2 -type d 2>/dev/null -exec rm -fr {} \;	<MISSING>
"find root -name '*.rmv' -type f -exec cp --parents ""{}"" /copy/to/here \;"	<MISSING>
find root -name '*.rmv' -type f -exec cp {} /copy/to/here \;	<MISSING>
find root -type -d -empty -delete	<MISSING>
find root -type -f -cmin +30 -delete	<MISSING>
find root's files in the current directory tree	
find root's ruby files accessed in the last two minutes	
find root_dir -type d -exec chmod 555 {} \;	<MISSING>
find root_dir -type f -exec chmod 444 {} \;	<MISSING>
find sess_* -mtime +2 -exec rm {} \;	<MISSING>
find setuid files and directories writing the details to /root/suid.txt , and find large files writing the details to /root/big.txt, traversing the filesystem just once	
find sgid files	
find smallest file in the current directory with find commad	
find sort_test -type f | env -i lc_collate=en_us.utf-8 sort	<MISSING>
find sort_test/ -type f | env -i lc_collate=c sort	<MISSING>
find sort_test/ -type f | env -i lc_collate=en_us.utf8 sort	<MISSING>
find source/directory -ctime -2 | cpio -pvdm /my/dest/directory	<MISSING>
find sourcedir -mindepth 1	<MISSING>
"find sourcedir -mindepth 1 -exec mv ""{}"" --target-directory=destdir \;"	<MISSING>
find sourcedir -mindepth 1 -maxdepth 1	<MISSING>
find sourcedir -mindepth 1 -maxdepth 1 -exec mv --target-directory=destdir '{}' +	<MISSING>
find sourcedir -mindepth 1 -maxdepth 1 -print0 | xargs -0 mv --target-directory=destdir	<MISSING>
find sourcedir -mindepth 1 -print0 | xargs -0 mv --target-directory=destdir	<MISSING>
"find sourcedir -mindepth 1 -type d  -exec mv -t destdir ""{}""  \+"	<MISSING>
find sourcedir -mindepth 1 -type d  -print0 | xargs -0 mv --target-directory=destdir	<MISSING>
find sourcedir -print0 | xargs -0 mv -t destdir	<MISSING>
find sources -type f -exec grep -h foo {} +	<MISSING>
find sql files with text `expression'	
"find sqlite3 databases in the current directory tree and execute query 'select * from table where column1=""value""' on all of them"	
"find sqlite3 databases in the current directory tree, execute query 'select * from table where column1=""value""' on all of them, and search the result for ""value"""	
"find src -name ""*.java"""	<MISSING>
find src/ -name '*.[ch]'	<MISSING>
find src/ -type d -exec mkdir -p dest/{} \;	<MISSING>
find src/ -type d -exec mkdir -p dest/{} \; -o -type f -exec touch dest/{} \;	<MISSING>
find src/js -name '*.js'	<MISSING>
find src/js -type f	<MISSING>
"find src/js -type f -name ""*.js"" -exec cat {} >> ${jsbuild}$@ \;"	<MISSING>
"find src/js -type f -name ""*.js"" > list.txt"	<MISSING>
"find string ""string"" in files residing in the current directory tree, case insensitive"	
find stringbuffer in all *.java files	
find stringbuffer in all *.java files, ignoring case	
find strings with 'features' in /var/run/dmesg.boot' file	
find suffix tcl files under all directories started with 'n'	
find suid files	
find suspicious php files	
"find symbolic links in /usr/lib and /usr/lib64 to files whose pathnames contain ""libstdc++"""	
"find symbolic links in /usr/sbin and /usr/bin to files whose pathnames end in ""*/systemctl"""	
find symbolic links in directory /etc and below	
"find symbolic links in lpi104-6 and research/lpi104-6 to files whose pathnames end in ""file1"""	
find symbolic links under /etc/	
find symbolic links with pattern` '*sysdep.c'	
find symfony -iname '*config*';	<MISSING>
find symfony -name '*config*';	<MISSING>
find symfony -type d	<MISSING>
find symfony -type f	<MISSING>
find symlinks in the current directory tree	
"find symlinks under and below the ""test"" directory and replace them with the content of the linked files"	
find target.out files starting from /starting/path and pass them as arguments to /path/to/simplegrepscript.sh	
find target.txt files in the /base/path/of/proj/d‌​ata directory tree and pass them as arguments to simplegrepscript.sh, saving the output as overallenergy.out	
"find temp/images/ -type f -iname thumbs.db | while read file ; do rm ""${file}"" ; done"	<MISSING>
"find temp/images/* -maxdepth 2 -iname ""*.jpg"" -print0 | xargs -0 mogrify -resize 100x100"">"" -quality 80 -compress jpeg -monitor -strip"	<MISSING>
"find temp/large -iname ""*.jpg"" -printf 'mv %p %p\n' | sed 's/\.jpg$/_lrg\.jpg/' | while read l; do eval $l; done"	<MISSING>
"find temp/large/* -maxdepth 2 -iname ""*.jpg"" -print0 | xargs -0 mogrify -resize 800x800"">"" -quality 85 -compress jpeg -monitor -strip -gravity southeast -draw 'text 10,10 ""www.kmstools.com""'"	<MISSING>
"find temp/medium -iname ""*.jpg"" -printf 'mv %p %p\n' | sed 's/\.jpg$/_med\.jpg/' | while read l; do eval $l; done"	<MISSING>
"find temp/medium/* -maxdepth 2 -iname ""*.jpg"" -print0 | xargs -0 mogrify -resize 428x270"">"" -quality 80 -compress jpeg -monitor -strip"	<MISSING>
"find temp/medium/* -maxdepth 2 -iname ""*.jpg"" -print0 | xargs -0 mogrify -resize 428x270""^"" -quality 80 -compress jpeg -monitor -strip"	<MISSING>
"find temps/ -name ""thumb.png"""	<MISSING>
find test	<MISSING>
find test -depth -empty -delete	<MISSING>
find test -depth -type d -empty -delete	<MISSING>
find test -empty	<MISSING>
"find test -name "".ds_store"" -delete"	<MISSING>
find test -path 'test/icecream/cupcake/*' -o -path 'test/mtndew/livewire/*' | cpio -padluv test-keep	<MISSING>
find test -print | grep -v '/invalid_dir/'	<MISSING>
"find test -regex ""[course*]"" -type d"	<MISSING>
find test -type d -regex '.*/course[0-9.]*'	<MISSING>
find test -type d -regex '.*/course[0-9]\.[0-9]\.[0-9]\.[0-9]$'	<MISSING>
find test -type f	<MISSING>
find test -type f  -size 0 -exec mv {} /tmp/zerobyte \;	<MISSING>
find test -type l -exec cp {} {}.tmp$$ \; -exec mv {}.tmp$$ {} \;	<MISSING>
find test1 -type f -name 'textfile.txt' -print	<MISSING>
find test1 -type f -print	<MISSING>
find teste1 -type f	<MISSING>
find teste1 teste2 -type f -exec md5 -r {} \; | sort	<MISSING>
"find teste2 -type f -iname ""$srchfor""|wc -l"	<MISSING>
find texinfo source files in /usr/local/doc	
find text files modified less than 5 days ago	
find text in whole directory tree	
"find the ""*.foo"" files in the current directory tree that are not under "".snapshot"" directories"	
"find the ""erl"" executable in $path and read the ""releases"" file to extract the erlang release number"	
"find the ""mycprogram.c"" file (case insensitive find) under the current directory"	
"find the ""param1"" string in regular files under and below /var"	
"find the .groovy files outside the ""./target"" directory path"	
find the 5 largest regular files in the current directory and below.	
find the 5 largest regular files in the downloads folder of tecmint's home directory.	
find the biggest files only (but not directories)	
find the core files and  remove them	
find the count of all the charcters of the list of regular files present in the current folder	
find the count of all the regular files in a directory	
find the count of text files that are present in the current working directory.	
find the current directory and all its subdirectories.	
find the depth of all the files in current folder and display the depth and file name	
"find the directories whose names contain ""new parts"" at level 3 of the current directory tree and create symlinks to them in /cygdrive/c/views"	
"find the directories whose pathnames contain ""new parts"" at level 3 of the current directory tree and create symlinks to them in /cygdrive/c/views"	
find the directory with least access time under current directory and assign it to $filename	
find the directory with least modification time under current directory	
find the empty directories and files under current directory	
"find the file ""dateiname"" in the current folder ( case insensitive search)"	
"find the file ""dateiname"" in the entire file system ( case insensitive search)"	
"find the file ""filename.txt"" in the entire file system"	
"find the file ""filename.txt"" in the usr folder"	
"find the file ""fluidpoint"" in the file system and discard all the errors"	
"find the file ""foo.txt"" in the current folder and assign the output to a variable"	
"find the file ""httpd.log"" in the entire file system"	
"find the file ""httpd.log"" in the folder /home/web-server/"	
"find the file ""httpd.log"" in the folder /home/web-server/ ( case insensitive search )"	
"find the file ""mycprogram.c"" in the current folder"	
"find the file ""myfile.txt"" in the folder /home/user/myusername/"	
find the file arrow.jpg in the entire file system	
find the file in the current directory tree with inode number $inum and delete it	
find the file whose inode number is 1316256	
find the file with inode $inum under the current directory and delete it	
find the file with inode number 211028 in the current dirrectory tree and move it to newname.dir	
"find the file with the name ""esxcfg-firewall"" in the current folder"	
"find the file with the name ""file"" in the entire file system"	
find the files in the current directory that match pattern '*.isolate.*.txt' and move them to folder ./isolate	
find the files in the current directory that match pattern '*.isolate.quantifier.txt' and move them to folder isolate/	
find the files in the current directory that match pattern '*.jukebox.*.txt' and move them to folder ./jukebox	
"find the files that have ""644"" permissions and modify them to have ""664"" permissions"	
find the first file/directory in ... directory and quit	
find the first file/directory named 'something' under current directory and quit	
find the first file/directory under $dir which matches the $tmp_dir in its path	
find the first file/directory under current directory and quit	
find the first file/directory under current directory named 'modules' and exit with empty result	
find the largest 10 directories under current directory	
find the largest 10 files (regular files) under current directory	
find the largest files in a particular location	
"find the largest original "".gz"" file in the current directory tree"	
find the md5 sum of all the regular files in multiple folders and display them in sorted order	
find the most recently changed files in a subtree	
find the most recently changed files under current directory	
find the most recently modified files in /path/to/dir and print the modification time followed by a tab and the filename for each file	
find the mycprogram.c (case insensitive find) under the current directory and run the md5sum command against it	
find the number of regular files under and below directory /path/to/dir	
find the oldest *.sql file under current directory	
find the oldest normal file in the current directory	
find the oldest normal file in the current directory and display its contents	
find the oldest normal file in the current directory and display with its timestamp	
find the passwd file in the current directory and one level down	
find the passwd file under root and one level down.	
find the passwd file under root and two levels down	
find the passwd file under the root directory and two levels down	
find the password file between sub-directory level 2 and 4	
find the password file between sub-directory level 2 and 4.	
find the path of a specfic video file in the current directory	
find the process id of mysql	
find the regular js files which path does not contains '*/test/*'  and name does not contains '*-min-*' or '*console*'	
"find the regular/normal file ""myfile"" in the folder /root"	
find the sizes of only directories under current directory sorted by size and redirect the output to dir-sizes.txt	
find the sorted and unique parent directory paths appended with : of all the files that are executable by owner under ~/code directory without descending into hidden directories and redirect the output to the file ~/.codepath	
find the string 'joomla' case insensitively in all the php and html files under current directory tree and display the matched lines along with the file names and line numbers	
find the ten biggest files	
find the top 25 files according to their size in the current directory and its subdirectories	
find the top 25 files in the current directory and its subdirectories	
find the top 5 big files	
find the top 5 biggest files	
find the top 5 small files	
find the top level directories that contain a 'bin' directory in it or in one of it's sub-directories and print a sorted list to file b	
find the total size of *.jpg files within the current directory tree	
find the total size of *.jpg files within the directory tree ./photos/john_doe	
"find the total size of all the "".avi"" files in all the sub-folders below ""/mnt/iso"""	
"find the total size of files whose name begins with ""file"" within the current directory tree"	
find the type & description of all the regular/normal files in the home folder	
find the type of all the regular/normal files in the current folder	
find the type of all the regular/normal files in the current folder (plus takes bulk of files as input to the file command)	
find the unique owners of all the files in the /bin directory	
find things changed today	
find tmp -maxdepth 1 -name '*.mp3'	<MISSING>
find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs    -n1 rm	<MISSING>
find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs    rm	<MISSING>
find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs -n1 rm	<MISSING>
find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs rm	<MISSING>
find tmp -maxdepth 1 -name *.mp3 -print0 | xargs    -0 rm	<MISSING>
find tmp -maxdepth 1 -name *.mp3 -print0 | xargs -0 rm	<MISSING>
"find tmp -type f -printf ""%s %p\n"" | awk '{sub(/^[^ ]+/,sprintf(""f %10d"",$1))}1'"	<MISSING>
"find tmp -type f -printf ""f %s %p\n"""	<MISSING>
"find tmp -type f -printf ""f %s %p\n"" | awk '{sub(/^[^ ]+ +[^ ]/,sprintf(""%s %10d"",$1,$2))}1'"	<MISSING>
find trunk -type f -exec curl --user user:pass --ftp-create-dirs -t {} https://path_to_nexus/{} \;	<MISSING>
find user daniel's files of type jpeg	
find user daniel's files of type jpeg without `autumn' in the name	
"find users whose names begin with ""ab"" and ends with ""1"""	
"find users whose names begin with ""ab"" or whose terminal from which they are logged in ends with ""1"""	
find usr/include -name '*.h' -mtime -399 | wc	<MISSING>
find utf-8 files with bom	
find var/ -type d -exec chmod 700 {} \;	<MISSING>
find var/ -type f -exec chmod 600 {} \;	<MISSING>
find var/log -print0 -iname 'anaconda.*' | tar -cvf somefile.tar -t -	<MISSING>
"find var/log/ -iname ""anaconda.*"" -exec tar -rvf file.tar {} \;"	<MISSING>
find var/log/ -iname anaconda.*	<MISSING>
find var/log/ -iname anaconda.* -exec tar -cvf file.tar {} \;	<MISSING>
find var/log/ -iname anaconda.* | xargs tar -cvf file1.tar	<MISSING>
find whatever -print0 | xargs -0 command	<MISSING>
"find whatever ... | xargs -d ""\n"" cp -t /var/tmp"	<MISSING>
find which ruby files under current directory contain the string 'jump'	
find with combine multiple search criterias , in this command serach  files that begin with abc in there name and dont have .py extension .	
find wordpress -maxdepth 1 -name '*js'	<MISSING>
find wordpress -name '*js'	<MISSING>
"find working -type f -name ""*.mp4"" | head -1"	<MISSING>
"find working -type f -name ""*.srt"" | head -1"	<MISSING>
find writable files in the current directory tree	
find writable regular files in the current directory	
find writable regular files omitting those that contain sites/default/files in their names	
find www -name \*.html -type f -exec basename {} \;	<MISSING>
find x -depth -type d -exec rmdir {} \;	<MISSING>
find x* files/directories under /tmp directory whose status was changed less than 1 day ago	
find x* files/directories under /tmp directory whose status was changed less than 1 day ago and move them to ~/play	
find x* files/directories under current directory whose status was changed less than 1 day ago and move them to /tmp/other	
find xargstest/ -name 'file*' -print0 | xargs -0 myscript.sh	<MISSING>
find xargstest/ -name 'file??'	<MISSING>
find xargstest/ -name 'file??' | sort	<MISSING>
find xargstest/ -name 'file??' | sort | xargs wc -l	<MISSING>
find xargstest/ -name 'file??' | xargs myscript.sh	<MISSING>
find xargstest/ -name 'file?b' | sort | xargs head -n1	<MISSING>
find your/dir -mindepth 1 -prune -empty	<MISSING>
find your/dir -prune -empty	<MISSING>
find your/dir -prune -empty -type d	<MISSING>
"find your_starting_directory -type d -name ""*99966*"" -print"	<MISSING>
find {} -name 'upvoter-*' -type f -or -type l -maxdepth 1 -perm +111	<MISSING>
find {} -name 'upvoter-*' -type f -or \( -type l \) -maxdepth 1 -perm +111	<MISSING>
find {} -name 'upvoter-*' \( -type f -or -type l \) -maxdepth 1 -perm +111	<MISSING>
find {} -type f -depth 1 -perm +0111 | sort -r	<MISSING>
find {} -type f -depth 1 -print0 -perm +0111 | xargs -n1 -0 basename | sort -r && echo	<MISSING>
find | egrep string	<MISSING>
find | head	<MISSING>
find | perl -lne 'print quotemeta' | xargs ls -d	<MISSING>
find | sort	<MISSING>
find | wc -l	<MISSING>
find | xargs	<MISSING>
"find | xargs -i sh -c ""echo {} {}"""	<MISSING>
"find | xargs -i {} bash -c '(([[ -f ""{}"" ]] && grep -l ""my key phrase"" ""{}"") || ([[ ""{}"" =~ ""my key phrase"" ]] && echo {}))'"	<MISSING>
find | xargs ipython nbconvert	<MISSING>
find | xargs ls	<MISSING>
find |wc -l	<MISSING>
find ~	<MISSING>
"find ~ ! -user $user -exec sudo chown ${user}:""{}"" \;"	<MISSING>
find ~ ! -user ${user}	<MISSING>
find ~ -atime +100 -delete	<MISSING>
find ~ -atime 100	<MISSING>
find ~ -daystart -type f -mtime 1	<MISSING>
find ~ -empty	<MISSING>
find ~ -group vboxusers -exec chown kent:kent {} \;	<MISSING>
"find ~ -iname ""screen*"""	<MISSING>
"find ~ -iname ""screen*"" | more"	<MISSING>
find ~ -iname '*.jpg' -exec ls {} +	<MISSING>
find ~ -iname '*.jpg' -exec ls {} \;	<MISSING>
find ~ -iname '*.tex'	<MISSING>
find ~ -mmin -90	<MISSING>
find ~ -mtime 1 -daystart	<MISSING>
find ~ -mtime 2 -mtime -4 -daystart	<MISSING>
"find ~ -name ""*.txt"" -print"	<MISSING>
"find ~ -name ""*.txt"" — print"	<MISSING>
"find ~ -name ""*.txt"" — print -o -name "".*"" — print"	<MISSING>
"find ~ -name ""name_to_find"""	<MISSING>
"find ~ -name ""test*"" -print"	<MISSING>
find ~ -name '*.txt' -print0 | xargs -0 cat	<MISSING>
find ~ -name '*.xbm'	<MISSING>
find ~ -name 'arrow*'	<MISSING>
find ~ -name 'arrow*.xbm'	<MISSING>
find ~ -name 'foto*'	<MISSING>
find ~ -name 'foto*' > results.txt	<MISSING>
find ~ -name 'top*' -newer /etc/motd	<MISSING>
find ~ -name 'xx*' -and -not -name 'xxx'	<MISSING>
find ~ -name *.txt	<MISSING>
find ~ -name game	<MISSING>
find ~ -name myfile	<MISSING>
find ~ -name myletter.doc -print	<MISSING>
find ~ -name readme.txt	<MISSING>
find ~ -newer /tmp/timestamp	<MISSING>
find ~ -perm 777	<MISSING>
find ~ -size +100m	<MISSING>
find ~ -size +10m	<MISSING>
find ~ -size +2000000c -regex '.*[^gz]' -exec gzip '{}' ';'	<MISSING>
find ~ -size +20m	<MISSING>
find ~ -size -100m	<MISSING>
find ~ -size -300b	<MISSING>
find ~ -size -500b	<MISSING>
find ~ -size 100m	<MISSING>
find ~ -type d -exec chmod +x {} \;	<MISSING>
find ~ -type d -exec mkdir junk {} \; 2> /dev/null	<MISSING>
find ~ -type f -exec file -i {} + | grep video	<MISSING>
find ~ -type f -mmin -90	<MISSING>
find ~ -type f -mmin -90 | xargs ls -l	<MISSING>
find ~ -type f -mtime +1825 |xargs -r ls -l	<MISSING>
find ~ -type f -mtime +1825 |xargs ls -l	<MISSING>
find ~ -type f -mtime -2	<MISSING>
find ~ -type f -mtime 0	<MISSING>
find ~ -type f -mtime 0 -iname '*.mp3'	<MISSING>
find ~ -type f -mtime 0 -ls	<MISSING>
find ~ -type f -name '*.mkv' -o -name '*.mp4' -o -name '*.wmv' -o -name '*.flv' -o -name '*.webm' -o -name '*.mov'	<MISSING>
find ~ -type f -name 'foo*' -ok ls -l '{}' ';'	<MISSING>
find ~ -type f -name test-a -exec mv {} test-10 \;	<MISSING>
find ~ -type f -name test-a -execdir mv {} test-10 \;	<MISSING>
find ~ -type f -regex '.*\.\(mkv\|mp4\|wmv\|flv\|webm\|mov\)'	<MISSING>
find ~ -type f \( -iname '*.mp3' -o -iname '*.ogg' \) > mynewplaylist.m3u	<MISSING>
find ~ -used +365 -ok rm '{}' ';'	<MISSING>
find ~ -user dave -print	<MISSING>
find ~ music -name '*.mp3'	<MISSING>
find ~/ -atime +10	<MISSING>
find ~/ -atime +100 -exec rm -i {} ;	<MISSING>
find ~/ -atime +100 -exec rm -i {} \;	<MISSING>
find ~/ -daystart -type f -mtime 1	<MISSING>
find ~/ -maxdepth 3 -name teste.tex	<MISSING>
find ~/ -mtime -2 -o -newer filename	<MISSING>
find ~/ -mtime -2 -o newer filename	<MISSING>
find ~/ -name '*.txt'	<MISSING>
find ~/ -name '*.txt' -exec cat {} ;	<MISSING>
find ~/ -name '*.txt' -print0 | xargs -0 wc -w	<MISSING>
find ~/ -name '*.txt' -print0 | xargs -0 wc -w | awk 'end { print $1/(nr-1) }'	<MISSING>
find ~/ -name 'core*' -exec rm {} \	<MISSING>
find ~/ -name 'core*' -exec rm {} \;	<MISSING>
find ~/ -name *.png -exec cp {} imagesdir \;	<MISSING>
find ~/ -name *.tar.gz -newer filename	<MISSING>
find ~/ -newer alldata.tar	<MISSING>
find ~/ -newer alldata.tar -exec tar uvf alldata.tar {} ;	<MISSING>
find ~/ -type f -exec grep -h 'text-to-find-here' {} \;	<MISSING>
"find ~/ -type f -name ""postgis-2.0.0"""	<MISSING>
find ~/ [опция_поиска] [значение] [опция_действия]	<MISSING>
"find ~/$folder -name ""*@*"" -type f"	<MISSING>
"find ~/$folder -name ""*@*"" -type f -print0"	<MISSING>
"find ~/.personal/tips -type f -iname ""*.pdf""  -exec pdftotext '{}' - ';'  | grep hot"	<MISSING>
find ~/backups/mydatabasename/* -mtime +30 -exec rm {} \;	<MISSING>
"find ~/bin/filesdvorak/.* -maxdepth 0 | awk -f""/"" '{ print $6 }'"	<MISSING>
find ~/books -name waldo	<MISSING>
find ~/books -type f -name waldo	<MISSING>
find ~/books -type f -name waldo -exec rm {} \;	<MISSING>
find ~/clang+llvm-3.3/bin/ -type f -exec basename {} \; | xargs rm	<MISSING>
find ~/clang+llvm-3.3/bin/ -type f -exec echo basename {} \;	<MISSING>
find ~/code -name '.*' -prune -o -type d -printf ':%p'	<MISSING>
find ~/code -name '.*' -prune -o -type f -a -perm /u+x -print | sed 's@/[^/]\+$@:@' | sort | uniq | tr -d '\n' | sed 's/^/:/; s/:$//'	<MISSING>
find ~/code -name '.*' -prune -o -type f -a -perm /u+x -printf ':%h\n' | sort | uniq | tr -d '\n'	<MISSING>
find ~/code -name '.*' -prune -o -type f -a -perm /u+x -printf ':%h\n' |sort |uniq |tr -d '\n' > ~/.codepath	<MISSING>
find ~/code -type d -name '[^\.]*' | tr '\n' ':' | sed 's/:$//'	<MISSING>
find ~/code -type d | sed '/\/\\./d' | tr '\n' ':' | sed 's/:$//'	<MISSING>
find ~/code -type d | tr '\n' ':' | sed 's/:$//'	<MISSING>
"find ~/container  -mindepth 3 -type f  -execdir mv ""{}"" $(dirname ""{}"")/.. \;"	<MISSING>
find ~/container  -mindepth 3 -type f -exec mv {} . \;	<MISSING>
find ~/container  -mindepth 3 -type f -exec mv {} .. \;	<MISSING>
"find ~/container  -mindepth 3 -type f | while read file; do mv ""$file"" ""$(dirname ""$file"")/..""; done"	<MISSING>
"find ~/container  -mindepth 3 -type f | xargs -i bash -c 'mv ""{}"" $(dirname ""{}"")/..'"	<MISSING>
"find ~/container -mindepth 3 -type f -execdir mv ""{}"" ./.. \;"	<MISSING>
find ~/desktop -name “*.jpg” -o -name “*.gif” -o -name “*.png” -print0 | xargs -0 mv –target-directory ~/pictures	<MISSING>
find ~/dir_data -type d -exec chmod a+xr,u+w {} \;	<MISSING>
find ~/dir_data -type f  -exec chmod a-x,u+w {} \;	<MISSING>
find ~/dir_data -type f -exec chmod a-x,u+w {} \;	<MISSING>
find ~/documents -type f -name '*.txt' -exec grep -s dogs {} \; -print	<MISSING>
find ~/documents -type f -print0 | xargs -0 grep -il birthday	<MISSING>
find ~/html/ -name '*.html' -exec grep organic '{}' ';'	<MISSING>
find ~/images/screenshots -size +500k -iname '*.jpg'	<MISSING>
find ~/journalism  -name '*.txt' -print0 | xargs -0 wc -w | awk '$1 < 2000 {v += $1; c++} end {print v/c}'	<MISSING>
"find ~/junk   -name ""*"" -exec ls -l {} \;"	<MISSING>
find ~/junk  -name 'cart1' -exec mv {} ~/junk/a \;	<MISSING>
find ~/junk  -name 'cart[1-6]' -exec ls -l {} \; 2> /dev/null	<MISSING>
find ~/junk  -name 'cart[4-6]' -exec rm {}  \;	<MISSING>
find ~/junk -exec touch ~/junk/cart{1,2,3,4,5,6} {} \; 2> /dev/null	<MISSING>
find ~/library -name '* *'	<MISSING>
find ~/library -name '* *' -exec ls {} \;	<MISSING>
find ~/library -name '* *' -print0 | xargs -0 tar rf blah.tar	<MISSING>
"find ~/library/ -iname ""com.apple.syncedpreferences.plist"""	<MISSING>
find ~/lpi103-2/ -depth -print0 | cpio --null -o > ../lpicpio.2	<MISSING>
"find ~/mail -type f | xargs grep ""linux"""	<MISSING>
find ~/movies/ -size +1024m	<MISSING>
find ~/music/ -iname 'cover.*' -printf '%h\n' | sort -u	<MISSING>
find ~/music/ -maxdepth 2 -mindepth 2 -type d | sort	<MISSING>
"find ~/music/ -name ""automatically add*"""	<MISSING>
find ~/mydir -iname '*.htm' -exec rm {} \;	<MISSING>
find ~/programming -path '*/src/*.c'	<MISSING>
"find ~/some/directory -name ""*rb"" -exec basename {} \;"	<MISSING>
find ~/src -newer main.css	<MISSING>
find ~/src -type f \( -iname '*.cpp' -or -iname '*.h' -or -iname '*.c' -or -iname '*.hpp' \) -exec echo {} \;	<MISSING>
find ~/test -type d -exec basename {} \;	<MISSING>
find ~/tmp -mtime 0 -exec du -ks {} \; | cut -f1	<MISSING>
find ~/tmp -type f -mtime 0 -exec du -ks {} \; | cut -f1 | awk '{total=total+$1}end{print total/1024}'	<MISSING>
find ~jsmith -exec grep log '{}' /dev/null \; -print	<MISSING>
find ~music -type f -iname *.mp3 | wc -l	<MISSING>
find аргумент [опция_поиска] [значение] [значение]	<MISSING>
find –l –xtype l	<MISSING>
"find … -exec sh -c 'trap ""echo \$?"" exit; invalid_command ""$0""' {} \;"	<MISSING>
find … -print0 | xargs -0 -n1 invalid_command	<MISSING>
find-repos-of-install | grep rpmfusion | xargs yum update	<MISSING>
finda all the hidden files excluding those having the extension htaccess	
finda ll the files in the current folder that are modified today.	
finds $a pattern in a $b string, and returns exit code 0 if found, suppressing any visible output.	
finds all directories named cvs, and deletes them and their contents.	
"finds all files having text ""texthere"" recursively in a current folder, and precedes found string with string number in file and file name."	
finds all files in $location, prints file names, overwrite files with random content $times times, and finally remove them.	
finds all files in a '/path' folder and prints long listing for them.	
"finds all files like ""mylog*.log"" newer than $2 and archives them with bzip2."	
finds all files modified within a certain time frame recursively	
"finds all files with names like ""*.rm"" in a '/home/me/download/' folder, launches ffmpeg conversion for each one, and deletes source file after."	
"finds all files with names like ""*.rm"" in a current folder, launches ffmpeg conversion for each one, and deletes source file after."	
finds all folders that contain 'ssh' file and have 'bin' in path.	
finds all logged in users.	
finds all php processes running in system.	
finds all strings with parent folder of path '$path' in 'file', and saves result in 'x' variable.	
finds all the log* files in /mydir recursively that are more than 7 days older, skipping already created .bz2 archives and compresses them.	
finds all the log* files recursively in /mydir that are more than 7 days older and compresses them.	
finds all user session in system, and shows sorted user names with number of sessions of each user.	
finds all users logged in via ssh.	
finds and deletes all empty folders (ones that contain no files or subfolders).	
finds binaries names in a list of running processes and prints containing folder of each binary.	
finds binaries names in a list of running processes and prints containing folder of first 10 binaries.	
finds every folder with file 'header.php' within, and copies file 'topscripts.php' to every one of them.	
finds file 'subscription.java' and changes to containing folder.	
finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and prints location of such files.	
finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and saves location of such files to 'directories' variable.	
finds if 'subversion' package is installed in system.	
finds if environment variable like 'dualcase' exists in environment.	
finds ip address of 'en0' network interface.	
finds ip address of 'eth0' network interface.	
finds ip address of default network interface.	
finds ip address of system network interface, that belongs to 192.168.111 subnet.	
finds ip addresses of all network interfaces.	
finds matched text in defined path recursively, but not follows symlinks.	
finds more than 5 days old files in two directories  and compresses them.	
finds name of a current month and saves it in a 'month' variable.	
finds number of available updates.	
finds only parts of echoed string that match with regex 'run-parts (-{1,2}\s+ )*\s+', and saves them in $match variable, each matched part on a separate line.	
finds out what groups a current user has.	
finds out what groups a given user has.	
finds pattern text ignoring letter case in all .js files, prints matched strings and name of file with that strings.	
finds pids of all running processes, gets executable binary of each process, and prints containing folder of each binary.	
finds pids of ssh sessions of all logged in users.	
finds real time report in a 'sleep 1' command execution statistic.	
finds recursion-related options of a 'grep' utility.	
finds recursively all files having extension .c, .h in '/path/' that contain 'pattern', and prints matched strings with string number and file name.	
finds recursively all files in '/path/' excluding folders dir1, dir2 and all like *.dst, that contain 'pattern', and prints matched strings with string number and file name.	
finds recursively all files in '/path/' that contain 'pattern', and prints matched strings with string number and file name.	
finds recursively all files not having extension .o in '/path/' that contain 'pattern', and prints matched strings with string number and file name.	
"finds recursively all folders in current folder which path not contains ""nametoexclude"" string and removes only ones without files and another folders within."	
finds recursively all folders named 'a' within current folder and removes only ones without files and another folders within.	
"finds recursively and following symlinks from root folder all files that contain ""text-to-find-here"" and prints files names."	
finds shell options like 'checkjobs' with their state.	
finds shell options with 'login' in name.	
finds string beginning with 'ifs' in a 'set' output.	
"finds string with text ""string to be searched"" in any cased files like ""*.cs"" recursively in a current folder."	
"finds strings having text ""searched-string"" in all files recursively in a current folder."	
"finds strings like ""texthere"" recursively in all files of a current folder regarding all symlinks."	
finds strings matching pattern '^fields=\\\|^var=' in a 'set' output.	
finds strings with 'text' from *.log files and prints all but first field from any space-delimited string.	
finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.	
finds strings with dot-separated sequence of numbers, and prints part of that sequence before the second and third dot.	
finds strings with dot-separated sequence of numbers, and prints part of that sequence between the first and second dot.	
"finds strings with text ""searched-string"" recursively in all files of current folder and prints names of files with matched strings."	
"finds strings with text ""searched-string"" recursively in all files of current folder."	
"finds strings with text ""text"" in all files named ""string to be searched"" recursively in a current folder."	
finds the folder where temporary files would be written to, and save path to it in a 'tmpdir' variable.	
finds the folder where temporary files would be written to.	
finds total lines count of all *.php files in a current folder and subfolders.	
finds total lines count of few types of files (*.h and *.cpp) in a current folder and subfolders.	
finds users with x session in system and puts the result in users variable.	
finds users with x session in system and puts the result into users variable	
"findx all files having text ""texthere"" recursively in a current folder, and prints only file names with matching strings."	
finger $user |head -n1 |cut -d : -f3	<MISSING>
finger $user_name | grep directory | expand | cut -d ' ' -f 2	<MISSING>
finger $username | awk '/^directory/ {print $2}'	<MISSING>
finger -l | awk '/^login/'	<MISSING>
finger -l | awk '/^login/' | sed 's/of group.*//g'	<MISSING>
"finger -l | grep ""name:"" | cut -d "":"" -f 3 | cut -c 2- | sort | uniq"	<MISSING>
"finger -l | grep ""name:"" | tr -s ' ' | cut -d "" "" -f 2,4- | sort | uniq"	<MISSING>
"finger -s | awk '{printf(""%s %s\n"", $1, $2);}'"	<MISSING>
finger `id -un` | head -1 | cut -d: -f3-	<MISSING>
finger `whoami`	<MISSING>
finger vivek	<MISSING>
finger |  cut --complement -c36-40	<MISSING>
finger |  sed 's/\(.\{35\}\)...../\1/'	<MISSING>
finger | awk 'nr>1{print $2,$3}'	<MISSING>
"finger | awk -f""\t"" -v 'ofs=\t' '{ $4=""""; print $0}' | sed 's/\t\{2,\}/\t/'"	<MISSING>
finger | colrm 34 39	<MISSING>
finger | cut -d ' ' -f1 | sort -u	<MISSING>
finger | cut -d ' ' -f1 | sort -u | grep -iv login	<MISSING>
"finger | sed 's/\t/ /' | sed 's/pts\/[0-9]* *[0-9]*//' | awk '{print $2""\t(""$1"")\t""$3"" ""$4"" ""$5}' | sort | uniq"	<MISSING>
finger | sed 's/^\([^ ]*\) *\([^ ]*\) *pts[^a-z]*\([^(]*\).*/\2\t(\1)\t\3/'	<MISSING>
finger | sort -u	<MISSING>
finger | tail -n +2 | awk '{ print $1 }' | sort | uniq	<MISSING>
fint all *.txt files/directories in entire file system without descending to other file system and without error reporting	
fint all *.txt files/directories under /mnt/msdos and without error reporting	
fix files to default permissions 644	
fix files to default permissions 755	
fix permissions for a group of files with given extension	
fn=$(mktemp -u -t 'xxxxxx')	<MISSING>
fname=`basename $f`	<MISSING>
fold -1 /home/cscape/desktop/file  | awk -f x.awk	<MISSING>
fold -1 /home/cscape/desktop/table.sql  | awk '{print $0}'	<MISSING>
fold -80 your_file | more	<MISSING>
fold -b -w 20 | cut --output-delimiter $'\t' -b 1-3,4-10,11-20	<MISSING>
fold -b16 | sed 's/../& /g'	<MISSING>
"fold -s ""$2"" | mailx -s ""$subject"" -b ""abc@abc.com"" ""$email"" -r ""$mailbcc"""	<MISSING>
"fold -w ""$columns"" testfile | wc -l"	<MISSING>
fold -w 10	<MISSING>
fold -w 76 -s file.txt | pr -t --indent=4	<MISSING>
fold -w 80 file.txt	<MISSING>
fold -w1 file | pr -4t | sed 's/\s*-\s*//g' | tr -d '\n' | sed '$a\'	<MISSING>
fold -w1 file | pr -4t | tr -d '\n\t\- ' | sed '$a\'	<MISSING>
fold -w1 filename | sort | uniq -c | sort -nr	<MISSING>
fold -w130 file | ...	<MISSING>
fold -w3	<MISSING>
"fold -w3 ""$1"" | sort | uniq -c | sort -k1,1nr -k2"	<MISSING>
fold -w30 -s longline	<MISSING>
fold -w30 longline	<MISSING>
fold -w30 longline | pr -20ts'|'	<MISSING>
fold -w30 longline | tr '\n' '|' | sed 's/|$/\n/'	<MISSING>
fold -w79 yourfile | sed -e :a -e 's/^.\{0,78\}$/& /;ta'	<MISSING>
fold file | wc -l	<MISSING>
folders=$(find $pwd -type d | paste -d, -s)	<MISSING>
folders=$(find . -type d -print0 | tr '\0' ',')	<MISSING>
folders=$(find . -type d | paste -d, -s)	<MISSING>
folders=`ls -dm $my_directory/*/ | tr -d ' '`	<MISSING>
"follow symbolic links for the full path of ""lshw"""	
follows symbolic link $bash_source, and prints path to its target.	
foo | tee output.file	<MISSING>
foo=$(cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1)	<MISSING>
"foo=$(echo ""hello world"" | gzip | base64)"	<MISSING>
foo=$(false)$(true)	<MISSING>
foo=`which ~/f`	<MISSING>
"foo_no_whitespace=""$(echo -e ""${foo}"" | tr -d '[[:space:]]')"""	<MISSING>
"for a in `find . -name '*.py'` ; do cp ""$a"" ""$a.cp"" ; echo ""added line"" > ""$a"" ; cat ""$a.cp"" >> ""$a"" ; rm ""$a.cp"" ; done"	<MISSING>
for all users in the system who have their cron jobs display user name and crontab.	
"for d in /home/*/; do find ""$d"" -type d -name bin | grep -q . || echo ""$d""; done"	<MISSING>
"for d in `find . -iname ""*.php~""`; do mv ${d} /mydir; done"	<MISSING>
"for dir in $(find -depth -type d); do [[ ! $prev =~ $dir ]] && echo ""$dir"" ; prev=""$dir""; done"	<MISSING>
for each .def file under the current directory, create an empty .def.out file with current timestamp.	
"for each item in array ""alpha"", display the basename, that is the part following the last slash, or the whole item if no slash is present."	
"for each line in 'file', print ""result = "" followed by the line backwards."	
for each line in file2 whose first field appears as a first field in file1, print an output line constructed following the specified -o format.	
"for each line in list.txt, output the line adding ""fail"" if the same line appears in fail.txt, and ""pass"" otherwise - lines in fail.txt must be in the same order as they appear in list.txt."	
for each line of colon-separated information in files 'empsal' and 'empname' whose first field matches in both files, output: first field of empname, second field of empname, fourth field of empname, and third field of empsal.	
for each line of the sorted output of both file1 and file2, print lines whose first field of file2 does not appear as first field of file1.	
for each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv	
for each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv - both files must be sorted first.	
for each line which has a common first field in test.1 and test.2, output the first 2 fields of test.2 and the field 2 and 3 of test.1	
for each line whose first field is the same in file1 and file2, output the common first field followed by all other fields in file1 and file2.	
for each line whose second field is the same in both files, output: first field of second file, second field of first file, and first field of second file.	
"for every cron job with a comment ""change-enabled"" at the end of its crontab entry, change the scheduled hour to 7."	
"for f in *; do [[ -f ""$f"" ]] && mv ""$f"" ""unix_$f""; done"	<MISSING>
"for f in `find -name '*company*'` ; do mv ""$f"" ""`echo $f | sed s/company/nemcompany/`"" ; done"	<MISSING>
"for f in `find -name \*.jsp` ; do echo ""==> $f"" >> out.txt ; grep ""todo"" $f >> out.txt ; done"	<MISSING>
"for f in fgh*; do mv ""$f"" $(echo ""$f"" | sed 's/^fgh/jkl/g'); done"	<MISSING>
for file in $(find asia emea -name \*.gz -print0 | xargs -0); do echo -n $(basename $file); gunzip -c $file |wc -l; done >> file_count.txt	<MISSING>
"for file in *.html; do mv ""$file"" ""${file%.html}.txt""; done"	<MISSING>
"for filename in *.jpg; do mv ""$filename"" ""prefix_$filename""; done;"	<MISSING>
for filename in *; do mv $filename unix_$filename; done	<MISSING>
for h in $(seq 1006 1008 | tac); do history -d $h; done	<MISSING>
"for i in `find .  -not \( -name ""*\.jpg"" \) -path './bookshop/mediaimg' -prune -o -path '*/cvs*' -prune -o  -path './files' -prune  -o -path './images/cms' -prune -o -path './internal' -prune -o -path './limesurvey171plus_build5638' -prune  -o -path './gallery2' -prune -o  -print  `; do cvs status  ""$i"" |grep status ; done &>~/output.txt"	<MISSING>
for i in `find . -exec echo {} \;`; do cmd1 $i; cmd2 $i; done	<MISSING>
for i in `find . -type d`; do mkdir -p /tmp/tar_root/`echo $i|sed 's/\.\///'`; done	<MISSING>
"for i in `find . | grep "".xml$""`; do bzip2 $i&; done"	<MISSING>
"for i in `find . | grep "".xml$""`; do bzip2 $i; done"	<MISSING>
"for i in `find . | grep "".xml.bz2$""`; do find_graph -build_graph $i.graph $i; done"	<MISSING>
"for l in $(find . -type l); do cd $(dirname $l); if [ ! -e ""$(readlink $(basename $l))"" ]; then echo $l; fi; cd - > /dev/null; done"	<MISSING>
"force create a hard link in ""/usr/local/bin"" to ""findpdftext"""	
"force create a hard link named ""non_secret_file.txt"" to ""secret_file.txt"""	
"force create a hard link named '/home/user/musik/youtube converted/aesthesys~ i am free, that is why i'""'""'m lost..mp3' with target '/home/user/musik/mix-2012-13/aesthesys~ i am free, that is why i'""'""'m lost..mp3'"	
"force create a symbolc link named ""/usr/local/bin/fpdf"" to ""/usr/local/bin/findpdftext"""	
"force create a symbolc link named ""/usr/local/bin/fpt"" to ""/usr/local/bin/findpdftext"""	
"force create a symbolc link named ""new_dir"" to ""/other/dir"" without dereferencing ""new_dir"""	
"force create a symbolc link named ""softlink_name"" to ""source_file_or_directory_name"" without dereferencing ""softlink_name"""	
"force create a symbolic link as a file named ""/usr/lib/jvm/default-java"" to ""$default_java_dir"" with verbose output"	
"force create a symbolic link in ""/usr/bin/"" for each file matching ""$javausrlib/jdk1*/bin/*"""	
"force create a symbolic link named ""$*"" to the canonical absolute path of ""$1"""	
"force create a symbolic link named ""$lines"" to ""$c"" without dereferencing ""$lines"""	
"force create a symbolic link named ""$pdir"" to ""$pluginpath"" with verbose output"	
"force create a symbolic link named ""currentdir"" to ""newdir"" without dereferencing ""currentdir"""	
"force create a symbolic link named ""id_rsa"" to ""$keyname"""	
"force create a symbolic link named ""mylink"" with target ""/apps/myapps/new/link/target"""	
"force create a symbolic link to ""$f"" in ""~/my-existing-links/"" with name the basename of ""$f"""	
"force create a symbolic link without dereferencing named ""$symlink_path"" to ""$lastmodified"""	
"force create a symbolic link without dereferencing named ""alpha"" to ""alpha_2"""	
"force create a symbolic link without dereferencing named ""mylink"" to ""dir2"""	
force create hard link between $git_dir/../apresentacao/apresentacao.pdf and $git_dir/../capa/apresentacao.pdf	
force decompress all files into '/etc'	
force delete all files in the current folder	
force delete all files in the temp folder which have not been accesses in the last 240 hours	
force delete all jpg files in current directory which are less than 50kb and do not search in the sub directories	
force delete all the core files in the home folder	
"force delete all the directories the folder ""test folder"""	
force delete all the files in the current folder expect xml files	
force delete all the files that have been modified in the last 3 days	
force delete all the files which have not been accessed in the last 240 hours in the temp folder	
"force delete all the regular files with the name ""test.txt"""	
force delete all the regular/normal files in the current folder	
force delete all the regular/normal files in the current folder and do not search in the sub folders	
force delete all the regular/normal files in the current folder and do not search in the sub folders   (print0 is used to handle files which have newlines in their names or files with the name only as spaces )	
force delete all the temp files which are of size 0 bytes and which have not been accessed in the last 10 days	
"force pseudo tty allocation on connection to ""somehost"" and execute ""~/bashplay/f"""	
"force pseudo-terminal allocation to run ""sudo <cmd>"" on ""remotehost"""	
force remove all files and folders in the physical current working directory	
force remove all the c files in the current folder	
force remove all the c files in the current folder, print0 is used to handle all files with new lines in their names or files with only spaces in their name	
force remove all the directories with the name logs in the folder /var/www	
force remove all the regular/normal files which begin with sess in the temp folder	
force remove all the text files that have not been modified in the last 89 days	
force the group stickiness for directories under /var/www	
"force tty allocation and execute ""./script.py"" on host ""foo"""	
forcefully delete all files in the current directory	
forcefully delete all files in the current directory that begin with spam-	
forcefully remove files *~important-file	
"forcible create a symbolic link named ""/etc/file.conf"" to file ""/etc/configuration/file.conf"""	
"forcibly and verbosely create a symbolic link named ""target"" to file ""source"""	
"forcibly and verbosely create symbolic links in directory ""~/library/launchagents"" to all files located in /usr/local/opt/mongodb/ and that have filename extension "".plist"""	
forcibly change owner to all files and directories in current directory to user www-data	
"forcibly create a symbolic link named ""linkname"" to file ""new_destination"""	
"forcibly create symbolic links in target directory ""~/staging"" for all files located in directory ""~/mirror"""	
forcibly create symlink named as '/cygdrive/c/users/mic/mypics' to the directory '/cygdrive/c/users/mic/desktop/pending - pics/'	
forcibly removes ${temp} file.	
forcibly removes all files like '*.bak' and '*~'	
forcibly removes files  '/tmp/stored_exception', '/tmp/stored_exception_line', '/tmp/stored_exception_source'	
"format ""$line"" as a table"	
"format ""file.txt"" as space separated columns 28 characters in width"	
"format ""input"" as alternating rows in a table"	
format and print the time string @133986838 according to the default time format	
"format bash array ""${arr}"" in columns"	
"format contents of ""file"" as a table"	
format each line as 3 columns based on extraneous columns	
"format email message in file specified by ""$2"" to fit in 80 characters split at spaces and send to ""$email"" and a bcc to ""abc@abc.com"" from ""$mailbcc"" with subject ""$subject"""	
"format file ""list-of-entries.txt"" as new-line separated columns"	
"format file ""list-of-entries.txt"" with no column delimiter"	
"format output of ""mount"" as a table"	
format output of 'file' content to columns with wide not less than 80 pixels	
"format space separated fields in ""filename"" as a table"	
"format tab delimited file ""list-of-entries.txt"" as a table"	
"format tab separated fields in ""file"" as a table"	
"format the 5th, 3rd, and 4th fields of ""..."" as a table"	
"format the contents of ""[file]"" in a neat table"	
format the date represented by time string @1267619929 according to default format and print it	
format the filename and modification time of files starting with t as a table	
format the filename and modification time of files starting with t as a table on osx	
"format the output of ""..."" as a tab separated table"	
"format the output of ""printf ..."" to fit in 80 characters per line"	
"format the output of ""rub-script.rb"" as a tab separated table"	
"format the time string $timestamp according to the format string ""%y-%m-%d %h:%m:%s"" and save the output to variable 'cdate'"	
format the time string @133986838 according to the default time format and save it to variable 'variablename'	
format time string @$timestamp according to default time format	
format time string @1267619929 according to default time format	
forward all connections to client localhost 3307 via the ssh tunnel to gateway and then connect to host 1.2.3.4 to port 3306	
"forward all connections to client localhost 3309 via the ssh tunnel to ""mysql_access_server"" and then connect to host ""sqlmaster.example.com"" on port 3306"	
forward port 12345 bound on 'localhost' to port 12345 on 'otherhost' as user 'otheruser'	
"forward port 16186 on hello.com to 8888 on localhost using private key ""privatekeystuffdis88s8dsf8h8hsd8fh8d"" for login"	
forward port 3307 on localhost to port 3306 on 1.2.3.4 via 'user@gateway' on port 24222	
forward port 8000 bound on localhost to port 22 in 'clusternode' via 'user@bridge'	
"founddata=`find . -name ""filename including space"" -print0`"	<MISSING>
from a script, output the name of the script itself, without containing directories - from a shell, output the name of the shell.	
from a script, output the name of the script itself, without containing directories.	
from another terminal, detach process $pid from its terminal and run it in the background.	
from the list of words (one per line) in list1.txt, display the number of occurrences of this word in list2.txt and sort the results from highest to lowest count.	
"full_backup_dir=""$(find . -depth \( -wholename \./\.\* \) -prune -o -print | cpio -oav)"""	<MISSING>
"full_backup_dir=""`find . -depth -print0`"""	<MISSING>
full_backup_dir=$(find . -depth '(' -wholename './.*' ')' -prune -o -print)	<MISSING>
full_backup_dir=$(find . -depth \( -wholename \./\.\* \) -prune -o -mtime -1 -print)	<MISSING>
"full_f=""$(which f)"""	<MISSING>
full_path=`readlink -fn -- $path`	<MISSING>
"fullpath=`readlink -f ""$path""`"	<MISSING>
g++ omnitest.cpp -e | less	<MISSING>
"g=`dirname ""$f""`/`basename ""$f"" | tr '[a-z]' '[a-z]'`"	<MISSING>
gcc -print-search-dirs | sed '/^lib/b 1;d;:1;s,/[^/.][^/]*/\.\./,/,;t 1;s,:[^=]*=,:;,;s,;,;  ,g' | tr \; \\012	<MISSING>
generate a random 32 ascii character password from /dev/urandom and save it to variable 'pass'	
"generate html <a> links to files under the /public/html/cosi directory tree whose name is ""wiki.phtml"""	
generate the obsolete 29 character spanish alphabet and number each character	
generate the spanish alphabet and number each character	
generate uuids for the files from the current directory tree	
generates a list of all files beneath the current directory whose filename does not end in .html, so it matches files like *.txt, *.jpg, and so on.	
generates a randomly sorted list of numbers from 1 to 10.	
generates default-formatted file name of temporary file in a /dev/mapper folder, and saves path to it in a variable 'mapper'.	
generates name for temporary file with 6-letter suffix, and saves path to that new file in 'fn' variable.	
generates temporary file in a '/dev/shm' folder and saves path to it in a 'tfile' variable.	
generates temporary file name with full path by template 'fifo.xxxxxx' and saves it to variable 'fifo_name'	
get a detailed list of all files on the system larger than 10mb	
"get a detailed listing of all symbolic links in /usr/bin starting with ""z"""	
get a list of all files in the /home directory tree and their coressponding inode numbers	
get a list of all hidden files from the current directory tree	
get a list of directories owned by group id 100	
get a list of files and directories in the current directory tree	
get a path name of a process id	
get a pid of a process	
get a pid of a process with name 'test.sh &'	
get a record for domain $domain	
get a recursive file list of directory $dir	
get a sorted list of the longest line with line number for each file under current directory	
get a two column list of all regular .rb files residing in the current directory tree	
get all files in a current directory modified in the last 7 days	
get all files in a current directory modified in the last day	
get all files in a current directory modified in the last day and a half	
get all the files that are exactly 30 days old	
get all the files that have been modified within the last 30 days	
get current directory name without full path, ie. the part after the last /	
get current host's ipv6 address.	
get current hosts's ipv4 address.	
get directory listing of url $1 and save them to variable 'header' by deleting '\r' characters	
"get domain ""$domain"" ip address"	
get domain name from dig reverse lookup.	
get domain name of $ip and save it to the variable 'reverse'	
get domain name with 'google' from address $1	
get domain name with 'google' from address $ip	
get domain name with 'google' from dig reverse lookup.	
get domain names from file '1.txt' and request txt dns record for each one	
get files that last had their meta information changed more than 3 days ago	
get from file 'file1.txt' strings starting with 'q', extract only part of them following after '=' sign, and print which ones are not found in 'file2.txt'	
"get info about ""lbzip2\|plzip\|pigz"" from tar command"	
get ip address of your ssh session	
get md5sum of an iso file without displaying the filename, save value to 'md5' variable	
get only the latest version of file from the 'custlist*' files under current directory	
get only the latest version of the file 'filename' under current directory	
get second line from text contained in variable $data.	
get second-to-last comma-separated field of each line in file.txt	
get the actual find exectuable path	
get the base filename from variable 'path', similar to using the basename command.	
get the command line args passed to a running process	
get the count of all the files that have been accessed in the last 30 days	
get the current shell's executable name from the output of 'ps'.	
get the directory with least access time under current directory	
get the disk space used by all *.txt (case insensitive) files under /home/d directory	
get the disk space used by all *.txt (case insensitive) files/directories under /path directory	
get the disk space used by all *.txt (case insensitive) files/directories under current directory	
get the disk space used by all *.txt (case insensitive) files/directories under folder 1 and folder2	
get the git user access	
get the grandparent directory of each found 'pattern' file in $search_path	
get the jenkins user access	
get the job number from the stored pid	
get the list of files owned by <userid>	
get the list of regular files in the current directory	
"get the number of ""use"" statements in all php files, ordered"	
get the number of regular files in the directory given as the bash script argument $1	
get the path of running apache	
get the pid of rsync for the user that owns the process matching the pattern expanded by cid$client_id	
"get the processor's addressing bus width from the output of ""lshw"", ie. ""64 bits""."	
get the root access	
get the root user access	
get the sizes (and total size) of all files under dir1 directory	
get the sizes (and total size) of all files under dir2 directory	
get the total size in bytes of all files in the current directory tree	
get the total size of all files under dir1 directory	
get the total sizes of all files under current directory	
get virtual private memory use of process	
get year-month-day from date	
get year-month-day hour:minute:second from date	
getent `uname -n`	<MISSING>
getent group <groupname> | cut -d: -f4 |  tr ',' '\n'	<MISSING>
getent group | cut -d: -f1	<MISSING>
getent group | cut -d: -f1 | sort	<MISSING>
getent group | cut -d: -f1 | sort | cat -n	<MISSING>
getent passwd `whoami` | cut -d : -f 5	<MISSING>
"getent passwd | cut -d: -f1 | perl -e'while(<>){chomp;$l = `crontab -u $_ -l 2>/dev/null`;print ""$_\n$l\n"" if $l}'"	<MISSING>
gets a current job back to the foreground.	
gets a job with defined number back to the foreground.	
gets all ip addresses from host network configuration and prints first one.	
gets all man entries beginning with std and sends them to vi.	
gets back to the foreground a job with number 2.	
gets domain name from dig reverse lookup and save in variable 'go'.	
gets domain name from dig reverse lookup.	
gets ip address of ${net_if} network interface.	
gets ip address of 'en0' network interface.	
gets ip address of 'en0' selected network interface.	
gets ip address of 'en1' network interface.	
gets ip address of 'eth0' network interface.	
gets ip address of a primary network interface.	
gets ip address of eth0 network interface.	
gets ip address of first listed active network interface in system.	
gets ip address of first listed network interface in system.	
"gets ip address of first network interface which name matches pattern ""venet0:0\|eth0""."	
gets ip address of only primary network interface.	
gets ip addresses of all active network interfaces and saves to 'ip' variable.	
gets ip addresses of all active network interfaces on host.	
gets ip addresses of all active network interfaces.	
gets ip addresses of all network interfaces.	
gets list of folders containing files with changes.	
gets list of ip addresses of all network interfaces.	
gets mac address of 'eth0' network interface.	
gets mac address of en0 network interface.	
gets mac address of eth0 network interface.	
gets mac address of p2p0 network interface.	
gets mac addresses of all active network interfaces.	
gets mac addresses of all ip4 network interfaces.	
gets state of shell option 'dotglob' and saves it in 'rest_cmd' variable.	
gets string with ip4 address of en0 network interface.	
gets string with mac addess of network interface eth0.	
gets string with mac address of eth0 network interface.	
gets the groups these users belong to.	
getting a detailed list of files/dirs	
git -c color.status=always status | less -rex	<MISSING>
git branch  --no-color  | grep -e '^\*' | cut -d ' ' -f 2	<MISSING>
"git branch | grep ""*"" | cut -d ' ' -f 2"	<MISSING>
git diff --name-only | xargs dirname | uniq	<MISSING>
git grep ^ | wc -l	<MISSING>
git log --pretty=format: --name-only | grep .cs$ | sort | uniq -c | sort -rg | head -20	<MISSING>
git log --pretty=format:'%h|%an|%s' -10 | column -t -s '|'	<MISSING>
git ls-files -z | xargs -0 wc -l	<MISSING>
"git ls-files | grep ""\.java$"" | xargs wc -l"	<MISSING>
"git ls-files | grep -p "".*(hpp|cpp)"" | xargs wc -l"	<MISSING>
"git ls-files | grep -ve ""(png|jpg|ico)"" | xargs wc -l"	<MISSING>
"git ls-files | sed 's/ /\\ /g' | grep -e ""\.*(swift$|mm$)"" | xargs wc -l"	<MISSING>
git ls-files | xargs -d '\n' wc -l	<MISSING>
git ls-files | xargs cat | wc -l	<MISSING>
"git ls-files | xargs file | grep ""ascii"" | cut -d : -f 1 | xargs wc -l"	<MISSING>
git ls-files | xargs wc -l	<MISSING>
git status --branch --porcelain | grep '##' | cut -c 4- | cut -d'.' -f1	<MISSING>
"git status | grep ""on branch"" | cut -c 11-"	<MISSING>
git status | head -1 | cut -d ' ' -f 3	<MISSING>
"git symbolic-ref head 2>/dev/null | cut -d""/"" -f 3"	<MISSING>
"git whatchanged --all | \grep ""\.\.\."" | cut -d' ' -f5- | cut -f2- | sort | uniq -c | sort"	<MISSING>
give a long listing of all the  *.pl files (perl files) beneath the current directory.	
give all directories in the /path/to/base/dir tree read and execute privileges	
give all files in the /path/to/base/dir tree read privileges	
"give rwx permissions to the user and group of the directory named ""files"" leaving others without any privileges"	
give the location of every hard link to file1 in the /home directory tree	
"gives longest '*.php' files with line count first, and excludes directories with ""libs"", ""tmp"", ""tests"" and  ""vendor"" in their paths."	
gives the chars in line 5 and chars 5 to 8 of line 5, in tst.txt	
gives the primary group of $username.	
globally sets the maximum number of lines to held in window history as 10000.	
"gnuplotscript=$(mktemp /tmp/gnuplot_cmd_$(basename ""${0}"").xxxxxx.gnuplot)"	<MISSING>
go back to last directory.	
go into the directory whose name is selected in the x window system, ie. double-clicked in a terminal window.	
go into the first directory whose name contains 1670	
go to /the/project/root//data, which in most filesystems/operating systems will be the same as cd /the/project/root/data	
go to /tmp directory.	
go to directory /cygdrive/c/program files (x86) using backslashes to escape special characters	
go to directory /cygdrive/c/program files (x86) using quotes to escape special characters	
go to directory /cygdrive/c/program files (x86)/$dollarsign using single quotes to escape special characters, including dollar signs	
go to directory /some/where/long	
"go to directory named ""~"" (not home directory)"	
"go to directory pointed by last element of array ""dirs"" in bash version 4.2"	
"go to directory specified by variable ""somedir"", but replacing leading ~ character by actual home directory."	
go to first directory specified in path which contains the command 'oracle'	
go to last directory with name starting with a number, useful for timestamped directory names.	
go to previous working directory.	
go to top level of git tree using relative path	
go=$(dig -x 8.8.8.8| awk '/ptr[[:space:]]/{print $nf}')	<MISSING>
"grab ""variable = value"" pairs from a windows style .ini file into the current shell."	
grab a gzipped text file from the web and display its decompressed content, interactively paging through the output.	
"grab the output of ""basename"" (in this case ""stuff"") and echo it to stdout, which basename would do by default anyway."	
"grab the output of ""basename"" (the last slash-separated section of variable ""filename"") and echo it to stdout, which basename would do by default anyway."	
grep  $user file |nl	<MISSING>
grep ! error_log | find /home/foo/public_html/ -mmin -60	<MISSING>
"grep ""$(cat file1.txt)"" file2.txt"	<MISSING>
"grep ""="" myfile | source /dev/stdin"	<MISSING>
"grep ""^core id"" /proc/cpuinfo | sort -u | wc -l"	<MISSING>
"grep ""class foo"" **/*.c"	<MISSING>
"grep ""ok"" <filename> | wc -l"	<MISSING>
grep '^[[:space:]]*http://' | sort -u | nl	<MISSING>
grep '^core id' /proc/cpuinfo |sort -u|wc -l	<MISSING>
grep 'nov 12 2012' /path/to/logfile | less	<MISSING>
"grep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e ""pattern"""	<MISSING>
"grep --exclude=*.o -rnw '/path/to/somewhere/' -e ""pattern"""	<MISSING>
grep --help |grep recursive	<MISSING>
"grep --include=""*.xxx"" -nrhi ""my text to grep"" *"	<MISSING>
"grep --include=\*.{c,h} -rnw '/path/to/somewhere/' -e ""pattern"""	<MISSING>
"grep -ao ""[/\\]"" /dev/urandom|tr -d \\n"	<MISSING>
"grep -ar -e . --include=""*.py"" /your/dir | md5sum | cut -c-32"	<MISSING>
grep -ar -e . /your/dir | md5sum | cut -c-32	<MISSING>
grep -b -o $'\x0c' filename | less	<MISSING>
grep -e -m 1 -n 'old' file | sed 's/:.*$//' - | sed 's/$/s\/old\/new\//' - | sed -f - file	<MISSING>
grep -e text *.log | cut -d' ' --complement -s -f1	<MISSING>
grep -e text *.log | cut -d':' --complement -s -f1	<MISSING>
grep -eo '([0-9]+-){3}[0-9]+' infile | tr - .	<MISSING>
grep -f file2 file1 | sort -u	<MISSING>
grep -f file2 file1 | sort | uniq	<MISSING>
grep -ff list1.txt list2.txt | sort | uniq -c | sort -n	<MISSING>
grep -ff list1.txt list2.txt | sort | uniq -c | sort -n | tail -n1	<MISSING>
"grep -ih foo `find . -name ""*.js""`"	<MISSING>
"grep -inr ""text"" folder/to/be/searched/"	<MISSING>
"grep -insr ""pattern"" *"	<MISSING>
"grep -ioh ""facebook\|xing\|linkedin\|googleplus"" access-log.txt | sort | uniq -c | sort -n"	<MISSING>
grep -l 'subject: \[spam\]' | xargs -i '{}' mv '{}' dir	<MISSING>
"grep -l -r 'subject: \[spam\]' . | while read f; do mv ""$f"" out; done"	<MISSING>
grep -l -z -r 'subject: \[spam\]' . | xargs -0 -i{} mv {} dir	<MISSING>
grep -m1 -ao '[0-9]' /dev/urandom | sed s/0/10/ | head -n1	<MISSING>
"grep -n """" myfile.txt | sort -r -n | gawk -f : ""{ print $2 }"""	<MISSING>
grep -n 'something' hugefile | head -n 1	<MISSING>
grep -n -i null myfile.txt | wc -l	<MISSING>
"grep -o ""+\s\+"" in.txt | tr '\n' ','"	<MISSING>
"grep -o ""_foo_"" <(paste -sd_ file) | tr -d '_'"	<MISSING>
grep -o '1.' yourfile | head -n2	<MISSING>
grep -o '^\s\+' <(comm file1 file2)	<MISSING>
grep -o . file | sort -f | uniq -ic	<MISSING>
grep -o . file | sort | uniq -c	<MISSING>
grep -o . filename | sort | uniq -c | sort -nr	<MISSING>
grep -o . filename | tr '[:upper:]' '[:lower:]' | sort | uniq -c | sort -nr	<MISSING>
grep -of ignore.txt input.txt | sort | uniq -c	<MISSING>
"grep -q ""tar archive"" <<<$filetype"	<MISSING>
"grep -r ""searched-string"" ."	<MISSING>
"grep -r ""string here"" * | tee >(wc -l)"	<MISSING>
"grep -r ""string to be searched""  /path/to/dir"	<MISSING>
"grep -r ""texthere"" *"	<MISSING>
"grep -r ""texthere"" ."	<MISSING>
grep -r 'word' *.properties | more	<MISSING>
"grep -r --include ""*.txt"" texthere ."	<MISSING>
"grep -r -h ""text string to search” directory-path"	<MISSING>
"grep -r -l ""foo"" ."	<MISSING>
"grep -r -l 'searchtext' . | sort | uniq | xargs perl -e ""s/matchtext/replacetext/"" -pi"	<MISSING>
"grep -r open * | awk '{split($1, path, "":""); print path[1]}' | xargs -i{} dirname {}"	<MISSING>
"grep -ri ""pattern"" * | awk '{if($1 != ""binary"") print $0}'"	<MISSING>
"grep -ril """" ."	<MISSING>
"grep -ril ""text-to-find-here"" /"	<MISSING>
"grep -rl ""needle text"" my_folder | tr '\n' '\0' | xargs -r -0 file | grep -e ':[^:]*text[^:]*$' | grep -v -e 'executable'"	<MISSING>
"grep -rnw ""pattern"""	<MISSING>
grep -rnw '/path/' -e 'pattern'	<MISSING>
"grep -rnw `pwd` -e ""pattern"""	<MISSING>
grep -u -l $'\015' $(fd)	<MISSING>
"grep -v ""#"" -r  /var/spool/cron/tabs"	<MISSING>
"grep -v ""pattern"" file > temp && mv temp file"	<MISSING>
"grep -v ""pattern"" filename > filename2; mv filename2 filename"	<MISSING>
grep -v '^$' yourfile | nl -s= -w99 | tr -s ' ' p	<MISSING>
"grep -v '^$' | paste -s -d"","" -"	<MISSING>
"grep -v '^$\|^#\|^\s*\#' filename | grep -v ""^[[:space:]]*$"" | more"	<MISSING>
grep -v '^2 ' file | cut -d' ' -f2- | nl -w1 -s' '	<MISSING>
grep -v '^\s*$' *.py | wc	<MISSING>
grep -v 'kpt#' data.txt | nl -nln	<MISSING>
grep -v 'pattern' filename	<MISSING>
grep -w -v -f blacklist file	<MISSING>
"grep [option] ""text string to search” directory-path"	<MISSING>
grep ^$group /etc/group | grep -o '[^:]*$' | tr ',' '\n'	<MISSING>
grep ^malloc `find src/ -name '*.[ch]'`	<MISSING>
grep ^q file1.txt | cut -d= -f2- | sort | comm -23 - <(sort file2.txt)	<MISSING>
grep ds1337 /lib/modules/`uname -r`/modules.alias	<MISSING>
grep error $(find . -type f -name 'btree*.c')	<MISSING>
grep foo * | nl	<MISSING>
"grep foo `find /usr/src/linux -name ""*.html""`"	<MISSING>
grep for the last occurrence of text between two tags	
grep from bottom of file	
grep only regular files smaller than 10kb with the regex '\bsomeknowncontent\b'	
grep pattern file | tr '\n' ' '	<MISSING>
grep probes /boot/config-$(uname -r)	<MISSING>
grep something file | more	<MISSING>
grep utrace /boot/config-$(uname -r)	<MISSING>
grep yourstring `find .`	<MISSING>
grep “highmem” /boot/config-`uname -r`	<MISSING>
greps dns zone transfer info on domain localdomain.com from ns @dc1.localdomain.com, finds strings with any-cased word 'lawler' and strips last letter from each string.	
greps domain $domain ip name from long dig listing.	
groups	<MISSING>
groups                                        //take a look at the groups and see	<MISSING>
groups $(who | cut -d' ' -f 1)	<MISSING>
"groups $1 | grep -q ""\b$2\b"""	<MISSING>
groups $username | cut -d\  -f 1	<MISSING>
groups a b c d	<MISSING>
groups el                                     //see that el is part of www-data	<MISSING>
groups monit |grep www-data	<MISSING>
groups user	<MISSING>
groups | tr \  \\n	<MISSING>
gunzip $empty_variable	<MISSING>
gunzip *.gz	<MISSING>
gunzip -c -d $ip | pax -r	<MISSING>
gunzip -c 4.56_release.tar.gz | tar xvf -	<MISSING>
gunzip -c bigfile.txt.gz | grep -f patterns.txt | sort | uniq -c	<MISSING>
gunzip -c blah.gz | some_command	<MISSING>
gunzip -c file.tar.gz | tar t > /dev/null	<MISSING>
gunzip -c myarchive.tar.gz | tar -tvf -	<MISSING>
"gunzip -c mygzfile.gz | grep ""string to be searched"""	<MISSING>
gunzip -c openssl-fips-2.0.1.tar.gz | tar xf ­-	<MISSING>
gunzip -l file.zip	<MISSING>
gunzip -t file.tar.gz	<MISSING>
gunzip < some.file.gz	<MISSING>
"gunzip all files matching ""file*.gz"" and answer ""n"" to any prompts"	
gunzip test1/*/*.gz	<MISSING>
gv=$(echo -e $kf'\n'$mp | sort -t'.' -g | tail -n 1)	<MISSING>
gzcat large.csv.gz | split -l 1000 - xxx	<MISSING>
gzip	<MISSING>
"gzip ""$file"""	<MISSING>
"gzip ""{}"""	<MISSING>
gzip */*.txt	<MISSING>
gzip --help | less	<MISSING>
gzip -c my_large_file | split -b 1024mib - myfile_split.gz_	<MISSING>
"gzip -c mysqldbbackup.sql | uuencode mysqldbbackup.sql.gz  | mail -s ""mysql db"" backup@email.com"	<MISSING>
gzip -cd mydb.sql.gz | pg_restore ...	<MISSING>
"gzip -cd path/to/test/file.gz | awk 'begin{global=1}/my regex/{count+=1;print $0 >""part""global"".txt"";if (count==1000000){count=0;global+=1}}'"	<MISSING>
gzip -d ${set1[@]} &	<MISSING>
gzip -d --force * /etc	<MISSING>
gzip -d --stdout file.gz | bash	<MISSING>
"gzip -d --stdout file.gz | bash -s -- ""-n wordpress localhost"""	<MISSING>
"gzip -d --stdout file.gz | bash /dev/stdin ""arguments"""	<MISSING>
gzip -d file.gz	<MISSING>
gzip -dc /file/address/file.tar.gz	<MISSING>
gzip -dc /usr/src/redhat/sources/source-one.tar.gz | tar -xvvf -	<MISSING>
gzip -dc archive.tar.gz | tar -xf - -c /destination	<MISSING>
gzip -dc data.tar.gz | tar -xvf -	<MISSING>
gzip -dc hello-0.2.tar.gz | tar -xf -	<MISSING>
"gzip -dc input1.vcf.gz input2.vcf.gz | awk 'fnr==nr { array[$1,$2]=$8; next } ($1,$2) in array { print $0 "";"" array[$1,$2] }'"	<MISSING>
gzip -dc libxml2-sources-2.7.7.tar.gz | tar xvf -	<MISSING>
gzip -dc path/to/test/file.gz | grep -p 'my regex' | grep -vp 'other regex' | split -dl1000000 - file	<MISSING>
gzip -dc path/to/test/file.gz | grep -p --regexp='my regex' | split -dl1000000 - file	<MISSING>
gzip -dc path/to/test/file.gz | grep -p --regexp='my regex' | split -l1000000	<MISSING>
gzip -k *cache.html	<MISSING>
gzip -kr .	<MISSING>
gzip -l $i	<MISSING>
gzip -l archive.tar.gz	<MISSING>
gzip -l compressed.tar.gz	<MISSING>
gzip `find . \! -name '*.gz' -print`	<MISSING>
gzip archive.tar	<MISSING>
"gzip=""$(which gzip)"""	<MISSING>
handles shell option 'nullglob' according with flags stored in $ngv variable.	
hash hostnames in user's known hosts file.	
head -$((${random} % `wc -l < file` + 1)) file | tail -1	<MISSING>
head -$(gcalctool -s $(cat file | wc -l)-n) file.txt	<MISSING>
head -$n file | tail -1 | tr ',' '\n'	<MISSING>
head --lines=-n file.txt	<MISSING>
head -1 <(sort set)	<MISSING>
"head -1 table | tr -s ' ' '\n' | nl -nln |  grep ""target"" | cut -f1"	<MISSING>
head -16482 < file.in | tail -259 > file.out	<MISSING>
head -16482 in.sql | tail -258 > out.sql	<MISSING>
"head -200 /dev/urandom |cksum | cut -f1 -d "" "" | awk '{print $1%63000+2001}'"	<MISSING>
head -5 tst.txt | tail -1 |cut -c 5-8	<MISSING>
head -<$linenum + 10> filename | tail -20	<MISSING>
head -c -n file.txt	<MISSING>
"head -c 10 ""$0"" | tr '\000-\377' '#'"	<MISSING>
head -c 100 < /dev/zero | tr '\0' '='	<MISSING>
head -c 100 file	<MISSING>
head -c 1000 /dev/zero | tr '\0' '*'	<MISSING>
head -c n file.txt	<MISSING>
head -c1024 /dev/urandom | xxd -p | tr -d $'\n'	<MISSING>
head -n -2 myfile.txt	<MISSING>
head -n 1 filename | od -c	<MISSING>
head -n1 $bigfile	<MISSING>
head -n99999999 file1.txt file2.txt file3.txt	<MISSING>
head /dev/random -c16 | od -tx1 -w16 | head -n1 | cut -d' ' -f2- | tr -d ' '	<MISSING>
"header=""$(curl -si ""$1"" | tr -d '\r')"""	<MISSING>
"hey=$(echo ""hello world"" | gzip -cf)"	<MISSING>
highlights current day in a month calendar with color.	
history	<MISSING>
"history ""$@"" | tac | nl | tac"	<MISSING>
"history ""$@"" | tac | nl | tac | sed 's/^\( *\)\([0-9]\)/\1-\2/'"	<MISSING>
history -a	<MISSING>
history -c	<MISSING>
history -cr	<MISSING>
"history -d ""$1"""	<MISSING>
history -n	<MISSING>
history -r	<MISSING>
"history -r ""$histfile""     #alternative: exec bash"	<MISSING>
history -r .cwdhist	<MISSING>
history -r file.txt	<MISSING>
"history -s ""$line"""	<MISSING>
"history -s 'echo whatever you ""want your"" command to be'"	<MISSING>
history -w	<MISSING>
history 10	<MISSING>
history 10 | cut -c 8-	<MISSING>
history 300 | grep scp | grep important$	<MISSING>
history | awk '{ print $2 }' | sort | uniq -c |sort -rn | head	<MISSING>
"history | awk '{print $2}' | awk 'begin {fs=""|""}{print $1}' | sort | uniq -c | sort -n | tail | sort -nr"	<MISSING>
"history | awk '{print $2}' | awk 'begin {fs=""|""}{print $1}' | sort | uniq -c | sort -nr | head"	<MISSING>
"history | awk '{sub($1, """"); sub(/^[ \t]+/, """"); print}'"	<MISSING>
"history | awk '{sub($1, """", $0); sub(/^[ \t]+/, """", $0); print}'"	<MISSING>
history | cut -c 8-	<MISSING>
history | cut -d' ' -f4- | sed 's/^ \(.*$\)/\1/g'	<MISSING>
"history | grep "" 840"""	<MISSING>
history | grep 'part_of_the_command_i_still_remember_here'	<MISSING>
history | grep -a 4 -b 3 whatyousearchfor	<MISSING>
history | grep -c 5 ifconfig	<MISSING>
history | grep ifconfig -a5 -b5	<MISSING>
history | head -n 120 | tail -n 5	<MISSING>
history | less	<MISSING>
history | more	<MISSING>
"history | sed ""s/  / $uid /"""	<MISSING>
history | sed 's/^ */&\n/; :a; s/ \(.*\n\)/.\1/; ta; s/\n//'	<MISSING>
history | sed 's/^[ ]*[0-9]\+[ ]*//'	<MISSING>
history | sed 's/^\( *[0-9]*\) */\1../'	<MISSING>
history | sed -n '2960,2966p'	<MISSING>
history | tail	<MISSING>
history | tail -1 | awk '{print $1}'	<MISSING>
history | tail -10	<MISSING>
history | tail -n 10	<MISSING>
history | vim -	<MISSING>
history | vim -r -	<MISSING>
"history|awk '{$1="""";print substr($0,2)}'"	<MISSING>
"histtimeformat=""%s "" history 2"	<MISSING>
hnd=$(hostname -f)	<MISSING>
"host $(uname -n) | grep ""address"" | grep -v ""ipv6"" | head -n 1 | awk '{print $4}'"	<MISSING>
"host $(uname -n) | grep ""ipv6 address"" | head -n 1 | awk '{print $5}'"	<MISSING>
host `hostname` | awk '{print $4}'	<MISSING>
"host=$(dig +short -x ""${ip_address}"" | sed 's/\.$//g')"	<MISSING>
host=$(hostname)	<MISSING>
hostname	<MISSING>
hostname  -i	<MISSING>
"hostname  -i | awk -f"" "" '{print $1}'"	<MISSING>
hostname  -i | cut -f1 -d' '	<MISSING>
hostname $(cat /etc/hostname)	<MISSING>
hostname --all-ip-address|cut -d ' ' -f1	<MISSING>
hostname --ip-address	<MISSING>
hostname -a -l mydomain.com | sed -n '/;; answer/{n;n;p;q}'	<MISSING>
hostname -i	<MISSING>
hostname -i | awk '{print $1}'	<MISSING>
hostname -i | cut -d' ' -f1	<MISSING>
"hostname -i|cut -d"" "" -f 1"	<MISSING>
hostname myservershostname	<MISSING>
"hostname=""`hostname`"""	<MISSING>
hostname=$(hostname)	<MISSING>
hostname=$(hostname) make -e	<MISSING>
hostname=`hostname -s`	<MISSING>
hostz=$( hostname | cut -d. -f1 )	<MISSING>
hunting down files with at least one banana	
i'm assuming you only want to zip files that match names in $namese. in your script, try replacing the find command with:  export namese  find /var/tmp/ -type f -name '*.xml'	<MISSING>
identify cms version/releases accross all your drupal websites	
identify cms version/releases accross all your phpbb installations	
identify cms version/releases accross all your wordpress websites	
identify files that do not have a listing in the /etc/passwd or /etc/group file	
"if directory ""mydir"" exists in user's home directory, run ""mycommand"" in it, without changing the current shell's working directory, but do nothing if no such directory exists."	
"if find ""`echo ""$some_dir""`"" -maxdepth 0 -empty | read v; then echo ""empty dir""; else ""dir is not empty"" fi"	<MISSING>
"if find ""`echo ""$some_dir""`"" -maxdepth 0 -empty | read v; then echo ""empty dir""; fi"	<MISSING>
"if find /some/dir/ -maxdepth 0 -empty | read v; then echo ""empty dir""; fi"	<MISSING>
if first command fails, exits from script with exit code of failed command.	
"if variable ""c"" is a syntactically correct cron job, erase user's cron jobs and add ""c"" as the only cron job for user."	
ifconfig	<MISSING>
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -f: '{print $2}' | awk '{print $1}' | head -1	<MISSING>
ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'	<MISSING>
"ifconfig $(netstat -rn | grep -e ""^default|^0.0.0.0"" | head -1 | awk '{print $nf}') | grep 'inet ' | awk '{print $2}' | grep -eo '([0-9]*\.){3}[0-9]*'"	<MISSING>
ifconfig -a	<MISSING>
ifconfig -a | awk '/^[a-z]/ { iface=$1; mac=$nf; next } /inet addr:/ { print mac }' | grep -o -e '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'	<MISSING>
"ifconfig `ip route | grep default | head -1 | sed 's/\(.*dev \)\([a-z0-9]*\)\(.*\)/\2/g'` | grep -oe ""\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"" | head -1"	<MISSING>
"ifconfig en0 | awk '$1 == ""inet"" {print $2}'"	<MISSING>
"ifconfig en0 | awk '/inet addr/ {gsub(""addr:"", """", $2); print $2}'"	<MISSING>
ifconfig en0 | awk '/inet addr/{print substr($2,6)}'	<MISSING>
ifconfig en0 | grep -eo ..\(\:..\){5}	<MISSING>
ifconfig en0 | grep -o -e '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'	<MISSING>
ifconfig en0 | grep inet | grep -v inet6	<MISSING>
ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'	<MISSING>
"ifconfig en1 | awk '{ print $2}' | grep -e -o ""([0-9]{1,3}[\.]){3}[0-9]{1,3}"""	<MISSING>
ifconfig en1 | sed -n '/inet addr/s/.*addr.\([^ ]*\) .*/\1/p'	<MISSING>
ifconfig eth0 down	<MISSING>
ifconfig eth0 hw ether 00:80:48:ba:d1:30	<MISSING>
ifconfig eth0 up	<MISSING>
ifconfig eth0 | awk '/hwaddr/ {print $5}'	<MISSING>
"ifconfig eth0 | awk '/inet /{sub(/[^0-9]*/,""""); print $1}'"	<MISSING>
"ifconfig eth0 | awk '/inet addr/{sub(""addr:"",""""); print $2}'"	<MISSING>
"ifconfig eth0 | awk '/inet addr/{sub(/[^0-9]*/,""""); print $1}'"	<MISSING>
ifconfig eth0 | grep 'inet addr:' | awk '{print $2}' | awk -f ':' '{print $2}'	<MISSING>
ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{print $1}'	<MISSING>
ifconfig eth0 | grep -eo ..\(\:..\){5}	<MISSING>
ifconfig eth0 | grep -eoi [:0-9a-f:]{2}\(\:[:0-9a-f:]{2}\){5}	<MISSING>
ifconfig eth0 | grep -o -e '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'	<MISSING>
ifconfig eth0 | grep -op '(?<= inet addr:)[^ ]+'	<MISSING>
ifconfig eth0 | grep addr: | awk '{ print $2 }' | cut -d: -f2	<MISSING>
ifconfig eth0 | grep hwaddr	<MISSING>
ifconfig eth0 | grep hwaddr | cut -d ' ' -f 9	<MISSING>
ifconfig eth0 | grep hwaddr |cut -dh -f2|cut -d\  -f2	<MISSING>
ifconfig eth0 | grep inet | cut -d: -f2 | cut -d' ' -f1	<MISSING>
ifconfig eth0 | head -n1 | tr -s ' ' | cut -d' ' -f5	<MISSING>
ifconfig eth0:fakenfs 192.0.2.55 netmask 255.255.255.255	<MISSING>
ifconfig p2p0 | grep -o -e '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'	<MISSING>
ifconfig | awk '$0 ~ /hwaddr/ { print $5 }'	<MISSING>
"ifconfig | awk -f""[ :]+"" '/inet addr/ && !/127.0/ {print $4}'"	<MISSING>
"ifconfig | awk -f':' '/inet addr/&&!/127.0.0.1/{split($2,_,"" "");print _[1]}'"	<MISSING>
"ifconfig | grep ""inet addr:"" | grep -v ""127.0.0.1"" | grep -eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'  | head -1"	<MISSING>
ifconfig | grep 'inet addr:' | grep -v 127.0.0.1 | head -n1 | cut -f2 -d: | cut -f1 -d ' '	<MISSING>
ifconfig | grep 'inet' | grep -v '127.0.0.1' | awk '{print $2}' | sed 's/addr://'	<MISSING>
"ifconfig | grep -a2 ""venet0:0\|eth0"" | grep 'inet addr:' | sed -r 's/.*inet addr:([^ ]+).*/\1/' | head -1"	<MISSING>
"ifconfig | grep -e ""([0-9]{1,3}\.){3}[0-9]{1,3}"" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:"	<MISSING>
ifconfig | grep -eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'	<MISSING>
ifconfig | grep -i hwaddr | cut -d ' ' -f9	<MISSING>
"ifconfig | grep -op ""(?<=inet addr:).*?(?=  bcast)"""	<MISSING>
"ifconfig | grep -op ""(?<=inet addr:).*?(?=bcast)"""	<MISSING>
ifconfig | grep -v '127.0.0.1' | sed -n 's/.*inet addr:\([0-9.]\+\)\s.*/\1/p'	<MISSING>
ifconfig | grep 192.168.111 | awk '{print $2}'	<MISSING>
ifconfig | grep ad.*bc | cut -d: -f2 | awk '{ print $1}'	<MISSING>
ifconfig | grep hw	<MISSING>
ifconfig | sed -en 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'	<MISSING>
ifconfig | sed -n 's/.*inet addr:\([0-9.]\+\)\s.*/\1/p'	<MISSING>
ifs= read -d $'\0' -r file	<MISSING>
ifs= read -r line	<MISSING>
ifs= read -s -n 1 select	<MISSING>
ifs= read -t 0.01 -d '' -n1 keypress	<MISSING>
"ifs=$'\n' read -d '' -ra files < <(find /foo -name ""*.txt"")"	<MISSING>
"ifs=$'\n';for f in `find .`; do file=$(echo $f | tr [:blank:] '_'); [ -e $f ] && [ ! -e $file ] && mv ""$f"" $file;done;unset ifs"	<MISSING>
"ifs=';' read -a myarray <<< ""$myarray"""	<MISSING>
immediately display unique entries from access.log	
immediately exit the shell if a command fails	
immediately kill all child processes of parent process whose id is specified by the variable ppid.	
immediately kill all processes listening on tcp port 3000.	
immediately kill all processes using tcp port 3000 on the system.	
immediately terminate all processes whose command or arguments contain 'amarok'.	
"immediately terminate all processes whose command or arguments match ""myprocessname"""	
"import the uncompressed contents of the last modified file  matching ""*.sql.gz"" into ""mysql"""	
in a ssh session, set the variable 'user' to the last dot-separated number of the client's ip address.	
in the current shell, interpret 'incl.sh' which is in the directory pointed by variable dir	
"inarray=$(echo ${haystack[@]} | grep -o ""needle"" | wc -w)"	<MISSING>
"infinitely ping every host listed in ""file-of-ips"" with at most 50 processes at once"	
"infinitely print ""1"" then ""0"""	
"infinitely print ""no"" to the screen"	
"infinitely write ""1"" with line numbers to the console and ""/tmp/to"""	
info -o gawk	<MISSING>
info bash 'basic shell features' 'shell expansions' 'filename expansion' 'pattern matching'	<MISSING>
"info gcc ""option index"""	<MISSING>
info gcc --index-search=funroll-loops	<MISSING>
"inode=`ls -i ./script.sh | cut -d"" "" -f1`"	<MISSING>
inotifywait -e attrib target-directory	<MISSING>
input_prog 2>&1 | tee /dev/tty | my_editor	<MISSING>
"insert ""e"" when it's pressed"	
"insert ""insert"" every 3 lines for the output of ""seq 1 10"""	
"insert ""|"" every 30 characters in file ""longline"""	
"insert the current host name on line 15 of ""test.html"""	
"inserts ""new line"" after last occurrence of scriptalias in a file"	
install 'mono-devel' package, answering 'yes' for all questions.	
installs  'packagename' package.	
installs 'firefox' package without using 'sublime2' repository.	
installs 'firefox' package.	
installs 'glibc' package.	
installs 'php-mbstring' package, enabling 'remi' repository.	
installs 'php-mssql' package with enabling repository 'remi'.	
installs all packages from a '/home/pkglist.txt' list, answering 'yes' on all questions.	
installs all packages from a current folder, excluding ones that match pattern '*glob*'.	
installs git and bash-completion packages.	
installs locally located 'ffmpeg-2.6.4-1.fc22.x86_64.rpm' package.	
installs locally located 'packagename.arch.rpm' package, ignoring gpg checking.	
"installs package ""devtoolset-3"" answering 'yes' on all questions."	
"installs package ""nodejs"" answering 'yes' on all questions."	
installs package 'mysql'.	
"installs package group ""development tools"" answering 'yes' on all questions."	
"installs package group ""mysql database client"", answering 'yes' on all questions."	
installs packages 'mysql' and 'mysql-server'.	
instantly kill all processes whose command is 'myprocess'.	
"interactively create a symbolic link in the current directory for ""$script_dir/$file"""	
interactively display all lines containing 'word' in all files whose name ends with .properties in the current directory, waiting for user input after each page.	
interactively page through a list of all processes running on the system - the arrow keys pan around, and the q key quits.	
interactively page through the color-coded output of 'ls'.	
"interpret /etc/bashrc in the current shell, ignoring lines that contain ""mesg""."	
interpret all lines containing an equal sign in myfile (usually, grab all variables from myfile into current shell)	
interpret backslash sequences and delete whitespace characters in variable $foo and save the result to variable 'foo_no_whitespace'	
interpret conf-file in the current shell, making all environment variables in this file available to future sub-processes.	
"interpret in the current shell all lines in config.sh which contain the word ""marker"""	
"invoke a trusted x11 forwarding ssh connection with server ""192.168.0.14"" on port 222 as user ""phil"""	
invoke a trusted x11 forwarding ssh connection with the server $ssh_server as user $ssh_user	
invoke make for all the xml files in the current folder by changing their extension from xml to log.	
ionice -c 3 find  . -type f -amin -1440 -mmin +1441 -not -path custom/ -print0	<MISSING>
"ip addr show en0 | awk '$1 == ""inet"" {gsub(/\/.*$/, """", $2); print $2}'"	<MISSING>
ip=$(dig +short myip.opendns.com @resolver1.opendns.com)	<MISSING>
ip=$(hostname -i | awk '{print $1}')	<MISSING>
ip=$(hostname -i)	<MISSING>
"ip=$(ifconfig | grep -op ""(?<=inet addr:).*?(?=bcast)"")"	<MISSING>
ipcs -a | grep `whoami`	<MISSING>
"ipcs -a | nawk -v u=`whoami` '$5==u &&(($1==""m"" && $9==0)||($1==""s"")){print ""ipcrm -""$1,$2,"";""}' | /bin/sh"	<MISSING>
ipcs -mb | awk 'nr > 3 { print $7 }' | paste -sd+ | bc	<MISSING>
"ipcs | nawk -v u=`whoami` '/shared/,/^$/{ if($6==0&&$3==u) print ""ipcrm shm"",$2,"";""}/semaphore/,/^$/{ if($3==u) print ""ipcrm sem"",$2,"";""}' | /bin/sh"	<MISSING>
is_nullglob=$( shopt -s | egrep -i '*nullglob' )	<MISSING>
"isolate first comma-delimited field of each line in ""file"", discard consecutive duplicates, and search ""file"" for first matching occurrence of that field."	
"j=`echo $i | rev | cut -d ""."" -f2`;"	<MISSING>
"java_home=""$( readlink -f ""$( which java )"" | sed ""s:bin/.*$::"" )"""	<MISSING>
"java_home=$(readlink -f /usr/bin/java | sed ""s:/bin/java::"")"	<MISSING>
"joblist=$(jobs -l | tr ""\n"" ""^"")"	<MISSING>
jobs	<MISSING>
jobs -l	<MISSING>
"jobs -l | fgrep $! | perl -ne 'print ""$1\n"" if /\[(\d+)\]/'"	<MISSING>
jobs -l | grep 'test.sh &' | grep -v grep | awk '{print $2}'	<MISSING>
jobs -lp	<MISSING>
jobs -p | tail -n [number of jobs] | xargs kill	<MISSING>
jobs -p | xargs kill	<MISSING>
jobs -p | xargs kill -9	<MISSING>
jobs -sl | awk '{print $2}'	<MISSING>
jobs -x echo %1	<MISSING>
jobs | wc -l	<MISSING>
"join -1 2 -2 1 -a1 <(cat -n file1.txt | sort -k2,2) <(sort file2.txt) | sort -k2 | cut --complement -d"" "" -f2"	<MISSING>
join -1 2 -2 1 -t, bigfile.csv littlefile.csv	<MISSING>
join -1 2 -2 1 <(sort +1 -2 file1) <(sort +0 -1 file2)	<MISSING>
join -1 2 -2 1 text.txt codes.txt	<MISSING>
join -11 -21 -o1.1,1.2,1.3,2.3 file1 file2	<MISSING>
join -a1 -a2 <(sed s/^gene/00ne/ s43.txt | sort) <(sed s/^gene/00ne/ s44.txt | sort) | column -t | sed s/^00ne/gene/	<MISSING>
join -j 1 -t : -o 2.1,2.2,2.4,1.3 <(sort empsal) <(sort empname)	<MISSING>
join -j 2  -o 1.1 1.2 2.1 <(sort -k2 1) <(sort -k2 2)	<MISSING>
join -j1 -o 2.1,2.2,1.2,1.3  <(sort test.1) <(sort test.2)	<MISSING>
join -j1 file2 file1	<MISSING>
"join -j2  <(seq 0 255) <(seq 0 255) | xargs -n256 printf ""%02x/%02x\n"" | xargs mkdir -p"	<MISSING>
join -j2 <(sort -k2 file1) <(sort -k2 file2)	<MISSING>
join -o 1.1,1.2,1.3,1.4 -t, <(sort file1.csv) <(sort file2.txt)	<MISSING>
join -o 1.1,1.2,1.3,1.4 -t, file1.csv file2.txt	<MISSING>
join -o 1.1,1.2,1.3,2.1,2.2,2.3 -j2 <(sort -k2 file1) <(sort -k2 file2)	<MISSING>
join -o 1.2,1.3,2.4,2.5,1.4 <(cat -n file1) <(cat -n file2)	<MISSING>
"join -t "" "" -j 1 <(sort file1) <(sort file2)"	<MISSING>
join -t $'\t' file1 file2	<MISSING>
join -t':' <(sort ln.txt) <(sort ph.txt) | join -t':'  - <(sort ad.txt)	<MISSING>
join -t, -a1 -a2 <(sort file1) <(sort file2)	<MISSING>
join -t, -o 1.1,1.2,2.3 -a1 in1 in2	<MISSING>
join -t, -o 1.1,1.2,2.3 in1 in2	<MISSING>
join -t, -o 1.2,2.2,2.3 -a 1 -a 2 -e 'no-match' - <(sort file1.txt)	<MISSING>
join -t, -o 1.2,2.2,2.3 -a 1 -e 'no-match' - <(sort file1.txt)	<MISSING>
join -t, <(sort file1) <(sort file2)	<MISSING>
join -t, <(sort test.1) <(sort test.2) | join -t, - <(sort test.3) | join -t, - <(sort test.4)	<MISSING>
"join -t, file1 file2 | awk -f, 'begin{ofs="",""} {if ($3==$8 && $6==$9 && $7==$10) print $1,$2,$3,$4,$6,$7}'"	<MISSING>
join -t, in1 in2	<MISSING>
join -t, test.1 test.2 | join -t, - test.3 | join -t, - test.4	<MISSING>
join -t: <(sort file1) <(sort file2)	<MISSING>
join -t: selection2.txt selection1.txt	<MISSING>
join -v 1 <(sort file1) <(sort file2)	<MISSING>
join -v 2 index <(nl strings)	<MISSING>
join -v1 <(sort file1) <(sort file2)	<MISSING>
join -v1 success.txt fail.txt	<MISSING>
join <(sort -n a) <(sort -n b)	<MISSING>
join <(sort -n file1) <(sort -n file2)	<MISSING>
join <(sort aa) <(sort bb)	<MISSING>
join <(sort aa) <(sort bb) | sort -k1,1n	<MISSING>
join <(sort index) <(nl strings | sort -b)	<MISSING>
join colon-separated information in 3 files ln.txt ph.txt and ad.txt in a cascade fashion: join ln.txt and ph.txt, then join the result with ad.txt	
"join columns in ""file1"" and ""file2"" if their first field matches and format the output as a table"	
join comma-separated data in file1 and file2, including extra non-matching information in both files.	
join comma-separated information in 4 files	
join comma-separated information in 4 files - files must be sorted.	
"join data in ""file1"" sorted by the second word of each line with data in ""file2"" sorted by the first word of each line, keeping the same order as it is found in ""file1"""	
join data in file1 containing one number per line with data in file2 containing a number and other information per line, keeping the same order as it is found in file1.	
join file1 file2 | column -t	<MISSING>
"join file{1,2}.txt | awk '$2 != $3 { print ""age of "" $1 "" is different"" }'"	<MISSING>
"join lines in file ""a"" with lines in file ""b"" if the lines share a common first word"	
"join lines in file ""aa"" with lines in file ""bb"" if the lines share a common first word"	
"join lines in file ""aa"" with lines in file ""bb"" if the lines share a common first word and sort the result numerically"	
join lines of 'file': fields 1 and 2 of lines discarding adjascent lines ignoring first 3 fields, with fields 3 to end of line discarding adjascent lines ignoring 3 last fields.	
join strings from 'file1' and 'file2', discarding excessive strings from largest file, and printing first, second and third space-separated field from first file, and third and fourth field from second file as a join result	
just find directories and skip file names	
keep only read access to all the files in a directory.	
"keep only the last two hyphen-separated sections of ""abc-def-ghi-jkl"""	
keep the last 3 components (directories) of $path	
keep the last 4 ascii characters (bytes) of a string.	
"key+=`date -r ""$arg"" +\ %s`"	<MISSING>
kill $!	<MISSING>
kill $(jobs -p)	<MISSING>
kill $(lsof -t -i:8080)	<MISSING>
kill $(pgrep 'python csp_build.py')	<MISSING>
kill $(ps -a -ostat,ppid | awk '/[zz]/{print $2}')	<MISSING>
kill $(ps -o pid= -s $(ps -o sess --no-heading --pid $(pgrep rsync )))	<MISSING>
kill $(ps -o pid= -s $(ps -o sess --no-heading --pid 21709))	<MISSING>
kill $(ps aux | grep '[p]ython csp_build.py' | awk '{print $2}')	<MISSING>
kill $pid	<MISSING>
kill %1	<MISSING>
kill -0 $pid	<MISSING>
kill -0 1	<MISSING>
kill -15 $( lsof -i:6000 -t )	<MISSING>
kill -20 $pid; kill -18 $pid	<MISSING>
kill -9 $(lsof -i:3000 -t)	<MISSING>
kill -9 $(lsof -t -i:8080)	<MISSING>
kill -9 $(lsof -t -u daniel)	<MISSING>
kill -9 $(pgrep amarok)	<MISSING>
kill -9 $(ps -a -ostat,ppid | grep -e '[zz]'| awk '{ print $2 }')	<MISSING>
kill -9 16085	<MISSING>
kill -9 18581 18582 18583	<MISSING>
kill -9 \`pgrep myprocess\`	<MISSING>
kill -9 `cat save_pid.txt`	<MISSING>
kill -9 `pgrep -f cps_build`	<MISSING>
kill -hup $( cat /var/run/nginx.pid )	<MISSING>
kill -hup $(lsof -t -c sshd)	<MISSING>
kill -hup $(ps -a -ostat,ppid | grep -e '[zz]'| awk '{ print $2 }')	<MISSING>
kill -int $(jobs -p)	<MISSING>
kill -s winch $$	<MISSING>
kill `cat /var/run/databasesynchronizerclient.pid`	<MISSING>
kill `jobs -lp`	<MISSING>
kill `pidof firefox`	<MISSING>
kill `ps ax | grep 'python csp_build.py' | awk '{print $1}'`	<MISSING>
"kill `pstree -p 24901 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr ""\n"" "" ""`"	<MISSING>
kill a number of background jobs	
kill a running screen session	
kill all active jobs	
kill all background jobs	
kill all background processes	
"kill all instances of ""dropbox"" owned by the current user"	
kill all jobs	
"kill all processes matching the string ""myprocessname"""	
kill all processes which were executed in background by the current shell.	
kill group leader	
"kill process named ""python csp_build.py""."	
kill processes listening on port 3000	
kill screen session 23536	
kill the processes of user `myuser' that have been working more than 7 days	
"killall -u ""$(whoami)"" dropbox"	<MISSING>
kills a running program 'python csp_build.py'	
kills all child process and process itself having id 24901.	
lang=en_us cal	<MISSING>
last -i | grep $(whoami) | grep 'still logged in'	<MISSING>
"launcherfile=$(mktemp -p ""$appdir"" ""$template"")"	<MISSING>
"lbuffer+=""$(date)"""	<MISSING>
lc_all=c find . -regextype posix-egrep -regex '^.*/[a-z][^/]*$' -type f	<MISSING>
ld --verbose | grep search_dir | tr -s ' ;' \\012	<MISSING>
ld_preload=./linebufferedstdout.so python test.py | tee -a test.out	<MISSING>
ldd $(which yourappname)	<MISSING>
ldd /bin/* /usr/bin/* ... | sed -e '/^[^\t]/ d; s/^\t\(.* => \)\?\([^ ]*\) (.*/\2/g' | sort | uniq -c	<MISSING>
ldd /bin/* /usr/bin/* | sed -e '/^[^\t]/ d; s/^\t\(.* => \)\?\([^ ]*\) (.*/\2/g' | sort | uniq -c	<MISSING>
"left justify number each non-blank line in ""log.txt"" as input to ""sed ..."""	
less -f <(php -i)	<MISSING>
less -f <(php whatevz.php)	<MISSING>
less -n file.txt	<MISSING>
less -p regex file_name	<MISSING>
less -s file	<MISSING>
less `find -maxdepth 1 -type f -daystart -mtime -1`	<MISSING>
let the user page through 'filename.csv' with long lines chopped so they fit within the width of the screen/window.	
"lgt_temp_file=""$(mktemp --suffix .cmd)"""	<MISSING>
libdir=$(dirname $(dirname $(which gcc)))/lib	<MISSING>
"limit each line in ""your_file"" to 80 characters and view via ""more"""	
limits the number of results from grep to 2 lines	
line=$(top -b -n 1 | tail -n +8 | head -n 1 | tr -s ' ')	<MISSING>
line=$(who | cut -d' ' -f1 | sort -u)	<MISSING>
"line_to_be_replaced=`cat itemlist.json | nl |  sed -n '/""item_1""/,/""item_2""/p' | grep -in ""}]"" | awk '{print $2}'`"	<MISSING>
lines.txt contains a list of line numbers, one entry per line - output only these lines from text.txt omitting the rest of the file.	
lines=$(cat /some/big/file | wc -l)	<MISSING>
"list "".java"" files that have the same contents"	
"list "".java"" files that have the same filename and contents"	
list (in long list format with inode number) the file under the current directory that has the oldest modification time	
list *.bmp and *.txt files under the /home/user/desktop directory.	
list *.pdf files under the /home/user/desktop directory.	
list *.pdf, *.bmp and *.txt files under the /home/user/desktop directory.	
list *.pl directories in the current directory tree	
list *.txt files residing in the current directory tree	
list *.txt files under current directory that have 'mystring' in their name	
list .c files in the current directory	
list .conf files residing in the /etc/nginx/ directory tree	
"list .html files in the current directory tree that contain string ""base\-maps"" but do not contain string ""base\-maps\-bot"""	
list .log files from the current directory tree	
list absolute path of files in the current directory	
"list all "".txt"" files with a unique md5 hash"	
list all *.bak files in the current directory tree	
list all *.c files in entire file system	
list all *.c, *.h and *.cpp files under current directory	
list all *.gif files found in the current directory tree	
list all *.jar files/directories under /usr, /home and /tmp directory	
list all *.jar files/directories under /usr, /home and /tmp directory without reporting errors	
list all *.java files under the src directory	
list all *.java files/directories under /home/bluher with their full paths	
list all *.jpg files/directories in entire file system	
list all *.ogg files under your home directory along with their size	
list all *.png files/directories under /home/kibab directory	
list all *.txt files in <path> with details about their attributes	
list all *.txt files in the user's home directory.	
list all *.txt files under current directory that contains the regex 'pattern'	
list all *.txt files under current directory that match 'foo=' in their file information	
list all *.txt files/directories under /etc	
list all *.txt files/directories under current directory	
list all *.txt files/directories under current directory ensuring white space safety	
list all *fink* files/directories in entire file system	
list all *fink* files/directories under current directory	
list all *jsp and *java regular files found in the current directory tree	
"list all .c and .h files in the current directory tree that contain ""thing"""	
list all .c or .sh regular files.	
list all .gif files in the current directory tree	
list all .jpg files in the home directory tree	
list all .jpg files in the home directory tree in a fast way	
list all .svn files/directories under current directory	
list all active cron jobs, displaying only the command.	
list all active jobs and its ids	
list all aliases	
"list all aliases that name contents the string ""xlogs"""	
list all aliencoders.[0-9]+ files/directories under /home/jassi/ directory	
list all available commands in mac os	
list all broken symlinks excluding cyclic links under current directory	
list all broken symlinks including cyclic links under current directory	
list all broken symlinks under the current directory with info on whether the links exist or not	
list all cron jobs for current user.	
list all cron jobs where the minute part is either * or a number from 0 to 14.	
"list all cron jobs which contain ""word""."	
list all crons in the environment	
list all css files (and directories ending with “.css”) under the current directory	
list all css files under the current directory	
list all defined bash functions	
list all directories and subdirectories	
list all directories found in the current directory and below.	
list all directories in current directory, works even if they have weird names or names starting with a dash.	
list all directories in maximum 1 level down the current directory	
list all directories of the $topdir directory tree that contain a makefile and at least one .py file	
list all directories starting from root that have sticky bit set	
list all directories under current directory	
list all empty files in the current directory tree	
list all empty files under the current directory	
list all entry names contained directly by directory in_save in the current directory, pausing for user input at each page.	
list all environment variables	
list all environment variables (name and value) whose name either equals home or path, or starts with go	
list all environment variables (name and value) whose name either equals path or starts with gobin	
list all environment variables (name and value) whose name starts with goroot	
list all environment variables containing 'user' in their name or value that would result in running a command with 'sudo env'.	
list all environment variables whose name contains 'ipo', showing only the names of the variables and not their values.	
list all environment variables whose name or value contains current user's login name.	
list all environment variables whose name starts with path, showing the name and value of each one.	
list all existing environment variables in the current shell.	
"list all file details with filenames matching ""*2012*.xml"" from ""serveripaddress::pt/dir/files/"" listening on port 111 and write to ""output.txt"""	
"list all file paths under the current directory with case insensitive name "".note"" in reverse alphabetic order"	
list all files	
list all files 2 levels deep in the current directory tree	
list all files and directories (including hidden) in the current working directory in a long list format sorted by the oldest modification time	
list all files and directories from the current directory tree	
"list all files and directories in ""/data/"" sorted by version number"	
"list all files and directories in long list format with a time style of ""long-iso"" and sort from oldest modifed to newest modified"	
"list all files and directories in the /home directory tree whose names are ""trash"""	
list all files and directories residing in the current directory and below	
list all files and folders in the current working directory	
list all files and sub directories including hidden files in the current directory tree	
list all files bigger than 10000 blocks	
list all files except for those in directory sccs	
list all files from the current directory tree that were modified less than 60 minutes ago	
"list all files from the current directory tree that were modified less than 60 minutes ago, omitting ""."""	
list all files in /home/bozo/projects directory tree that were modified exactly one day ago	
list all files in /home/bozo/projects directory tree that were modified exactly one day ago.	
list all files in /home/bozo/projects directory tree that were modified within the last day	
list all files in /home/bozo/projects directory tree that were modified within the last day.	
list all files in /var/www and below that have changed in the last 10 minutes	
list all files in a current folder, separating names with comma	
list all files in a current folder, separating names with semicolon	
"list all files in current directory whose name or file type description contains the word ""ascii""."	
list all files in entire file system owned by the user wnj and are newer than the file ttt	
list all files in entire file system that are newer than the file $newerthan and older than the file $olderthan and sort them according to file modification time	
list all files in entire file system that are newer than the file $newerthan and older than the file $olderthan in regards of modification time	
list all files in entire file system that are not newer than the ttt file and do not belong to the user wnj	
list all files in entire file system that belong to the user wnj or modified later than the ttt file	
list all files in maximum 2 levels down the current directory	
"list all files in the ""test"" directory tree except those with '/invalid_dir/' in the pathnames"	
"list all files in the /hometest directory tree whose names are ""trash"", and their sizes"	
list all files in the /myfiles directory tree	
list all files in the /var directory tree whose size is greater than 10 megabytes	
list all files in the current directory recursively	
list all files in the current directory tree except for those in the ./src/emacs directory	
list all files in the current directory tree including those that may contain spaces in their names	
list all files in the current directory tree invoking xargs only once	
list all files in the current directory tree larger than 1000 kb	
"list all files in the current directory tree that were last modified between ""mar 03, 2010 09:00"" and ""mar 11, 2010"""	
list all files in the current directory tree that were last modified in march 2007	
list all files in the current directory tree that were last modified more than 60 minutes ago	
list all files in the current directory tree that were last modified on the 3rd of march, 2010 or later	
list all files in the current directory tree that were last modified yesterday or later	
list all files in the current directory tree that were modified 60 minutes ago	
list all files in the current directory tree that were modified less than 60 minutes ago	
list all files matching regular expression '*foo*' in a human-readable form	
"list all files named ""filename"" from the current directory tree, ignoring directory ""folder1"""	
list all files that are between 10000 and 32000 bytes in size	
list all files that have not been read in thirty days or more	
list all files that matches both the case insensitive patterns *$1* and *$2* under /home/musicuser/music/ directory	
list all files under $dir directory except path $dir/prune_me directory	
list all files under .performance_test directory except .performance_test/prune_me directory	
list all files under and below the directory given as variable $arch1	
list all files under and below the directory given as variable $fulfillment	
list all files under current directory	
list all files under current directory matching the regex '.*(c|h|cpp)$'	
list all files under current directory matching the regex '.*\(c\|h\|cpp\)'	
list all files under current directory matching the regex '.*\.\(c\|h\|cpp\)'	
list all files under current directory that are greater than 10000000x512 bytes in size	
list all files under current directory that are greater than 10mb in size	
list all files under current directory with their paths and sizes	
list all files under current directory with their sizes and paths	
list all files under current directory with white space safety in their paths	
list all files under the current directory called cookies.txt	
"list all files under the current directory, redirecting error messages to the output, filtering out lines containing the text ""permission denied"" and writing the output to a file called files_and_folders"	
list all files under the current directory, writing the output to the file files_and_folders	
list all files under the current directory, writing the output to the file files_and_folders, do not try to descend into directories that cannot be read.	
list all files under the current directory, writing the output to the file files_and_folders, suppressing all error messages	
list all files under the current directory, writing the output to the file files_and_folders, suppressing all error messages.	
list all files under the current directory, writing the output to the file some_file, suppressing all error messages	
list all files under the current working directory last modified less than a day ago	
list all files under the current working directory tree	
"list all files under the current working directory with name "".htaccess"""	
"list all files with name ""somefile"" and their modification time under the current directory sorted by oldest modified to newest modified"	
list all files with their modification time in entire file system that are newer than the file $newerthan and older than the file $olderthan in regards of modification time and sort them according to file modification time	
list all files with their paths that have identical content.	
list all files without descending into subdirectories	
list all files/directories in entire file system	
list all files/directories under $dir_name with size $sizefile and print them according to the format string  '%m %n %u %g %s %tb %td %tk:%tm %p\n'	
list all files/directories under /data1/marcel which are greater than 524288 bytes and were modified or accessed more than 1 year ago	
list all files/directories under /data1/marcel with their file information which are greater than 524288 bytes and were modified or accessed more than 1 year ago	
list all files/directories under /myfiles directory	
list all files/directories under current directory	
list all files/directories under current directory and redirect it to /tmp/files.txt	
list all files/directories under current directory by replacing all spaces with commas (,)	
list all files/directories under current directory ensuring white space safety	
"list all files/directories under current directory matching the posix-egrep type regex "".+\.(c|cpp|h)$"" in their names"	
"list all files/directories under current directory matching the posix-egrep type regex "".+\.(c|cpp|h)$"" in their names excluding the files that contain 'generated' or 'deploy' in their paths"	
"list all files/directories under current directory matching the posix-egrep type regex "".+\.(c|cpp|h)$"" in their names excluding the paths */generated/* and */deploy/*"	
list all files/directories under current directory using comma (,) as the delimiter for different fields in the output	
list all files/directories under current directory with 'foobar' in their names ensuring white space safety	
list all files/directories under current directory with 'foobar' in their paths ensuring white space safety	
list all files/directories under current directory with their inode numbers, disk space, permission, number of hard links, user name, group name, size, status change time in y-m-d format and name filed,  then write the outptut to /tmp/files.txt	
list all files/directories with spaces in their names under ~/library directory	
list all files/folders in current directory by separating them with spaces	
list all functions defined in the shell	
"list all functions or variables containing "" ()"" defined in the shell"	
list all hidden files under present working directory and redirect the list to all-hidden-files.txt	
list all hidden regular files from the current directory separating them with zeroes	
list all ip addresses assigned to current hostname, pausing for user interaction after each page.	
list all ipv4 addresses found in all files under /etc directory	
list all java file that stringbuff in context.	
list all javascipts file expect files under proc folder	
"list all javascipts file which whole name does not contain ""directory"""	
list all javascipts file which whole name does not contain excludeddir	
list all javascipts file which whole name does not contain excludeddir or excludedir2  or excludedir3	
"list all js files under currect directory exculde the directory which path contain ""/path/to/search/exclude_me"" or name isexclude_me_too_anywhere"	
list all leaf directories (directories which don't contain any sub-directory) under current directory	
list all leaf directories of the current directory tree	
"list all level 1 subdirectories of the current directory printing line ""cmd2"" after each of them"	
list all links from / that point to nothing	
list all mounted filesystems	
list all names of the aliases	
list all nfs mount points on the system	
list all nfs mounts	
list all non-empty files under under current directory	
list all non-hidden files in ~/junk	
list all of the subdirectories in the current directory with no trailing slash.	
"list all paths to files or directories under ""/data/"" that start with ""command-"" and end with ""-setup"", sort the result by the version number specified between ""command-"" and ""-setup"" (least to greatest)"	
"list all php files below current directory whose full pathname name does not include ""libs"", ""tmp"", ""tests"", or ""vendor"", sorted by number of lines, letting the user page interactively through the output."	
list all processes with detailed information	
list all processes with its pids	
list all regular file owned by root with permissions 4000	
list all regular files from the current directory tree that were modified less than 60 days ago	
list all regular files from the current directory tree that were modified less than 60 minutes ago	
list all regular files in /var/www and below that have changed in the last 10 minutes	
list all regular files in and below the home directory that have been modified in the last 90 minutes	
list all regular files in and below the home directory that were modified more than 5 years ago	
list all regular files in entire file system	
list all regular files in the current directory tree	
list all regular files in the current directory tree modified within the last 24 hours	
list all regular files in the current directory tree that were modified less than 60 minutes ago	
"list all regular files matching the name pattern ""$1*"" (where $1 is a positional parameter) under '/usr', '/bin', '/sbin' and '/opt' directory tree"	
list all regular files modified more than 61 days	
"list all regular files residing in the current directory tree and containing string ""/bin/ksh"""	
list all regular files under current directory (not white space sage)	
list all regular files under current directory ensuring white space safety	
list all regular files under the current directory and below it	
"list all regular files under the directory ""$directory"""	
list all regular files which path is not dir1 or dir2	
list all running jobs	
list all samba files in /var/l* directory ( /var/lib or /var/log )	
list all screen sessions	
list all sgid and suid files in entire file system	
list all symlinks under current directory and search for targetfile.txt in this list	
"list all system calls during process of symbolic link creation process on  ""/tmp/output.txt"" file"	
"list all the "".ksh"" files in the current directory"	
list all the .c files under the current directory and below in a 3 column format	
list all the directories in the folder httpdocs	
list all the drectories present in the current directory and do not search in the sub directories.	
list all the emptry files in thecurrent directory only.	
list all the file links	
list all the files in the current directory which are of size 0 bytes.	
list all the files in the file system excluding proc folder and excluding symbolic links which have write permission for the user	
list all the files which have size 0 bytes in some directories	
list all the sqlite files in the current folder	
list all unique parent directories of .class files found under the current directory	
list all users logged into the current(null) tty	
list all variables (names and values) whose name or value contains x.	
list all variables (names only) with names containing x.	
list all vpn_callrecord_20140409* files under current directory and print the 9th fields from the output to log.txt	
list all your files including everything in sub-directories	
list all zero-length files	
list all zero-length files under the current directory	
list all ~/bin/filesdvorak/.* (non-recursive) and ~/.past_rc_files/.* (recursive) files/directories and take common entries between these two lists	
list an empty environment (prints nothing)	
"list and remove all regular files named ""core"" that are larger than 500kb"	
"list and remove all regular files named ""core"" under /prog that are larger than 500k"	
list and see contents of all abc.def files under the directories /ghi and /jkl	
list and sort all leaf directories (directories which don't contain any sub-directory) under current directory	
list any files modified since /bin/sh was last modified	
"list any line in ""f1"" or ""f2"" which does not appear in the other and delete all tab characters in the output"	
"list broken symbolic links under ""somedir"""	
list characters from standard input showing backslash escapes for non-displayables	
"list common files in directories ""1"" and ""2"""	
"list complete path name to process associated with pid ""$1"""	
list content of 'myfile' in a subshell and returns output to parent shell	
list current directory, waiting for user input at each page.	
list current user's crontab.	
list detailed information about all jar files in the current directory tree	
"list directories in the current working directory and remove the trailing ""/"""	
list directories owned by group id 100 in the file system	
list directories under current directory	
list each directory in the current directory prefixed with its disk usage in human readable format and sorted from smallest to largest	
list each file or directory in the current directory prefixed by its filesize in bytes and sorted from smallest to largest	
list each file or directory in the current directory prefixed by its human readable filesize and sorted from largest to smallest	
list each file or directory in the current directory prefixed with its filesize in bytes and sorted from smallest to largest	
list each file or directory in the current directory prefixed with its filesize in mb and sorted from smallest to largest	
list each subdirectory name composing the current working directory	
"list each unique case insensitive character in ""file"" prefixed by number of occurrences"	
"list each unique case insensitive character in ""file"" prefixed by number of occurrences and sorted from most frequent to least frequent"	
"list each unique character in ""file"" prefixed by number of occurrences"	
"list each unique character in ""file"" prefixed by number of occurrences and sorted from most frequent to least frequent"	
list empty directories in the current directory tree	
list environment variable values whose name matches '^\w*x\w*'	
list environment variables and their values whose name matches '^\w*x\w*'	
list environment variables and their values, escaping all semicolons with a backslash.	
"list environment variables whose name contains ""x"""	
"list environment variables whose name matches "".*x.*"""	
list environment variables whose name matches '^\w*x\w*'	
list every directory under current directory with their child executable files	
list every symbolic link in every home directory's subdirectory owned by group `staff'	
list executable files in the current directory, sort the list and then display the differences between the list and file .gitignore.	
list existing screen sessions	
list file contents of compressed file $i	
list file contents of compressed file 'compressed.tar.gz'	
"list file information of the full path of command ""c++"""	
list files and directories one level deep in the current directory tree	
list files and directories recursively	
list files cart1, cart2, ..., cart6 in directory ~/junk	
list files ending in .html and residing in the current directory tree	
"list files found under the current directory ending in ""txt"" or ending in ""html"""	
list files greater than 1024kb under /path/to/directory and print the time and size on stdout	
"list files in ""dir1"" that are not in ""dir2"""	
list files in /u/bill that were last read from 2 to 6 minutes ago	
list files in /usr modified after february 1 of the current year	
list files in /usr modified after the time which /tmp/stamp$$ modified	
"list files in directory ""one"" and ""two"" that do not exist in the other"	
"list files in directory ""one"" that exist in directory ""two"""	
list files in the current directory	
list files in the current directory and below	
list files in the current directory and below except for git files	
list files in the current directory and below that are exactly 1234 bytes in size	
list files in the current directory that have at least one duplicate	
list files in the current directory tree using echo	
list files in the current directory tree which have permissions rwx for user and rw for group and others	
"list files in the directory ""$directory"" with permissions ""$permissions"""	
list files larger than 10mb in the /var directory recursively	
list files larger than 10mb under /var/log	
list files larger than 10mb under /var/log /tmp that haven't changed in a month	
list files larger than 9mb residing in the current directory and below	
"list files named ""accepted_hits.bam"" in the current directory tree prefixing their names with ""somecommand"""	
list files smaller than 9kb residing in the current directory and below	
list files that have been renamed in git repository.	
list files that the user does not have permissions to read, do not try to descend into directories that cannot be read.	
list files under $curr_dir which were modified, accessed or whose status were changed $ftime ago and sort them and remove duplicate entries	
list files under $curr_dir which were modified, accessed or whose status were changed $ftime ago replacing the $curr_dir path string to './'	
list files under current directory according to their size in descending order	
list files under current directory which were modified, accessed or whose status were changed $ftime ago and sort them and remove duplicate entries	
list files under the current directory that match the filename '...', suppressing all error messages	
list files with c-style escape sequences for non-alphanumeric characters	
list files/directories at least three levels down the directory tree	
list first 20 files under current directory	
list first 5 files named 'something' that are found under current directory	
list html files starting from the home directory that are 50k at the most	
list in detail all *.txt files in the current directory tree, omitting paths ./movies/*, ./downloads/*, and ./music/*	
list in detail regular files from the current directory tree whose names match perl regular expression '\w+-\d+x\d+\.\w+$'	
list in detail the regular files from the /somelocation/log_output directory tree that were last changed more than 40 days ago	
"list in long format all files from / whose filename ends in ""jbd"", not descending into directories that are not readable while searching, and not descending into directories on other filesystems"	
"list in long format all files from / whose filename ends in ""jbd"", not descending into directories that are not readable while searching."	
list jobs and their process ids and print them by replacing newline with '^'	
list jobs including its pids	
"list largest 200 files over 1,000,000 bytes in the filesystem mounted at ""/usr/pcapps"""	
list level 2 subdirectories of the current directory	
"list names of bind functions containing ""/"""	
list non-hidden regular files in the current directory tree that were last modified more than 500 days ago	
list of directory & count of file in every directory	
"list only file names matching ""*2012*"" from ""serveripaddress::pt/dir/files/"" listening on port 111 and write to ""output.txt"""	
list only the non-hidden empty files only in the current directory.	
"list path/filename of all php files under current directory whose file type description or path/name contains ""crlf"""	
list pid of a group leader	
list pids of children processes	
list recursively all files and directories in /var/www	
list recursively all files and directories in /var/www and pass the result to the `more' pager	
list regular file which file name end with '*.c' or '*.sh' in current directory	
list regular file which file name end with 'cache' 'xml' or 'html' in current directory	
list regular file which file name is not end with '.html' in current directory in current directory	
list regular files ending in .mbox	
list regular files in current directory with read, write and execute permission for all users and also show the permissions	
list regular files under the current directory	
list regular files under the current directory ending in .mbox putting a null between each file found	
list regular files under the user's home directory that are over 100kb and have not been accessed in over 30 days.	
list root's regular files with permissions 4000	
list running screen sessions	
list screen ids	
list screen session ids	
list subdirectories in the current directory	
"list symbolic links under the directory ""$directory"""	
"list symbolic links under the directory ""$directory"" using contents of the $ifs variable between output of each one"	
list the .py files which reside in the current directory tree and whose parent directory contains a makefile	
"list the 10 largest files or directories and their sizes under (and including) ""/var"""	
list the abc.def files under the directories /ghi and /jkl which have commented entries and display those entries	
"list the combined path of the current working directory and ""file.txt"""	
list the commands in /usr/bin, pausing for user input after each page.	
list the current directory recursively ignoring ./src/emacs/ and all its contents	
"list the current directory recursively ignoring the ""dir1"" subdirectory"	
"list the current directory recursively ignoring the ""dir1"" subdirectory's content"	
list the details of all the directories in the current folder	
list the directory contents of the current working directory	
list the directory paths of all *.ext (case insensitive) files under /path directory	
list the directory paths of all file.ext files under present working directory	
"list the drive of each ""/dev/"" disk mount point"	
"list the entire cron job list of user ""apache""."	
list the files from the current directory tree that contain lines approximately matching regular expression '^subject:.*unique subject'	
list the files from the current directory tree that contain lines matching regular expression  '^subject:.*unique subject'	
list the files from the current directory tree that contain lines matching regular expression '^from:.*unique sender', ignoring ~/src and ~/bin	
"list the files in ""archive.tar.gz"""	
"list the files in the /etc directory tree containing text ""old1.old2.co.com"""	
list the files in the /etc directory tree containing text '128.200.34.'	
list the files matching 'my key phrase' either in their names or contents	
list the files with a name ending with '.mp3' or '.jpg' and beginning with 'foo'	
list the files/directories under /path_to_search, do a numeric sort and print the ones with different inode numbers	
list the first line in every text file under the users home directory into report.txt	
list the full path of each directory in the current working directory	
list the full path of each directory under the current working directory	
list the largest file in long list format of all the files under the current directory	
list the largest file prefixed by its size in bytes of all files under the current directory	
"list the last entry of the numerically sorted list of all files and folders under ""/foldername"""	
"list the last modified file under ""$dir"""	
"list the md5 digest of all files under ""teste1"" and ""teste2"" sorted alphabetically"	
list the names of all file.ext files/directories under present working directory	
list the names of all files under current directory	
list the names of the directories in current directory without going into sub-directories	
"list the number of occurrences of each unique character in ""the quick brown fox jumps over the lazy dog"" sorted from most frequent to least frequent"	
list the regular files in your home directory that were modified yesterday	
"list the regular files of the current directory tree that contain string ""texthere"""	
list the unique file extensions of all files under the current directory	
list the unique parent directories of all .class files found in the entire filesystem	
"list the unique parent directories of all .class files found under ""/root_path"""	
"list the unique second ""/"" delimited field of every line from standard input prefixed by the number of occurrences"	
"list the unique tab delimited field number ""$field"" in all files, prefix with the number of occurrences, sort from most frequent to least frequent"	
list the users having <groupname> as their secondary group.	
list the z* links in the /usr/bin directory and the file to which it points to	
list the z* links in the /usr/bin directory with inode information and the file to which it points to	
list txt files older than 5 days or html files of any age, null separated	
list unique md5 digests of all files in the current directory ending in .txt	
"list unique series of 3 characters in file ""$1"" prefixed by the number of occurrences and sorted from most frequent to least frequent"	
listen on port 1234 on root@123.123.123.123 and forward it to port 22 on localhost	
"listing of the files starting from home dir, that have size 50k or less and have extention html."""	
listing=$(ls -l $(cat filenames.txt))	<MISSING>
lists '/tmp/hashmap.$1' file or folder '/tmp/hashmap.$1' content one file per line.	
lists all content in a current folder but names like *.c and *.h.	
lists all directories in '/home/alice/documents/'.	
lists all directories in a current folder.	
lists all directories in the current folder.	
lists all files and folders with its content in a current folder, excluding names ending with 'foo'.	
lists all files and folders with its content in a current folder, excluding names starting with 'b'.	
lists all files in a '/home/dreftymac/' folder and subfolders without recursion.	
lists all files in a current folder, separating names with 'some_delimiter'.	
lists all files in a current folder, separating names with comma.	
lists all files in a current folder, separating names with space.	
lists all files that matches path pattern with wildcards.	
lists all manual pages.	
lists all paths to all subfolders in a current folder.	
lists all running tmux sessions.	
lists all subdirectories in a current folder, removing trailing slash.	
lists all subdirectories in current directory with a trailing slash	
lists all subdirectories in the current directory	
lists all subdirectories in the current directory with the trailing slash removed	
lists all top-level files in a '/home/dreftymac/' folder.	
lists available updates for installed packages.	
lists content of all subfolder (without recursion) in a current folder.	
lists content of compressed text file.	
lists content of the current folder.	
lists enabled repositories along with debugging information.	
lists file descriptors of a current process.	
lists installed packages from  'fedora' repository only.	
lists long format information about file '/bin/echo'.	
lists the pids of all processes that have process '1782' as their parent.	
lists tmux sessions.	
lists txt or html files older than 5 days, null separated	
ln $file /tmp/allfiles	<MISSING>
ln --force --target-directory=~/staging ~/mirror/*	<MISSING>
ln --symbolic --interactive $script_dir/$file	<MISSING>
ln -f $git_dir/../apresentacao/apresentacao.pdf $git_dir/../capa/apresentacao.pdf	<MISSING>
"ln -f '/home/user/musik/mix-2012-13/aesthesys~ i am free, that is why i'""'""'m lost..mp3' '/home/user/musik/youtube converted/aesthesys~ i am free, that is why i'""'""'m lost..mp3'"	<MISSING>
ln -f -s -t `readlink somelibrary | sed 's/version.old/version.new/'` somelibrary	<MISSING>
ln -f -s /apps/myapps/new/link/target mylink	<MISSING>
ln -f secret_file.txt non_secret_file.txt	<MISSING>
ln -fs /etc/configuration/file.conf /etc/file.conf	<MISSING>
ln -nsf $lastmodified $symlink_path	<MISSING>
ln -nsf alpha_2 alpha	<MISSING>
ln -nsf dir2 mylink	<MISSING>
"ln -r -s ""$orig_dest"" ""$dest_dir/$orig_name"""	<MISSING>
ln -s   /var/cache/apt/archives/bash_4.3-14ubuntu1_amd64.deb foo	<MISSING>
"ln -s  ""${target}${file}""  ""${destination}${file}"""	<MISSING>
"ln -s ""$(find dir -name '*.jpg')"" ."	<MISSING>
"ln -s ""$(readlink -e ""$2"")"" ""$1/link"""	<MISSING>
"ln -s ""$(which bam2)"" ""$tmpdir""/bam"	<MISSING>
"ln -s ""$actual_dir"" ""$symlink"""	<MISSING>
"ln -s ""$dir"" ""$1/link"""	<MISSING>
"ln -s ""$file"""	<MISSING>
"ln -s ""$source"" -t ~/newlinks"	<MISSING>
"ln -s ""$wh"" wh"	<MISSING>
"ln -s ""../config/environments"""	<MISSING>
"ln -s ""../config/init"""	<MISSING>
"ln -s ""/applications/sublime text 2.app/contents/sharedsupport/bin/subl"" ~/bin/subl"	<MISSING>
"ln -s ""/applications/sublime text.app/contents/sharedsupport/bin/subl"" ~/bin/subl"	<MISSING>
"ln -s ""/cygdrive/c/program files"" /cygdrive/c/programfiles"	<MISSING>
"ln -s ""/usr/local/ssl/bin/openssl /usr/bin/openssl"	<MISSING>
"ln -s ""`pwd`"" $1/link"	<MISSING>
ln -s $(echo /original/*.processme) .	<MISSING>
ln -s $(readlink -f $origlink) $newlink	<MISSING>
ln -s $file `basename $file`	<MISSING>
ln -s $home/downloads/fnord $home/bin/	<MISSING>
ln -s -- ./local--pdf-kundendienst -pdf-kundendienst	<MISSING>
ln -s .bashrc .bash_profile	<MISSING>
ln -s .bashrc test	<MISSING>
ln -s /applications/sublime\ text.app/contents/sharedsupport/bin/subl /usr/local/	<MISSING>
ln -s /applications/sublime\ text.app/contents/sharedsupport/bin/subl /usr/local/bin/	<MISSING>
ln -s /applications/sublime\ text\ 2.app/contents/sharedsupport/bin/subl /usr/local/bin/	<MISSING>
ln -s /lib/libc.so.6 /lib/libc.so.0	<MISSING>
ln -s /usr/share/my-ditor/my-editor-executable /usr/bin/my-editor	<MISSING>
ln -s `canonical.bash foo` bar	<MISSING>
ln -s `cd \`dirname $2\`; pwd`/`basename $2` $1/link	<MISSING>
ln -s `pwd`/current/app/webroot public_html	<MISSING>
ln -s git-stuff/home/.[!.]* .	<MISSING>
ln -s newtarget temp	<MISSING>
ln -s target	<MISSING>
ln -s target-directory/`ls -rt target-directory | tail -n1` latest	<MISSING>
ln -s www1 www	<MISSING>
"ln -sf ""$(readlink -f ""$1"")"" ""$*"""	<MISSING>
"ln -sf ""$(readlink -f ""$link"")"" ""$link"""	<MISSING>
"ln -sf ""$f"" ""~/my-existing-links/$(basename $f)"""	<MISSING>
ln -sf $keyname     id_rsa	<MISSING>
ln -sf '/cygdrive/c/users/mic/desktop/pending - pics/' '/cygdrive/c/users/mic/mypics'	<MISSING>
ln -sf '/cygdrive/c/users/mic/desktop/pending - pics/' /cygdrive/c/users/mic/mypics	<MISSING>
ln -sf /usr/share/my-editor/my-editor-executable   /usr/bin/my-editor	<MISSING>
ln -sf new_destination linkname	<MISSING>
"ln -sfn ""$c"" ""$lines"""	<MISSING>
ln -sfn /other/dir new_dir	<MISSING>
ln -sfn newdir currentdir	<MISSING>
ln -sfn source_file_or_directory_name softlink_name	<MISSING>
ln -sfv /usr/local/opt/mongodb/*.plist ~/library/launchagents	<MISSING>
ln -sfvn source target	<MISSING>
ln -sn git-stuff/home/profile .profile	<MISSING>
ln /media/public/xampp/mysql/data/my_db -s	<MISSING>
ln myfile.txt my-hard-link	<MISSING>
load keybindings from a file ~/.inputrc	
local old_nullglob=$(shopt -p nullglob)	<MISSING>
"local pingresults=$(lang=c ping -q -c10 ""$gateway"")"	<MISSING>
"local=$(hostname -i | awk '{print $2}' | cut -f1,2,3 -d""."")"	<MISSING>
"locate all ""copyright"" files under and below /usr/share/doc"	
locate all *.csv files under the current directory tree	
locate all *.csv files under the current directory tree separating the file names with zeroes	
locate all *.csv regular files under the current directory tree	
locate all *.mov files in the current directory tree	
locate all *.txt files in the current directory tree	
locate all .txt files in and below the current directory	
locate all `readme.txt' files under the home directory	
"locate all files ""needle.txt"""	
"locate all files in the current directory and below that do not have ""testfileasdf"" in their names"	
"locate all files in the current directory and below that have ""testfile"" in their names"	
"locate all files in the current directory and below that have ""testfile"" in their names regardless of the case"	
locate all files named 'restore.php' in the current directory and 3 levels below	
locate all ogg files that reside in the home directory and have not been accessed in the past 30 days	
locate all passwd files on the system	
locate all the hard links of file `passwd'	
locate and rename unprintable directories using inode numbers	
"locate file ""file1"""	
locate files not owned by any user or group	
locate files that reside in the /u/bill directory tree and were last accessed between 2 and 6 minutes ago	
locate files that reside in the home directory and have not been accessed in the past 30 days	
locate files whose status was changed less than 1 day ago	
locate files with user permissions rwx owned by my_user	
locate labra | xargs -i{} scp '{}' masi@11.11.11.11:~/desktop/	<MISSING>
locate large files (> 100 mb) in /home/ for 'cleaning'	
locate logo.gif in the /var/www directory tree	
locate ogg files under the home directory larger than 100 megabytes	
locate ogg files under the home directory smaller than 100 megabytes	
locate python interpreter and show its human-readable file type description, resolving any symlinks.	
locate symbolic links in /usr and below	
locate symlinks in directory trees lpi104-6 and research/lpi104-6	
locate the httpd.conf file on the system	
locate world-writable files and directories on the system	
locates 'gcc' executable file, strips last two parts of the full path, adds '/lib' to the end and saves result in 'libdir' variable.	
locates bzip2 command in a system.	
locates erlang distribution, and prints release number from 'releases' file.	
locating large files (> 100 mb) in /home/ for 'cleaning'	
"log in as ""middleuser"" with key ""./middle_id.pem"" and forward port 22 on host ""middle.example.org"" to port 2222 on localhost"	
"log in using key file ""./device_id.pem"" as user ""deviceuser"" on host ""middle.example.org"" and port 2222"	
"log into ""ubuntu@ec2-xx-xxx-xxx-xxx.us-west-2.compute.amazonaws.com"" using identity file ""~/path/mykeypair.pem"""	
log output of a command in screenlog.0 every 10 seconds	
login as user postgres	
login as user root	
login as user username	
login as user your_user	
login in 'whatever.com' as user 'whoever' with x11 forwarding to enable gui programs on remote to be run	
"login to ""$host"" and create file ""$file_path"" if it does not exist"	
"login to ""host"" using identity file ""id_rsa"""	
"login to ""user@host"" with key ""keyfile"" and execute ""./script arg1 arg2 > output.txt 2>&1"" in the background"	
login to a bash shell on localhost via ssh and print the bash version	
"login to remote system ""app1"" through an ssh gateway system called ""gw"""	
"logname=""`basename ""$0""`_`date ""+%y%m%d_%h%m""`"""	<MISSING>
logout	<MISSING>
long list al the files in the current directory which have all the permissions	
long list al the files in the current directory which have only read permission to the group	
long list al the files in the current directory which have read permission to the group	
"long list all the files in the curent folder starting with ""tes"""	
long list the detials of all the shell scripts in current directory	
"look for ""filename"" in the current directory and below"	
"look for ""testfile.txt"" in the ""/"" directory and 1 level below"	
look for *.jpg files	
look for *.jpg files on the system	
look for *log files in directories at least three levels down the directory tree	
look for *log files in directories at most three levels down the directory tree	
look for `regexp' in binary files	
"look for all files managed by git in the current repository whose name or file type description contains the word ""ascii"", display the number of lines contained in each match."	
look for all files whose names match pattern 'my*'	
look for any files that have not been modified in the last two days	
look for any files that were modified 2-5 days ago	
look for directory `cookbook'	
look for file `chapter1' under /usr and /home	
look for files in the current directory tree to which the group users have full access	
look for files that have suid or sgid set	
look for files whose names begin with letters a-j	
look for files with the name 'search' under current directory	
look for files with wide open permissions	
look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/	
look for sgid files and directories	
look for suid files and directories	
"look for the largest 200 files over 1,000,000 bytes in the filesystem mounted at ""/usr/pcapps"""	
look in /home/dm and below for files with 'uniform' in their names	
"look in the current directory and below for all files whose names begin with either ""my"" or ""qu"""	
look up for 'myip.opendns.com' in server 'resolver1.opendns.com' and save the terse output in 'ip' variable	
look up ip address of the current host	
looks for all files larger than 10 megabytes (10485760 bytes) within /home	
"lookup information for user ""vivek"""	
lookup information of the current user	
loop over the results of a find command	
ls !(*foo)	<MISSING>
ls !(b*)	<MISSING>
"ls ""`pwd`/file.txt"""	<MISSING>
ls $pwd/cat.wav	<MISSING>
ls **/*.py **/*.html	<MISSING>
ls *.html | xargs -i {} sh -c 'mv $1 `basename $1 .html`.txt' - {}	<MISSING>
ls *.txt | tee /dev/tty txtlist.txt	<MISSING>
ls --color | less -r	<MISSING>
ls -1 /tmp/hashmap.$1	<MISSING>
ls -1 | (for ((x=0;x<n;x++)) ; do read ; done ; head -n1)	<MISSING>
ls -1 | awk  -vpath=$pwd/ '{print path$1}'	<MISSING>
"ls -1 | awk 'ors="" ""'"	<MISSING>
ls -1 | grep -v ^$exclude | xargs -i{} mv {} $target	<MISSING>
"ls -1 | paste -sd "","" -"	<MISSING>
ls -1 | perl -l40pe0	<MISSING>
ls -1 | perl -pe 's/\n$/some_delimiter/'	<MISSING>
ls -1 | tail -n +n | head -n1	<MISSING>
"ls -1 | tr '[a-z]' '[a-z]' | sort | uniq -c | grep -v "" 1 """	<MISSING>
ls -1 | tr '\n' ','	<MISSING>
ls -1 | tr '\n' ',' | sed 's/,$/\n/'	<MISSING>
ls -1 | wc -l	<MISSING>
ls -1 | xargs readlink -f	<MISSING>
ls -1b | tr '\n' ';'	<MISSING>
ls -1p | grep '/$' | sed 's/\/$//'	<MISSING>
ls -1t | head -1	<MISSING>
ls -1tr * | tail -1	<MISSING>
ls -1|grep -v -e ddl -e docs| xargs rm -rf	<MISSING>
ls -a | tee output.file	<MISSING>
ls -al file.ext	<MISSING>
"ls -al | grep ""^d"" | awk -f"" "" '{print $9}'"	<MISSING>
ls -ald `which c++`	<MISSING>
"ls -alft `find . -name ""bla.txt""` | rev | cut -d"" "" -f1 | rev | head -1"	<MISSING>
ls -alr -i dev -i run -i sys -i tmp -i proc /path | md5sum -c /tmp/file	<MISSING>
ls -alrt `pwd`/*	<MISSING>
ls -art *.sql.gz |tail -n 1 |xargs gunzip -c | mysql --user=user --password=password database	<MISSING>
ls -b	<MISSING>
ls -c1 -t| awk 'nr>5'|xargs rm	<MISSING>
ls -d !(*.[ch])	<MISSING>
ls -d !(*@(.c|.h))	<MISSING>
ls -d $pwd/*	<MISSING>
"ls -d * | grep -v foo | xargs -d ""\n"" chown -r camsoft"	<MISSING>
ls -d */	<MISSING>
ls -d */ | cut -f1 -d'/'	<MISSING>
ls -d */ | xargs -ia cp file.txt a	<MISSING>
ls -d */|sed 's|[/]||g'	<MISSING>
ls -d -- */                    ### more reliable gnu ls	<MISSING>
ls -d -1 $pwd/**	<MISSING>
ls -d -1 $pwd/**/*	<MISSING>
ls -d -1 $pwd/**/*/* | cat -n	<MISSING>
ls -d -1 $pwd/**/*/* | nl	<MISSING>
ls -d -1 $pwd/*.*	<MISSING>
ls -d ./*/	<MISSING>
ls -d ./*/                     ### more reliable bsd ls	<MISSING>
ls -d /home/alice/documents/*/	<MISSING>
"ls -d1 */ | tr -d ""/"""	<MISSING>
ls -hal /root/ > /root/test.out	<MISSING>
ls -hal /root/ | sudo tee /root/test.out	<MISSING>
"ls -l ""$( which studio )"""	<MISSING>
"ls -l $(find /etc -name ""*.txt"" )"	<MISSING>
ls -l $filename | grep -q ^l && source_dir=$(ls -l $filename | awk '{print $nf}');	<MISSING>
ls -l ${0}	<MISSING>
"ls -l -- ""$dir/$file"""	<MISSING>
"ls -l --color=always ""$@"" | egrep --color=never '^d|^[[:digit:]]+ d'"	<MISSING>
"ls -l --color=always ""$@"" | grep --color=never '^d'"	<MISSING>
ls -l --time-style=long-iso | sort -k6	<MISSING>
ls -l /bin/echo	<MISSING>
ls -l /boot/grub/*.mod | wc -l	<MISSING>
ls -l /lib*/ld-linux*.so.2	<MISSING>
ls -l /proc/$$/exe | sed 's%.*/%%'	<MISSING>
ls -l /proc/self/fd/	<MISSING>
ls -l `which passwd`	<MISSING>
"ls -l | grep ""^d"""	<MISSING>
"ls -l | grep ""^d"" | awk -f"" "" '{print $9}'"	<MISSING>
ls -l | head -2 | tail -1	<MISSING>
ls -l | more	<MISSING>
ls -l | tail -n +2 | head -n1	<MISSING>
ls -lb	<MISSING>
ls -ld $(find .)	<MISSING>
ls -ld /tmp /tnt	<MISSING>
ls -ld /tmp /tnt | sed 's/^.*$/<-- & --->/'	<MISSING>
ls -ldt $(find .)	<MISSING>
ls -lr / | tee -a output.file	<MISSING>
ls -lr / | tee output.file	<MISSING>
ls -lrt | tail -n1	<MISSING>
ls -lt | tr -d 0-9	<MISSING>
ls -ltq  <path>  | head -n 1	<MISSING>
ls -ltr | grep 'mar 4' | awk '{print 9}' | xargs zcat -fq | grep 12345	<MISSING>
ls -m	<MISSING>
ls -m | tr -d ' ' | tr ',' ';'	<MISSING>
ls -mr * | sed -n 's/://p'	<MISSING>
ls -p | grep -v / | xargs md5sum | awk '{print $2,$1}'	<MISSING>
ls -t *.log | tail -$tailcount | xargs rm -f	<MISSING>
ls -t | head -n1	<MISSING>
ls -tp | grep -v '/$' | tail -n +6 | tr '\n' '\0' | xargs -0 rm --	<MISSING>
ls -tp | grep -v '/$' | tail -n +6 | xargs -d '\n' rm --	<MISSING>
ls -tp | grep -v '/$' | tail -n +6 | xargs -i {} rm -- {}	<MISSING>
"ls -tp | grep -v '/' | tail -n +""$1"" | xargs -i {} rm -- {}"	<MISSING>
ls -tq | tail -n+4 | xargs rm	<MISSING>
ls -tr $(find /home/backups -name '*.gz' -o -name '*.tgz')|head -1|xargs rm -f	<MISSING>
ls -tr | head -n -5 | xargs rm	<MISSING>
ls /empty_dir/ | xargs -l10 chown root	<MISSING>
ls /empty_dir/ | xargs -n10 chown root	<MISSING>
ls /home/abc/files/*.csv | rev | cut -d/ -f1 | rev	<MISSING>
ls /home/dreftymac/	<MISSING>
ls /home/dreftymac/*	<MISSING>
ls /homes/ndeklein/mzml/*.gz | xargs -i {} gunzip {}	<MISSING>
ls /usr/bin | more	<MISSING>
ls 2>&1 | tee --append /tmp/ls.txt	<MISSING>
ls 2>&1 | tee -a /tmp/ls.txt	<MISSING>
ls 2>&1 | tee /tmp/ls.txt	<MISSING>
ls `pwd`/*	<MISSING>
ls `readlink somelink`	<MISSING>
ls `which g++` -al	<MISSING>
ls `which gcc` -al	<MISSING>
ls folder/*.html | xargs -i {} sh -c 'mv $1 folder/`basename $1 .html`.txt' - {}	<MISSING>
ls | column -c 80	<MISSING>
"ls | grep ""android"" | cat -n"	<MISSING>
ls | grep android | nl	<MISSING>
ls | more	<MISSING>
"ls | perl -f'\n' -0777 -ane 'say join "","", @f'"	<MISSING>
ls | read var	<MISSING>
ls | sed '$!s/$/,/' | tr -d '\n'	<MISSING>
ls | sort -f | uniq -i -d	<MISSING>
ls | split -l 500 - outputxyz.	<MISSING>
"ls | tr  ""\n"" "" """	<MISSING>
ls | xargs -i mv {} unix_{}	<MISSING>
ls | xargs -i {} echo {}, | xargs echo	<MISSING>
ls | xargs -i {} mv {} pre_{}	<MISSING>
ls | xargs -i {} mv {} unix_{}	<MISSING>
ls | xargs -i {} mv {} {}_suf	<MISSING>
ls | xargs -n 1 cp -i file.dat	<MISSING>
ls | xargs chown -r apache:apache	<MISSING>
ls | xargs rmdir	<MISSING>
ls |& tee files.txt	<MISSING>
"lshw -class cpu|grep ""^       width""|uniq|awk '{print $2}'"	<MISSING>
lsof -n -i:3000 | grep listen | awk '{ print $2 }' | uniq | xargs kill -9	<MISSING>
lspci -v -v | less	<MISSING>
machnum=$(hostname | sed 's/^machine//')	<MISSING>
"mail -s ""alert: ssh access from `who | cut -d'(' -f2 | cut -d')' -f1`"" -a tmpfile user@example.com"	<MISSING>
"make ""bar"" executable"	
"make ""file.sh"" executable"	
"make $weeks_to_save+1 directories named ""weekly.n"" where n ranges from 0 to ""$weeks_to_save"""	
make 2>&1 | less	<MISSING>
"make 3 directories named ""$home/labs/lab4a/folder"" followed by a 3 width zero padded number from 1 to 3"	
"make 3 directories named ""~/labs/lab4a/folder"" followed by a 3 width zero padded number from 0 to 3"	
"make 3 directories named ""~/labs/lab4a/folder"" followed by the number 1, 2, or 3"	
"make 999 folders one inside another where first 998 of them is named as ""folderx"" where x goes from 1 to 998 and the last folder named as ""folder9991000"""	
make a .tar.bz2 archive of all *.txt files from the dir/ directory tree	
make a copy of file file1 named file2	
make a copy of file.txt in all directories in current directory - names may not contain spaces.	
make a copy of file1 in dir1, dir2, and dir3.	
make a copy of the entire contents of dir1 in the pictures directory located in the user's home directory.	
"make a copy of the entire contents of srcfolder called ""destfolder"", if destfolder exists, the copy will be placed within it."	
make a directory in the current working directory with a random 32 alphanumeric character name	
make a directory structure same as the current directory tree under /tmp/tar_root directory	
make a list of all files in the current directory tree, except *.png and *.class, and view it in the vim editor	
"make a list of regular files from the current directory tree that have more than 1 link and view it with the ""less"" pager"	
"make a new directory ""new-dir"" in every directory in the current directory tree"	
"make a new directory ""new-dir"" in every directory in the current working directory non-recursively"	
make a playlist out of all the mp3 and ogg files in the home directory	
"make a post request to ""http://dweet.io/dweet/for/cycy42"" with data ""piip"" set to the ip address of the system"	
make all directories in the current directory tree accessible to anybody	
make all regular files in the current directory tree world-readable	
make all the bugzilla subdirectories permission 775	
make an archive of .txt files from the dir/ directory tree	
make directorie(s) 'es/lc_messages' as needed in the current directory	
make directorie(s) 'es_mx.utf8/lc_messages' as needed in the current directory	
"make directories ""$@"" and replace ""mkdir: created directory "" with ""$user created folder "" in the output"	
"make directories ""$@"" verbosely and replace ""mkdir: created directory "" with ""jar-jar: yea, weesa gotta "" in the output"	
"make directories ""./es/es_mx.utf8/lc_messages"" as needed and do not error if it exists"	
"make directories ""/tmp/a"", ""/tmp/b"", ""/tmp/c"", and ""/tmp/ dir with spaces"""	
"make directories ""3/foo"", ""3/bar"", and ""3/baz"""	
"make directories ""a"", ""b"", ""c"", ""d"", and ""e"""	
"make directories ""a/b/c"" as needed without causing an error if it exists"	
"make directories ""bravo_dir"" and ""alpha_dir"""	
"make directories ""es/lc_messages"" as needed and do not error if it exists"	
"make directories ""foo"" and ""bar"""	
"make directories ""foo/bar/baz"" as needed and do not cause an error if it exists"	
"make directories ""labs/lab4a/folder1"", ""labs/lab4a/myfolder"", and ""labs/lab4a/foofolder"""	
"make directories ""mnt"" and ""point"""	
"make directories ""project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}"" as needed and do not cause an error if it exists"	
"make directories ""tmp/real_dir1"" and ""tmp/real_dir2"" as needed"	
"make directories ""~/foo/bar/baz"", ""~/foo/bar/bif"", and ""~/foo/boo/bang"" as needed"	
make directories a, b, c, ..., z under path2 as needed.	
"make directories and parent directories as needed of ""$1"" with ""\r"" removed"	
"make directories and parents as needed for each file path in ""a.txt"" excluding the basename for each path"	
"make directories and parents as needed for each unique second ""&"" delimited field with "" "", "","", and "":"" removed in ""filetypes.txt"""	
"make directories and parents as needed to ""${raw_folder}"" and ""${split_folder}"""	
"make directories and parents for each file path in ""somefile.txt"" excluding the file name"	
"make directories and parents for each line in ""infile"" excluding the file name"	
"make directories as needed in ""dest"" for every directory found under ""src/"""	
"make directories for each line in ""folder_list.txt"""	
"make directories for each unique file path in ""file1"""	
"make directories in ""/target_folder_root/"" for each "".mov"" file in the current directory tree"	
"make directories to ""$2"" as needed"	
"make directories to ""$target_path"" as needed without causing an error if it exists"	
"make directories to ""/my/other/path/here"" as needed"	
"make directories to ""/my/other/path/here/"" as needed"	
"make directories to ""/some/path"" as needed"	
"make directories to ""/tmp/boostinst"" as needed and print a message for each created directory"	
"make directories to ""/tmp/test/blah/oops/something"" as needed"	
"make directories to ""directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}"" as needed"	
"make directories to ""x/p/q"" as needed"	
"make directories to file ""/full/path/to/file.txt"" as needed"	
"make directory ""/cpuset"""	
"make directory ""/data/db"""	
"make directory ""/etc/cron.15sec"""	
"make directory ""/etc/cron.5minute"""	
"make directory ""/etc/cron.minute"""	
"make directory ""/path/to/destination"""	
"make directory ""/tmp/foo"""	
"make directory ""/tmp/googletestmock"""	
"make directory ""/tmp/imaginary/"" on remote host before archiving ""file"" to ""user@remote:/tmp/imaginary/"""	
"make directory ""/tmp/new"""	
"make directory ""/var/svn"""	
"make directory ""aaa"""	
"make directory ""aaa/bbb"""	
"make directory ""alpha_real"""	
"make directory ""backup"""	
"make directory ""certs"""	
"make directory ""destdir"""	
"make directory ""dir"" and do not cause an error if it exists"	
"make directory ""dir1"""	
"make directory ""dirname"" with permissions set to 777"	
"make directory ""foo"""	
"make directory ""foo"" and do not cause an error if it exists"	
"make directory ""mybuild"""	
"make directory ""new_dir"""	
"make directory ""saxon_docs"""	
"make directory ""subdirectory"""	
"make directory ""tata"""	
"make directory ""temp"""	
"make directory ""testexpress"""	
"make directory ""testproject"""	
"make directory ""~/log"""	
"make directory ""~/practice"""	
"make directory ""~/public_html"""	
"make directory ""~/temp"""	
make directory and parents as needed for each unique mime type in the current directory	
"make directory and parents as needed for the directory name of file ""$f"""	
"make directory and parents as needed to ""$finalpath"""	
"make directory and parents as needed to ""~/temp/bluecove/target/"""	
make directory expanded by $dir variable	
"make directory named in variable ""archive"" with "".tar*"" stripped from the end"	
make dns lookup for hostname stackoverflow.com	
make dns lookup requests for domain list in file '/path/to/host-list.txt'	
"make hidden directory "".hiddendir"""	
make k_version=`uname -r`	<MISSING>
make regular files from debian/fglrx-amdcccle/usr/lib/fglrx/bin/ executable for all	
"make sure the file "".bash_profile"" exists in current directory, update its timestamp to current date/time."	
make || exit $?	<MISSING>
makes 'time' built-in to show only real execution time.	
"man bash | less -ip ""\\\'"""	<MISSING>
man bash | less -p bash_source	<MISSING>
man find	<MISSING>
man find | grep ...	<MISSING>
mapper=$(mktemp -up /dev/mapper)	<MISSING>
mark variables and function which are modified or created for export to the environment of subsequent commands	
"match=$(echo ""${line}"" | egrep -o 'run-parts (-{1,2}\s+ )*\s+')"	<MISSING>
mate `which rails`	<MISSING>
"mathematically add each line in ""filename"""	
"mathematically sum a column of numbers in ""filewithcolumnofnumbers.txt"""	
"mathematically sum all lines in ""filename"""	
"mathematically sum all lines in ""infile"""	
"mathematically sum all numbers in ""file.txt"""	
"mathematically sum all numbers in ""numbers.txt"""	
"mathematically sum each line in ""infile"""	
"mathematically sum each line in the output of ""..."""	
matlab -nodisplay	<MISSING>
md5 -q file	<MISSING>
md5 -s 'string to be hashed'	<MISSING>
"md5=""$(md5sum ""${my_iso_file}"")"""	<MISSING>
"md5=$(echo ""$line""|md5sum)"	<MISSING>
"md5=$(md5sum ""$my_iso_file"" | cut -d ' ' -f 1)"	<MISSING>
md5=$(md5sum $item | cut -f1 -d\ )	<MISSING>
md5=($(md5sum file))	<MISSING>
md5=`md5sum ${my_iso_file} | awk '{ print $1 }'`	<MISSING>
md5=`md5sum ${my_iso_file} | cut -b-32`	<MISSING>
"md5sum ""$ecriv"""	<MISSING>
"md5sum ""$source_file"" ""$dest_file"""	<MISSING>
md5sum $(which cc)	<MISSING>
md5sum $(which gcc)	<MISSING>
md5sum * | sed -e 's/\([^ ]*\) \(.*\(\..*\)\)$/mv -v \2 \1\3/e'	<MISSING>
md5sum * | sort | uniq -w32 --all-repeat=separate | awk '{print $2}'	<MISSING>
md5sum *.java | awk '{print $1}' | sort | uniq -d	<MISSING>
md5sum *.java | grep 0bee89b07a248e27c83fc3d5951213c1	<MISSING>
md5sum *.java | sort | uniq -d	<MISSING>
md5sum *.java | sort | uniq -d -w32	<MISSING>
md5sum *.txt | cut -d ' ' -f 1 | sort -u	<MISSING>
"md5sum *.txt | sort | perl -ne '($y,$f)=split; print ""$f\n"" unless $y eq $x; $x=$y'"	<MISSING>
md5sum /path/to/destination/file	<MISSING>
md5sum <(zcat /tmp/tst.gz) <(bzcat /tmp/tst.bz2) <(lzcat /tmp/tst.lzma) <(xzcat /tmp/tst.xz)	<MISSING>
md5sum `which c++`	<MISSING>
md5sum file*.txt	<MISSING>
"md5sum filename |cut -f 1 -d "" """	<MISSING>
md5sum main.cpp*	<MISSING>
md5sum the last 5 files in /directory1/directory2/	
"me=""$(whoami)"""	<MISSING>
me=$(readlink --canonicalize --no-newline $0)	<MISSING>
me=$(readlink --canonicalize --no-newline $bash_source)	<MISSING>
me=$(whoami)	<MISSING>
"me=`basename ""$0""`"	<MISSING>
"me=`basename -- ""$0""`"	<MISSING>
measure the disk space taken up by all *.txt files in directory tree /home/d	
measure the disk space taken up by all *.txt files in directory trees folder1 and folder2	
measure the disk space taken up by all *.txt files in the /path directory tree	
measure the disk space taken up by all *.txt files in the current directory tree	
measure the disk space taken up by all txt files in the current directory tree	
"measure the execution time of the command: find /usr/src -name ""*.html"" -exec grep -h ""foo"" {} ';' | wc -l"	
"measure the execution time of the command: find /usr/src -name ""*.html"" | xargs grep -l ""foo"" | wc -l"	
merge 10 already sorted files and display the result, pausing at each page of output.	
"merge already sorted files ""*.txt"" and split the result into files of at most 1000000 lines each with a numeric suffix and a prefix ""output"""	
"merge already sorted files ""file*.txt"" and split the result into files of at most 100000 lines each with a prefix ""sorted_file"""	
"merge already sorted files in the current directory ending in "".$suffix"""	
"merge already sorted files in the current directory starting with ""_tmp"" and write the output to ""data.tsv.sorted"""	
merge colon-separated information from file1 and file2 where first field of both files matches	
merge colon-separated information from file1 and file2 where second field of both files matches, sorting the result based on this field - for each line, output: first 3 fields of first file, followed by first 3 fields of second file.	
"merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from both files, replace missing fields with ""no-match"", and output the second field from standard input and the second and third field from file1.txt"	
"merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from standard input, replace missing fields with ""no-match"", and output the second field from standard input and the second and third field from file1.txt"	
"merge content of decompressed files ""$part0"", ""$part1"", and so on"	
merge data in file1 and file2 where second field is common in both files	
"merge each line in ""file"" into a single comma separated line"	
merge each line of standard input into a single comma separated line	
merge each non-blank line of standard input into a single comma separated line	
merge file1 and file2 by outputting all lines where the first comma-separated field of both files matches, followed by extra fields in file1 and those in file2	
merge files 'text.txt' and 'codes.txt' by outputting any lines whose second field in the first matches the first field in the second.	
"merge lines from ""file_1"" and ""file_2"" and format the output as a table with tab separators"	
"merge lines from files ""file1"", ""file2"", ""file3"", ""file4"", ""file5"", replace ""\t"" with "" \t"", and format the ""\t"" delimited result as a table"	
merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2' - both files must be sorted, and the output format of each line will be: first field of in1, second field of in2, and third field of in2.	
merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2' - both files must be sorted.	
merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2', also outputting unmatched lines from 'in2' - both files must be sorted, and the output format of each line will be: first field of in1, second field of in2, and third field of in2.	
"merge the first ""$lc"" lines of ""current.txt"" and the last ""$lc"" lines of ""current.txt"" and display the result as a comma separated table"	
merge=$(cat $commit_editmsg|grep -i 'merge'|wc -l)	<MISSING>
"mkdir ""$@"" |sed -e""s/mkdir: created directory /$user created folder /"""	<MISSING>
"mkdir ""${home}/.npm-packages"""	<MISSING>
mkdir $(cat /dev/urandom | tr -dc 'a-za-z0-9' | fold -w 32 | head -n 1)	<MISSING>
"mkdir $(printf ""$home/labs/lab4a/folder%03g "" {0..3})"	<MISSING>
"mkdir $(seq -f ""$home/labs/lab4a/folder%03g"" 3)"	<MISSING>
mkdir $dir	<MISSING>
mkdir ${archive%.tar*}	<MISSING>
mkdir --parents ./es_mx.utf8/lc_messages	<MISSING>
mkdir -m 777 dirname	<MISSING>
"mkdir -p ""$finalpath"""	<MISSING>
"mkdir -p ""$target_path"""	<MISSING>
mkdir -p $(echo -e $1 |sed $'s/\r//')	<MISSING>
"mkdir -p $(seq -f ""weekly.%.0f"" 0 $weeks_to_save)"	<MISSING>
mkdir -p $2	<MISSING>
mkdir -p $tempwork	<MISSING>
mkdir -p ${raw_folder} ${split_folder}	<MISSING>
"mkdir -p -- ""$(dirname -- ""$f"")"""	<MISSING>
mkdir -p ./some/path	<MISSING>
mkdir -p /my/other/path/here	<MISSING>
mkdir -p /my/other/path/here/	<MISSING>
mkdir -p /tmp/test/blah/oops/something	<MISSING>
"mkdir -p `cut -f2 -d""&"" filetypes.txt | sed 's/[ ,:]//g' | sort -u`"	<MISSING>
mkdir -p `dirname /full/path/to/file.txt`	<MISSING>
mkdir -p `dirname /path/to/copy/file/to/is/very/deep/there` \	<MISSING>
mkdir -p `file -b --mime-type *|uniq`	<MISSING>
mkdir -p a/b/c	<MISSING>
mkdir -p dir	<MISSING>
mkdir -p directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}	<MISSING>
mkdir -p es/lc_messages	<MISSING>
"mkdir -p folder$( seq -s ""/folder"" 999 )1000"	<MISSING>
mkdir -p foo	<MISSING>
mkdir -p foo/bar/baz	<MISSING>
mkdir -p path2/{a..z}	<MISSING>
mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}	<MISSING>
mkdir -p tmp/real_dir1 tmp/real_dir2	<MISSING>
mkdir -p x/p/q	<MISSING>
mkdir -p ~/foo/bar/baz ~/foo/bar/bif ~/foo/boo/bang	<MISSING>
mkdir -p ~/temp/bluecove/target/	<MISSING>
mkdir -pv /tmp/boostinst	<MISSING>
"mkdir -v ""$@"" | sed 's/mkdir: created directory /jar-jar: yea, weesa gotta /'"	<MISSING>
mkdir .hiddendir	<MISSING>
mkdir /cpuset	<MISSING>
mkdir /etc/cron.15sec	<MISSING>
mkdir /etc/cron.5minute	<MISSING>
mkdir /etc/cron.minute	<MISSING>
mkdir /path/to/destination	<MISSING>
"mkdir /tmp/a /tmp/b /tmp/c ""/tmp/ dir with spaces"""	<MISSING>
mkdir /tmp/foo	<MISSING>
mkdir /tmp/googletestmock	<MISSING>
mkdir /tmp/new	<MISSING>
mkdir 3/foo 3/bar 3/baz	<MISSING>
mkdir a b c d e	<MISSING>
mkdir aaa	<MISSING>
mkdir aaa/bbb	<MISSING>
mkdir alpha_real	<MISSING>
mkdir backup	<MISSING>
mkdir bravo_dir alpha_dir	<MISSING>
mkdir certs/	<MISSING>
mkdir destdir	<MISSING>
mkdir dir1	<MISSING>
mkdir dir2	<MISSING>
mkdir dir2; find dir1 \( -type l -o -type f \) -not -wholename '*/exclude/*' -exec cp -p --parents '{}' dir2/ \;	<MISSING>
"mkdir dir2; tar cvf - dir1/ --exclude ""*/exclude"" | tar xvf - -c dir2"	<MISSING>
mkdir foo	<MISSING>
mkdir foo bar	<MISSING>
mkdir labs/lab4a/{folder1,myfolder,foofolder}	<MISSING>
mkdir mnt point	<MISSING>
mkdir mybuild	<MISSING>
mkdir new_dir	<MISSING>
mkdir saxon_docs	<MISSING>
mkdir subdirectory	<MISSING>
mkdir tata	<MISSING>
mkdir temp	<MISSING>
mkdir testexpress	<MISSING>
mkdir testproject	<MISSING>
mkdir ~/.npm-global	<MISSING>
mkdir ~/labs/lab4a/folder{1,2,3}	<MISSING>
mkdir ~/labs/lab4a/folder{1..3}	<MISSING>
mkdir ~/log	<MISSING>
mkdir ~/practice	<MISSING>
mkdir ~/public_html	<MISSING>
mkdir ~/temp	<MISSING>
mktemp	<MISSING>
mktemp -d -p /path/to/dir	<MISSING>
mktemp -d -t	<MISSING>
"mktemp -dt ""$(basename $0).xxxxxxxxxx"""	<MISSING>
mktemp -t identifier.xxxxxxxxxx	<MISSING>
mktemp -u	<MISSING>
mktemp /tmp/banana.xxxxxxxxxxxxxxxxxxxxxxx.mp3	<MISSING>
mktemp=`which mktemp`	<MISSING>
"mod_date1=$(date -d ""$mod_date"" +%s)"	<MISSING>
"modify and rewrite 'file' replacing all instances of ""foo"" with ""bar"""	
"modify and rewrite 'file' replacing the first instance of ""foo"" on each line with ""bar"""	
modify interval to 0.1 seconds for the watch command	
modify the permissions of all the folders in a directory	
mongo | tee somefile	<MISSING>
monitor 3 specific process ids: 18884, 18892, and 18919 (gnu specific)	
"month=$(cal | head -1 | grep -op ""[a-za-z]+"")"	<MISSING>
month=$(od -t x1 --skip-bytes=8 --read-bytes=1 file.moi | head -1 | awk '{print $2}')	<MISSING>
more /etc/hosts | grep '[[:space:]]*'`hostname`'[[:space:]]*' | awk '{print $1}'	<MISSING>
more /etc/hosts | grep `hostname` | awk '{print $1}'	<MISSING>
more /var/log/syslog	<MISSING>
more <( ls /usr/bin )	<MISSING>
more yourfile.txt	<MISSING>
mount	<MISSING>
"mount ""/dev/shm"" using /etc/fstab entry"	
"mount ""/path/to/device"" on ""/path/to/mount/location"" as a loop back device"	
"mount ""/path/to/device"" on ""/path/to/mount/location"" as a vfat filesystem and a loop back device"	
"mount ""/tmp/loop.img"" on ""/mnt/image"" as a loop back device"	
"mount ""/windows"" using /etc/fstab entry"	
"mount ""cpuset"" filesystem on ""/cpuset/"""	
"mount ""device_name"" on ""mount_point"""	
"mount ""ext4"" filesystem ""/dev/xvdf"" on ""/vol"""	
"mount ""ext4"" filesystem ""/dev/xvdf1"" on ""/vol"""	
"mount ""nifs"" filesystem ""/dev/mapper/myldm"" on ""/mnt"" as read only"	
"mount ""ntfs-3g"" filesystem ""/dev/mapper/myvolume"" on ""/media/volume"""	
"mount ""proc"" file system on ""/var/snmp3/proc"""	
"mount ""project1/link1"" as a bind directed at ""/absolute/path/to/some/where/else"""	
"mount ""tmpfs"" filesystem to ""/path/to/dir"""	
"mount ""vfat"" filesystem ""/dev/sda7"" to ""/mnt/my_partition"" with read and write permission, umask of files and directories set to ""0000"", and save in fstab and allow ordinary users to mount"	
mount --bind /absolute/path/to/some/where/else project1/link1	<MISSING>
mount --bind /original/path /new/path	<MISSING>
mount --bind /something /new_something	<MISSING>
mount --bind /tmp/fakerandom /dev/random	<MISSING>
mount --bind /usr/bin /path/to/chroot/jail/usr/bin	<MISSING>
mount --bind olddir newdir	<MISSING>
mount --bind point mnt	<MISSING>
mount --make-rprivate /	<MISSING>
mount --rbind /dev /var/snmp3/dev	<MISSING>
mount --rbind /something /new_something	<MISSING>
mount --rbind /sys /var/snmp3/sys	<MISSING>
mount -l	<MISSING>
mount -l -t nfs4	<MISSING>
mount -l white /mnt/white	<MISSING>
mount -l white /mnt/white -o rw	<MISSING>
mount -l white /mnt/white -o rw,uid=test,gid=test	<MISSING>
mount -l | grep 'type nfs' | sed 's/.* on \([^ ]*\) .*/\1/'	<MISSING>
mount -l | grep 'type nfs' | sed 's/.* on \([^ ]*\) .*/\1/' | grep /path/to/dir	<MISSING>
mount -n -o remount -t extx /dev/hdax /	<MISSING>
mount -n -o remount /	<MISSING>
mount -o remount,ro -t yaffs2 /dev/block/mtdblock3 /system	<MISSING>
mount -o remount,ro /path/to/chroot/jail/usr/bin	<MISSING>
mount -o remount,ro /system	<MISSING>
mount -o remount,rw -t yaffs2 /dev/block/mtdblock3 /system	<MISSING>
mount -o remount,rw /system	<MISSING>
mount -o remount,size=40g /dev/shm	<MISSING>
mount -o ro,loop,offset=$offset -t auto $image /media/$dest	<MISSING>
mount -o ro,remount -t yaffs2 /dev/block/mtdblk4 /system	<MISSING>
mount -o ro,remount /dev/stl12 /system	<MISSING>
mount -o rw,remount -t rfs /dev/stl12 /system	<MISSING>
mount -o rw,remount -t rootfs /	<MISSING>
mount -o rw,remount -t yaffs2 /dev/block/mtdblk4 /system	<MISSING>
mount -o rw,remount /dev/stl12 /system	<MISSING>
mount -o rw,remount /system	<MISSING>
mount -obind /etc /tmp/sarnold/mount_point/	<MISSING>
mount -oremount /	<MISSING>
mount -t cifs //server/source/ /mnt/source-tmp -o username=username,password=password	<MISSING>
mount -t cpuset none /cpuset/	<MISSING>
mount -t linprocfs none /proc	<MISSING>
mount -t ntfs	<MISSING>
mount -t ntfs -o ro /dev/mapper/myldm /mnt	<MISSING>
mount -t ntfs-3g /dev/mapper/myvolume /media/volume	<MISSING>
mount -t proc none /var/snmp3/proc	<MISSING>
mount -t smbfs -o soft //username@server/share /users/username/smb/share	<MISSING>
"mount -v | grep "" on / """	<MISSING>
mount -v | grep smbfs | awk '{print $3}' | xargs ls -lsr	<MISSING>
mount / -o remount,rw	<MISSING>
mount /dev/shm	<MISSING>
mount /media/working/ -oremount,umask=000	<MISSING>
mount /mnt/mountpoint -oremount,ro	<MISSING>
mount /mnt/mountpoint -oremount,rw	<MISSING>
mount /outside /inside -o bind	<MISSING>
mount /path/to/device /path/to/mount/location -o loop	<MISSING>
mount /path/to/device /path/to/mount/location -o loop -t vfat	<MISSING>
mount /tmp/loop.img /mnt/image -o loop	<MISSING>
mount /windows	<MISSING>
"mount a partition in ""$image"" with offset ""$offset"" to ""media/$dest"" as read only using a loop device"	
mount a read only ntfs filesystem	
mount all filesystems in /etc/fstab	
"mount image ""test"" to loop device ""/dev/loop0"""	
mount none -t tmpfs /path/to/dir	<MISSING>
"mount partition with label ""white"" on ""/mnt/white"""	
"mount partition with label ""white"" on ""/mnt/white"" with read and write permission"	
"mount partition with label ""white"" on ""/mnt/white"" with read and write permission and have it accessible by user and group ""test"""	
"mount remote ""cifs"" filesystem ""//192.168.0.111/serv_share"" on ""/mnt/my_share"" with username ""me"" and password ""mine"""	
"mount remote ""cifs"" filesystem ""//server/source/"" on ""/mnt/source-tmp"" with username ""username"" and password ""password"""	
"mount remote ""smbfs"" filesystem ""//username@server/share"" on ""/users/username/smb/share"" as soft"	
"mount the ""linprocfs"" filesystem on ""/proc"""	
"mount the ""vboxsf"" filesystem ""d:\share_folder_vm"" on ""\share_folder"""	
"mount the ""vboxsf"" filesystem ""myfilename"" on ""~/destination"""	
"mount the directory ""/etc"" on ""/tmp/sarnold/mount_point/"""	
"mount | awk '$3 == ""/pa/th"" {print $1}'"	<MISSING>
mount | awk '/\/dev\/sd/ {print nr, $1, $3}'	<MISSING>
mount | column -t	<MISSING>
"mount | grep ""^$path"" | awk '{print $3}'"	<MISSING>
mount | grep $(blkid -u '09b8f1ab-8d4b-4c5f-b395-40be09c090b0')	<MISSING>
mount | grep $(blkid -u '09b8f1ab-8d4b-4c5f-b395-40be09c090b0') | grep '/media/wd_disk_1 '	<MISSING>
mount | grep $(readlink -f /dev/disk/by-uuid/$uuid )	<MISSING>
"mount | grep '^/dev/' | sed -e 's/([^ ]*) on ([^ ]*) .*/""\2"" is located on ""\1""/'"	<MISSING>
"mount | grep -i ""/dev/sd.*"" | awk '{ print nr ""\t"" $1 ""\t"" $3 }' > mount_output &"	<MISSING>
mount | grep -q ~/mnt/sdc1	<MISSING>
"mount | sed -n -e ""s/\/\/mynetaddr on \([^ ]*\).*$/\1/p"""	<MISSING>
mount | tail -1 | sed 's/ on .* ([^)]*)$//'	<MISSING>
mount | tail -1 | sed 's/^.* on \(.*\) ([^)]*)$/\1/'	<MISSING>
"mount | tail -1 | sed -e ""s/^[^/]*\(.*\) type .*$/\1/g"""	<MISSING>
mount |grep nfs	<MISSING>
"move ""$phantom_js"" to ""/usr/local/share"" directory"	
"move ""/usr/bin/openssl"" to directory ""/root/"""	
"move ""caniwrite"" without clobbering into ""/usr/local/bin"""	
"move ""file.txt"" to docker container ""$container_id"" in path ""/var/lib/docker/devicemapper/mnt/$container_id/rootfs/root/file.txt"""	
"move ""file.txt"" to docker container ""$countainer_id"" in path ""/var/lib/docker/aufs/mnt/$container_id/rootfs/root/file.txt"""	
"move ""file1"", ""file2"", ""..."" to ""target"" directory"	
"move ""phantomjs-1.8.1-linux-x86_64.tar.bz2"" to ""/usr/local/share/"" directory"	
"move ""tobecopied/tobeexclude"" to ""tobeexclude"""	
"move ""tobecopied/tobeexcluded"" to the current directory"	
move *wp-admin/index.php files to *wp-admin/index_disabled under /var/www/	
move *wp-admin/index.php files under /var/www/  to ./index_disabled	
move all *$lower1* files/directories under current directory to paths formed by replacing the match of $lower1 with $lower2 in their paths	
move all *.data files/directories in $s directory to $s/data/ directory	
move all *.emlx files/directories under /path/to/folders/ to ./messages/ directory	
move all *.log files under $sourcepath that were modified more than 10 days ago to a zip archive $zipfile	
move all *.log files under $sourcepath that were modified more than 10 days ago to a zip archive $zipfile with only file names (not full path)	
move all *.mp4 files from directory /foo/bar and its subdirectories to /some/path	
move all *.pdf.marker files and their corresponding *.pdf files under ${input_location} to ${output_location}	
move all *.pdf.marker files and their corresponding *.pdf files under ${input} to ${output}	
move all *.php~ (case insensitive) files under current directory to /mydir	
move all *foo* (case insensitive) directories under current directory to new paths obtained by replacing all occurrences of 'foo' (case insensitive) with 'bar' in their paths	
move all 10*jpg files under /path to 2010*jpg files under the same directory	
move all directories from the `sourcedir' directory tree to the `destdir' directory	
"move all directories in the current directory that match ""some-dir"" to ""x/"""	
"move all directories in the current directory tree that have been modified in the last day to ""/path/to/target-dir"""	
move all directories under current directory to new paths obtained by replacing all occurrences of 'foo' with 'bar' in their paths	
move all emacs backup files from the current directory tree to ~/backups/	
"move all files and directories in the current directory to ""$target"" excluding files matching ""$exclude"""	
"move all files and directories in the current directory to ""/foo"""	
"move all files and directories in the current directory to ""/tmp/blah/"""	
"move all files and directories in the current directory to ""somewhere/"""	
"move all files and directories matching ""*.boo"" in the current directory to ""subdir"""	
"move all files and directories not starting with ""l"" in ""/mnt/usbdisk"" to ""/home/user/stuff/."""	
"move all files excluding hidden files in ""/path/subfolder/"" to ""/path/"""	
"move all files from ""src/test/"" to ""dest"" displaying progress"	
move all files from the `sourcedir' directory to the `destdir' directory	
move all files from the `sourcedir' directory tree to the `destdir' directory	
"move all files from the current directory to ""targetdirectory"""	
"move all files in ""/path/subfolder"" to ""/path"" without clobbering any destination files"	
"move all files in the current directory tree that match ""some_pattern"" to ""target_location"""	
move all files in the current folder another folder and do not move the files in the sub folder	
"move all files including hidden files and excluding "".."" in ""/path/subfolder/"" to ""/path/"""	
"move all files including hidden files in ""/path/subfolder/"" to ""/path/"""	
move all files listed in $i file to dir.$count directory	
"move all files matching case insensitive "".cpp"" in the current directory tree to ""./test/"""	
"move all files matching patterns ""*.old"", "".old"", "".*.old"" from the current directory to directory ""../old/"""	
"move all files not matching ""tux.png"" in ""~/linux/old"" to ""~/linux/new/"" using zsh with ""extended_glob"""	
"move all files that contain ""subject: \[spam\]"" to ""dir"""	
"move all files that contain ""subject: \[spam\]"" to ""your_file"""	
move all files/directories under current directory to destdir	
move all files/directories under current directory to ~/play	
"move all hidden files in ""/path/subfolder/"" to ""/path/"""	
"move all hidden files in ""wordpress"" to the current directory"	
"move all lines starting with ""ca"" to the beginning of the file"	
move all regular files under current directory to ./newdir	
move all the .c files from the current directory tree to temp/	
move all the files in the current folder  to temp folder and search atleast in one subfolder	
move all the html files from current folder to another folder and if a symbolic link is found copy the original referenced file and not the link	
move each of the 'm?' directories in $path_to_folders to another directory whose name is constituted by appending .mbox to each directory name and create a directory named messages in this directory then move all *.emlx files into this directory	
move each of the 'm?' directories in current directory to another directory whose name is constituted by appending .mbox to each directory name and create a directory named messages in this directory then move all *.emlx files into this directory	
move each of the directories in /path/to/folders/* to another directory whose name is constituted by appending .mbox to each directory name and create a directory named messages in this directory	
move each of the directories in /path/to/folders/* to another directory whose name is constituted by appending .mbox to each directory name and create a directory named messages in this directory then move all *.emlx files into this directory	
move files accessed more than one day ago to directory tmp	
move files from $sourcepath to $destpath that have not been modified in the last 10 days	
move files older than 1 day to directory tmp	
"move server.log to 'logs' directory with new name as the current date formatted as ""%y%m%d%h%m"" and with '.log' extension"	
"move the directory named ""some-dir"" and residing under the current one to x/"	
moves (change order) window from 4 place to 3.	
moves file '$2' to the folder where '$1' file is located.	
moves the file that named like file $1 from '/tmp' folder to the folder where $2 file is located.	
mpv --no-audio \`ls ~/down/other/*.{mp4,flv} --color=never\`	<MISSING>
"mv ""$(readlink -f dirln)"" dir2"	<MISSING>
"mv ""$2"" ""`dirname $1`"""	<MISSING>
"mv ""${myargs[@]}"""	<MISSING>
"mv ""/tmp/`basename $1`"" ""`dirname $2`"""	<MISSING>
"mv $(find $(find . -name ""*shp*"" -printf ""%h\n"" | uniq) -type f) ../shp_all/"	<MISSING>
"mv $(find . -name ""*shp*"" -printf ""%h\n"" | uniq)/* ../shp_all/"	<MISSING>
mv $(grep -l 'subject: \[spam\]' | awk -f ':' '{print $1}') your_file	<MISSING>
mv $1 `echo $1 | tr '[:upper:]' '[:lower:]'`	<MISSING>
mv $file $(echo $file | rev | cut -f2- -d- | rev).pkg	<MISSING>
mv * /foo	<MISSING>
mv * /tmp/blah/	<MISSING>
mv -f file.txt /var/lib/docker/aufs/mnt/$container_id/rootfs/root/file.txt	<MISSING>
mv -f file.txt /var/lib/docker/devicemapper/mnt/$container_id/rootfs/root/file.txt	<MISSING>
mv -nv caniwrite /usr/local/bin	<MISSING>
mv -t target file1 file2 ...	<MISSING>
mv -t www_new www	<MISSING>
mv /mnt/usbdisk/[^l]* /home/user/stuff/.	<MISSING>
mv /path/subfolder/* /path/	<MISSING>
mv /path/subfolder/.* /path/	<MISSING>
mv /path/subfolder/{.,}* /path/	<MISSING>
mv /source/path/{.[!.],}* /destination/path	<MISSING>
mv /usr/bin/openssl /root/	<MISSING>
mv `ls *.boo` subdir	<MISSING>
mv `ls` /foo	<MISSING>
mv `ls` somewhere/	<MISSING>
mv blah1 blah1-new	<MISSING>
mv blah2 blah2-new	<MISSING>
mv fghfilea jklfilea	<MISSING>
mv file.txt.123456 $(ls file.txt.123456 | rev | cut -c8- | rev)	<MISSING>
mv file0001.txt 1.txt	<MISSING>
mv file001abc.txt abc1.txt	<MISSING>
mv new old -b	<MISSING>
mv new old -b && mv old~ new	<MISSING>
mv new old -b -s .old	<MISSING>
mv old tmp	<MISSING>
mv original.filename new.original.filename	<MISSING>
"mv server.log logs/$(date -d ""today"" +""%y%m%d%h%m"").log"	<MISSING>
mv svnlog.py svnlog	<MISSING>
mv tobecopied/tobeexclude tobeexclude;	<MISSING>
mv tobecopied/tobeexcluded .	<MISSING>
mv tux.png .tux.png	<MISSING>
mv wordpress/.* .	<MISSING>
mv {,new.}original.filename	<MISSING>
mv ~/linux/old/^tux.png ~/linux/new/	<MISSING>
mvn help:evaluate -dexpression=project.version | tail -8 | head -1	<MISSING>
my_dir=$(dirname $(readlink -f $0))	<MISSING>
my_ip=$(ifconfig en1 | grep 'inet addr' | awk '{print $2}' | cut -d: -f 2)	<MISSING>
"my_path=$(readlink -f ""$0"")"	<MISSING>
my_program | split -d -b 100000 -	<MISSING>
my_program | tee >(split -d -b 100000 -)	<MISSING>
my_tmp_dir=$(mktemp -d --tmpdir=/tmp)	<MISSING>
"mydir=$(mktemp -d ""${tmpdir:-/tmp/}$(basename $0).xxxxxxxxxxxx"")"	<MISSING>
myhostname=`hostname`	<MISSING>
myprogram|more	<MISSING>
myscript.rb `hostname -i` file.txt	<MISSING>
mysqldump --all-databases | ssh user@yourserver.com mysql	<MISSING>
"mysqldump -e --user=username --password=pswd database | gzip | uuencode my-dbbackup.`date +""\%y-\%m-\%d""`.gz | mail me@domain.com"	<MISSING>
mysqldump –add-drop-table –extended-insert –force –log-error=error.log -uuser -ppass old_db_name | ssh -c user@newhost “mysql -uuser -ppass new_db_name”	<MISSING>
"mytemp=""$(mktemp -t ""${prog}"")"""	<MISSING>
"myusers=`grep $mygroup /etc/group | cut -d "":"" -f4| tr "","" ""\n""`"	<MISSING>
myvar=$(tee)	<MISSING>
myvar=`git ls-files -m|wc -l|tr -d ' '`	<MISSING>
myvar=`seq 1 $n | sed 's/.*/./' | tr -d '\n'`	<MISSING>
myvariable=$(env  | grep variable_name | grep -oe '[^=]*$');	<MISSING>
myvariable=$(whoami)	<MISSING>
n_jobs=$( jobs -p | awk '{print nr}' )	<MISSING>
n_jobs=`expr $(jobs | wc -l)`	<MISSING>
n_max=`ls . | wc -l`	<MISSING>
"name=""$(date +'%d%m%y-%h-%m')_$(whoami)"""	<MISSING>
"name=`basename ""$file"" | cut -d'.' -f-1`"	<MISSING>
"name=`basename ""$file""`"	<MISSING>
nblines=$(cat -n file.txt | tail -n 1 | cut -f1 | xargs)	<MISSING>
net_ip=`ifconfig ${net_if} | grep -eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'`	<MISSING>
netstat -rn | gawk '/ug/ {print $nf}' | xargs ifconfig | gawk 'match($0,/inet addr:(.*) b/,a) {print a[1]}'	<MISSING>
"nice -10 `alias list | sed ""s/^\(alias \)\?[^=]\+='//; s/'$//;""`"	<MISSING>
nl	<MISSING>
"nl -b a ""<filename>"" | grep ""<phrase>"" | awk '{ print $1 }'"	<MISSING>
nl -b a file | sort -k1,1nr | sed '1, 4 d' | sort -k1,1n | sed 's/^ *[0-9]*\t//'	<MISSING>
nl -ba  -nln  active_record.rb  | grep '^111 '	<MISSING>
nl -ba  -nln  active_record.rb  | grep -c 2 '^111 '	<MISSING>
nl -ba infile	<MISSING>
nl -ba long-file \	<MISSING>
nl -ba | sed 786q | grep . | awk '{print $2$1}'	<MISSING>
nl -n ln log.txt | sed ...	<MISSING>
nl -n ln | sort -u -k 2| sort -k 1n | cut -f 2-	<MISSING>
"nl -n rz ca | awk -vofs=""\t"" '/ca/{$1=""#""$2} {$1=$1}1' | sort -k1,1 | cut -f2-"	<MISSING>
nl -nrz -w10 -s\; input | sed -e 's/55//; s/([0-9]{2})-([0-9]{2})-([0-9]{4})/\3\2\1/'	<MISSING>
nl -nrz -w10 -s\; input | sed -r 's/55//; s/([0-9]{2})-([0-9]{2})-([0-9]{4})/\3\2\1/'	<MISSING>
nl -nrz -w9  /etc/passwd	<MISSING>
nl -nrz -w9 foobar	<MISSING>
"nl -s ""prefix_"" a.txt | cut -c7-"	<MISSING>
nl -s prefix file.txt | cut -c7-	<MISSING>
"nl -s""^m${logfile}>  """	<MISSING>
nl -s- -ba -nrz	<MISSING>
nl -v1000001 file	<MISSING>
"nl -w 8 ""$infile"" | sort -k2 -u | sort -n | cut -f2"	<MISSING>
nl file | sort -nr | cut -b8-	<MISSING>
nl filename	<MISSING>
"nl | sort -r | cut -f2 | head -""${1:-10}"""	<MISSING>
"node -pe 'json.parse(process.argv[1]).foo' ""$(cat foobar.json)"""	<MISSING>
nohup cmd1 | cmd2 &	<MISSING>
nohup java -jar program.jar &	<MISSING>
nohup php -f 'yourscript'.php	<MISSING>
"nohup php -r 'while (true) { echo ""a"";}' &"	<MISSING>
nohup php newemptyphp.php &	<MISSING>
nohup rm -rf cache &	<MISSING>
"nohup sh -c 'for i in mydir/*.fasta; do ./myscript.sh ""$i""; done >output.txt' &"	<MISSING>
nohup vlc -i dummy --quiet ~/mp3_directory/* &	<MISSING>
nohup xterm -e java -jar start.jar &	<MISSING>
non-recursively finds all '*.pdf' files in a current folder and removes them.	
"normalize the path to command ""rename"" resolving any symlinks, and display what type of file it is."	
np=`cat /proc/cpuinfo | grep processor | wc -l`	<MISSING>
nslookup `hostname`	<MISSING>
"number each line in ""/etc/passwd"" as right-justified zero padded to a width of 9"	
"number each line in ""foobar"" as right-justified zero padded to a width of 9"	
number each non-blank line of standard input	
"number every line of standard input as zero padded to 6 characters followed by ""-"""	
number=$(echo $filename | awk -f _ '{ print $2 }')	<MISSING>
number=$(echo $filename | tr -cd '[[:digit:]]')	<MISSING>
numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.	
numcpu=$(grep $'^processor\t*:' /proc/cpuinfo |wc -l)	<MISSING>
"numerically sort each line in file ""bb"" and output the result to console from greatest value to least value"	
"numerically sort each line in file ""out"" and print the result to console"	
numerically sort each line of standard input	
"numerically sort file ""file.dat"" by the second word of each line and output from greatest value to least value"	
"numerically sort file ""files"" by the second ""-"" separated value of each line ordered from least value to highest value"	
"numerically sort file ""table"" by the fourth character of the second field, ignoring leading spaces"	
"numerically sort file ""temp.txt"" by the second ""-"" separated value of each line ordered from highest value to least value"	
numerically sort ipv4 addresses specified on standard input with presedence to first, second, third, then fourth octet	
numerically sort standard input by the second word of each line	
numerically sort standard input by the second word of each line and output from greatest value to least value	
objdump --disassemble my-crashing-program | less	<MISSING>
objdump -x `which tail`	<MISSING>
"octave -q --eval 'printf (""%f\n"", [0:0.1:pi/2])'|nl|tee x.txt"	<MISSING>
"octave -q --eval 'printf (""%f\n"", sin([0:0.1:pi/2]))'|nl|tee y.txt"	<MISSING>
od --read-bytes=2 my_driver	<MISSING>
"od -a -an -v file | perl -0777ne 's/\n//g,print ""$_\n "" for /(?:esc| fs| gs| us)?(?:(?!esc| fs| gs| us).)*/gs'"	<MISSING>
od -a n -n 2 -t u2 /dev/urandom	<MISSING>
od -a n -t d -n 1 /dev/urandom	<MISSING>
od -a test.sh	<MISSING>
od -an -n2 -i /dev/random	<MISSING>
od -c foo |head -2	<MISSING>
od -c oldfile	<MISSING>
od -can;	<MISSING>
od -cvanone -w1	<MISSING>
od -cvanone -w1 | sort -b | uniq -c | sort -rn | head -n 20	<MISSING>
od -cvanone -w1 | sort -bu	<MISSING>
od -t c file	<MISSING>
od -t fd	<MISSING>
od -t fd file	<MISSING>
od -t x1 -an /bin/ls | head	<MISSING>
od -t x1 -an file |tr -d '\n '	<MISSING>
od -t x1 -t a /dev/ttysomething	<MISSING>
od -t x1 file|cut -c8-	<MISSING>
od -t x2 -n 1000 $file | cut -c8- | egrep -m1 -q ' 0d| 0d|0d$'	<MISSING>
od -tx2 filename	<MISSING>
od -vtx1 /dev/midi1	<MISSING>
od -xc filename	<MISSING>
od -xcb input_file_name | less	<MISSING>
od -xcb testscript.sh	<MISSING>
od file-with-nulls | grep ' 000'	<MISSING>
od | cut -b 8- | xargs -n 1 | sort | uniq | wc -l	<MISSING>
"oldalias=$(alias my_command|sed ""s/^[^']*'//; s/'$//"");"	<MISSING>
"on host ""server_b"", connect as ssh user ""user"" and copy ""/my_folder/my_file.xml"" to directory ""/my_new_folder/"", with all transfer data relayed through local host."	
"on host ""server_b"", connect as ssh user ""user"" and copy ""/my_folder/my_file.xml"" to directory ""/my_new_folder/""."	
only get md5sum of a file	
"open ""charm"" executable file in vim"	
open a local ssh port on 1080 for application-level port forwarding	
"open a session-less connection to 'host' as user 'user' in master mode with a socket ""/tmp/%r@%h:%p"" to enable connection sharing"	
"open a ssh connection to ""user@host"" with a control socket ""/tmp/%r@%h:%p"""	
open a ssh connection to user@host with x11 forwarding to run gui programs	
open all .c files in the current directory tree in the vim editor	
open all .java files in the current directory tree in the vim editor	
open all files named 'filename' with 'nano' editor in the entire filesystem	
"open executable file for command ""rails"" in text editor ""mate"""	
"open executable file of command ""yum"" in vi"	
"open gcc info manual and select ""option index"" menu entry."	
open interactive list of jobs to select from	
opens gawk info manual and goes to command-line options node.	
"opens gcc info manual and goes to a node pointed by index entry ""funroll-loops""."	
"opens gcc info manual and selects ""option index"" menu entry."	
opens menu item 'basic shell features' -> 'shell expansions' -> 'filename expansion' -> 'pattern matching' in the 'bash' manual.	
opens new tmux session.	
optimize all the png images in the current folder to level 5 and save the log to the file optipng.log	
os=$(uname -s)	<MISSING>
os=`uname -s`	<MISSING>
"other=""$(mktemp --directory)"""	<MISSING>
"output ""file.txt"", omitting all containing directories ""some/unknown/amoutn/of/sub/folder/"""	
"output ""stuff"", removing ""/foo/bar/"" from the specified path."	
"output ""testfile.txt.1"" without the "".1"" suffix."	
output a csv file as a formatted table	
output all lines from file1 except those present in file2, assuming both files are sorted.	
output all lines from file1 except those present in file2.	
output all lines in 'file' comparing the first 12 characters and discarding any adjascent lines where these characters are duplicates.	
output all lines in 'file' which contain a tab character.	
output all lines in bigfile.csv whose secondn comma-separated second field matches first field of a line in littlefile.csv.	
output all lines that have a common first colon-separated field in files 'selection2.txt' and 'selection1.txt' by displaying the common (first) field of each line, followed by the extra fields in both lines.	
"output line number and lines 200000000 through 200000005 from the infinite input of ""y"""	
output lines 16224 to 16482 of 'file', and stop reading 'file' after line 16482.	
output lines 16224 to 16482 of 'file', not recommended with large files that contain many lines after the ones needed.	
"output only the filetype suffix of ""foo.tar.gz"", in this case ""gz"""	
output success.txt omitting lines whose first field appears in fail.txt - lines in fail.txt must appear in the same order as they do in success.txt.	
output the base name of first argument to script or function, that is the part following the last slash.	
"output the file name ""file.txt' from the path ""some/unknown/amount/of/sub/folder/file.txt"""	
"output the last slash-separated component of specified path, in this case ""data_report_pd_import_script_abf1_6"""	
"output the specified path removing all containing directories and the .txt suffix, in this case ""filename""."	
output the standard input followed by the line number until line 786	
output the string 'yes' continously until killed	
output the system host name and date to the console	
"output the variable ""filename"" without the last dot-separated section."	
"output two lines of ""-tcp"""	
"output=""$(ls -1)"""	<MISSING>
"output=$(echo ""$output"" | tr -d '\' | tr -d '\n')"	<MISSING>
output=$(echo $input | fold -w4 | tac | tr -d \\n)	<MISSING>
output=`find . -name foo.txt`	<MISSING>
output=`top -b -n 1 | tail -n +8 | head -n 1`	<MISSING>
overwirte file '/path/to/your/file' with random content, showing progress while execution.	
overwirte file '/path/to/your/file' with random content, then overwrite with zeroes, and remove, showing progress while execution.	
overwirte file '/path/to/your/file' with zeroes and remove, showing progress while execution.	
overwrite a file 'my-existing-file' with random data to hide its content	
overwrites file $file with random content, then truncates and deletes it.	
overwrites file 'filename' with random content 35 times, finally writes it with zeros, truncates and deletes.	
packet_loss=$(ping -c 5 -q $host | grep -op '\d+(?=% packet loss)')	<MISSING>
"packetloss=$(ping ""$testip"" -c 2 | grep -eo ""[0-9]+% packet loss"" | grep -eo ""^[0-9]"")"	<MISSING>
page interactively through the output of running 'command' - the arrow keys move the view around, the < and > keys go to the beginning/end of the output, the / key initiates a search, the q key quits, etc.	
page through a list of all running processes on the system, with those taking most cpu at the top of the list.	
page through both standard output and standard error of 'make'.	
page through extended information about all pci devices on system.	
page through the contents of 'file', but excess from lines that don't fit within the screen/window width is cut.	
page through the contents of 'input_file_name' hexdumped with space-separated 2-byte units.	
page through the contents of big_file.txt, letting the user move around with the arrow keys, the q key quits.	
page through the contents of file 'file_name', positioning the view at the first occurrence of regular expression 'regex'.	
page through the contents of yourfile, adding a $ at the end of each line and replacing tab characters by ^i.	
page through the contents of yourfile, adding a $ at the end of each line.	
page through the disassembler output of objdump on executable file 'my-crashing-program'.	
page through the information of the system's php setup.	
page through the output of 'some_command' positioning the view at the first occurrence of regular expression 'regex'.	
page through the output of running the specified php file.	
pair side-by-side content of the 'file' and its side-mirrored content	
parec --raw --channels=1 --latency=2 | od -n2 -td2 | head -n1 | cut -d' ' -f2- | tr -d ' '	<MISSING>
"parse ""file.json"" to print json ""title"" entries whose ""price"" are less than 10"	
"parse output from ""script.sh"" in the current directory which is expected to generate ""variable: value"" formatted data, and add the resulting variables to the current shell's environment."	
"parse xml file ""example.xml"" and extract and number all ""key"" tags from the ""config"" section"	
"pass ""y"" to all the prompts for the command ""execute_command"""	
"pass a single argument containing a string of numbers from 1 to 100000 to ""/bin/true"""	
"pass a wildcard to scp by escaping it: copy all files with names starting with ""files"" in directory ""/location"" on host ""server"" to current directory on local machine, displaying debug info and preserving timestamps and permissions on copied files."	
pass all the files from the current directory tree as arguments to a single 'echo' command	
"pass numbers 1 to 100000 as arguments to ""/bin/true"""	
pass=$(lc_ctype=c < /dev/urandom tr -cd [:graph:] | tr -d '\n' | fold -w 32 | head -n 1)	<MISSING>
paste --delimiter=\\n --serial *.txt	<MISSING>
"paste -d """" - -"	<MISSING>
paste -d ' ' file <(rev file)	<MISSING>
"paste -d"" "" - - < file | column -t"	<MISSING>
"paste -d"" "" file1 file2 | paste -d'|' - file3 | sed 's,|, ,g'"	<MISSING>
paste -d' ' <(sed -n 'p;n' num.txt) <(sed -n 'n;p' num.txt)	<MISSING>
paste -d':' *.txt | sed 's/ [^:]*$//;s/ [^:]*:*/ /g;s/://g'	<MISSING>
paste -d'¤' file1 file2 | sed 's,¤, ,g'	<MISSING>
paste -d, -s file	<MISSING>
paste -d: <(grep '<th>' mycode.html | sed -e 's,</*th>,,g') <(grep '<td>' mycode.html | sed -e 's,</*td>,,g')	<MISSING>
"paste -s -d"","""	<MISSING>
paste -s -d' \n' input.txt	<MISSING>
paste -s -d+ infile | bc	<MISSING>
"paste -sd """" file.txt"	<MISSING>
paste -sd',,\n' file	<MISSING>
paste -sd+ filename | bc	<MISSING>
paste -sd+ infile | bc	<MISSING>
paste -sd: input.txt	<MISSING>
paste <(cal 2 2009) <(cal 3 2009) <(cal 4 2009)	<MISSING>
paste <(cal 6 2009) <(cal 6 2010)	<MISSING>
"paste <(head -""$lc"" current.txt) <(tail -""$lc"" current.txt) | column -t -o,"	<MISSING>
"paste <(mount | awk 'tolower($0) ~ /\/dev\/sd*/ {print nr ""\t"" $1 ""\t"" $3}') <(/usr/sbin/smartctl -a /dev/sdb | awk '/device:/ {print $2}')"	<MISSING>
"paste <(paste -d"" "" f1 f2) f3"	<MISSING>
paste <(uniq -f3 file | cut -f1,2) <(tac file | uniq -f3 | tac | cut -f3-)	<MISSING>
paste file file2 file3 | sed 's/\t/ /'	<MISSING>
paste file_1 file_2 | column -s $'\t' -t	<MISSING>
paste file{1,2,3,4} | sed -e 's/\t/ \t/g' | column -t -s$'\t'	<MISSING>
paste tmp/sample-xxxx.{tim,log}	<MISSING>
"path=""$( dirname ""$( which ""$0"" )"" )"""	<MISSING>
"path=""http://$(whoami).$(hostname -f)/path/to/file"""	<MISSING>
path=$(basename $(pwd) | awk '{print tolower($0)}')	<MISSING>
path=$(basename $(pwd) | tr 'a-z' 'a-z' )	<MISSING>
path=$(basename $(pwd))	<MISSING>
path=$(basename $path)	<MISSING>
"path=$(echo $path | tr "":"" ""\n"" | grep -v $1 | tr ""\n"" "":"")"	<MISSING>
"path=`readlink --canonicalize ""$dir/$file""`"	<MISSING>
path=`which oracle`	<MISSING>
"pdfunite `find . -name ""*.pdf"" | sort` all.pdf"	<MISSING>
perform a case insensitive search	
perform a case insensitive search for *.jpg files which are greater than 500kb in size under /ftp/dir/ directory	
perform a case insensitive search for *filename* files/directories under current directory tree	
perform a default cpanel configuration	
perform a default plesk configuration	
"perform a dry run replacing ""special"" with ""regular"" in all file names in the current directory"	
"perform a dry run to recursively copy ""test/a"" to ""test/dest"" excluding ""test/a/b/c/d"""	
perform a white space safe search for all files/directories under current directory	
perform case insensitive search for *.gif files/directories under downloads directory	
perform case-insensitive search for file `test123.txt' on the system	
perform syntax check on all php files in the current directory tree	
perform white space safe deletion of files named core under /tmp	
"perl -e '@t=localtime(time-86400);printf(""%02d/%02d/%04d"",$t[3],$t[4]+1,$t[5]+1900)' | read dt"	<MISSING>
perl -ne 'print ($l = $_) if (length > length($l));' filename | tail -1	<MISSING>
"perl -ne 'print length().""  line $.  $_""' myfile | sort -nr | head -n 1"	<MISSING>
perl -p -i -e 's/oldstring/newstring/g' `find ./ -name *.html`	<MISSING>
perl -pe 's/((:\s*){3}):\s*/$1/g' file | column -t	<MISSING>
"perl -pi -e 'begin { print ""a new line"" }' $(find . -name '*.py')"	<MISSING>
"perl -ple '' `find . -name ""file*""`"	<MISSING>
pg_dump -u myuser mydb | gzip > mydb.sql.gz	<MISSING>
pgrep -u `whoami` mpirun	<MISSING>
pgrep -u w | grep ssh| awk '{print $1}' ssh	<MISSING>
php -i | more	<MISSING>
pick up a list of variable:value pairs from msgs.config and add them to the current shell or script's environment.	
ping ${ip} -i eth9 -c 1	<MISSING>
ping -a 10.100.3.104	<MISSING>
ping -b 10.10.0.255	<MISSING>
ping -b 10.10.0.255 | grep 'bytes from' | awk '{ print $4 }'	<MISSING>
ping -c 1 $remote_machine	<MISSING>
ping -c 1 -t 1 192.168.1.1	<MISSING>
ping -c 1 127.0.0.1 #ping your adress once	<MISSING>
ping -c 1 192.168.1.$counter | grep 'ms'	<MISSING>
ping -c 1 8.8.8.8 |  awk 'fnr == 2 { print $(nf-1) }'	<MISSING>
ping -c 1 8.8.8.8 |  awk 'fnr == 2 { print $(nf-1) }' | cut -d'=' -f2	<MISSING>
ping -c 1 hostname | grep 192.168.11 | grep 'bytes from' | awk '{print $4}' | sed 's/://g'	<MISSING>
ping -c 2 -n 127.0.0.1 | awk -f'[ =]' -v ofs='\t' 'nr>1 { print $6, $10 }'	<MISSING>
ping -c 2 www.google.com	<MISSING>
ping -c 25 google.com | tee >(split -d -b 100000 - /home/user/mylogfile.log)	<MISSING>
ping -c 4 -q google.comz	<MISSING>
ping -c 4 www.stackoverflow.com | awk -f '/' 'end {print $5}'	<MISSING>
ping -c 4 www.stackoverflow.com | sed '$!d;s|.*/\([0-9.]*\)/.*|\1|'	<MISSING>
ping -c 4 www.stackoverflow.com | tail -1| awk '{print $4}' | cut -d '/' -f 2	<MISSING>
ping -c 5 -b 10.10.0.255 | grep 'bytes from' | awk '{ print $4 }' | sort | uniq	<MISSING>
ping -c 5 -b 10.11.255.255 | sed -n 's/.* \([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' | sort | uniq	<MISSING>
ping -c 5 -q $host | grep -op '\d+(?=% packet loss)'	<MISSING>
ping -c 5 -q 12.34.56.78 | tail -n 2	<MISSING>
"ping -c 5 google.com | grep ""round-trip"" | cut -f 5 -d ""/"""	<MISSING>
"ping -c1 1199092913 | head -n1 | grep -eow ""[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+"""	<MISSING>
ping -c4 www.google.com | awk '/---/,0'	<MISSING>
ping -d -n -o -i1 -w1 8.8.8.8	<MISSING>
"ping -n 1 %ip% | find ""ttl"""	<MISSING>
ping -q -c 5 google.com | tail -n 1 | cut -f 5 -d '/'	<MISSING>
ping -s www.google.com 2 4	<MISSING>
ping -w 1 $c	<MISSING>
ping -w 1 -c 1 10.0.0.$i | grep 'from' &	<MISSING>
ping 8.8.8.8 -i eth9 -c 3 -w 3	<MISSING>
"ping 8.8.8.8 | awk '{split($7,a,""[=.]"");if (a[2]>58) print a[2], strftime()}'"	<MISSING>
"ping 8.8.8.8 | awk -f""[= ]"" '{if($10>50) {cmd=""date""; cmd | getline dt; close(cmd) ; print $10, dt}}'"	<MISSING>
"ping all hosts in file ""ips"" twice"	
ping every address from 192.168.0.1 to 192.168.0.254 with a timeout of 1 second and filter out no responses	
"ping google.com -n 10 | awk '/minimum =/ { sub("","","""",$3); print $3 }'"	<MISSING>
ping google.com -n 10 | grep minimum | awk '{print $3}' | sed s/,//	<MISSING>
"ping google.com | awk '{ sent=nr-1; received+=/^.*(time=.+ ms).*$/; loss=0; } { if (sent>0) loss=100-((received/sent)*100) } { print $0; printf ""sent:%d received:%d loss:%d%%\n"", sent, received, loss; }'"	<MISSING>
"ping google.com | awk '{ sent=nr-1; received+=/^.*(time=.+ ms).*$/; loss=0; } { if (sent>0) loss=100-((received/sent)*100) } { printf ""sent:%d received:%d loss:%d%%\n"", sent, received, loss }'"	<MISSING>
ping google.com | awk -f packet_loss.awk	<MISSING>
"ping google.com | awk -f'[ =]' 'nr>1{print system(""echo -n $(date +%s)""), $11}'"	<MISSING>
ping google.com | xargs -l 1 -i '{}' date '+%+: {}'	<MISSING>
ping google.com | xargs -l 1 -i '{}' date '+%c: {}'	<MISSING>
"ping host | awk '{if($0 ~ /bytes from/){print strftime()""|""$0}else print}'"	<MISSING>
"ping host | perl -nle 'print scalar(localtime), "" "", $_'"	<MISSING>
ping hostname, grep for 192.168.11 and print the ip from the output	
"ping the broadcast address ""10.10.0.255"""	
"ping www.google.com | while read endlooop; do echo ""$(date): $endlooop""; done"	<MISSING>
"ping www.google.fr | while read pong; do echo ""$(date): $pong""; done"	<MISSING>
ping youhostname.local	<MISSING>
ping=$(ping address -c 1 | grep -e -o '[0-9]+ received' | cut -f1 -d' ')	<MISSING>
pipe 3 newlines to sshe-keygen, answering prompts automatically.	
pipe an empty line to ssh-keygen.	
"pipe content of 'somedata.txt' file to the input of command ""$outfile"""	
"pipe output of ""yes"" to ""more"" and append the first 3 lines to ""file"""	
"pipe the output of ""program1"" to both ""program2"" and ""program3"""	
"pipe the output of ls into ""read var"" in its separate process"	
places current job to background.	
popd	<MISSING>
pops the top directory of dirs stack and changes to it.	
pr -n 'find . -type f -mtime -1 -print'|lpr	<MISSING>
"prefix all files and directories in the current directory with ""unix_"""	
"prefix all files and directories in the current directory with ""unix_"" if the files contain no whitespace or subdirectories"	
"prefix all files and folders in the current directory with ""pre_"""	
"prefix all files in the current directory with ""unix_"""	
"prefix each non-blank line in ""filename"" with a line number"	
"prepend ""foo"" to the file ""bar"""	
prepend date to ping output to google.com	
"prepend the reverse history number as negative values to the output of the history command with arguments ""$@"""	
"prepend the reverse history number to the output of the history command with arguments ""$@"""	
"prepend time stamps to entries in ""/path/to/log"" as they appear and write to ""/path/to/log-with-timestamps"""	
prepends date to ping output	
preprocess c++ file 'omnitest.cpp' (resolve all preprocessor directives) and page interactively through the result.	
"prevent ssh from reading from standard input and execute ""touch /home/user/file_name.txt"" on ""$r_host"" as ""$r_user"""	
prevents curl from returning error (23) failed writing body when grepping for foo	
"print  ""cannot acquire lock - already locked by "" followed by content of $lockfile file"	
"print ""#include"" statements found in ""file2"" that are not in ""file1"""	
"print ""$1"" or default 10 random lines from standard input"	
"print ""$line"" in hexadecimal 2-byte units"	
"print ""$path"" variable as input to awk script ""rem_dup.awk"" and concatenate the result with "":"""	
"print ""$somedir is empty"" if $somedir is empty"	
"print ""*checking partition permission* hostname=$(hostname) lastchecked="" followed by the current date"	
"print ""/tmp/myfile"" starting at line 11"	
"print ""a\nb\ncccccccccccc\nd"" as two columns and neatly format into a table"	
"print ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" and append to file ""/etc/apt/sources.list"""	
"print ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" and append to file ""/etc/apt/sources.list"""	
"print ""echo ping -c 2"" on each string in file 'ips'"	
"print ""file1.txt"" ""file2.txt"" and ""file3.txt"" with filename headers"	
"print ""found"" if ""blah"" contains the hex byte string ""\xca\xfe\xba\xbe"""	
"print ""hello"" followed by the current user name"	
"print ""huge-file.log"" starting at line 1000001"	
"print ""huzzah"" if directory ""/some/dir"" is empty"	
"print ""i am user and the program named ls is in ls_path"" where ""user"" is the current user's user name and ""ls_path"" is the full path of the command ""ls"""	
"print ""mounted"" if /mnt/myusbdisk exists on a mounted file system or print ""not mounted"" otherwise."	
"print ""new.txt"" with line numbers prepended"	
"print ""new.txt"" with line numbers prepended and line 2 or any line containing ""2"" deleted"	
"print ""new.txt"" with line numbers prepended and lines 3 and 4 deleted"	
"print ""on"" to standard output and to files matching ""/sys/bus/usb/devices/usb*/power/level"""	
"print ""operator: "" followed by the full name of ""${user}"""	
"print ""rdbms exit code : $rc  "" to the console and append to ""${log_file}"""	
"print ""shared memory"" if shared memory mounted at /tmp or print ""not shared memory"" otherwise."	
"print ""test=hello world"""	
"print ""this is a sentence."" by replacing all consecutive space characters with a single newline character"	
"print ""total generated: "" followed by the number of unique lines in ""$generated_ports"""	
"print ""y"" for each line in ""file2.txt"" found in ""file1.txt"" and a blank newline otherwise"	
"print ""yes"" 4 times followed by 1 ""no"""	
print $1 if $1 is an empty directory	
print $d if $d is an empty directory	
print $d if $d is empty	
"print '""http/1.1 200 ok', two new lines and the current date"	
print '-exec is an action so an implicit -print is not applied' for every file/directory found by the name 'file' under current directory tree	
print '-ok is an action so an implicit -print is not applied' with confirmation from the user for each file or directory found by the name 'file' under current directory tree	
print '-okdir is an action so an implicit -print is not applied' for each file/directory found by the name 'file' under current directory tree	
print '111 22 3\n4 555 66\n' by replacing the spaces with tabs and '\n' with newlines	
print 'bla.txt' if at least one file with such name is present below the current directory.	
print 'cp' commands that would copy a file xyz.c to all the files with '.c' extension present in the ./c directory and below	
print 'echo 'hello, world'	
print 'empty dir' if $some_dir is empty	
print 'empty dir' if $some_dir is empty, otherwise print 'dir is not empty'	
print 'empty' if $some_dir is an empty directory, otherwise print 'not empty'	
print 'empty' if aaa/ is an empty directory	
print 'file' content, formatting output as 29-symbol wide column	
print 'file' content, formatting output as 29-symbol wide column, regarding space symbol as a word separator	
print 'file' file, splitting lines into pieces with no more that 3 words in each one.	
print 'huzzah' if /some/dir/ is empty	
print 'infile' content with line numbers	
print 'since -printf is an action the implicit -print is not applied\n' for every file named 'file' found under current directory tree	
print 'this should print the filename twice if an implicit -print is applied: ' appended with file paths for all files named 'file' under current directory tree	
print /some/dir/ if it's empty	
"print 1 byte from ""/dev/urandom"" as a signed decimal value and no address radix"	
print 1 to 10 by separating them with colon (':')	
"print 10 ""#"" characters in a row"	
"print 10 lines of a single ""x"""	
"print 10 space padded ""x""s to a width of 10 with at most 4 per line"	
"print 10 space separated ""x""s with at most 4 per line"	
print 1000 astarisk ('*')	
"print 2 lines of ""123456789"""	
"print 3 newline separated ""y""s"	
print 3 space separated '%'	
"print 4th white space separated field in file ""file"""	
print 7 spaces in a row	
"print a 2 byte decimal integer from ""/dev/random"""	
"print a 2 byte hexadecimal value, printable character, and octal value of ""$1"""	
print a colon-separated list of all directories from the $root directory tree	
"print a colon-separated list of all directories from the $root directory tree, except those matching pattern "".[a-z]*"""	
print a colon-separated list of all directories from the ~/code directory tree	
print a colon-separated list of all directories from the ~/code directory tree, except hidden ones	
print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them	
print a column of cpu usage numbers	
"print a count of all unique entries in ""ips.txt"" with the most frequent results at the top"	
"print a count of all unique lines in ""ports.txt"" sorted from most frequent to least frequent"	
print a count of case insensitive duplicate filenames in the current directory	
"print a count of duplicate lines in ""filename"""	
"print a count of duplicate lines in ""filename"" sorted by most frequent"	
print a count of each unique line from standard input	
print a count of each unique line from standard input sorted from least frequent to most frequent	
"print a count of each unique line in ""ip_addresses"""	
"print a count of each unique line in ""ip_addresses.txt"" sorted numerically"	
print a count of files and directories in the current directory tree	
print a detailed list of all files under and below the two directories given as variables $fulfillment and $arch1	
print a detailed list of all regular files from the current directory tree	
"print a dump of the plain hex data in ""$var1"" as printable characters"	
print a frequency count of column two for every file in the current directory	
"print a hex dump byte to byte of the output of ""echo aa"""	
"print a hex dump byte to byte of the output of ""printf aa"""	
"print a hex dump of ""$direc"" as characters"	
"print a line of ""$variable"" '-' characters"	
print a line of 10 '#' characters	
print a line of 100 '=' characters	
"print a line of 100 random characters either ""."" or "" """	
print a line of 3 '%' characters	
print a line of 99 '=' characters	
print a list of all *.code files from the current directory tree	
print a list of all duplicate case insensitive file paths in the current directory tree	
print a list of all duplicate case insensitive filenames in the current directory tree	
print a list of all duplicate filenames in the current directory tree if there is no white space in filenames	
print a list of all filepattern-*2009* files/directories under data directory to filesofinterest.txt file	
print a list of all filepattern-*2009* files/directories under data/ to filesofinterest.txt file	
print a list of all files and directories in the /var/log directory tree	
print a list of all files/directories under current directory in myfile.sh file	
print a list of all regular files residing in the current directory	
print a list of all the files in entire file system whose inode has been modified no later than one minute ago	
print a list of case insensitive duplicate filenames in the current directory	
print a list of differing files	
print a list of each file with the full path prefix in the current directory tree excluding symbolic links	
print a list of jpg files residing in the current directory tree	
print a list of most often changed files in git	
print a list of regular files from directory tree sort_test/ sorted with lc_collate=c	
print a list of regular files from directory tree sort_test/ sorted with lc_collate=en_us.utf-8	
print a list of regular files from directory tree sort_test/ sorted with lc_collate=en_us.utf8	
print a list of symbolic links reachable from the current directory that do not resolve to accessible files	
print a list of unique users who are logged in	
print a listing of the /usr/local/etc/rc.d directory tree	
print a listing of the `other' directory	
"print a minimal set of differences between files in directories ""a"" and ""b"", ignore differences in whitespace, and print 0 lines of unified context"	
"print a minimal set of differences between files in directories ""a"" and ""b"", ignore the first 3 lines of output, and print any line starting with ""-"" with the first character removed"	
"print a minimal set of differences between files in directories ""teste1"" and ""teste2"", treat absent files as empty, ignore differences in whitespace, treat all files as text, and print 3 lines of unified context"	
print a null delimited list of all *.emlx files/directories under /path/to/folders/ to filelist	
print a null-separated list of all directories of the current directory tree	
print a null-separated list of all hidden regular files from the home directory	
"print a ping request and the number of packets sent, received, and the percentage lost for each ping request to ""google.com"""	
print a random number from 2000 to 65000	
"print a randomly sorted list of numbers from 1 to 10 to file ""/tmp/lst"" and outputs ""-------"" followed by the reverse list to the screen"	
"print a randomly sorted list of numbers from 1 to 10 to file ""/tmp/lst"" and the screen followed by "" -------"""	
print a record for domain 'domain.' from 'ns1.newnameserver' nameserver	
print a record for domain 'domain.' from 'ns2.newnameserver' nameserver	
print a record for domain 'domain.' from 'some.other.ip.address' nameserver	
print a record for domain 'domain.' from 8.8.8.8 nameserver	
"print a single line of numbers from ""001"" to ""010"""	
"print a single line of numbers from ""001"" to ""100"""	
print a sorted list of *.so files in the bla directory tree	
print a sorted list of all .jpg files in the current directory and below	
"print a sorted list of directories from the ~/music tree containing files whose names begin with ""cover."""	
print a sorted list of regular files from directory tree /folder/of/stuff	
print a sorted list of the extensions of the regular files from the current directory tree	
print a sorted list of the extensions of the regular files from the current directory tree matching pattern '*.???'	
print a sorted list of the extensions of the regular files from the current directory tree with counts per extension	
print a sorted list of the extensions of the regular files from the current directory tree, skipping svn directories	
print a sorted list of the subdirectories of ~/music	
print a sorted list of unique directory paths in entire file system that match the pattern '<name_pattern>' in their names	
print a space separated list of numbers from 1 to 10	
print a space separated list of numbers from 1 to 10 with no trailing new line	
print a summary of the command-line usage of find	
"print a tab separated table in ""table.txt"" with cell borders"	
"print a time stamp for each successful ping to ""host"""	
print a top 20 histogram of characters used from standard input showing backslash escapes for non-displayables	
print a unique list of characters from standard input showing backslash escapes for non-displayables	
print a welcome message with the current user's user name	
"print absolute path of ""path"""	
"print absolute path of ""your_path"""	
print absolute path of java executable	
print all '-' separated digits in file 'infile' as dot ('.') separated digits	
print all active readline keybindings	
print all business days in the current month without column titles	
print all directories under $root appending a : (colon) at the end of each path	
print all directories under $root appending a : (colon) at the end of each path without descending into directories matching the pattern .[a-z]*	
"print all distinct characters in input ""he likes cats, really?"""	
print all file/directory names with white space safety under the /proc directory	
print all file/directory names without white space safety under the /proc directory	
print all file/directory paths under current directory	
print all filenames in /usr/src except for those that are of the form '*,v' or '.*,v'	
print all filenames of files under current dir containing 'foo', case-insensitive	
print all filenames under /proc and below	
print all files and directories in the `.' directory tree skipping sccs directories	
print all files and directories in the `.' directory tree skipping sccs directories but printing out the sccs directory name	
"print all files containing ""word1"" and ""word2"" in the current directory tree"	
print all files in the current directory and all subdirectories	
print all files in the current directory as a comma separated list	
print all files in the current directory tree as a comma separated list	
print all files in the directories except the ./src/emacs directory	
"print all files in the file system excluding those ending with "".c"""	
print all files on the system owned by group `name_of_group'	
print all files that exceed 1000 blocks and were modified at least a month ago	
print all files which name is xyzzy  followed by null and save to list	
print all files with a '-' after their name if they are regular files, and a '+' otherwise	
print all files/directories under ... directory by terminating their paths with a null character	
print all files/directories with their sizes under $whatever directory tree	
print all group names known to the system.	
print all lines after the last match of 'string match'	
print all lines from file 'report.txt' containing any-cased 'error' pattern	
print all lines from the last occurrence of the regex 'pattern' to the end of the file 'file'	
"print all lines in file that do not match ""pattern"""	
"print all lines of ""seq 1 10"" except the last 3"	
"print all lines of ""seq 10"" except the last 3"	
"print all logins formatted as ""the user user is on tty"" where user is the user name and tty is the login terminal"	
"print all matching commands in $path for command ""python"""	
print all non-hidden files in the current directory and its subdirectories	
print all pids of stopped processes	
print all readline bindings	
print all string from file 'file2.txt' matching pattern in file 'file1.txt'	
print all the banned ips from your server along with their origin (country) using the geoip-bin package	
print all the file/directory paths under current directory	
print all the files in the current folder which do not begin with a capital letter	
"print all unique directory paths under ""dir1"" compared to ""dir2"""	
"print all unique file paths under ""dir1"" compared to ""dir2"""	
print all unique strings in $1.tmp file.	
print all user names and terminals of users who are logged in	
print amount of space available on the file system containg path to the current working directory human-readable.	
print amount of space available on the file system containg path to the current working directory.	
print amount of space available on the file system containing path to the current working directory in megabytes.	
print amount of space available on the file system containing path to the current working directory.	
print an alert message containing the ip address and information of the user connecting via ssh	
"print an octal dump of ""file"" with named characters, no addresses, and no suppressed duplicate lines with sections starting with ""esc"", ""fs"", ""gs"", or ""us"""	
print and delete all directories named 'work' under '/usr/ports/' directory tree	
print and recursively remove the alphabetically last directory in the current directory	
"print and save the ping results of 25 requests to ""google.com"" in ""/home/user/mylogfile.log"" containing at most 100000 bytes"	
"print and split the output of ""my_program"" into files of at most 100000 bytes each and use numeric suffixes"	
print apparent size rather than disk usage	
"print appended data in ""/var/log/some.log"" that match ""foo"" and ""bar"""	
"print appended data in ""/var/log/syslog"" as the file grows"	
"print appended data in ""file"" and search for ""my_pattern"" without buffering"	
"print appended data in ""file"" that match ""my_pattern"""	
"print argument ""$1"" ""$number"" times"	
"print as many dots as there are files named ""file.ext"" in the /home/kibab directory tree"	
print base name of the file name without all extensions.	
"print bash environment variable array ""fields"" and its values"	
"print bindings for ""p"" and ""e"" with no case sensitivity"	
print calendar for february, march and april of year 2009 side-by-side	
"print canonical filename of ""/path/here/.."""	
"print canonical filename of ""/path/there/../../"" even if it does not exist"	
"print characters 2 through 4 of ""abcdefg"""	
"print characters in variable ""$a"" that exist in variable ""$b"""	
print chmod commands that can change permissions of regular files residing in the current directory tree to u=rw,g=r,o=	
"print comma separated gaps in file ""file"" that contains new line separated ordered numbers"	
"print command for alias ""list"" with low priority command"	
print command history	
print command line of process with pid 17709	
print command with pid 11383	
"print common characters in variable ""$a"" and ""$b"""	
"print common files of directory ""1"" and ""2"""	
"print common files of directory ""one"" and ""two"""	
"print common lines in ""file1"" and ""file2"""	
"print common lines in file ""a"" and ""b"""	
"print common lines in files ""set1"" and ""set2"""	
"print common lines in sorted files ""ignore.txt"" and ""input.txt"""	
"print common lines of files ""file1"", ""file2"", ""file3"", and ""file4"""	
print concatenated content of all files ending with '.foo' under the current folder	
print content of '1' file	
print content of 'a' file, showing all non-printing characters including tab characters, and displaying $ at the end of each line.	
print content of 'domains.txt' with removed first one of dot-delimited fields	
print content of 'file' file reverted characterwise	
print content of 'filename' file, showing all non-printing characters and displaying $ at the end of each line.	
print content of 'whatever' file	
print content of /etc/passwd and /etc/group files	
print content of all files ending with '*.foo' in current directory recursively	
print content of all files ending with '*.foo' under the current directory	
print content of all files found regarding seach options '[whatever]'	
print content of each file under the current directory followed by that file name	
"print contents of ""file"" as space separated hexadecimal bytes on a single line"	
print continuous characters '/' and '\' randomly from /dev/urandom	
"print continuous lines of 100 random characters either ""."" or "" """	
print count of unique lines in all files like 'list_part*'	
print cpu usage and memory usage of all unique processes on a system	
"print cpu usage and memory usage of processes running ""mysql"""	
print crontabs of all users in system, skipping messages that some users don`t have crontab.	
print current date as epoch seconds	
print current shell settings	
print current shell using process id	
print current utc date in iso format with precision to seconds	
print days between date $a and $b	
print details for all files in the ./work directory tree with extension .sh that were modified less than 20 days ago	
"print difference between two strings ""$s"" and ""$r"""	
print difference in days between two dates	
print differences between files in directories folder1 and folder2 recursively, with unified context, ignoring changes in the amount of white space	
"print differences between the sorted content of file $1 and file $2, executing 'diff' with options from ""${@:3}"" array slice"	
print directories in the the current directory as a list with no report information	
"print disk of mount point ""/pa/th"""	
print disk usage of files or folders in current directory	
"print display of ""orschiro"" user"	
"print each "".txt"" file in the current directory"	
"print each character in ""hello"" as a hexadecimal value"	
"print each character in ""orange"" on a new line"	
"print each character of ""abcdefg"" on a line"	
"print each column in ""file"" with ""-"" character removed"	
"print each line in ""f1"" and ""f2"" separated by a space and ""f3"" separated by a tab"	
"print each line in ""file"", ""file2"", and ""file3"" and replace any tabs with spaces"	
"print each line in ""file1"" and file2"" separated by a space"	
"print each line in ""file1"" and file2"" separated by tabs and ""file3"" separated by a space"	
"print each line in ""file1"" whose first word does not exist as the first word of any line in ""file2"""	
"print each line in ""file1.txt"" that is not found in ""file2.txt"""	
"print each line in ""set1"" and ""set2"" that does not exist in the other"	
"print each line in parallel in files ""tmp/sample-xxx.tim"" and ""tmp/sample-xxx.log"""	
"print each line that is found only once in ""file1"" and ""file2"" combined"	
print each logged in user's full name	
print each logged in user's username and full name	
"print each unique entry in ""ip_addresses"" followed by a count"	
"print each unique line that is duplicated in files ""file1"" and ""file2"" combined"	
"print either ""one"" or ""two"" randomly three times"	
print entire virtual memory usage of the current user	
print enumerated sorted list of all group names known to the system.	
"print environment variable ""ifs"" and its value"	
"print epoch seconds for given time string ""oct 21 1973"""	
"print equal lines in compressed files ""number.txt"" and ""xxx.txt"""	
print every 16 bytes of standard input in groups of two followed by a space	
print every 20 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-20	
print every 3 characters of standard input as a line	
"print every 4th line from 10 lines of ""y"" with line numbers"	
print every file's type, name, and inode	
print every found file like '*.cfg' under '/path/to/files/' directory followed by its content, and wait 2 seconds after each printed file	
"print every three lines of ""file"" as a comma separated line"	
"print every two lines in ""file"" on a single line separated by a space"	
"print every two lines in ""num.txt"" on a single line separated by a space"	
print extended file information for regular files found under the home directory whose names start with my	
print file extension assuming there is only one dot in the file name.	
"print file information of command ""bash"""	
"print file information of command ""passwd"""	
"print file information of command ""studio"""	
"print file information of the executable file of command ""g++"""	
"print file information of the executable file of command ""gcc"""	
print file name without extension assuming there is only one dot in the file name.	
print file name without the last two extensions assuming the file name doesn't contain any other dots.	
print file names of all files ending with '*.csv' in  '/home/abc/files/' directory	
print file size and user name with color support for each file in the current directory tree	
print file size with the file name	
print file system disk space usage	
print file system disk space usage and grand total for the root file system with sizes in powers of 1000	
print file system disk space usage in 1 kib blocks of the current directory's file system	
print file system disk space usage in human readable format of the root filesystem	
print file system disk space usage in posix and human readable format, format as a table	
print file system disk space usage of the current directory's file system	
print file system disk space usage with a grand total	
print file system disk space usage with sizes in powers of 1000	
"print file type information of the ""java"" executable"	
"print file type of command ""gcc"""	
"print file type of the command ""c++"""	
"print file type of the executable file of command ""file"""	
"print file type of the executable file of command ""foo"""	
"print file type of the executable file of command ""python"""	
print files created/modified in the last day	
print first 11 characters from $line, print a tab, print the md5 sum of the file specified by the 13th and onward characters from $line and print a null character at end without a trailing new line	
print first column of every line in every *.txt separated by a space	
print first field from semicolon-seprated line $string.	
print first field from semicolon-seprated line <line>.	
print first word of lines unique for 'file1' file	
print flow of random data, showing all non-printing characters	
"print fourth column of data from text file ""file"" where columns separated by one or more whitespace."	
print fourth column of data from text file text.txt where columns separated by one or more whitespaces.	
print fourth column of space-separated data from text file text.txt.	
print full date of yesterday	
"print full path of command ""c++"""	
"print full path of command ""gradle"""	
"print full path of command ""programname"""	
"print full path of command ""python"""	
"print full path of command ""python2.7"""	
print full path of relative filename	
print git branch currently checked out in a working directory.	
print groups of all users logged in	
print help on 'cat' command usage	
print history with the first field removed	
"print host name followed by "":"" and the contents of ""/sys/block/sda/size"""	
print host name without a newline	
print how many files are inside each directory under the current one	
print info about all mounted file systems	
print info about all mounted file systems, and grand total statistic about available and used space	
print info about thread number of process with pid 1	
print information about all users who are logged in	
print information of the process running the current script as the current user	
print information of the root mount point	
print inode, permissions, size, and modification date of all files in the current directory tree as a list with an extra column prepended	
"print input ""your, text, here"" formatted to fit 70 characters per line breaking at spaces"	
print ip address of the current host	
print ip addresses of the current host	
print ip addresses of the host name	
print joined strings from 'file', using space symbol as separator.	
print last 10 commands in history	
print last 10 commands in history with the first 7 characters removed	
print last day of april, 2009	
print last four bytes of string '0a.00.1 usb controller some text device 4dc9'	
"print line number ""${linenum}"" in file ""$filename"""	
print line number of each line in /etc/passwd file, where current user name is found	
print line, word and byte count for each file recursively and also show the total counts	
print line, word and byte counts for each .php files in current directory tree and also show the total counts	
"print lines 10000 to 10010 from input ""seq 1 100000"""	
"print lines 15967 to 16224 in file ""dump.txt"""	
"print lines 16225 to 16482 in file ""file"""	
"print lines 2960 to 2966 from the output of ""history"""	
"print lines 347340107 through 347340206 in ""filename"""	
print lines containing string text from all log files in the current directory.	
print lines from last match of ^statistics until end of file	
"print lines in ""file1"" that exist in ""file2"""	
"print lines in ""file1.txt"" that do not exist in ""file2.txt"""	
"print lines in ""foo.txt"" that are found only once"	
print lines in file 'file' that do not match any word specified in file 'blacklist' (one word per line)	
print lines in file 'filename' that do not match the regex 'pattern'	
"print lines in the sorted contents of ""a.txt"" that are not in the sorted contents of ""b.txt"""	
"print lines in the sorted contents of ""file1"" that are not in the sorted contents of ""file2"""	
"print lines in the sorted contents of ""file2"" that are not in the sorted contents of ""file1"""	
"print lines in the sorted contents of ""second.txt"" that are not in the sorted contents of ""first.txt"""	
print lines of 'file' reverted order, and reverted characterwise	
print lines that only unique ones in 'set1' and 'set2' files	
"print lines unique and common to sorted files ""file1"" and  ""file2"""	
print linker search path using gcc formatted on new lines	
print linker search path using ld formatted on new lines	
print linux group names on multiple lines instead of single line output	
print list of all alias commands	
print list of all user names who are logged in	
print list of bash command aliases.	
"print list of disk and mountpoint of disks matching ""/dev/sd*"""	
"print list of disk and mountpoint of disks matching ""/dev/sd*"" into ""mount_point"" as a background task"	
print list of file systems currently mounted.	
print list of files that are only in directory /dir1 and not their sub directories and only their file names.	
print list of missing files in a subversion repository.	
print local files without descending non-local directories	
print local srv record of domain '_etcd-client._tcp.'	
"print login information of all users except the first two and replace all instances of "" "" with "", """	
print login name and full name of all users currently logged in	
"print login name and full name of all users currently logged in and delete instances of ""of group.*"""	
print ls output for all non-empty files under under current directory	
print mount point of the file system containing $filename.	
print mount point of the file system containing $path.	
"print multiline text ""onboot=\""yes\""\nipaddr=10.42.84.168\nprefix=24"" to the terminal, replacing '\n' with newline symbol, and append that text to file /etc/sysconfig/network-scripts/ifcfg-eth4 as root user."	
print mv commands to rename all files under current directory by formatting the filenames with the sed scripts '\''s/^([^-]*)-\s*([^\.]*)/\l\1\e-\2/'\'', '\''s/ /_/g'\'' and '\''s/_-/-/g'\''	
print name of the block device containing the file system containing $path.	
print name of the file system containing $path.	
print name of user with current euid.	
"print new line separated numbers from ""001"" to ""100"""	
print newline, word and byte count for all .h, .c, .cpp, .php and .cc files under current directory tree and also show the total counts	
print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts	
print nothing because 'myvar' string doesn`t match with '/[^/]+:' pattern	
print nothing because b.txt is compared with itself.	
print ns record for domain 'domain.' from 'some.other.ip.address' nameserver	
print ns record for domain 'domain.' from 8.8.8.8 nameserver	
print number of bytes in $file.	
print number of jobs	
print number of lines that equal in files '/home/xyz/a.csv1' and '/home/abc/tempfile'	
print numbered list of all third-level files under the current directory	
print numbered list of all top-level files in the current directory, with name containing 'android'	
"print numbers 1 through 10 separated by "":"""	
print numbers from 1 to 10 using up to 4 processes	
print numbers from 1 to 10 with 2 values per line	
print numbers from 1 to 10 with padded leading zeros	
print numbers from 1 to 100	
print numbers from 1 to 30 with 0 padding to a width of 2	
print numbers from 1 to 30 with a leading 0	
print numbers from 1 to 30 with equalized 0 padding	
print numbers from 1 to 5 without separating spaces	
print numbers from 1 to 5 without separating spaces and without a newline	
"print numbers from 1 to the number in variable ""$1"""	
print numerically sorted list of unique strings from 'ip_addresses' file, with number of occurrences of each string.	
"print on the standard output the names of all directories that reside in the current directory tree and contain file ""yourprogram"""	
print onlt last slash-separated field from $path value	
"print only alphanumeric values from ""/dev/urandom"""	
print only common file names in sorted listings of directory 'dir1' and 'dir2'	
print only common strings in content of files 'file1.sorted' and 'file2.sorted'	
print only common strings in sorted content of files 'file1' and 'file2'	
"print only digits in variable ""$name"""	
print only first line of 'file' content, formatted as 29-symbol wide column	
print only first line of 'file' content, formatted as 29-symbol wide column, regarding space symbol as a word separator	
print only group names from /etc/group.	
print only lines from 'file1.txt' that not present in 'file2.txt' and beginning with 'q'	
print only name and login columns of the currently logged in users	
"print only printable characters from ""/dev/urandom"""	
print only second from the end field from slash-separated string in file 'datafile'	
print only strings from file 'file2' that not found in 'file1'	
"print only the line ""foo///"" given two empty directories foo and bar"	
"print only the number of lines in file ""$f"""	
print only unique lines in files 'set1' and 'set2'	
print only unique lines of 'file_name' file	
print out all .pdf files from the current directory tree as plain text on the standard output	
print out all files with their paths that have identical content and the same filename in different cases	
print out every command that is executed in the script	
print out ln commands for each file in /home/folder1/*.txt that can be run to create symlinks appending '_custom_text.txt' in their names	
print out the contents of all *.txt files in the home directory	
"print out the contents of all files in the current directory tree that contain ""spaces"" in their names"	
"print out the full path name of ""mypathname"" with dots resolved"	
print out the names and types of all files in the current directory tree	
print out the names of all directories in mydir recursively	
print out the names of broken symlinks in the current directory	
"print output of ""qstat"" with full job names and format as a table"	
"print output of 'script -c ""./a"" /dev/null' to standard output and ""output.txt"""	
"print output of 'script -q /dev/null ./a' to standard output and ""output.txt"""	
"print output of command ""stdbuf -o 0 ./a"" to standard output and ""output.txt"""	
print output of script 'trap.sh'	
"print package information the command ""ldconfig"" belongs to in rpm"	
"print pathname of a file that is connected to the standard output of the command ""yes"""	
print pathnames of all files in the current directory and below skipping directories named sccs and files in them	
print pathnames of all files in the current directory and below skipping files under sccs directories	
print paths to all subdirectories inside of a directory	
print percentage of the space used on the $filesystem.	
print percents of the space used on the file system containing path to the current working directory.	
print permissions of every directory in the current directory tree	
print pid and user of processes running ssh or sshd and replace sequential spaces with a single space	
print position number of day '9' in fourth line of calendar output for september, 2009.	
print process tree, adjusting output width with a screen size.	
print readline bindings that use key code '\\e\\c-k'	
print received input to the terminal	
"print relative path of device of disk with uuid ""b928a862-6b3c-45a8-82fe-8f1db2863be3"""	
print reverse lookup for adress 127.0.0.1	
print reverse lookup for ip address 72.51.34.34	
print revesed second from the end dot-bounded field in $i value	
print right aligned numbers from 11 to 24	
print second field from semicolon-seprated line $string.	
print second field from semicolon-seprated line <line>.	
print second section of data coming from stdin where sections are separated by one or more whitespace.	
print second section of line <line> where sections are separated by one or more whitespace.	
print second section of space-separated data coming from stdin.	
"print second section of space-separated data from text file ""a""."	
print sed commands that would replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree	
"print shared lines in ""number.txt.gz"" and ""xxx.txt.gz"""	
"print shared object dependencies of command ""yourappname"""	
print short dns lookup for each domain name in a file 'list'	
print short txt record of domain o-o.myaddr.l.google.com from nameserver 8.8.8.8	
print short txt record of domain o-o.myaddr.l.google.com from nameserver ns1.google.com	
print sorted list of all group names known to the system.	
print sorted list of strings from 'ip_addresses' file, with number of occurrences of each string.	
print sorted list of unique users logged in followed by a total count	
print source directory of bash script	
print source of the file system containing $path.	
print source of the file system containing current working directory.	
"print space separated list of numbers from ""$start"" to ""$end"""	
print space separated numbers from 1 to 10	
print space separated numbers from 1 to 5	
"print specific lines in ""file-out"" that do not match ""file-reference"" to standard output"	
print standard input to standard output line by line, discarding any adjascent duplicate lines.	
"print string ""123"" once with '1' replaced by 'a' and second time replaced by 'b'"	
"print sub domains of ""mydomain.com"""	
print summary of files present only in dir1.	
print summary of new/missing files, and which files differ between /path/to/folder1 and /path/to/folder2, sorted alphabetically.	
print summary of new/missing files, and which files differ between dir1 and dir2.	
print summary of new/missing files, and which files differ between dir_one and dir_two, sorted alphabetically.	
"print summary of new/missing files, and which files differ between folder1 and folder2, excluding those matching pattern ""node_modules""."	
print summary of new/missing files, and which files differ between folder1 and folder2.	
print symlink resolved script file name	
print the $n'th line from file by replacing commas (',') with newlines	
print the /proc directory tree, ignoring the pid-process things	
print the 10 most used commands	
"print the 2nd white space separated fields in ""file.txt"" as a comma separated list"	
"print the 5th space separated fields in ""file"" as a comma separated list"	
print the 6th field (delimited by '/') from the paths specified by ~/bin/filesdvorak/.* files/directories	
"print the absolute path of ""$path"""	
print the absolute path of third-level files under the current directory tree and number the output	
"print the average round trip time of 5 pings to ""google.com"""	
"print the average round trip time of 5 pings to ""google.com"" from osx"	
"print the average time of 4 ping requests to ""www.stackoverflow.com"""	
print the base name of the current working directory	
print the base name via grep of the current working directory	
print the basename from a colon separated path 'a:b:c:d:e'	
print the boot time in standard date format	
print the byte count of all regular files found in the current directory tree	
print the calendar for february 1956	
print the character representations of 65 to 90	
print the characters in $b that match with any character in $a without printing any newline	
print the characters in $b that match with any character in $a without printing any whitespace in-between	
"print the column count of compressed file ""$file"""	
"print the commands that would execute ""myfile"" on all .ogv files from the current directory tree"	
"print the common third whitespace separated fields in ""file1"" and ""file2"""	
"print the compressed size, uncompressed size, compression ratio, and uncompressed filename of ""file.zip"""	
print the content of file	
print the content of the file 'file' deleting the last four lines	
"print the contents of ""$file"" starting from line 2"	
"print the contents of ""${spool_file}"" file to the console and append to ""${log_file}"" file"	
"print the contents of ""/tmp/nums"" as input to ""addnums"""	
"print the contents of ""file"" in reverse order"	
"print the contents of ""file"" with "" | "" appended to each line"	
"print the contents of ""filename"""	
"print the contents of ""foo.txt"" starting with line 2"	
"print the contents of ""little_commas.txt"""	
"print the contents of ""my_script.py"""	
"print the contents of ""n"""	
"print the contents of ""numbers.txt"""	
"print the contents of ""order.txt"""	
"print the contents of ""somefile"" as input to ""splitter 16224-16482"""	
"print the contents of ""xx.sh"""	
"print the contents of ""~/.ssh/config"""	
"print the contents of all "".py"" on the file system as input to ""tqdm --unit loc --unit_scale true | wc -l"""	
print the contents of all file* files under current directory	
print the contents of all file* files under current directory with white space safety in file names	
print the cp commands that would be required to copy all *.data files under /source_path to /target_path by appending the parent directory names in the source paths to the beginning of each of the target file names	
"print the current date followed by "": $line"""	
print the current date followed by ' doing stuff'	
print the current date in '%h:%m:%s' format followed by the string ': done waiting. both jobs terminated on their own or via timeout; resuming script'	
"print the current default full path of the ""java"" executable"	
print the current directory	
print the current directory name without full path	
print the current directory tree	
print the current directory tree with file permissions	
print the current directory tree with file sizes	
print the current directory tree with the date of last modification for each file or directory	
print the current shell	
"print the current user name and inode number of ""/home"""	
print the current user name associated with standard input	
"print the current user's mail file in ""/var/spool/mail"""	
print the current user's real name	
"print the current working directory and the base name of ""$1"""	
"print the current working directory prepended by ""pwd: """	
print the current working directory with resolved symbolic links	
print the current working directory without a trailing newline	
print the date followed by the host name	
"print the date formatted with ""%a %x %x"" followed by the host name"	
"print the date, then prompt ""hit enter or wait ten seconds"" with a 10 second timeout, then the date again"	
print the day 1 day ago	
print the day at 1 day ago in 2 months from now	
"print the difference between line 2 and 3 in file ""$f"""	
print the directories that are taken by the glob pattern $srvdir*	
print the directory name of the full real path to the current script	
print the directory name of the physical current working directory	
"print the directory name of the real full path of ""relative/path/to/file"" where each symbolic link component must exist"	
print the directory of the full path to the current script	
print the drive and mount point of the last mounted drive	
print the empty directories and files under current directory	
print the empty files/directories among empty1, empty2 and not_empty	
print the entire saved command history	
"print the file 'text1;text2;text3' replacing each space("" "") with a newline"	
"print the file content of command ""[whatever]"""	
"print the file content of command ""f"""	
print the file names along with their sizes under current directory tree	
print the file paths and their sizes for all files under full_path_to_your_directory	
print the file size and directory size in human readable format of the current directory tree 2 levels deep	
print the file sizes along with their paths for all *.txt (case insensitive) files/directories under current directory tree	
print the file sizes for all files under current directory	
"print the file system ""file/goes/here"" is on"	
"print the file system disk space usage for ""/dev/disk0s2"" if exists"	
"print the file type of the full path of ""rename"""	
print the filenames taken by the glob pattern * with null character as the delimiter	
print the files in the current directory as a list of comma separated values	
print the files in the current directory as a list of semicolon separated values	
print the files to which symbolic links in the current directory point	
print the files under current directory twice per line	
print the first 10 files or directories found in the /tmp directory tree by `find'	
print the first 10 files or directories found in the current directory tree by `find'	
print the first 2 lines of tree's help message by redirecting it from standard error to standard output	
"print the first 20 of the most changed "".cs"" files in git"	
"print the first 24 alphanumeric characters from ""/dev/urandom"", determining c locale for all categories"	
"print the first 32 hexadecimal characters from ""/dev/urandom"""	
"print the first 32 hexadecimal characters from ""/dev/urandom"", determining c locale for character handling functions"	
"print the first 5 characters followed by the next 5 characters on a new line for each line in ""input_file"" and split the result into files of at most 2000000 lines each with a filename prefix ""out-prefix-"""	
"print the first 5 decompressed lines of compressed file ""$line"""	
"print the first line and lines with ""f"" as the third "","" separated field in ""input"" and format the result as a "","" delimited table"	
"print the first line of ""filename"" as a hex dump of characters"	
"print the first line of ""seq 1 10000"""	
print the first line of each file under the home directory	
print the first line of every file matching pattern 'file?b' in the xargstest/ directory tree	
"print the first line of output after alphabetically sorting the file ""set"""	
"print the first two bytes of ""my_driver"" in octal"	
"print the first word followed by the rest of the line formatted to fit in 100 characters for every line in ""input"""	
"print the full name of ""$user"""	
print the full name of the current user	
"print the full path directory name of each ""file.ext"" found under the current directory"	
print the full path of a 'file.txt' file in the current folder.	
print the full path of a file under the current working directory with inode number specified on standard input	
"print the full path of command ""cc"""	
"print the full path of command ""gcc"""	
"print the full path of command ""rails"""	
"print the full path of executable ""lshw"""	
print the full path prefix for all files in the current directory tree as a list	
"print the full real path of ""/dev/disk/by-uuid/$1"" followed by ""is mounted"""	
"print the full real path of ""/dev/disk/by-uuid/$1"" followed by ""is not mounted"""	
"print the gcc version installed on ""machine.example.com"" using identity file ""identity_file"" and suppressing the known hosts check and warnings"	
print the git log in a tabular form	
print the given file name's extensions.	
"print the grand total disk usage of all files listed in ""files.txt"""	
print the grand total file system disk space usage with block sizes in units of tib	
print the help message for tree	
"print the help message of command ""split"""	
"print the hexadecimal bytes and printable characters of ""hello world"""	
"print the home directory of ""$username"""	
"print the home folder of ""$user_name"""	
print the host name	
"print the icmp sequence number and ping time of each request to ""127.0.0.1"""	
"print the input ""hello world"" followed by a swap of the first two awk fields"	
"print the input ""hello world"" to the console followed by a swap of the first two awk fields"	
print the ip address of your ssh session	
print the ip addresses for the current host name	
print the ip addresses of the host name	
"print the kernel configuration options found in ""/proc/config.gz"""	
print the largest 20 files under current directory	
print the last 10 commands in history	
"print the last 10 lines of ""great-big-file.log"""	
print the last 10 lines of '/var/log/syslog', printing out any additional data appended to the file	
print the last 10 lines of the file '/var/log/syslog'	
"print the last 1000 lines of all files matching ""/var/spool/cron/*"""	
print the last command in history	
print the last file extension from standard input	
"print the last line of ""$file1"" to the console and append to ""$file2"""	
"print the last line of the alphabetically sorted lines in file ""set"""	
print the last mounted drive	
"print the last space separated word from ""a b c d e"""	
"print the last space separated word from ""your string here"""	
"print the last white space separated field of every line in ""file.txt"" as a "", "" separated list"	
print the last word in a.txt	
print the line containing terminate and everything after in 'file'	
"print the line number of each matching ""<phrase>"" in ""<filename>"""	
print the line with most consecutive repeats prefixed with its count from standard input	
"print the lines in ""table.txt"" grouped by the first field"	
"print the lines of file ""strings"" not specified in file ""index"""	
"print the lines of file ""strings"" specified in file ""index"""	
print the list of .txt files under and below the current directory	
print the list of 1st level subdirectories in /fss/fin	
print the list of all directories in the /myfiles directory tree	
print the list of all directories under the current directory and below	
print the list of all files except files named bbb	
print the list of all files in the current directory except for svn, cvs, git, and binary files	
print the list of all files under the current directory and below	
"print the list of all regular files from the current directory tree that contain ""confirm"", case insensitive"	
print the list of all regular files in the current directory and below	
"print the list of all regular files on the system using ""echo"""	
print the list of all regular files residing in the current directory and below	
print the list of all subdirectories of the current directory	
print the list of directories residing in the current directory tree	
print the list of directories that are present in the /mnt/raid directory tree	
print the list of files and directories of the /etc directory	
print the list of files and directories of the current directory	
"print the list of files and directories of the current directory including ""."""	
print the list of files changed within the last minute	
"print the list of files from the ""/zu/durchsuchender/ordner"" directory tree whose names begin with ""beispieldatei"" and which contain string ""beispielinhalt"""	
print the list of files in directory /tmp/a1 recursively	
"print the list of files in the current directory tree excluding those whose paths contain ""exclude3"" or ""exclude4"""	
print the list of files in the current directory tree ignoring .svn, .git, and other hidden directories	
print the list of files in the current directory tree skipping git files	
print the list of files in the current directory tree skipping svn files	
"print the list of files in the current directory tree with ""xx"" preceding and following each filename"	
"print the list of files in the home directory tree whose names begin with ""foto"""	
print the list of files modified within a fortnight ago removing the leading ./ from the file names	
print the list of non-hidden directories in the current directory	
print the list of regular files from the current directory that were last modified on november, 22	
print the list of regular files from the current directory tree that were modified less than 2 days ago	
print the list of regular files in the current directory and all subdirectories	
print the list of the current directory's subdirectories	
print the list of the subdirectories of /path/to/dir	
print the list of the subdirectories of the current directory	
print the login time and user of the first person who logged in	
"print the longest line in ""filename"""	
"print the md5 message digest of ""/path/to/destination/file"""	
"print the minimum transmission time of 10 ping requests to ""google.com"" from cygwin"	
print the most recently modified file	
"print the most repeated line in ""list2.txt"" that exists in ""list1.txt"" prefixed by the number of occurrences"	
print the mount point of the last mounted drive	
"print the name of ""file1"" if this file is newer than ""file2"""	
print the names and sizes of all regular files from the current directory tree	
"print the names and sizes of regular files residing in the ""dir"" directory tree"	
"print the names and sizes of regular files residing in the ""tmp"" directory tree"	
print the names and sizes of regular files residing in the current directory tree	
print the names of all files and directories found in the current directory tree	
print the names of all files and directories in the current directory tree	
print the names of all files from the /tmp/dir1 directory tree	
print the names of all files in /some/directory and its subdirectories recursively whose mime type is video	
print the names of all files in or below the current directory, with all of the file permission bits s_isuid, s_isgid, and s_iwoth set	
print the names of all files in the home directory and its subdirectories recursively whose mime type is video	
print the names of all hidden regular files from the current directory	
print the names of all of the unstripped binaries in the /usr/local directory tree. builtin tests avoid running file on files that are not regular files or are not executable	
print the names of all regular files in the current directory tree	
"print the names of all the files from directory tree ~/some/directory whose names end in ""rb"""	
"print the names of any differing files in directories ""dir1/"" and ""dir2/"""	
print the names of the directories from the paths expanded by the glob pattern /path/to/directory/*	
"print the names of the subdirectories of /usr/local/svn/repos/ prepending ""/usr/local/backup"" to them"	
print the newest *.txt file under current directory with timestamp and path	
print the number of 'processors' (both physical and virtual/hypethereading cores) less 1.	
print the number of entries (files, directories, symlinks, etc.) in the subdirectories of the current directory, stopping search at any device mount points.	
print the number of lines for each *.txt file from the $dir directory tree	
print the number of lines in file.txt.	
"print the number of packets sent, received, and the percentage lost for each ping request to ""google.com"""	
print the number of regular files found in the current directory tree	
print the output of history without line numbers	
"print the path composed of the current working directory and the directory containing ""$0"""	
print the path names of all .png files in the /home/kibab directory tree	
print the path names of all files and directories in the current directory tree	
"print the path names of all regular .rb files prefixing them with string ""hello, """	
print the path of all the network mounts	
print the path to all *.so files under current directory and search for mysymbol in their symbol tables	
print the path to the pipe created for process substitution	
print the pathnames of all files from the /tmp/dir1 directory tree	
"print the paths of all files in the current directory tree that contain ""abc"" replacing ""abc"" with ""xyz"""	
print the paths of the directories from the paths expanded by the glob pattern /path/to/directory/*	
"print the percentage of packets lost of the 5 packets sent to ""$host"""	
print the physical current working directory	
"print the pids of the current user's instances of ""firefox"""	
"print the ping statistics of 4 requests to ""www.google.com"""	
"print the ping time number only of a single request to ""8.8.8.8"""	
"print the ping time of a single request to ""8.8.8.8"""	
"print the real path of ""$f"" where each symbolic link component must exist"	
"print the second line of output of ""ls -l"""	
print the second space separated fields from standard input	
"print the set difference of ""command_which_generate_n"" and ""command_which_generate_m"""	
print the size for every *.ogg file found under the home directory	
print the sizes and file names of all files in the current directory tree that are between 700k and 1000k	
print the sizes and names of all txt files from the current directory tree	
print the sizes of all files from the current directory tree	
print the sorted and unique parent directory paths appended with : of all the files that are executable by owner under ~/code directory without descending into hidden directories	
print the sorted uniqe list of folders in compressed archive nginx-1.0.0.tar.gz	
print the sorted unique column of usernames of users who are currently logged in	
print the sorted unique column of usernames of users who are currently logged in without the header	
"print the terminal file of the users who are logged in with ""admin"" in their name"	
print the text file paths that match 'needle text' in their contents under 'my_folder' recursively	
print the time of last boot	
"print the time to ping ""8.8.8.8"" followed by a time stamp if the ping is greater than 50"	
"print the time to ping ""8.8.8.8"" followed by a time stamp if the ping is greater than 58"	
print the top 10 commands with their use count	
"print the total disk usage in bytes of all files listed in ""files.txt"""	
print the type of the current shell	
print the uid of the owner, gid of the group, the permission bits and the path into /tmp/dir1.txt for all files/directories under /path/to/dir1	
print the unique lines from standard input preserving the order they appear	
print the user name of the current user	
print the user name of the user running sudo	
"print three lines of ""some line "" followed by a random number"	
"print time required to get line number 50000000 from text file ""myfile.ascii""."	
print timestamp as hh:mm:ss	
print top 10 largest files and directories	
print total size of file systems in kilobytes.	
print true directory name of the current directory	
print txt record with server`s hostname from nameserver 'server'	
print type of the file system containing path $dir.	
"print unique lines in ""file1"" compared to ""file2"" in the order they appear"	
"print unique lines in ""file_a"" and ""file_b"""	
"print unique lines in ""set1"" and ""set2"" when compared to each other and remove any tabs"	
"print unique lines in sorted ""file1"" compared to sorted file ""file2"""	
"print unique lines in sorted file ""a"" when compared to sorted files ""b"", ""c"", and ""d"""	
"print unique lines in sorted file ""a.txt"" compared to sorted file ""b.txt"""	
"print unique lines of ""a"" and ""b"""	
"print unique lines of ""second-file-sorted.txt"" compared to ""first-file-sorted.txt"""	
"print unique lines of sorted ""file 1"" compared with sorted ""file 2"""	
"print unique lines of sorted file ""a"" and ""b"" and remove leading tabs"	
"print unique lines of sorted file ""a"" compared with sorted file ""b"""	
"print unique lines of sorted file ""a.txt"" compared to sorted file ""b.txt"""	
"print unique lines of sorted file ""b"" compared with sorted file ""a"""	
"print unique lines of sorted file ""f1"" compared to sorted file ""f2"""	
"print unique lines of sorted file ""file1"" when compared with the list of first space separated fields of all sorted strings of file ""file2"""	
"print unique lines of sorted file ""second.txt"" compared to sorted file ""first.txt"""	
print unique list of who is logged in and the time of login formatted in columns	
"print url ""http://www.blabla.bla/forum-detail/?ft=72260&fid=34&&pgr="" followed by a number ranging from 1 to 786"	
print user and group information of all users logged in	
print value of the variable $proj_path of the kenneth system user environment	
"print variable ""$module"" in formatted columns"	
"print variable ""$module"" in formatted columns with at most 80 characters per line"	
"print variable ""$module"" in formatted rows"	
"print variable ""$opt"" with double quotes deleted"	
"print variable ""$optarg"" ""$opt"" times"	
"print virtual memory usage of all processes owned by ""jbos[s]"""	
print what year it was 222 days ago	
"print whether ""$file"" and ""${file/${dir1}/${dir2}}"" differ"	
"print whether the sorted contents of ""set1"" and ""set2"" differ"	
"print whether the unique contents of ""set1"" and ""set2"" differ"	
"print which files differ between ""dir1/"" and ""dir2/"""	
"print which files differ between ""folder1"" and ""folder2"" treating all files as text"	
print which files differ between dir1 and dir2, treating absent files as empty	
"print which files differ in ""/tmp/dir1"" and ""/tmp/dir2"" recursively"	
"print which files differ in ""dir1"" and ""dir2"" recursively"	
"print which files differ in ""dir_one"" and ""dir_two"" recursively and sort the output"	
"print which files differ in ""folder1"" and ""folder2"" excluding ""node_modules"" recursively, output in two columns, and paginate the output"	
"print which files differ in ""path1/"" and ""path2/"" recursively excluding any files that match any pattern in ""file1"""	
print working directory separated by newlines instead of forward slashes	
print yesterday's date	
print yesterday's date as yyy:mm:dd	
"print yesterday's date information in ""%a %d/%m/%y"" format"	
print your/dir if it's an empty directory	
print your/dir if it's empty	
"printf "" %02d"" $(seq 1 30)"	<MISSING>
"printf """" | ssh-keygen -b 1024 -f ball -t dsa"	<MISSING>
"printf ""a\0b"" | od -tx1"	<MISSING>
"printf ""operator: `finger ${user} | grep name: | cut -f3 -d:` \n"""	<MISSING>
printf $(pwd) | pbcopy	<MISSING>
"printf %100s |tr "" "" ""="""	<MISSING>
printf '%-10s%-10s%-10s%s\n' $(yes x | head -n 10)	<MISSING>
printf '%0.s-' $(seq 1 $variable)	<MISSING>
"printf '%s' ""$pass"" | md5"	<MISSING>
printf 'foobar\n\377' | tr -d '\0-\176' | od -t c	<MISSING>
printf 'password' | md5	<MISSING>
printf ... | fold -w 80	<MISSING>
printf aa | od -t x1	<MISSING>
"prints ""$newfile"" to the terminal and file '/etc/timezone' as a root user."	
prints $m latest modified files within the $d folder, using $f format for printing timestamp.	
prints +-10 lines around $linenum in filename	
prints a line 19 lines from the line containing pattern	
prints a number stored among text in $filename	
prints a process tree for each process of user 'username'.	
prints a random line from $file	
prints a random line from file	
prints a random n-digit number with leading zeroes	
prints a random number between 1 and 10	
prints a random number between 2000 and 65000	
prints absolute file path of a file	
prints absolute file paths for files in current directory	
prints all business days in a current month.	
prints all child processes of a process with id 20238, separated with comma.	
prints all child processes of a process with id 20238.	
prints all ns servers of domain google.com.	
prints all saturday days of a current month.	
prints brief information about available package with word 'zsh'.	
prints calendar for a current month without first day of a week.	
prints calendar for a current month, replacing current data with asterisk.	
prints calendar for a current month.	
prints calendar of $month, $year, and redirects all output to the awk script 'cal.awk', with predefined variable 'day=$day'.	
prints calendar of april of 2012, and redirects output to 't' file and 'more' pager tool.	
prints calendar of february, 1900.	
prints calendars of july, 2009 and july, 2010 side-by-side.	
prints current directory name	
prints current month calendar, without highlighting of a current date.	
prints date of first tuesday in january, 2015	
prints dates of $m month in $y year, preceded by month number and slash like ' 10/1'.	
prints day of first tuesday in a month.	
prints days since epoch	
prints directory where the executing script ($0) is located.	
prints elapsed time of command execution.	
prints file descriptor of executed built-in 'true'.	
prints file.txt without the last n bytes	
prints first found folder that contains 'ssh' file and has 'bin' in path.	
prints first line of $bigfile	
prints folder path where $mystring file is located.	
prints folder where current script is located	
prints full path of a 'cat.wav' file in a current folder.	
prints full path of given file	
prints full path to files in a current folder.	
prints full path to files with dot in name in a current folder.	
prints full process tree with id number of each process.	
prints git log message with a custom time format string	
prints groups list that current user belongs to.	
prints groups list that user 'el' belongs to.	
prints help on 'cp' utility.	
prints help on 'yum' utility.	
prints hierarchical process tree.	
prints information about active network interfaces in system.	
prints information about user $euids currently on machine and its processes, without printing header.	
prints kb size of all top-level files and folders in a current folder in descending order in human readable format.	
prints kb size of all top-level files and folders in a current folder in descending order.	
prints last modified file in a current folder with modification time.	
prints last modified file in a current folder.	
prints last part of a logfile since timestamp 423	
prints latest modified file in a directory	
prints line count of each file within current directory.	
prints lines count in each *.c file of a current folder and total count.	
prints lines count of each *.php file in a current folder and subfolders, and prints total count.	
prints list of all libraries linked with binaries in '/bin/' and '/usr/bin/', with number of linkages for each library.	
prints list of folders containing '.git', searching recursively from a current folder.	
prints list of processes in system ascending by memory usage.	
prints list of top-level subfolders in a current folder, sorted by number of contained files.	
prints list of user 'myuser' groups in a format: 'groups: [comma-separated groups list]'.	
prints listing of a root folder including hidden files, and saves output to 'output.file'.	
prints local machine's lan ip address	
prints logged in users in sorted order.	
"prints long listing of ""$dir/$file"" file."	
prints long listing of ${0} file.	
prints long listing of a last modified file in a current folder.	
prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.	
prints long listing of content in the current folder with c-style escapes for nongraphic characters	
"prints long listing of directories ""./my dir"" and ""./anotherdir"" sorted from oldest to newest, with appended indicators."	
prints long listing of directories '/tmp', '/tnt' themselves bordered with '<--' and '--->'.	
prints long listing of directories '/tmp', '/tnt' themselves.	
prints long listing of directory $var sorted from oldest to newest, with appended indicators.	
prints long listing of file 'file.ext'.	
prints long listing of the current directory and top-level directories within, sorted from oldest to newest, with appended indicators.	
prints long listing of the current directory, sorted from oldest to newest, with appended indicators.	
prints long listing of top ten most memory using processes in a system.	
prints long recursive listing of all content of a current folder, saving output to 'output.file'.	
prints long recursive listing of all content of a root folder, appending output to 'output.file'.	
prints long recursive listing of all content of a root folder, saving output to 'output.file'.	
prints message info about filename and location of the current script	
prints name of a current shell binary file.	
prints name of temporary file but doesn`t create nothing.	
prints names of all configured software repositories.	
prints newline, word, and byte count for each *.py in a current folder.	
prints number of days in a current month.	
"prints number of files with extension ""${extension}"" in the ""${searchpath}"" directory."	
prints only first ten characters of each string of file $file.	
prints only unique lines of './script.sh' output.	
prints only unique lines of './yourscript.ksh' output.	
prints only unique strings of those stored in variables $commands and $aliases.	
prints out all the logged-in users along with their group information.	
prints path location of $bash_source file.	
"prints path to folder that contains file ""/path/to/vm.vmwarevm/vm.vmx""."	
prints path to folder that contains target of the symbolic link ../../../../etc/passwd.	
prints path to the folder that contains target of symbolic link ../../../../etc/passwd.	
prints path to the target of symbolic link 'relative/path/to/file'	
prints process list with id numbers of a process having id 'pid'.	
prints process tree for each process owned by user 'username'.	
prints process tree for the current process with ascii line drawing characters.	
prints process tree of a bash process.	
prints process tree of a cron process with command arguments and process id number.	
prints process tree of a current process with id numbers and parent processes.	
prints process tree of a current process with parents processes and id numbers.	
prints process tree of a process having id $id with parent processes.	
prints process tree of a process having id $mypid, with command options and process id number.	
prints process tree of the current command process.	
prints process tree of the current process with parent processes.	
prints process tree of user 'user' processes.	
prints process tree with command line arguments and process id numbers.	
prints process tree with command line arguments of a process having id $pid.	
prints process tree, showing only strings with 'mdsimporte', and chopping output after ${width} characters.	
prints processes with 'mdsimporte' in name, cutting off  lines longer than screen width, exiting from less after end of output and saving printed lines on terminal after exit.	
prints random line from file $file.	
prints real path of the folder containing $0 file.	
prints reversed content of a file 'myfile.txt' with string numbers.	
prints running process that has id 'pid' with command line arguments.	
prints sequentially listing of a current folder and calendar of a current month.	
prints server name from soa record for domain yahoo.com	
prints shell option 'globstar' with indication of its status.	
prints sizes of all top-level folders in a current folder with human-readable format and descending order.	
prints sorted list of logged in users.	
"prints string ""0 1 * * * /root/test.sh"" to the terminal, and append it to file '/var/spool/cron/root'"	
prints strings with mac address configuration of each network interface in system.	
"prints strings with text ""texthere"" in all files recursively in a current folder."	
prints ten latest modified files within the current directory.	
"prints the absolute directory path of the current script preceded by the string ""dirname/readlink: """	
prints the day of last friday in a current month.	
prints the file path composed from the path where symlink target file is located, and name of the symbolic link itself.	
prints the first n bytes of file.txt	
prints the last non-empty line of a file	
prints the last occurrence of text between two tags	
prints the length and contents of the longest line in filename	
prints the length, line number, and contents of the longest line in myfile	
prints the maven project version	
prints the name of the current git branch	
prints the names of all files in the directory tree rooted in /usr/src whose name ends with ‘.c’ and that are larger than 100 kilobytes.	
prints the nth line of output from 'ls -1'	
prints the pid, pgid and command name of the process with the name 'test' every second	
prints the size in kb of the first 100 lines of a file	
prints top 10 commands used	
prints top 10 processes sorted by memory usage	
prints top ten of most memory using processes in system.	
prints top-ten biggest top-level folders within a 'var' folder.	
prints top-ten list of most used utilities from history.	
prints top-ten of most used utilities from history.	
prints total count all non-empty lines in files of a current folder.	
prints total count of lines of all *.php files in a current folder and subfolders.	
prints total count of lines of all *.py files in a current folder and subfolders.	
prints total count of lines of all files in a current folder and subfolders.	
prints total number of lines of all *.c files in a current folder and subfolders.	
prints total number of lines of all *.m and *.h files in a current folder and subfolders.	
prints total number of lines of all *.php files in a current folder and subfolders.	
prints user and group information for each logged in system user.	
prints week day of a 31 day in a current month.	
prints what day it was 222 days ago	
prints what month it was 222 days ago	<MISSING>
prints what year it was 222 days ago	
prints year-month-date format for given time	
prints yesterday's date information	
proc1 | tee >(proc2) ... >(procn-1) | procn	<MISSING>
"proc_load_average=$(w | head -1 | cut -d"" "" -f12 | cut -d"","" -f1-2 | tr ',' '.')"	<MISSING>
"proc_load_average=$(w | head -1 | cut -d"" "" -f13 | cut -d"","" -f1-2 | tr ',' '.')"	<MISSING>
"proc_load_average=`w | head -1 | cut -d"" "" -f13 | cut -d"","" -f1-2 | tr ',' '.'`"	<MISSING>
process all files matching pattern 'file*' and residing in the xargstest/ directory tree with script `myscript.sh'	
process all files matching pattern 'file??' and residing in the xargstest/ directory tree with script `myscript.sh'	
"process each file beginning with ""file"" in the current directory as an argument to ""bash script.sh"""	
processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.	
processes file as binary file, and searches for symbol by its octal value '\015'.	
progam.sh 2>&1 | tee -a log	<MISSING>
program1 | tee >(program2) >(program3)	<MISSING>
"prompt the user with a question ""this is the question i want to ask?"" and save ""y"" or ""n"" in variable ""reply"" in zsh"	
prompt user to type a list of cron jobs directly at the terminal, then use these replacing previously existing cron jobs.	
"prompt_command='echo ""$(date +""%y/%m/%d (%h:%m)"") $(history 1 |cut -c 7-)"" >> /tmp/trace'"	<MISSING>
"prompt_command='last=""`cat /tmp/x`""; exec >/dev/tty; exec > >(tee /tmp/x)'"	<MISSING>
provide a list of all the files edited today to pr, and pipe pr's output to the printer	
prune all the files in the current directory, only current directory (.) is the output	
ps  -ef | grep $$ | grep -v grep	<MISSING>
"ps -a -o pid | xargs -i pid readlink ""/proc/pid/exe"" | xargs -i file dirname ""file"""	<MISSING>
ps -aux |  awk '/^username/{print $2}' | xargs pstree	<MISSING>
ps -aux | grep ^username | awk '{print $2}' | xargs pstree	<MISSING>
ps -a|grep mysql	<MISSING>
ps -e -orss=,args= | sort -b -k1,1n | pr -tw$columns	<MISSING>
ps -e -orss=,args= | sort -nr | head	<MISSING>
ps -ef	<MISSING>
ps -ef | grep $0 | grep $(whoami)	<MISSING>
ps -ef | grep apache	<MISSING>
ps -ef | grep myprocessname | grep -v grep | awk '{print $2}' | xargs kill -9	<MISSING>
ps -ef | grep postgres	<MISSING>
ps -eo pcpu,pid,user,args | sort -r -k1 | less	<MISSING>
"ps -eo size,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf(""%13.2f mb "",hr) } { for ( x=4 ; x<=nf ; x++ ) { printf(""%s "",$x) } print """" }' | awk '{total=total + $1} end {print total}'"	<MISSING>
ps -fp <pid>	<MISSING>
ps -o pid --no-headers --ppid $parent_pid	<MISSING>
ps -o pid,bsdtime --no-header -p $(pgrep renoise) | awk 'function mmss2s(s) {if (s !~ /^[0-9][0-9][0-9]:[0-9][0-9]$/) return -1; return ((60*substr(s,1,2))+substr(s,4,2))} { if (mmss2s($2) > 100) { print $1; }}'	<MISSING>
ps -o pid= --ppid $ppid | xargs kill -9	<MISSING>
"ps -o uid,pid,cmd|awk '{if($1==""username"" && $3==""your_command"") print $2}'|xargs kill -15"	<MISSING>
ps -o user= -p $$ | awk '{print $1}'	<MISSING>
ps -p $$	<MISSING>
ps -p $$ | awk '$1 == pp {print $4}' pp=$$	<MISSING>
ps -p $$ | tail -1 | awk '{print $nf}'	<MISSING>
ps -p 24297 -o comm --no-heading	<MISSING>
ps -u $(whoami) --no-header -o vsz | dc -f - -e '[+z1<r]srz1<rp'	<MISSING>
ps -u $(whoami) | grep firefox | awk '{printf $1}'	<MISSING>
ps -u `whoami` | grep largecalculation	<MISSING>
ps aux	<MISSING>
"ps aux | awk '$11"" ""$12 == ""python csp_build.py"" { system(""kill "" $2) }'"	<MISSING>
"ps aux | awk '{print $11}' | grep -x -e ""/.*"" | xargs -i file dirname ""file"""	<MISSING>
"ps aux | awk '{print $11}' | grep -x -e ""/.*"" | xargs dirname"	<MISSING>
"ps aux | awk '{print $11}' | grep -x -e ""/.*"" | xargs dirname | head"	<MISSING>
ps aux | awk '{print $2, $4, $11}' | sort -k2rn | head -n 10	<MISSING>
"ps aux | awk '{print $4""\t""$11}' | sort | uniq -c | awk '{print $2"" ""$1"" ""$3}' | sort -nr"	<MISSING>
"ps aux | awk '{print $4""\t""$11}' | sort | uniq -c | awk '{print $2"" ""$1"" ""$3}' | sort -nr |grep mysql"	<MISSING>
ps aux | grep '[t]erminal'	<MISSING>
"ps aux | grep 'python csp_build.py' | head -1 | cut -d "" "" -f 2 | xargs kill"	<MISSING>
"ps aux | grep 'python csp_build.py' | head -1 | tr -s ' ' | cut -d "" "" -f2 | xargs kill"	<MISSING>
ps aux | grep -ie amarok | awk '{print $2}' | xargs kill -9	<MISSING>
ps aux | grep mysql | grep -v grep	<MISSING>
ps aux | grep postgres	<MISSING>
ps aux | less -s	<MISSING>
ps aux | tr -s '[:blank:]' | cut -d' ' -f3	<MISSING>
ps axu | grep jbos[s] | tr -s ' ' | cut -d' ' -f5	<MISSING>
"ps h -o pid,user -c ssh,sshd | tr -s "" """	<MISSING>
"ps x -o  ""%p %r %y %x %c """	<MISSING>
ps | egrep 11383 | tr -s ' ' | cut -d ' ' -f 4	<MISSING>
ps | grep `echo $$` | awk '{ print $4 }'	<MISSING>
ps | tail -n 4 | sed -e '2,$d;s/.* (.*)/\1/'	<MISSING>
"ps1=""`hostname`:\!>"""	<MISSING>
"ps1=""`whoami`@`hostname | sed 's/\..*//'`"""	<MISSING>
ps1=`hostname`':\w> '	<MISSING>
"ps4='+ $(date ""+%s.%n"")\011 '"	<MISSING>
"ps4='+$(date ""+%s:%n"") %n:%i> '"	<MISSING>
pstree	<MISSING>
pstree $(pgrep -fn bash)	<MISSING>
pstree $(pgrep cid$client_id) -ap | sed -n 's/.*rsync,\([0-9]*\).*/\1/p'	<MISSING>
pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | grep screen | wc -l	<MISSING>
pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | less	<MISSING>
pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | wc -l	<MISSING>
pstree -a	<MISSING>
"pstree -a ""$pid"""	<MISSING>
pstree -a -p 20238	<MISSING>
pstree -a -s $$	<MISSING>
pstree -a pid	<MISSING>
pstree -aap $(ps -ejh | awk -v v1=$mypid '$1==v1 {print $3}')	<MISSING>
pstree -ap `pidof cron`	<MISSING>
pstree -apl	<MISSING>
pstree -p	<MISSING>
pstree -p $$	<MISSING>
pstree -p -s pid	<MISSING>
pstree -p 1782 | sed 's/-/\n/g' | sed -n -e 's/.*(\([0-9]\+\)).*/\1/p'	<MISSING>
pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/'	<MISSING>
"pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr ""\n"" ,"	<MISSING>
pstree -p [pid ...]	<MISSING>
pstree -p `pgrep pppd`	<MISSING>
pstree -p user	<MISSING>
pstree -p | grep git	<MISSING>
pstree -s $$	<MISSING>
pstree -s $id	<MISSING>
pstree -sp $$	<MISSING>
pstree user	<MISSING>
pstree | cat	<MISSING>
pstree | grep mdsimporte | cut -c 1-${width}	<MISSING>
pstree | grep mdsimporte | less -sex	<MISSING>
pstree | grep php	<MISSING>
push the current directory path to the dirs stack	
push the directory containing the first existing command found in all arguments to the directory stack.	
pushd	<MISSING>
"pushd ""$home/pictures"""	<MISSING>
"pushd ""${line/#\~/$home}"";"	<MISSING>
pushd $(/bin/pwd)	<MISSING>
pushd $(dirname $0)	<MISSING>
pushd $(dirname `which $@`)	<MISSING>
pushd $pwd	<MISSING>
pushd %pathname%	<MISSING>
pushd -2	<MISSING>
pushd .	<MISSING>
pushd /home/`whoami`/pictures	<MISSING>
pushd `pwd`	<MISSING>
pushes current folder to the directory stack.	
pushes directory path that saved in $line variable to the dirs stack, expanding symbol '~', if present, as home folder path.	
pushes to the dirs stack directory path of the current script, or current directory path if executed from bash shell.	
put the absolute directory path to the current script to my_dir variable	
"put the output of tty into a variable, then searches the output of ""who"" for tty with ""/dev/"" removed and saves it to ""wholine"""	
puts the job 1 in the background.	
puts working directory into clipboard, stripping newlines	
pv data.gz | gunzip -c | ./complicated-perl-script-that-reads-stdin	<MISSING>
pv file1 | wc -l	<MISSING>
pwd -p	<MISSING>
pwd | awk -f / '{print $nf}'	<MISSING>
pwd | awk -f/ '{print $nf}'	<MISSING>
pwd | cut -b2- | tr '/' '\n'	<MISSING>
pwd | cut -f 1- -d\/ --output-delimiter=$'\n'	<MISSING>
"pwd | grep -o ""\w*-*$"""	<MISSING>
pwd | grep -o '[^/]*$'	<MISSING>
pwd | sed 's#.*/##'	<MISSING>
pwd | tr '/' '\n'	<MISSING>
pwd | tr -d '\n' | pbcopy	<MISSING>
pwd | xargs basename	<MISSING>
pwd | xsel -i	<MISSING>
python -u client.py | tee logfile	<MISSING>
"python hello.py `find . -name ""*.txt""`"	<MISSING>
"qstat -xml | tr '\n' ' ' | sed 's#<job_list[^>]*>#\n#g' \   | sed 's#<[^>]*>##g' | grep "" "" | column -t"	<MISSING>
query about which keys invoke the named function	
query nss entries for current hostname.	
query srv records for domain '_kerberos._udp.foo.com'	
"queue_pids=$(comm -23 <(echo ""$new_pids"" | sort -u) <(echo ""$limited_pids"" | sort -u) | grep -v '^$')"	<MISSING>
quietly searches pattern in a given strings. exits with zero status if any match is found, otherwise exits with non-zero.	
"r=""$(uname -r)"""	<MISSING>
raise an error for using uninitialized variables	
raise an error if there is a reference to a non-existent environment variable and exit the shell immediately if there is any error	
rand=`od -t ui -n 4 /dev/urandom | awk '{print $2}'`	<MISSING>
"rand_str=""$(mktemp --dry-run xxxxx)"""	<MISSING>
rand_str=$(mktemp --dry-run ${str// /x})	<MISSING>
"rank the usage of libraries for a set of tools ""/bin/* /usr/bin/* ..."""	
rav=$(echo $var | rev)	<MISSING>
read	<MISSING>
read -a arr	<MISSING>
"read -a arr <<< ""1 4 6 9 11 17 22"""	<MISSING>
read -a first	<MISSING>
"read -a to_sort <<< ""$1"""	<MISSING>
"read -d ""$(echo -e '\004')"" stdin"	<MISSING>
read -d '' line	<MISSING>
read -d'' -s -n1	<MISSING>
read -e	<MISSING>
"read -e -i ""yes"" -p ""enter your choice: "" choice"	<MISSING>
"read -e -p ""${myprompt@p}"""	<MISSING>
"read -e -p ""do that? [y,n]"" -i y input"	<MISSING>
"read -e -p ""enter the path to the file: "" -i ""/usr/local/etc/"" filepath"	<MISSING>
"read -e -p ""enter your choice: "" choice"	<MISSING>
"read -e -p ""my prompt: "" varname"	<MISSING>
read -e -p '> ' $1	<MISSING>
read -n $bufsize buffer	<MISSING>
"read -n 1 -p ""is this a good question (y/n)? "" answer"	<MISSING>
read -n 1 -r	<MISSING>
read -n 1 c	<MISSING>
read -n1	<MISSING>
"read -n1 -p ""do that? [y,n]"" doit"	<MISSING>
"read -n1 -p ""pick a letter to run a command [a, b, or c for more info] "" runcommand"	<MISSING>
"read -n1 -r -p ""press any key to continue..."" key"	<MISSING>
read -n1 -s	<MISSING>
read -n1 ans	<MISSING>
read -n10 -e var	<MISSING>
"read -p "" again? y/n "" i"	<MISSING>
"read -p "" enter here : "" text"	<MISSING>
"read -p ""$(echo -e 'please enter a message: \n\b')"" message"	<MISSING>
"read -p ""$*"""	<MISSING>
"read -p ""$1 "" yn"	<MISSING>
"read -p ""$1 ([y]es or [n]o): """	<MISSING>
"read -p ""<your friendly message here> : y/n/cancel"" condition;"	<MISSING>
"read -p ""> $line (press enter to continue)"""	<MISSING>
"read -p ""`echo -e '\nplease enter\na message: '`"" message"	<MISSING>
"read -p ""`echo -e 'please enter a message: \n\b'`"" message"	<MISSING>
"read -p ""`pwd -p`\$ "" _command"	<MISSING>
"read -p ""are you alright? (y/n) "" resp"	<MISSING>
"read -p ""are you sure you want to continue? <y/n> "" prompt"	<MISSING>
"read -p ""are you sure you wish to continue?"""	<MISSING>
"read -p ""are you sure? "" -n 1 -r"	<MISSING>
"read -p ""are you sure? (y/n) "" -n 1"	<MISSING>
"read -p ""command : "" input_cmd"	<MISSING>
"read -p ""continue (y/n)?"" choice"	<MISSING>
"read -p ""continue (y/n)?"" cont"	<MISSING>
"read -p ""do you wish to install this program?"" yn"	<MISSING>
"read -p ""enter your choice: "" choice"	<MISSING>
"read -p ""is this a good question (y/n)? "" answer"	<MISSING>
"read -p ""password: "" -s sshpass"	<MISSING>
"read -p ""please enter a message: $cr"" message"	<MISSING>
"read -p ""please enter a message: `echo $'\n> '`"" message"	<MISSING>
"read -p ""press [enter] key to release lock..."""	<MISSING>
read -p $'enter your age:\n'	<MISSING>
read -p 'bgg enter something:' -r data	<MISSING>
read -r -d $'\0'	<MISSING>
"read -r -d $'\0' content <<< ""${some_variable}"""	<MISSING>
read -r -d $'\0' f2	<MISSING>
"read -r -n 1 -p ""${1:-continue?} [y/n]: "" reply"	<MISSING>
"read -r -p ""$(echo $@) ? [y/n] "" yesno"	<MISSING>
"read -r -p ""${1:-are you sure? [y/n]} "" response"	<MISSING>
"read -r -p ""about to delete all items from history that match \""$param\"". are you sure? [y/n] "" response"	<MISSING>
"read -r -p ""are you sure? [y/n] "" response"	<MISSING>
"read -r -p ""are you sure? [y/n]"" response"	<MISSING>
read -r a	<MISSING>
read -r ans	<MISSING>
read -rep $'please enter a message:\n' message	<MISSING>
read -rn1	<MISSING>
read -rp $'are you sure (y/n) : ' -ei $'y' key	<MISSING>
read -rsp $'press any key or wait 5 seconds to continue...\n' -n 1 -t 5	<MISSING>
read -rsp $'press any key to continue...\n' -n 1 key	<MISSING>
read -rsp $'press enter to continue...\n'	<MISSING>
read -rsp $'press escape to continue...\n' -d $'\e'	<MISSING>
read -s -n 1 select	<MISSING>
"read -s -p ""enter your password: "" passwd"	<MISSING>
"read -s -p ""password: "" password"	<MISSING>
read -s entered_password	<MISSING>
read -s foobar	<MISSING>
read -s password	<MISSING>
read -sk	<MISSING>
"read -t 0.1 -p ""this will be sent to stderr"""	<MISSING>
read -t 10	<MISSING>
"read -t 3 -n 1 -p ""is this a good question (y/n)? "" answer"	<MISSING>
"read -t 3 variable < <( tail -f logfile.log | grep ""something"" )"	<MISSING>
read -t5 -n1 -r -p 'press any key in the next five seconds...' key	<MISSING>
read -u 4 -n $char -r -s line	<MISSING>
read -u 4 line	<MISSING>
read 10 bytes from $0 and print them by replacing the set '\000-\377' with '#'	
"read a line from an interactive shell's standard input into variable ""message"" without backslash escapes and prompt $'please enter a message:\n'"	
read a line from standard input	
"read a line from standard input and save each word in the bash array variable ""arr"""	
"read a line from standard input and save each word in the bash array variable ""first"""	
read a line from standard input and save received words sequentially in variables xpid xuserid xpriority xvirtual xresident xshared xstate xcpu xmem xtime xcommand	
"read a line from standard input and save response in variable ""varname"""	
"read a line from standard input in an interactive shell into variable ""input"" with prompt ""do that? [y,n]"" and suggestion ""y"""	
"read a line from standard input in an interactive shell with prompt in variable ""myprompt"" interpreted as ps1 is interpreted"	
"read a line from standard input into the first argument (""$1"") using an interactive shell with prompt ""> """	
"read a line from standard input into the variable ""yn"" using the first argument as the prompt (""$1 "")"	
"read a line from standard input into the variable ""yn"" with the prompt ""do you wish to install this program?"""	
"read a line from standard input into variable ""a"" without backslash escapes"	
"read a line from standard input into variable ""ans"" without backslash escapes"	
"read a line from standard input into variable ""date"" with prompt ""bgc enter something"", and storing typed backslash as backslash symbol"	
"read a line from standard input into variable ""dir"""	
"read a line from standard input into variable ""entered_password"" without echoing the input"	
"read a line from standard input into variable ""foobar"" and suppress showing user input"	
"read a line from standard input into variable ""i"" with the prompt "" again? y/n """	
"read a line from standard input into variable ""message"" with escaped prompt ""\nplease enter\na message: '"""	
"read a line from standard input into variable ""message"" with escaped prompt ""please enter a message: \n\b"""	
"read a line from standard input into variable ""message"" with prompt ""please enter a message: "" followed by a newline"	
"read a line from standard input into variable ""message"" with the prompt ""please enter a message: $cr"""	
"read a line from standard input into variable ""password"""	
"read a line from standard input into variable ""password"" without echoing the input"	
"read a line from standard input into variable ""password"" without echoing the input and using the prompt ""password: """	
"read a line from standard input into variable ""prompt"" with the prompt ""are you sure you want to continue? <y/n> """	
"read a line from standard input into variable ""reply"" with prompt ""$*"""	
"read a line from standard input into variable ""reply"" with prompt ""$1 ([y]es or [n]o): """	
"read a line from standard input into variable ""reply"" with prompt ""> $line (press enter to continue)"""	
"read a line from standard input into variable ""reply"" with prompt ""press [enter] key to release lock..."""	
"read a line from standard input into variable ""response"" ignoring backslash escapes and using the prompt ""${1:-are you sure? [y/n]} """	
"read a line from standard input into variable ""response"" ignoring backslash escapes and using the prompt ""are you sure? [y/n] """	
"read a line from standard input into variable ""response"" without backslash escapes using the prompt ""about to delete all items from history that match \""$param\"". are you sure? [y/n] """	
"read a line from standard input into variable ""sshpass"" with prompt ""password: "" and without echoing the input"	
"read a line from standard input into variable ""text"" with the prompt "" enter here: """	
"read a line from standard input into variable ""yesno"" ignoring backslash escapes and using the prompt ""$(echo $@) ? [y/n] """	
"read a line from standard input with a timeout of 0.1 seconds and prompt ""this will be sent to stderr"""	
read a line from standard input with a timeout of 10 seconds	
"read a line from standard input with prompt ""<your friendly message here> : y/n/cancel"" and save the response to variable ""condition"""	
"read a line from standard input with prompt ""are you alright? (y/n) "" and save the response to variable ""resp"""	
"read a line from standard input with prompt ""are you sure you wish to continue?"""	
"read a line from standard input with prompt ""are you sure? [y/n]"" and save response in variable ""response"""	
"read a line from standard input with prompt ""continue (y/n)?"" and save response in variable ""choice"""	
"read a line from standard input with prompt ""continue (y/n)?"" and save response in variable ""cont"""	
"read a line from standard input with prompt ""enter your age:\n"""	
"read a line from standard input with prompt ""enter your choice: "" and save response to variable ""choice"""	
"read a line from standard input with prompt ""enter your choice: "", arrow keys enabled, and ""yes"" as the default input, and save the response to variable ""choice"""	
"read a line from standard input with prompt ""is this a good question (y/n)? "" and save the response to variable ""answer"""	
read a line of standard input in an interactive shell	
"read a line of standard input into variable ""_command"" with the prompt as the current working directory followed by ""$"""	
"read a line of standard input into variable ""input_cmd"" with prompt ""command : """	
"read a line of standard input with prompt ""enter the path to the file: "" and suggestion ""/usr/local/etc/"" and save the response to variable ""filepath"""	
"read a line of standard input with prompt ""enter your choice: "" in an interactive shell and save the response to variable ""choice"""	
"read a line of standard input with prompt ""my prompt: "" and save it to variable ""varname"""	
read a single character from standard input and do not allow backslash to escape characters	
"read a single character from standard input and save to variable ""y"""	
read a single character from standard input in zsh	
"read a single character from standard input into variable ""ans"""	
"read a single character from standard input into variable ""doit"" with prompt ""do that? [y,n]"""	
"read a single character from standard input into variable ""key"" without backslash escapes and using an interactive shell with the prompt $'are you sure (y/n) : ' and default value $'y'"	
"read a single character from standard input into variable ""key"" without backslash escapes and using the prompt ""press any key to continue..."""	
"read a single character from standard input into variable ""key"" without backslash escapes, with a timeout of 5 seconds, and with the prompt ""press any key in the next five seconds..."""	
"read a single character from standard input into variable ""reply"" ignoring backslash escapes and using the prompt ""${1:-continue?} [y/n]: """	
"read a single character from standard input into variable ""runcommand"" with the prompt ""pick a letter to run a command [a, b, or c for more info] """	
read a single character from standard input with delimeter '' and no echo	
"read a single character from standard input with prompt ""are you sure? """	
"read a single character from standard input with prompt ""are you sure? (y/n) """	
"read a single character from standard input with prompt ""is this a good question (y/n)? "" and timeout of 3 seconds and save the response to variable ""answer"""	
"read a single character from standard input with prompt ""is this a good question (y/n)?"" and save the response to variable ""answer"""	
"read a single line from standard input and save to variable ""line"""	
read a single sample of raw audio in the form of a number between -32768 and 32767	
read all *.txt file paths under /foo into a bash array ($files)	
read all history lines not already read from the history file	
read and execute file 'lib/b' that located in the same directory as the current script, will fail if currently running script is not in path.	
read dir	<MISSING>
read first column of each row, find all other first columns which have a difference less than 10, and append that comma separated list to the row	
"read hexadecimal bytes from device ""/dev/midi1"""	
read line	<MISSING>
read line from file descriptor 4 and store received input in 'line' variable	
read lookup requests from text file '1.txt' and uses them to fetch txt records.	
"read one character from standard input into variable ""reply"""	
read one character from standard input into variable 'c'	
read password	<MISSING>
"read reply\?""this is the question i want to ask?"""	<MISSING>
read sh_lock_lastpid < $sh_lock_file	<MISSING>
read standard input and replace any repeated characters except spaces with a single instance	
"read standard input until a null character is found and save the result in variable ""f2"""	
"read standard input until a null character is found and save the result in variable ""line"""	
"read the contents of ""${some_variable}"" until a null character is found and save the result in variable ""content"""	
"read the first 10 characters from standard input in an interactive shell into variable ""var"""	
"read the first line in ""$1"" and save each word in the bash array variable ""to_sort"""	
"read the first line of ""$sh_lock_file"" into variable ""sh_lock_lastpid"""	
"read the first line of output from ""du -s $i"" into variable ""k"" in ksh"	
read the history file $histfile and append the contents to the history list	
read the history file and append the contents to the history list	
"read the raw input of ""/dev/input/mice"" as hexadecimal bytes with 3 bytes per line"	
"read two bytes from ""/dev/urandom"" and print them as an unsigned integer"	
read varname	<MISSING>
read xpid xuserid xpriority xvirtual xresident xshared xstate xcpu xmem xtime xcommand	<MISSING>
"read yesterday's date with format ""%a %d/%m/%y"" into variable ""dt"" in a subshell"	
readelf -a -w libsomefile.a | grep class: | sort | uniq	<MISSING>
readlink $(which python2.7)	<MISSING>
readlink -e /foo/bar/baz	<MISSING>
readlink -ev mypathname	<MISSING>
readlink -f  /path/here/..	<MISSING>
"readlink -f ""$path"""	<MISSING>
readlink -f $(which firefox)	<MISSING>
readlink -f $(which java)	<MISSING>
readlink -f $(which lshw)	<MISSING>
readlink -f /x/y/../../a/b/z/../c/d	<MISSING>
readlink -f `ls --dereference /proc/$pid/exe`	<MISSING>
readlink -f path	<MISSING>
readlink -f your_path	<MISSING>
readlink -m /path/there/../../	<MISSING>
readlink -m file	<MISSING>
readlink /dev/disk/by-uuid/b928a862-6b3c-45a8-82fe-8f1db2863be3	<MISSING>
readlink `pwd`	<MISSING>
reads content of bzip2 compressed files and processes it with awk utility.	
reads=$(zcat $file.fastq)	<MISSING>
real1=$(pwd -p)	<MISSING>
reattach a session and if necessary detach it first	
reattach a session and if necessary detach or  even  create first	
reattach to a named screen session	
reattach to a screen session	
recall the second argument from a previous command by pressing alt-shift-y	
receive input and print it to terminal	
receive input and print it to terminal preceeding with line number	
receive pattern to search for on the standard input and print only matching part of lines from file 'f.html'	
reconnect to a named screen session	
record the absolute path of a relative path to a variable	
records the number of occurences of 'needle' in the array 'haystack' into the variable 'inarray'	
"recursively add "".jpg"" to all files in the current directory tree"	
"recursively add "".jpg"" to all files without an extension in the directory tree ""/path"""	
recursively add read and directory access to all permissions of all files and directories	
"recursively add read and execute permissions to all files and folders in ""directory"""	
"recursively add user write permission to all files under ""/path/to/git/repo/objects"""	
recursively and forcibly removes $tmp folder with all content.	
"recursively archive ""test/a/"" to ""test/dest"" excluding ""test/a/b/c/d"""	
"recursively bind ""/dev"" to ""/var/snmp3/dev"""	
"recursively bind ""/sys"" to ""/var/snmp3/sys"""	
"recursively bind mount ""/something"" on ""/new_something"""	
"recursively change ""/usr/local"" owner to the current user and group to admin"	
"recursively change all permissions under ""thedirectory/"" to 777(read,write,execute for all users)"	
"recursively change owner and group of ""/usr/local/rvm/gems/ruby-2.0.0-p481/"" to the current user"	
recursively change owner and group of the directory  /opt/antoniod/ to user and group antoniod	
recursively change owner and group of the directory  /vol/html and all files into it to user ec2-user and group apache	
recursively change owner and group of the directory /your/directory/to/fuel/ and all files into it to user and group nginx	
"recursively change owner and group of the directory and all files into it to user ""user"" and group ""www-data"""	
recursively change owner and group of the directory and all files into it to user root and group root	
recursively change owner and group of the directory and group of the directory and all files into it to user and group dev_user	
"recursively change owner and group to ""$jboss_as_user"" of ""$jboss_as_dir"""	
"recursively change owner and group to ""$jboss_as_user"" of ""$jboss_as_dir/"""	
"recursively change owner and group to ""tomcat7"" of ""webapps"", ""temp"", ""logs"", ""work"", and ""conf"""	
"recursively change owner of all files in ""folder"" to ""user_name"""	
recursively change owner of directories $(npm config get prefix)/lib $(npm config get prefix)/node_modules $(npm config get prefix)/bin $(npm config get prefix)/share to the current user	
recursively change owner of the directory /tmp to the current user	
recursively change owner of the directory /users/xxx/library/developer/xcode/templates and all files to user xxx	
recursively change owner of the directory /usr/lib/node_modules/ to the current user	
recursively change owner of the directory /usr/local to the current user	
recursively change owner of the directory /usr/local/lib to the current user	
recursively change owner of the directory /usr/local/lib/node_modules/ to the current user	
recursively change owner of the directory and all files into it to user  nobody	
recursively change owner of the directory testproject and all files into it to user ftpuser	
recursively change owner of the directory ~/.npm to the current user	
"recursively change owner to ""$1"" and group to ""httpd"" of all files in the current directory"	
"recursively change owner to ""amzadm"" and group to ""root"" of all files in ""/usr/lib/python2.6/site-packages/"""	
"recursively change owner to ""amzadm"" and group to ""root"" of all files in ""/usr/lib/python2.6/site-packages/awscli/"""	
"recursively change owner to ""tomcat6"" of ""webapps"", ""temp"", ""logs"", ""work"", and ""conf"""	
"recursively change owner to ""www-data"" of ""/var/www/.gnome2"", ""/var/www/.config"", and ""/var/www/.config/inkscape"""	
"recursively change ownership of ""/usr/lib/node_modules/"" to the current user"	
"recursively change ownership of ""/usr/local"" to the current user"	
"recursively change ownership of ""/usr/local/lib"" to the current user"	
"recursively change ownership of ""/usr/local/lib/node_modules"" to the current user"	
"recursively change ownership of ""~/.npm"" to the current user"	
"recursively change the group of all files in ""/tmp/php_session"" to ""daemon"""	
"recursively change the group of all files in ""/var/lib/php/session"" to ""lighttpd"""	
"recursively change the group ownership to ""laravel"" in ""./bootstrap/cache"""	
"recursively change the group ownership to ""laravel"" in ""./storage"""	
"recursively change the owner and group of ""/home/el/svnworkspace"" and ""775"" to ""your_user_name"""	
"recursively change the owner and group of ""/opt/antoniod/"" to ""antoniod"""	
"recursively change the owner and group of ""/var/antoniod-data/"" to ""antoniod"""	
"recursively change the owner and group of ""/workspace"" and ""775"" to ""your_user_name"""	
"recursively change the owner and group of ""subdir1"" to ""user1"""	
"recursively change the owner and group of ""subdir2"" to ""user2"""	
"recursively change the owner and group of ""subdir3"" to ""user3"""	
"recursively change the owner and group of ""~/.ssh/"" to ""dev_user"""	
"recursively change the owner and group of all files in ""/your/directory/to/fuel/"" to ""nginx"""	
"recursively change the owner and group of all files in ""public_html"" to ""owner"""	
"recursively change the owner and group of all files in the current directory to ""andrewr"""	
"recursively change the owner and group of all files in the current directory to ""apache"""	
"recursively change the owner group of ""/var/www"" of to ""www-data"""	
"recursively change the owner of all ""*.txt"" files under ""/mydir"" to ""root"""	
"recursively change the owner of all files in ""/home/test"" to ""test"""	
"recursively change the owner of all files in ""/usr/local/lib/node_modules"" to the current user"	
"recursively change the owner of all files in ""testproject/"" to ""ftpuser"""	
"recursively change the owner of all files in ""upload_directory"" to ""nobody"""	
"recursively change the owner of all files in ""~/tmp"" to ""$user"""	
recursively change the owner of npm's directories(lib/node_modules, bin and share) to the current user	
"recursively change the owner to ""$user"" and group to ""$group"" of ""/var/lib/cassandra"""	
"recursively change the owner to ""$user"" and group to ""$group"" of ""/var/log/cassandra"""	
"recursively change the owner to ""${jboss_user}"" of ""$jboss_log_dir"""	
"recursively change the owner to ""ec2-user"" and group to ""apache"" of all files in ""/vol/html"""	
"recursively change the owner to ""user"" and group to ""www-data"" of ""yourprojectfoldername"""	
"recursively change the ownership of all directories in the current directory excluding ""foo"" to ""camsoft"""	
"recursively change the ownership of all files in ""/users/xxx/library/developer/xcode/templates"" to ""xxx"""	
"recursively change the user and group of all files in ""/var/cache/jenkins"" to ""root"""	
"recursively change the user and group of all files in ""/var/lib/jenkins"" to ""root"""	
"recursively change the user and group of all files in ""/var/log/jenkins"" to ""root"""	
recursively change user of the direct /home/test/ and all files into it to user test	
recursively change user of the direct public_html and all files into it to user owner	
recursively changes group ownership of every file in '/var/tmp/jinfo' to 'www-data'.	
recursively changes group ownership of every folder in a current directory to the name of that folder.	
recursively changes group ownership of everything in '/home/secondacc/public_html/community/' to 'fancyhomepage'.	
recursively changes group ownership of everything in 'files' to 'apache_user'.	
recursively changes group ownership of everything in 'files' to 'my_group'.	
recursively changes group ownership of everything in a '/home/user1/project/dev' folder to 'project_dev'.	
recursively changes group ownership of everything within '.git' to 'git'.	
recursively changes group ownership of everything within '/git/our_repos' to 'shared_group'.	
recursively changes group ownership of everything within a '/path/to/repo' to 'group'.	
recursively changes group ownership of everything within a current directory to 'repogroup'.	
recursively changes group ownership of everything within a current folder and having group 'x_gname' to 'y_gname'.	
recursively changes group ownership of everything within a current folder to 'admin'.	
recursively changes group ownership of everything within current folder to 'git'.	
recursively changes group ownership of the $path_to_output_folder directory to $group group.	
recursively changes group ownership on every file in the ${wp_root}/wp-content directory to ${ws_group} group.	
recursively changes group ownership on everything in the 'public_html' folder to 'website' group.	
recursively compress every file in the current directory tree and keep the original file	
recursively compresses all files within $2 folder.	
recursively convert all symlinks under the current working folder to its regular file	
"recursively copies ""$1"" to ""$2""."	
"recursively copies ""$appname.app"", preserving symlinks as symlinks to the 'payload' directory."	
recursively copies '$1' directory to '$2' directory.	
recursively copies '../include/gtest' directory to '~/usr/gtest/include/'.	
recursively copies 'include/gtest' to '/usr/include', preserving all attributes, and copying symlinks as symlinks, without following in source files.	
recursively copies 'src' to 'dest' preserving overwriting the existing files.	
recursively copies 'srcfolder' to the 'destfolder/'	
recursively copies /mnt/usr/lib to the '/usr/' directory, creating symbolic links on each file instead of real copying them.	
"recursively copies all files in the current directory but ones that names match pattern ""dirtoexclude|targetdir"" to the 'targetdir' directory, printing info message on each operation."	
recursively copies all files in the current directory but ones with 'c' in name to the home directory.	
recursively copies everything from '/source/path/*' to the '/destination/path/', preserving from overwriting existing files, and printing info message on each operation.	
recursively copies everything from '/zzz/zzz/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.	
recursively copies everything under the 'current' folder to the '.hiddendir' folder.	
"recursively copy ""/path/to/data/myappdata/*.txt"" to ""user@host:/remote/path/to/data/myappdata/"""	
"recursively copy ""dir_a"" to ""dir_b"" and delete any new files in ""dir_b"""	
"recursively copy ""dir_b"" to ""dir_a"" and delete any new files in ""dir_a"""	
"recursively copy ""emptydir"" to ""destination/newdir"""	
"recursively copy ""old/"" to ""new/"" as a dry run skipping files that have matching checksums and output the name only"	
"recursively copy ""original_dir"" to ""copy_dir"" preserving file/dir timestamps, displaying progress, and skipping files which match in size, keeps partially transferred files."	
"recursively copy ""source"", ""dir"", and ""target"" to ""dir"" as a dry run"	
"recursively copy /path/foo on host ""prod"" to local directory ""/home/user/desktop"", connecting as ssh username corresponding to local username."	
"recursively copy /path/to/foo on host ""your.server.example.com"" to local directory ""/home/user/desktop"", connecting as ssh username ""user""."	
"recursively copy all "".txt"" files to ""user@remote.machine:/tmp/newdir/"""	
"recursively copy all (non-hidden) files and directories in current dir except ""foo"" to location specified by variable ""other"""	
"recursively copy all directories in ""/path/to/source"" to ""/path/to/dest/"" preserving directory hierarchy"	
"recursively copy all files and directories in ""demo"" excluding "".git"" to ""demo_bkp"""	
"recursively copy all files and directories matching ""*ela*l1*te*"" in localhost's directory /tdggendska10/vig-preview-dmz-prod/docs/sbo/pdf/ to /var/www/html/sbo/2010/teacher/ela/level1 on localhost connecting as ssh user ""dalvarado"", in batch mode (no prompt for passwords) preserving file permissions and timestamps, and without displaying progress information."	
"recursively copy all files and folders in the current directory excluding ""exclude_pattern"" to ""/to/where/"""	
"recursively copy all files matching ""*.sh"" in ""$from"" to ""root@$host:/home/tmp/"" compressing data during transmission"	
recursively copy all files with names ending with .txt from dir_1 to the same location within copy_of_dir_1	
recursively copy all regular files below current directory to directory /tmp on hostname, connecting as ssh user matching current username on local host.	
"recursively copy directories ""a"" and ""d"" to directory ""/path/to/target/directory"" on host ""anotherhost"", connecting as ssh user matching current user on local host, via default tcp port for ssh (22)."	
"recursively copy directory ""/path/to/data/myappdata"" to ""user@host:/remote/path/to/data/myappdata"""	
"recursively copy directory ""/path/to/data/myappdata"" to ""user@host:/remote/path/to/data/newdirname"""	
"recursively copy directory or file /something on host ""myserver"" to current directory on local host, connecting as ssh user matching username on local host."	
recursively copy everything in /source/path whose name doesn't begin with a period, to /destination/path, without overwriting existing files, and outputting a line for each file copied or skipped.	
recursively copy files by file extension, preserving directory structure	
"recursively copy local file/directory ""/copy/from/path"" to remote location ""/copy/to/path"" on host ""server"", connecting as ssh user ""user"" and using identity key file ""/path/to/your/.pemkey"" instead of the default in ~/.ssh/"	
"recursively copy newer files in ""sourcedir/"" to ""user@dest.com:/dest/dir/"" via ssh"	
recursively counts non-blank lines in all files in a current folder, that match regex '\.php|\.as|\.sql|\.css|\.js', but skip folders './pma', './blog', './punbb', './js/3rdparty' and files like '*.svn'.	
recursively counts non-blank, non-comment lines in all *.c files in a current folder.	
recursively delete all files/folders named '.svn' in a current folder.	
recursively delete, without prompting, directories under /data/bin/test, that are older than 10 days and where the name starts with a number	
recursively find all files ending with '*.txt' and print they names and content	
"recursively find all files in the directory ""posns"" and split each one into files of at most 10000 lines each"	
"recursively find files in the current directory with a modification time more than 7 days ago, save the filenames to ""compressedp.list"", and compress each file in parallel"	
"recursively find files in the current directory with a modification time more than 7 days ago, save the filenames to ""compressedp.list"", and compress no more than 10 at a time"	
recursively find strings in all files under current directory, that matching with comma-separated patterns list in file 'searches-txt'	
"recursively find the latest modified ""zip"" file in the current directory"	
recursively find the latest modified file in the current directory	
recursively find the latest modified file in the current directory and print the modification time and filename	
recursively finds 'pattern' in files from current folder, and prints matched string with number only if matching whole word.	
"recursively finds all ""*.pas"" and ""*.dfm"" files and prints strings with ""searchtext"" ignoring text distinctions, suppressing error messages, highlighting found patterns and preceding each found string with file name and string number."	
"recursively finds all ""file_pattern_name"" files and folders and prints strings with ""pattern"", searching through found folders recursively."	
recursively finds all '*.pdf' files and folders in a current folder and removes them without prompting.	
recursively finds all '*.pdf' files in a current folder and removes them without prompting.	
recursively finds all '*.pdf' files in a current folder and removes them.	
recursively finds all '*.png' files older than 50 days in a current folder and removes them.	
recursively finds all 'status.txt' files containing text 'open' and prints containing folder of them.	
recursively finds all *.dbf files from the root folder and prints list of folders with such files.	
"recursively finds all *.txt files and prints strings with ""text_pattern"" ignoring text distincts."	
recursively finds all bzip2 compressed files in a current folder and decompresses them.	
recursively finds all files and prints all strings with 'text-to-find-here' from that files, preceding matched string with filename.	
recursively finds all files and prints all strings with 'text-to-find-here' from that files.	
"recursively finds all files and prints only names of files that contain ""word"" and suppressing error messages ."	
recursively finds all files containing text 'open' and prints folder where they are placed.	
recursively finds all files in a current folder excluding already compressed files and compresses them with level 9.	
recursively finds all files in root folder and prints all strings with 'text-to-find-here' from that files, ignoring binary files.	
recursively finds all files in root folder and prints all strings with 'text-to-find-here' from that files, preceding matched string with filename.	
"recursively finds all files like ""*.log"" and ""*.trc"" in a current folder, modified in a last day, sorts list by modification time and pipes output to pager tool 'less'."	
recursively finds all files newer than a date	
recursively finds all files not like *.itp, *ane.gro, *.top in a current folder and removes them.	
recursively finds all files older than 7 minutes under the current directory, saves list of found files, and compresses them, executing at most 10 compress process at a time.	
"recursively finds all files with any cased text ""text"" in a current folder, and precedes found string with its number in file."	
"recursively finds all files with whole word ""pattern"" in a current folder, and precedes found string with its number in file."	
recursively finds all folders in a current folder that contain files like '.git'.	
recursively finds and compresses all files in a current folder with 4 parallel processes.	
recursively finds and compresses all files in a current folder.	
recursively finds and compresses all files in the directory '/path/to/dir'	
"recursively finds file some_file_name.xml file and prints strings with ""put_your_string_here"" preceding each found string with file name."	
recursively finds files like '*.js', and filters out files with 'excludeddir' in path.	
recursively finds files like '*.php' or '*.phtml' in folder /project/directory ignoring case differences, filters out files with any cased pattern '/some/directory' in path, and processes found files with xgettext tool.	
recursively finds files like 'example.com', ignoring case differences, and filters out files with 'beta' in path.	
"recursively finds in all folders but ""./output/*"" all files but *.o, *.swp and prints strings with 'soc_attach' text pattern and number of matched string."	
recursively finds last 5 modified files in a directory	
recursively finds latest modified file in a directory	
recursively finds string 'class foo' in all *.c files from current folder.	
"recursively finds string with text ""foo"" in all files of a current folder."	
"recursively finds strings like ""texthere""  in all ""*.txt"" files of a current folder."	
recursively finds strings with 'word-1' or 'word-2' in any file under 'directory-path', following symlinks, and prints found strings.	
recursively finds strings with the whole word 'word-1' or 'word-2' in any file under 'directory-path', following symlinks, and prints found strings.	
"recursively finds strings with""text string to search” in any file within the 'directory-path', following symlinks, and prints found strings with file names."	
"recursively finds strings with""text string to search” in files under 'directory-path', regarding provided options '[option]'."	
recursively findsfiles with text pattern in current folder, ingnoring case differences, prefixes each matched line with number in file and suppresses error messages about nonexistent or unreadable files.	
"recursively from current folder searches only files that names match "".*xxx"" pattern, ignores binary files and prints file name before every string that contains ""my text to grep""."	
"recursively list all files and directories in ""coreutils-8.9"" with ""dir: "" prepending directory names"	
recursively list all files on smbfs mounts	
recursively list all the files and directories that are only in directory /dir1 with their full paths.	
recursively list contents of the current directory in a tree-like format	
recursively lists all *.py and *.html files in a current folder.	
recursively lists all files in a current folder and prints full path along with modification time.	
recursively lists all files in a current folder in long format, sorting by modification time.	
recursively lists all files in a current folder in long format.	
recursively look for files ending in either .py or .py.server	
"recursively make all mounts under ""/"" private"	
"recursively move ""./dir"" to ""user@host:/path"" compressing data and displaying progress during transmission"	
"recursively move ""./dir"" to ""user@host:/path"" via ssh on port 2222 compressing data and displaying progress during transmission"	
"recursively move all files in ""/path/to/srcdir"" to ""dest/"""	
recursively print all directories in the current directory tree	
recursively print all files and directories in the current directory tree	
recursively print all files and directories in the current directory tree including hidden files	
"recursively print all files and directories in the directory tree ""$absolute/path/of/your/dir"""	
recursively prints .txt files in current directory	
"recursively prints all files in a current folders, and searches ""stringyouwannafind"" in file content ignoring case differences, and preceding found string with its number in file."	
"recursively prints all folders in a current folder that contain files like ""*.class""."	
recursively prints paths to all text file in folder (ignores binary files).	
"recursively remove all ""*.txt"" files and answer ""n"" to any prompt"	
"recursively remove all ""*.txt"" files and answer ""y"" to any prompt"	
recursively removes $tmpdir folder, prompting user on each deletion.	
recursively removes 'classes' folder, prompting user on each deletion.	
recursively removes all empty folders from the x folder.	
recursively removes all empty folders under current folder.	
recursively removes all empty folders under current path, printing info message on each operation, and suppressing error messages if folder is not empty.	
recursively removes all files and folders like 'file-to-find' from current folder.	
recursively removes all files and folders named '.svn' in a current folder, handling content of removed folder before folder inself.	
recursively removes all files and folders named '.svn' in a current folder.	
recursively removes all files and folders that match pattern '/usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*'	
recursively removes all files in a 'path' folder but 'expr' files.	
recursively removes all files in a current folder but '*txt' files.	
"recursively removes all files like ""(__pycache__|\.pyc|\.pyo$)"" in a current folder."	
recursively removes all files like '*.pyc' in a current folder, printing info message about each action.	
recursively removes all files like '*.pyc' in a current folder.	
recursively removes all files like '*.pyc' of '*.pyo' in a current folder without prompting.	
recursively removes all files like '*.r*' in current folder and removes folders with such files if they become empty.	
recursively removes all files like '*.xyz' in a current folder.	
recursively removes all files like '._*' from current folder.	
recursively removes all files like '.ds_store' from current folder.	
recursively removes all files like '4' under folder './a' and removes folders with such files if they become empty.	
recursively removes all files like '_*' and '.ds_store' from /var/www/html/ folder.	
recursively removes all files like any-cased '*.pyc' in a current folder.	
recursively removes all files named '.svn' in a current folder, and prints messages on each action.	
"recursively removes all files with name like ""*.war"" in  /home/ubuntu/wars folder."	
"recursively removes all files with name like ""myfile.*"" in 'file path' folder."	
recursively removes all folders named '.svn' in a current folder.	
recursively rename all files under /your/target/path replacing 'special' with 'regular' - all file/diretory names may not include spaces, and directory names containing such files may not contain the word 'special' in their name.	
"recursively search current directory for all files with name ending with "".t1"", change this to .t2"	
"recursively search for ""string here"" and write the output to the console followed by the number of matched lines"	
"recursively search for all directories containing ""foo"" (case insensitive) under the current directory, renaming them to replace ""foo"" (case insensitive) with ""bar"""	
"recursively search for all files not ending in "".xml"" under the current directory, append "".xml"" to the end of each file name"	
recursively search for all files whose name contains 'foo', and change the 'foo' in the filenames to 'bar'.	
"recursively search for all files with names ending with ""_test.rb"", renaming them to end with ""_spec.rb"", using at most 1000000 characters per command."	
"recursively search for all files with names ending with ""_test.rb"", renaming them to end with ""_spec.rb"", using at most 4 concurrent processes."	
"recursively search for all files with names ending with ""_test.rb"", renaming them to end with ""_spec.rb""."	
"recursively search for all regular files below directory ""dir1"" in currentd directory, and output the name of each, without any containing directories."	
recursively search for everything under the current directory, displaying human-readable file type description for each entry.	
"recursively search the current directory for unique entries of ""searchtext"" and replace ""matchtext"" with ""replacetext"""	
"recursively search through all files in all directories for any lines containing ""pattern"" and whose second word is not ""binary""."	
"recursively search through directory ""test"" in home directory, displaying names of all directories without full paths, ie. only the name part following the last slash of each directory."	
"recursively set all permissions under ""../tools"" to 777"	
"recursively set all permissions under ""/directory"" to 755"	
"recursively set all permissions under ""/folder"" to 755"	
"recursively set all permissions under ""/opt/lampp/htdocs"" to 755"	
"recursively set all permissions under ""/whatever/your/directory/is"" to 755"	
"recursively set the file access control list of ""app/cache"" and ""app/logs"" to rwx for the current user and for user ""www-data"""	
"recursively unzip files to stdout in ""/some/dir/here"" and search for ""blah"""	
redirect output inside screen session	
"redirect stderr to stdout and write to the console and ""/dev/null"""	
"redirect the current process's standard error to standard out and write to console and append to ""$home/logfile"""	
redirects content of extracted file to a pipe	
redirects output of 'time' built-in function and prints only real-time statistic.	
redirects time output to file.	
"reformat date ""sat aug 09 13:37:14 2014 +1100"" according to format string ""%a %b %d %h:%m:%s %y %z"""	
"rel_dir=""$(ssh -t localhost ""$heredoc"")"""	<MISSING>
remote copy all text files from one location to another	
"remount ""/"" with read and write permission"	
"remount ""/"" without writing in ""/etc/mtab"""	
"remount ""/dev/block/mtdblock3"" on ""/system"" with read and write permission"	
"remount ""/dev/block/mtdblock3"" on ""/system"" with read only permission"	
"remount ""/dev/sda7"" partition as executable"	
"remount ""/dev/shm"" with a maximum size of ""40g"""	
"remount ""/dev/stl12"" on ""/system"" as read and write"	
"remount ""/dev/stl12"" on ""/system"" as read only"	
"remount ""/home/evgeny"" with the ""suid"" flag set"	
"remount ""/media/working/"" with a umask of 000"	
"remount ""/mnt/mountpoint"" as read only"	
"remount ""/mnt/mountpoint"" with read and write permission"	
"remount ""/path/to/chroot/jail/usr/bin"" as read only"	
"remount ""/system"" as read only"	
"remount ""/system"" with read and write permission"	
"remount ""/system"" with read only permission"	
"remount ""extx"" filesystem ""/dev/hdax"" on ""/"" without writing in ""/etc/mtab"""	
"remount ""point"" subtree to ""mnt"" as a bind mount"	
"remount ""rfs"" filesystem ""/dev/stl12"" on ""/system"" with read and write permission"	
"remount ""yaffs2"" filesystem ""/dev/block/mtdblk4"" to ""/system"" as read and write only"	
"remount ""yaffs2"" filesystem ""/dev/block/mtdblk4"" to ""/system"" as read only"	
"remount part of the file hierarchy from ""olddir"" to ""newdir"""	
"remount root filesystem ""/"""	
"remount subtree ""/outside"" to ""/inside"" as a bind"	
"remount subtree ""/usr/bin"" on ""/path/to/chroot/jail/usr/bin"" as a bind"	
remount the root file system with read and write permission	
"remove ""-"" from the contents of ""/proc/sys/kernel/random/uuid"" and save output to variable ""comment"""	
"remove ""\n"" from ""test1\ntest2\ntest3"" and search for ""test1.*test3"""	
"remove ""\r"" at the end of each line in ""infile"" and display the result as printable characters or backslash escapes"	
"remove ""_dbg"" from all file or directory names under the current directory"	
remove .ds_store from the repository you happen to stage by mistake	
remove `core' files whose status was changed more than 4 days ago	
"remove a leading ""machine"" from the system host name and save the result to variable ""machnum"""	
remove a specific file among a group of specific files	
remove adjascent duplicate lines from file 'input' comparing all but last space-separated fields	
"remove all ""core"" files that were last changed more than 4 days ago from the current directory tree"	
"remove all ""core"" regular files in the /tmp/ directory tree"	
"remove all ""cvs"" directories from the current directory tree, ignoring the case"	
"remove all ""foo*"" files under current dir"	
"remove all ""work"" directories residing in /usr/ports and below"	
remove all 'a.out', '*.o', and 'core' files in the current directory tree	
remove all *.bak and *.backup files that were accessed last time more than 30 days ago	
remove all *.bak files under current directory	
remove all *.doc files from the current directory tree	
remove all *.log files from the current directory tree	
remove all *.log files from the current directory tree that have been gzipped	
remove all *.m4a files in the current directory and its subdirectories	
remove all *.mp3 files in tmp directory but not in it's subdirectories	
remove all *.sql files in the $backup_path directory that were last modified more than 5 days ago	
remove all *.sql files in the $backup_path directory tree that were last modified more than 30 days ago	
remove all *.swp files under current directory	
remove all *.swp files under current directory ensuring white space safety	
remove all *.swp files/directories under current directory	
remove all *.tmp files from the /tmp directory tree	
remove all *.txt files in the home directory tree with confirmation	
remove all *.txt files under the given directory modified more than 5 minutes ago	
remove all *.txt files, except robots.txt, under the given directory modified more than 5 minutes ago	
remove all *bak files under current directory with confirmation prompt	
remove all *~ files under current directory with confirmation prompt	
remove all *~ files under dir	
remove all .gz files in the current directory tree	
remove all .mpg files in the /home/luser directory tree	
remove all .php files in the /var/www/ directory	
"remove all .sh files in the current directory tree whose names begin with ""new"""	
"remove all .sh files in the current directory tree whose names begin with ""t"""	
remove all .tmp files in and below /tmp	
remove all .txt files from the /full/path/dir directory tree	
remove all .txt files in and below the current directory	
remove all .txt files with spaces in names in and below the current directory	
remove all \*~ files under dir	
remove all a.out, *.o, and core files under the current directory	
remove all broken symbolic links in /usr/ports/packages	
remove all broken symlinks from the /usr/ports/packages directory tree	
remove all but 5 last comma-separated fields from each line in 'data.csv'	
"remove all characters except "";"" and digits from standard input"	
remove all core dump files from user's home directory	
remove all core files in the file system	
remove all cvs directories from the current directory tree	
remove all cvs directories in the current directory tree	
"remove all directories called ""test"" from the /path/to/dir directory tree"	
"remove all directories called ""test"" from the current directory tree"	
remove all directories found in directory tree $logdir that were modified more than 5 days ago	
remove all directories in and below the current directory	
remove all empty directories under the current directory and below	
remove all empty files in /tmp/ and below	
remove all empty regular files under the current directory and below	
remove all empty sub-directories under current directory	
remove all files 'a.out' and *.o in the home directory tree that were accessed more than 7 days ago	
"remove all files and directories called ""test"" from the current directory tree"	
"remove all files and directories in the /home directory tree whose names are ""trash"""	
"remove all files and directories in the current directory by answering with ""y"" to all prompts"	
remove all files and directories under '/home/foo' directory tree that match with one of the name patterns '.ds_store', '._.ds_store' , '._*', '.temporaryitems' or '.apdisk'	
remove all files containing 'sample' (case insensitive) in their names under '/home/user/series' directory tree	
"remove all files except the ones listed in ""manifest"""	
remove all files from the current directory tree whose names contain whitespaces	
"remove all files from the current directory tree whose names do not end with "".tex"" or "".bib"""	
"remove all files from the current directory tree whose names do not match regular expression ""excluded files criteria"""	
"remove all files from the current directory tree whose names end in ""~"""	
"remove all files from the system whose path names contain ""gui"""	
"remove all files in and below the current directory whose names begin with ""not"""	
remove all files in the $backup_path directory recursively that were last modified more than 30 days ago	
remove all files in the /myfiles directory tree that were accessed at least 30 days ago	
"remove all files in the current directory tree that have the name ""abc.xxx"""	
remove all files in the ~/backups/mydatabasename directory recursively that were last modified more than 30 days ago	
remove all files last modified more than 10 days ago from the current directory tree	
"remove all files matching the pattern *[+{;""\\=?~()<>&*|$ ]* under current directory"	
"remove all files named ""filename"" from the current directory tree, ignoring directory ""folder1"""	
remove all files named `junk' and `dummy'	
remove all files named tmp or ending in .xx that have not been accessed for seven or more 24-hour periods	
remove all files on the system that have been changed within the last minute	
remove all files that are not newer than jul 01 by modification time	
remove all files that contain the word gui in entire file system	
remove all files that end with 'prefs copy' in their names under '/mnt/zip' directory tree	
remove all files that were older than 3 days	
remove all files that's older than 30 days in '/tmp'	
remove all files under $dir that were accessed more than 5 days ago	
remove all files under /home/user/maildir/.spam/cur	
remove all files under /myfiles that were accessed more than 30 days ago	
remove all files under current directory	
"remove all files whose names begin with ""heapdump"" and write their names to ""delete.txt"""	
"remove all files whose names begin with ""no-such-thing"" in the /home/peter directory tree"	
"remove all files whose names end with ""~"" in the /home/peter directory tree"	
remove all files whose names start with spam-	
remove all files with '.js' extension from the 'js' directory tree	
remove all files with a txt extension under current directory	
"remove all files with names like ""vmware-*.log"" from the current directory tree"	
remove all files with the .c extension in the current directory tree	
remove all files/directories in the current directory without '.git' and '.gitignore'	
remove all libegl* files from the current directory tree	
remove all libgle* files from the current directory tree	
remove all non-hidden files in the current directory tree	
remove all regular files found in and below /path	
remove all regular files from the current directory tree except textfile.txt, backup.tar.gz, script.php, database.sql, info.txt	
remove all regular files from the current directory tree that were modified a day ago	
remove all regular files from the current directory tree that were modified between august 10th and august 17th	
"remove all regular files from the current directory tree whose names do not end with ""ignore1"" or ""ignore2"""	
"remove all regular files from the current directory tree whose names do not end with ""txt"""	
remove all regular files in the current directory	
"remove all regular files named ""waldo"" in the ~/books directory tree"	
remove all regular files under $dir directory tree that were accessed more than 5 days ago	
remove all regular files under '/var/log/remote' directory tree that have not been modified in the last 14 days where day count starts from today	
"remove all regular files under and below directory ""$dir"" that were last accessed more than 5 days ago"	
remove all regular files with extensions php, css, ini, txt from directory tree /old/wordpress/	
remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree	
remove all spaces from standard input	
"remove all subdirectories named ""cvs"" under current dir"	
"remove all subdirectories of the current directory, except for ""bar"", ""foo"", ""a"", and ""b"""	
remove all text files from the current folder	
remove all text files from the current folder. print0 is used to handle files whose names have only spaces or those files which have newlines in their names	
remove all text files in the home directory with confirmation	
"remove all the "".core"" files in the file system"	
"remove all the ""core"" files in the current folder which have not been changed in the last 4 days."	
remove all the core files from /usr folder which have not been accessed in the last 7*24 hours	
remove all the core files in the current directory	
remove all the core files in the home folder	
remove all the core files in the temp file after user confirmation	
remove all the ds_store files in the current directory	
remove all the files and directories that are in /dir1 but not in /dir2.	
"remove all the files in current folder which have the extension ""ds_store"""	
remove all the files in the current folder which have not been changed in the last 30*24 hours	
remove all the files in the current folder which have not been modified in the last 10 days	
remove all the files in the current working directory which have a specifc inode number	
"remove all the files in the folder ""myfiiles"" which have not been accessed in the last 30*24 hours"	
remove all the files in the present directory which have space in their name.	
remove all the files in the present directory which have special characters in their name and do not search in the sub directories of the current folder.	
"remove all the files with the name ""trash"" in the folder /home"	
remove all the log files which have not been modified in the last 5 days	
remove all the pdf files in the current folder and do not delete those in the sub folders	
remove all the permissions for others to all the files in the current folder which have  read,write,execute access to users,group and others.	
remove all the regular/normal files in the temp folder and do not delete in the sub folders	
remove all the versioned-but-empty directories from a subversion checkout under current directory	
remove all thumbs.db (case insensitive)  files under temp/images directory	
remove all thumbs.db files from the current directory tree	
remove all tmp/*.mp3 files	
remove all vmware-*.log files under current directory	
remove all vmware-*.log files under current directory ensuring white space safety in filename	
remove all vmware-*.log files/directories under current directory	
"remove all white space from ""infile.txt"" and wrap each line to 80 characters"	
"remove any file containing string ""gui"""	
"remove blank lines and replace "" "" with ""/"" in ""struct.txt"" as input to make directories with parents as needed"	
"remove characters in columns 34 through 39 in the output of ""finger"""	
"remove containing directories and suffix "".wiki"" from specified path, output the result."	
"remove containing directories from variable 'path' ie. ""/some/specific/directory"" becomes ""directory""."	
remove directories in /media/1tb/videos modified more than 7 days ago	
"remove duplicate lines in ""file_name"" and print the output on stdout"	
"remove duplicate phrases and keep the original order of lines in ""$infile"""	
"remove duplicates in variable ""variable"" and preserve the order"	
remove each unique item listed on standard input and do nothing if empty	
remove empty directories	
remove empty directories from directory tree /srv/${x}	
remove empty directories from directory tree /srv/abc	
remove empty directories from the current directory tree	
remove empty folder, and skip error message if one is not empty.	
remove esc key bind	
remove everything in a current folder prompting user on each action.	
remove everything in a current folder without prompting.	
"remove everything in the current directory except files matching regular expression ""exclude these"""	
"remove everything within parentheses and substitute all non digit characters with a space from ""1/2 [3] (27/03/2012 19:32:54) word word word word 4/5"" and format the output as a table"	
remove file with inode number 31246	
remove files cart4, cart5, cart6 in directory ~/junk	
remove files erroneously named `-f'	
remove files from the file system that are owned by nobody	
remove files from the file system that are owned by nobody, asking the user before each removal	
remove files from the home directory tree that were last accessed more than 100 days ago	
remove files in current directory according to the filenames found in ~/clang+llvm-3.3/bin/	
remove files in the current directory tree modified more than 31 days ago recursively	
"remove files in the current directory tree whose names match pattern ""file?"""	
remove files matching pattern '*-*x*.*' from the current directory tree	
remove files modified at least five days ago in directory trees /path/to/files*	
"remove files named ""core"" from the /work directory tree and write their names to /dev/stderr (the standard error"	
remove files that are greater than 1mb in size under <directory>	
remove files that are greater than 1mb in size under current directory	
remove files that are less than 1mb in size under <directory>	
remove files that are less than 1mb in size under current directory	
"remove files under /mnt/zip matching ""*prets copy"" with confirmation"	
remove files under current directory that contains white space in their name	
remove files under current directory with inode number $inum	
remove files whose names match regular expression '^.*/[a-za-z]+-[0-9]+x[0-9]+\.[a-za-z]+$' from the current directory tree	
remove files whose names start with `foo'	
remove filetype suffix (last dot and following characters if any) from filename	
"remove from the current directory tree all the regular files which have a dot in their names and contain string ""<img-name>-<width:integer>x<height:integer>.<file-ext> syntax"""	
remove gitlab.site.org from root's known hosts file.	
"remove group write permission on all files output by ""compaudit"""	
remove junk files modified more than 31 days ago recursively	
"remove last two underscore-delimited fields and following characters in ""t1_t2_t3_tn1_tn2.sh"" keeping only ""t1_t2_t3"""	
remove leading and trailing space from lines in file 'in.txt', interactively page through a hexdump of the result.	
"remove leading and trailing spaces from the output of 'hg st -r ""$path""' and save the result in variable ""var"""	
"remove leading and trailing spaces or tabs from ""   worda wordb wordc   """	
"remove leading and trailing spaces or tabs from ""$string"""	
"remove lines matching ""kpt#"" from ""data.txt"" and add left-justified line numbers"	
remove mac os x desktop services store files	
"remove newline characters from ""file.txt"""	
"remove newline characters from ""yourfile.txt"""	
"remove newlines from the output of ""./series.bc"" and pipe into ""sed 's.\\..g'"""	
remove recursively emacs backup files in the current directory	
remove regular files changed more than 15 days ago from the /tmp directory tree	
remove regular files in the current directory tree	
remove regular files whose names match perl regular expression '\w+-\d+x\d+\.\w+$' from the current directory tree	
remove safely all *.bak and *.backup files that were accessed last time more than 30 days ago	
remove sequence like '\xef\xbb\xbf' from first string of every '*.js' file in a current folder and subfolders, creating backup file with .bak extension for every changed file, and removing backup on success.	
remove sequence like '\xef\xbb\xbf' from first string of every file in a current folder and subfolders, creating backup file with .bak extension for every changed file, and removing backup on success.	
remove sess_* files that were modified more than 2 days ago	
"remove spaces from output of ""echo aa | wc -l"""	
remove spaces recursively from all subdirectories under current directory	
"remove symbolic links and get absolute path of ""${the_stuff_you_test}"" and save to variable ""dir_path"""	
"remove the ""123_"" prefix from all filenames of .txt files in current directory."	
"remove the ""^m"" characters from all *.ext files under /home directory"	
"remove the ""^m"" characters from all *.ext files under /home directory and save the results to new files with _new appended in their names"	
"remove the .jpg files from the current directory whose names match regular expression "".+-[0-9]+x[0-9]+\.jpg"""	
remove the file with inode number 752010	
remove the files from the home directory tree that were last accessed more than 100 days ago, with confirmation	
remove the files or directories 'bin/node', 'bin/node-waf', 'include/node', 'lib/node', 'lib/pkgconfig/nodejs.pc' and 'share/man/man1/node' with superuser privilege	
remove the files or directories 'bin/node', 'bin/node-waf', 'include/node', 'lib/node', 'lib/pkgconfig/nodejs.pc' and 'share/man/man1/node.1'	
"remove the first 13 characters of each "".txt"" filename in the ""/tmp"" directory tree and number the output"	
"remove the first 7 characters of every line in the output of ""history"""	
remove the last 2 tab-separated fields of each line in file pointed to by filename	
remove the last 3 characters from 987654321, keeping only 987654	
"remove the last file extension from ""filename.gz"""	
remove the last file extension from standard input	
"remove the last line from ""$file"" without reading the whole file or rewriting anything"	
"remove the last two alphanumeric file extensions from ""mpc-1.0.1.tar.gz"""	
remove the last two components (directories) of $path	
"remove the line matching ""pattern to match"" in ""./infile"" and print to standard output"	
remove the passphrase from user's ssh key without prompting.	
remove the passphrase from ~/.ssh/id_rsa.	
remove the path $1 from the path environment variable	
remove the regular files from the current directory that were last modified on november, 22	
remove the regular files from the current directory tree that are newer than /tmp/date.start but not newer than /tmp/date.end	
remove the regular files from the current directory tree that were last modified on november, 21	
remove top-level domain (.com, .org) from url's in urllist.txt	
remove trailing spaces and tabs from all *.java files under current directory	
remove trailing spaces from all files under current directory	
remove trailing spaces from all files under current directory and keep backups of the originals	
remove trailing spaces from all files under current directory ignoring directories wtih *.git* (case insensitive) in their paths	
"remove trailing spaces from the output of 'hg st -r ""$path""' and save the result in variable ""var"""	
remove trailing spaces, replace tabs with spaces, replace windows crlf with unix lf  in all *.java, *.xml and *.css files under current directory excluding ./vendor directory and its contents	
remove trailing tabs in .java files from the current directory tree	
remove trailing white spaces and replace crlf with lf in all files under current directory ignoring .git and .svn directories	
remove trailing white spaces from all *.py files under dir directory (ignoring .git path) and keep backups of the originals	
remove trailing white spaces from all *.rb files under current directory	
remove trailing white spaces from all *.rb, *.html, *.js, *.coffee, *.css, *.scss, *.erb, *.yml, *.ru files under current directory	
remove trailing white spaces from all files under current directory ignoring *.jpg, *.png and *.ttf files	
remove trailing white spaces from all files under current directory ignoring .git and .svn directories	
remove trailing white spaces from all files under current directory ignoring .git, .svn directories and binary files	
remove trailing white spaces from all files under current directory ignoring directories wtih *.git* (case insensitive) in their paths and keep backups of the originals	
remove trailing white spaces from all files under dir directory	
remove trailing white spaces from all files under dir directory and keep backups of the originals	
remove trailing white spaces from all files under dir directory ensuring white space safety in the filename	
remove trailing whitespaces from all regular non-hidden files in the current directory tree	
remove trailing whitespaces in .txt files from the current directory tree	
remove trailing whitespaces in txt files from the current directory tree	
"remove what follows the forth occurrence of the character "":"" in any field which contains it"	
remove with prompting all files starting in /mydir that have not been accessed in over 100 days	
remove with prompting all files that have not been accessed in over 100 days	
removes '/var/lib/mongodb/mongod.lock' in 'sudo' mode.	
removes 'foldername', and removes all content within if 'foldername' is folder.	
removes 'foo' file.	
removes 'latest' folder if empty.	
removes 'subversion' packages from system.	
removes 5 oldest files in the current folder.	
"removes 55, adds a 10-digit line number, and rearranges the date for each line in ""input"""	
"removes 55, adds a 10-digit line number, and rearranges the date for each line in ""input"" on osx"	
removes alias with 'sudo' name.	
removes all cached yum data from a system.	
removes all empty folders that ends with any-cased '*.bak' under '/users/' path.	
removes all empty folders under '/path/to/the/folder' path.	
removes all empty folders under current folder.	
removes all empty folders under current path, aged between 'first' and 'last' timestamps.	
removes all empty folders under path '/foo/bar' and the path itself.	
removes all empty folders under path '/thepath', printing info message on each operation.	
removes all empty folders with modification time more that 10 minutes ago from $homedirdata folder.	
removes all empty folders within $deletedir folder.	
removes all files but $1 newest ones from current folder.	
removes all files but 5 newest ones from current folder.	
removes all files from current folder but 3 newest ones	
removes all files from current folder but 5 newest ones, filtering out directories from initial search.	
removes all files from current folder but 5 newest ones, ignoring folders in a files list.	
removes all files from current folder but 5 newest ones.	
removes all files like '*.bak' in a current folder, and prints messages about what is being done.	
removes all files like 'a*.pdf' from current folder without prompting.	
removes all listed folders with content in sudo mode.	
removes all top-level *.pdf files in a current folder.	
removes all top-level empty folders within the current folder.	
removes any empty folder that matches pattern ed*.	
removes empty folder 'edi' and 'edw'.	
removes empty folder 'symlink'.	
removes empty folder, and hides error message if one is not empty.	
removes everything from current folder but '*ddl*' and '*docs*' files.	
removes files 'junk1', 'junk2', 'junk3'.	
removes files that are listed in file 'xaa'.	
removes files ~/.android/adbkey and ~/.android/adbkey.pub without prompting.	
removes first and last parts of path $path and saves the result in 'finalname' variable.	
removes first and last parts of path 'test/90_2a5/windows' and prints the result.	
removes last n lines from file.txt	
removes only lowest level subfolders from current directory tree (folders without files and another folders within).	
"removes resursively all files and folders named "".ds_store""."	
"removes resursively all files and folders named ""thumbs.db"", ignoring case distincts."	
removes shell alias with name 'python'.	
removes strings with pattern from file 'filename'.	
removes symlinks for formula bash-completion from the homebrew prefix.	
removes the 4th-from to 6th-from last lines in file	
removes the last 2 lines from a file	
removes trailing and starting newlines from file	
"removestr=$(echo ""$list"" | tr "":"" ""\n"" | grep -m 1 ""^$removepat\$"")"	<MISSING>
"rename ""/usr/bin/php"" to ""/usr/bin/~php"""	
"rename ""blah1"" to ""blah1-new"""	
"rename ""blah2"" to ""blah2-new"""	
"rename ""fghfilea"" to ""jklfilea"""	
"rename ""file.txt"" in directories ""v_1"", ""v_2"", and ""v_3"" each to ""v_1.txt"", ""v_2.txt"", and ""v_3.txt"" respectively and print the conversion"	
"rename ""file0001.txt"" to ""1.txt"""	
"rename ""file001abc.txt"" to ""abc1.txt"""	
"rename ""new"" to ""old"" and backup to ""old.old"" if ""old"" exists"	
"rename ""new"" to ""old"" and make a backup if ""old"" exists"	
"rename ""old"" to ""tmp"""	
"rename ""original.filename"" to ""new.original.filename"""	
"rename ""svnlog.py"" to ""svnlog"""	
"rename ""tux.png"" to "".tux.png"""	
"rename ""www_new"" to ""www"" even if ""www"" directory exists"	
rename $file file, preserving only part of name before '-' symbol, and appending '.pkg' suffix to the end	
rename '.mkv' extension to '.avi' for all files/directories under '/volume1/uploads' directory tree	
rename 's/(.*)$/new.$1/' original.filename	<MISSING>
rename 's/\.html$/\.txt/' *.html	<MISSING>
rename 's/^/new./' original.filename	<MISSING>
rename 's/^123_//' *.txt	<MISSING>
rename 's/^fgh/jkl/' fgh*	<MISSING>
rename 's/_h.png/_half.png/' *.png	<MISSING>
rename 'y/a-z/a-z/' *	<MISSING>
rename -f 'y/a-z/a-z/' *	<MISSING>
rename -n 's/special/regular/' **	<MISSING>
rename -v 's#/file##' v_{1,2,3}/file.txt	<MISSING>
rename -v 's/\.jpg/\.jpeg/' *.jpg	<MISSING>
rename .jpg files to .jpeg in all level 2 subdirectories of the current directory	
rename .jpg files to .jpeg in all subdirectories of the current directory	
rename _dbg.txt .txt **/*dbg*	<MISSING>
"rename absolute path of symbolic link ""dirln"" to ""dir2"""	
"rename all ""thumbs"" directories to ""thumb"" in the current directory and 1 level below"	
"rename all ""thumbs"" directories to ""thumb"" in the current directory tree"	
rename all *$lower1* files under current directory without descending into .git directory by replacing the first occurrence of $lower1 with $lower2 in their paths	
rename all *.html files under and below the current directory to *.var	
rename all *.jpg files to *.jpg$.jpg files under ../<dirname>  directory by appending the parent directory name at the beginning of their names	
rename all *.jpg files to *.jpg$.jpg files under current directory	
rename all *.jpg files to *.jpg$.jpg files under current directory by appending the parent directory name at the beginning of their names	
rename all *.jpg files to *_lrg.jpg files under temp/large directory	
rename all *.jpg files to *_med.jpg files under temp/medium directory	
rename all *.jpg files under current directory by appending parent directory name at the beginning of their names	
rename all *.jpg files under current directory by appending parent directory name at the beginning of their names if the name doesn't already contain the parent directory name	
rename all *.png files/directories to *48.png files/directories under current directory	
rename all *.txt regular files in the current directory tree to *.abc	
rename all *company* files/directories under current directory to *nemcompany* files/directories	
rename all .html files to .txt	
"rename all .html files to .txt (change filetype suffix) in a portable way without requiring the ""rename"" perl script."	
rename all .jpg files to .jpeg under the current directory and below	
"rename all .png files, changing the string ""_h.png"" into ""_half.png""."	
rename all .txt files to .bak in the current directory tree	
rename all 2.jpg files under ../d44203 by appending present working directory name at the beginning of their names	
rename all directories under current directory by replacing all occurrences of 'foo' (case insensitive) with 'bar' in their names	
rename all files and directories under current directory tree by converting the names to small letters without descending into 'cvs' directory	
rename all files in current directory to lowerase, overwriting any existing files.	
rename all files in current directory to lowerase.	
rename all files in current directory whose name starts with 'f0000', trimming a zero from any sequence of four zeroes in the name.	
"rename all files in current directory with names starting with ""fgh"" so they start with ""jkl"" instead"	
"rename all files in the current directory starting with ""fgh"" to start with ""jkl"""	
rename all files in the current directory to the md5 sum followed by the extension and print the conversions	
"rename all files matching ""access.log.<number>.gz"" incrementing <number>."	
rename all files under current directory by formatting the filenames with the sed scripts '\''s/^([^-]*)-\s*([^\.]*)/\l\1\e-\2/'\'', '\''s/ /_/g'\'' and '\''s/_-/-/g'\''	
rename all regular files under current directory tree with inode number 31467125 to 'new_name.html'	
rename all the png files to jpg files in the current fodler	
rename all the spaces in mp3 files to underscore	
rename all the svg.png files to png files in the current fodler	
rename all the text files  in the current folder to html files	
"rename file ""edited_blah.tmp"" to ""/etc/blah"""	
rename file extension '.andnav' (case insensitive) to '.tile' for all files/directories under current directory tree	
rename file extension '.andnav' to '.tile' for all files/directories under current directory tree	
rename file extensions for files with specific extension in the current folder	
rename file file.txt.123456 to file.txt	
rename file with inode number 31467125 to new_name.html	
rename file ~/junk/cart1 to ~/junk/a	
rename files from the current directory tree to the ascii standard	
"rename recursively all files in the current directory tree that are called ""article.xml"" to ""001_article.xml"""	
rename s/0000/000/ f0000*	<MISSING>
"rename the *.so files at level 2 of the current directory tree prepending their names with ""lib"""	
"rename the *.so files in the current directory tree prepending their names with ""lib"""	
rename uppercase file or folder name $1 to lower case name	
"renames all "".htm"" files to "".html"" files"	
renames all *.html files in a 'folder' directory to *.txt files.	
renames all *.html files in a current directory to *.txt files.	
renumbers all windows in the session in sequential order.	
"repeat ""image.png"" 10 times on a single line"	
"replace ""  "" with "" $uid "" in the output of ""history"""	
"replace "","" with ""\r\n"" in ""a,b"""	
"replace "",,"" with "", ,"" in ""$file"" and display the "","" delimited result as a table in ""less"" with a shift value of 5 and line numbers"	
"replace "",,"" with "", ,"" twice in ""data.csv"" and display the "","" delimited result as a table"	
"replace ""-"" with ""0"" in columns 4 and 5 of file ""test.in"" and format as a table"	
"replace ""_"" with newlines in ""testing\r\ntested_hello_world"" and display the named characters"	
"replace ""_"" with newlines in ""testing\r_tested"" and display the named characters"	
"replace ""dummyvalue"" with the system ip address in ""filename"""	
"replace ""exp_to_find_for_replacement"" with ""exp_to_replace"" for all the files in the current folder"	
"replace ""firstword"" with ""newfirstword"", ""secondword"" with ""newsecondword"", ""thirdword"" with ""newthirdword"" in all xml files in the current directory tree"	
"replace ""foo"" with ""bar"" in all files in the current directory tree"	
"replace ""foo"" with ""bar"" in all files in the current directory tree except hidden ones"	
"replace ""foo"" with ""bar"" in all php files in the current directory tree"	
"replace ""inputfile"" with a sorted unique list of its contents"	
"replace ""string1"" with ""string2"" in all regular files in the current directory tree"	
"replace ""version.old"" with ""version.new"" in the symbolic link target of ""somelibrary"""	
replace 'company' with 'newcompany' in all files under current directory	
replace 'company' with 'newcompany' in all files under current directory and keep backups with .bakup extension	
replace a string in all the files in the current folder	
replace a word in all the regular/normal files in the current folder	
replace a word in all the regular/normal files in the current folder(doesn't actually modify the original file just displays the replaced text)	
replace all ' ' with '-' from standard input	
replace all '置換前' with '置換後' in all regular files under current directory tree and modify them in-place	
"replace all colons (':') with newlines in $list and search for the first match to the regex ""^$removepat\$"" where $removepat is a variable and save the result to variable 'removestr'"	
replace all commas with tab characters in 'filename.csv' and page interactively through the result.	
"replace all instances of "";"" with ""\n"" in ""bla@some.com;john@home.com"""	
"replace all instances of ""string"" with ""longer_string"" in file ""input.txt"" and re-align"	
"replace all instances of ""string_to_replace"" with ""replace_with"" in file ""index.html"" and make a backup with suffix ""bak"""	
"replace all instances of ""string_to_replace"" with ""string_to_replace_it"" in ""index.html"""	
"replace all instances of ""string_to_replace"" with ""string_to_replace_it"" in ""index.html"" and write the output to standard output and ""index.html"""	
"replace all instances of ""string_to_replace"" with ""string_to_replace_it"" in file ""index.html"" and make a backup with suffix "".bak"""	
"replace all instances of ""string_to_replace"" with ""string_to_replace_it"" in file ""index.html"" and make a backup with suffix ""bak"" on osx"	
replace all matches with the regex expanded by $p_from with the text expanded by $p_to in all regular files under current directory not going into subdirectories and modify the files in-place	
replace all negative numbers in the 3rd comma-separated column of inputfile by the number notated in parenthesis instead of with a minus sign.	
"replace all newlines except the last with a comma in ""test.txt"""	
replace all newlines from standard input except the last with spaces	
"replace all newlines from the contents of ""file"" except the last with spaces"	
replace all newlines with spaces in standard input	
"replace all newlines with spaces in the contents of ""file"""	
replace all non-punctuation characters with newlines from standard input	
"replace all occurrence of ""log_errors = off"" with ""log_errors = on"" in all 'php.ini' files in the current directory tree"	
"replace all occurrence of ""subdomaina.example.com"" with ""subdomainb.example.com"" in all files under /home/www and below"	
"replace all occurrence of ""subdomaina.example.com"" with ""subdomainb.example.com"" in all files under the current directory and below"	
"replace all occurrence of ""subdomaina.example.com"" with ""subdomainb.example.com"" in all files under the current directory and below ignoring svn files"	
"replace all occurrence of ""toreplace"" with ""replaced"" in all files under /home/www"	
"replace all occurrences of ""foo_fn"" with ""bar_fn"" in the files named ""foo_fn"" from the current directory tree"	
"replace all occurrences of ""stringa"" with ""stringb"" in the *.php and *.html files residing in the current directory tree"	
replace all occurrences of '2013 magento inc.' with '2012 magento inc.' in all files with '.php, '.xml' and '.phtml' extensions under current directory tree	
replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/home/www' directory tree and modify them in-place	
replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree and modify them in-place	
replace all occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in all regular files under '/home/www' directory tree	
replace all occurrences of edx (case insensitive) with gurukul in all *.css (case insensitive) files under ./cms/djangoapps/contentstore/management/commands/tests directory	
replace all occurrences of edx (case insensitive) with gurukul in all *.css (case insensitive) files under ./cms/djangoapps/contentstore/views directory	
replace all occurrences of foo (case insensitive) with bar in all *.css (case insensitive) files under %s directory	
"replace all occurrences of word ""foo"" with ""bar"" in *.c and *.h files from the current directory tree"	
replace all ocurrences of '<title>' with 'sblmtitle\n<title>' in all the regular files with '.html' extension under current directory tree	
replace all sequence of 'blank' characters in file 'log' with a single occurence of such symbol and print space-separated fields of each string but first two fields	
replace all spaces (' ') with comma (',') in ${to_ignore[@]}, append with '--ignore ' and save the resultant string to variable 'args'	
replace all spaces with underscores in directory names under current directory.	
replace all spaces with underscores in directory paths under current directory.	
replace all spaces with underscores in file paths under current directory.	
"replace all the mathes to regex '<script type=""text\/javascript"" charset=""utf-8"" src=""file.js""><\/script>.*' with '<script type=""text\/javascript"" charset=""utf-8"" src=""file2.js""><\/script>' in all html files under $dir directory tree modifying the files in-place"	
"replace all urls in ""myhtmlfile.html"" with ""$pub_url"" and create a backup with suffix "".bak"""	
replace any blank character from standard input with a tab	
replace any sequence of spaces in file 'text.txt' with single space and print 4th space separated field	
replace commas (',') with newlines in $mount_opts and search for the regex '^acl$'	
"replace each new line in ""input.txt"" with "":"""	
"replace each newline in input ""1\n2\n3\n4\n5"" with a comma"	
"replace each non-blank line in ""yourfile"" preceded with ""px="" where ""x"" is the line number"	
"replace newline with ""_"" in ""file"" then search for ""_foo_"" and output with ""_"" characters deleted"	
"replace sequential tabs with a single space in ""thefile.txt"" and write to ""the_modified_copy.txt"""	
replace spaces in directory names with underscores for all directories in the current directory tree	
replace spaces in file names with underscores for all files in the current directory tree	
"replace spaces with underscores in the names of all files and directories in the ""/tmp"" directory tree"	
replace spaces with underscores in the names of all files and directories in the current directory tree	
"replace the ""openssl"" command executable with a symbolic link to ""/usr/local/ssl/bin/openssl"""	
"replace the first occurrence of ""foo"" with ""bar"" on every line in .txt files from the current directory tree"	
"replace the first occurrence of ""string1"" on each line with ""string2"" in all regular files in the current directory tree"	
"replace the leading spaces in the output of ""history"" with periods"	
replace the name php_admin_flag to #php_admin_flag in all the .htaccess files in the folder /home/nobody/public_html	
"replace the occurrences of ""hoge"" with ""moga"" once per each line of the .yaml files from the current directory tree"	
"replace the occurrences of ""hoge"" with ""moga"" once per each line of the files from the current directory tree"	
"replace the occurrences of ""hoge"" with ""moga"" once per each line of the files from the current directory tree, keeping a backup copy of every touched file"	
"replace the spaces after line number in the output of history with "".."""	
replace the text 'windows' with 'linux' in all text files in the current directory and below	
replace the word apple with orange in all the files in the current folder	
replace the word apple with orange in all the regular/normal files in the current folder	
replace the word foo to bar in all the regular/normal files in the current folder (does not update the file)	
"replace the word foo to bar in the current folder in all the regular/normal files containing the word ""baz"" in their name (does not update the file)"	
replace the word foo to bar in the current folder in all the regular/normal files which have execute permission  (does not update the file)	
replaces any occurences of '*favicon.ico*' in any subfolder with file '/root/favicon.ico'.	
replaces the last occurrence of 'a' with 'c'	
replaces the last occurrence of 'a' with 'c' in file	
replaces the second to last line of file	
report all c language source code files under the current directory	
report all files in /mydir1 and /mydir2 larger than 2000 blocks and accessed in over 30 days	
report all files starting in the directories /mydir1 and /mydir2 larger than 2,000 blocks that have not been accessed in over 30 days	
report available space on the file system containing /tmp in kilobytes.	
report file system '/dev/disk0s2' disk usage	
report file system containing /example disk usage in kilobytes.	
report file system containing /tmp disk usage in kilobytes.	
report file system containing path to /dir/inner_dir/ disk usage human-readable.	
report file system containing path to /dir/inner_dir/ disk usage in kilobytes.	
report file system containing path to /some/dir disk usage in kilobytes.	
report file system containing path to the current working directory disk usage human-readable.	
report file system containing path to the current working directory disk usage in kilobytes.	
report file system containing path to the current working directory inodes usage.	
report file system containing path-to-file disk usage human-readable.	
report file system containing the current directory disk usage	
report file system containing the current directory disk usage in kilobytes.	
report file system disk space usage in human readable format	
report file system inodes usage in human readable format	
report file system mounted at $path_in_question disk usage if canonical path $path_in_question is a mount point.	
report file systems disk space usage pretty formatted.	
report file systems disk usage for file systems of type <type>.	
report file systems disk usage human-readable using posix output format.	
report file systems disk usage in 1gb blocks.	
report file systems disk usage in kilobytes.	
report file systems disk usage using posix output format.	
report file systems disk usage, elide all entries insignificant to available space, and produce a grand total.	
report file systems inode usage.	
report file systems inodes usage.	
report only total size of file systems in 1t blocks.	
report only total size of file systems in terabytes.	
report root file system disk usage human-readable.	
report total disk usage info on root file system, printing all sizes as power of 1000	
report total file systems disk usage estimated in terabytes	
report total file systems disk usage in 1t blocks.	
report total file systems disk usage.	
report total size of the root filesystem disk usage in powers of 1000.	
"reports count of characters in the value of ${foo_no_external_space} variable as follows:  ""length(foo_no_external_space)==<counted number of characters>"""	
"reports count of characters in the value of ${foo_no_lead_space} variable as follows: ""length(foo_no_lead_space)==<counted number of characters>"""	
"reports count of characters in the value of ${foo_no_trail_space} variable as follows: ""length(foo_no_trail_space)==<counted number of characters>"""	
"reports count of characters in the value of ${foo_no_whitespace} variable as follows: ""length(foo_no_whitespace)==<counted number of characters>"""	
"reports count of characters in the value of ${foo} variable as follows:  ""length(foo)==<counted number of characters>"""	
reports count of processors in system.	
reports time consumed by command 'sleep 1' to the file time.txt together with command error output.	
reports time consumed by command 'sleep 1' to the file time.txt together, and saves command error output to sleep.stderr.	
reports time consumed by command 'sleep 1'.	
represent current date in rfc 3339 format with precision to seconds and save it to 'timestamp' variable	
represent the current time as seconds since epoch and save it to variable 'today'	
"represent the utc date given in time string ""1970.01.01-$string1"" as number of seconds since the epoch and save it in 't1' variable"	
represent time string $mod_date as seconds since epoch and save to variable 'mod_date1'	
request a record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'dig'	
request authority info with comments for 'djzah.com' from name server 'ns1.hosangit.com', and pass it to 'script.awk' awk script.	
"request changing the passphrase of key file ""private.key"""	
request dns record for  domain 'dragon-architect.com' with tracing and additional section, and extract third block of text, separated between two new lines.	
request ip address for each domain name received on the command input	
request ip address of 'myip.opendns.com' from name server 'resolver1.opendns.com'	
request mx record of 'example.com' domain, and filter out all comment strings	
request ns record for com. domain, receiving only authoritative answers	
"request ssh to run ""echo foo; sleep 5; echo bar"" in the background"	
"request that the master ssh connection ""officefirewall"" exits"	
"request that the master ssh connection ""otherhosttunnel"" exits"	
reread user's .profile configuration file.	
resize all the jpg images in the current folder to the size 300x300	
"resolve all symlinks in path to ""firefox"" binary if it exists in path, resulting in absolute path with no symlinks."	
resolve any symlinks in working directory, and go to resulting pathname.	
"resolve symbolic link of file ""/foo/bar/baz"""	
"resolve symbolic link of file ""file"" even if the file does not exist"	
"resolve symbolic link of path of ""python2.7"""	
rest_cmd=$(shopt -p dotglob)	<MISSING>
"result=""$(dig +short @""$server"" ""$domain"" | wc -l)"""	<MISSING>
"result=$(groups ""$line"" | sed 's/ /\n/g' | egrep -v ""_unknown|sciences|everyone|netaccounts"")"	<MISSING>
"results=$(groups ""$line"" | tr ' ' '\n' | egrep -v ""_unknown|sciences|everyone|netaccounts"")"	<MISSING>
"retrieve column number from column name ""target"" in file ""table"""	
retrieve only build number of current kernel, ie. #104	
"return 0 if at least one ""abc"" file in the current directory tree contains text ""xyz"""	
return 0 if file system is mounted on '/full/path'	
return a list of files newer than file poop	
return all of the .conf files in pat's user folder and subdirectories	
return every file that does not have bar somewhere in its full pathname	
return the depth of the current directory tree	
return the files that are newer than file `myfile'	
"return the list of files named ""filename"" that are 50 megabytes or larger"	
returns 0 exit status despite of 'somecommand' execution result.	
returns 0 if user $1 belongs to group $2.	
returns a list of  files create time is 1 minute ago under the root directory.	
returns a list of  files modification newer than poop	
returns exit code 1 and terminates shell if 'set -e' was applied.	
returns exit code 1.	
returns exit status 0 and prints exit status of previous command.	
returns exit status 0.	
returns the first 100 bytes in the file	
returns the number of modified files in a git repository, whitespaces stripped.	
returns the single most recent file in a directory	
returns the single most recent file in a directory and all subdirectories.	
returns unsuccessful exit code on each found file like '*tests*' within current directory.	
rev   test.txt | sort  -k2 | rev	<MISSING>
rev $filename | sort | uniq -f=n | rev	<MISSING>
rev domains.txt | cut -d '.' -f 2- | rev	<MISSING>
rev file	<MISSING>
"rev file | awk '{print ""result ="",$0}'"	<MISSING>
rev file.txt	<MISSING>
rev file.txt | cut -d ' ' -f1 | rev	<MISSING>
rev file.txt | cut -d/ -f1 | rev	<MISSING>
rev input | uniq -f1 | rev	<MISSING>
rev urllist.txt | cut -d. -f 2- | rev	<MISSING>
reverse a file with comma deliminators instead of newline deliminators	
reverse both words and lines in file	
reverse input with comma deliminators	
"reverse the order of lines in ""dax-weekly.csv"" keeping the first line the same"	
"reverse the order of lines in ""myfile.txt"" using bsd ""tail"" command"	
"reverse the space separated words in ""35 53 102 342"""	
"reverse the space separated words in ""aaaa eeee bbbb ffff cccc"""	
reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'	
reverse=$(dig -x $ip +short)	<MISSING>
reverses order of lines in a.txt and saves them to b.txt	
reversibly sorts content of the '${tmp}/${script_name}.kb' file, comparing human readable numbers in file strings.	
reversibly sorts content of the '${tmp}/${script_name}.name' file	
reversibly sorts content of the '${tmp}/${script_name}.pid' file, comparing human readable numbers in file strings.	
revert $string value and print first 20 space-separated fields	
rewrite 'temp.txt' omitting any repeating lines	
rgrep . | wc -l	<MISSING>
rm $(<xaa)	<MISSING>
rm **/*.pyc	<MISSING>
"rm --force ""${temp}"""	<MISSING>
rm -d symlink	<MISSING>
rm -f *.bak *~	<MISSING>
rm -f *.pdf	<MISSING>
rm -f /tmp/stored_exception /tmp/stored_exception_line /tmp/stored_exception_source	<MISSING>
rm -f a*.pdf	<MISSING>
rm -f ~/.android/adbkey ~/.android/adbkey.pub	<MISSING>
"rm -fr ""${tmp}/"";"	<MISSING>
rm -r $tmpdir	<MISSING>
rm -r bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node.1	<MISSING>
rm -r classes	<MISSING>
"rm -rf ""$(pwd -p)""/*"	<MISSING>
rm -rf *	<MISSING>
rm -rf *~important-file	<MISSING>
rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*	<MISSING>
"rm -rf `find . -type d -name "".svn""`"	<MISSING>
rm -rf foldername	<MISSING>
rm -ri *	<MISSING>
rm -v *.bak	<MISSING>
rm /var/www/html/**/_* /var/www/html/**/.ds_store	<MISSING>
"rm `du * | awk '$1 == ""0"" {print $2}'`"	<MISSING>
rm `find . -name \*.pyc`	<MISSING>
rm `find ./ -name '.ds_store'` -rf	<MISSING>
rm `find tmp -maxdepth 1 -name '*.mp3'`	<MISSING>
rm `ls -t | awk 'nr>5'`	<MISSING>
rm foo	<MISSING>
rm junk1 junk2 junk3	<MISSING>
rm=`which rm`	<MISSING>
"rmdir ""$(dirname $(dirname $dir))"""	<MISSING>
"rmdir ""$(dirname $dir)"""	<MISSING>
rmdir --ignore-fail-on-non-empty $newbasedir/data/newdatacopy	<MISSING>
rmdir --ignore-fail-on-non-empty newbasedir/data/newdatacopy	<MISSING>
rmdir ed*	<MISSING>
rmdir edi edw	<MISSING>
rmdir latest	<MISSING>
rmdir nonsense_dir	<MISSING>
rotates the dirs stack so that the second directory (counting from the right of the list shown by `dirs', starting with zero) is at the top.	
rpm -qf `which sort`	<MISSING>
rpm -qfi `which ldconfig`	<MISSING>
rpm2cpio foo.rpm | xzcat | cpio -idmv	<MISSING>
rpm2cpio libstdc++-4.9.2-1.fc21.x86_64.rpm |cpio -idmv	<MISSING>
rpm2cpio packagename | cpio -ivd	<MISSING>
rpm2cpio php-5.1.4-1.esp1.x86_64.rpm | cpio -idmv	<MISSING>
rsync $opts $find $backupdir	<MISSING>
rsync --blocking-io *.cc *.h sconstruct rsync://localhost:40001/bledge_ce	<MISSING>
rsync --exclude='b/' --exclude='c/' . anotherhost:/path/to/target/directory	<MISSING>
rsync --iconv=utf-8,utf-8-mac /home/username/path/on/server/ 'username@your.ip.address.here:/users/username/path/on/machine/'	<MISSING>
rsync --iconv=utf-8-mac,utf-8 /users/username/path/on/machine/ 'username@server.ip.address.here:/home/username/path/on/server/'	<MISSING>
"rsync --list-only --include ""*2012*.xml"" -exclude ""*.xml"" serveripaddress::pt/dir/files/ --port=111 > output.txt"	<MISSING>
rsync --partial --progress --rsh=ssh local_file user@host:remote_file	<MISSING>
rsync --progress -avhe ssh /usr/local/  xxx.xxx.xxx.xxx:/backup/usr/local/	<MISSING>
"rsync --recursive --exclude 'foo' * ""$other"""	<MISSING>
"rsync --recursive --prune-empty-dirs --include=""*.txt"" --filter=""-! */"" dir_1 copy_of_dir_1"	<MISSING>
rsync --recursive emptydir/ destination/newdir	<MISSING>
rsync --sparse sparse-1 sparse-1-copy	<MISSING>
rsync -a --delete blanktest/ test/	<MISSING>
rsync -a --exclude .svn path/to/working/copy path/to/export	<MISSING>
"rsync -a --filter=""-! */"" sorce_dir/ target_dir/"	<MISSING>
rsync -a --include='*/' --exclude='*' source/ destination/	<MISSING>
rsync -a --progress --remove-source-files src/test/ dest	<MISSING>
rsync -a --relative /new/x/y/z/ user@remote:/pre_existing/dir/	<MISSING>
rsync -a --relative /top/a/b/c/d remote:/	<MISSING>
"rsync -a --rsync-path=""mkdir -p /tmp/x/y/z/ && rsync"" $source user@remote:/tmp/x/y/z/"	<MISSING>
rsync -a --stats --progress --delete /home/path server:path	<MISSING>
"rsync -a -f""+ */"" -f""- *"" source/ destination/"	<MISSING>
"rsync -a -f""+ info.txt"" -f""+ data.zip"" -f'-! */' folder1/ copy_of_folder1/"	<MISSING>
rsync -a -v --ignore-existing src dst	<MISSING>
rsync -a -v src dst	<MISSING>
rsync -a /mnt/source-tmp /media/destination/	<MISSING>
rsync -a myfile /foo/bar/	<MISSING>
rsync -ahvz /path/to/sfolder name@remote.server:/path/to/remote/dfolder	<MISSING>
rsync -ahvz /path/to/sfolder/ name@remote.server:/path/to/remote/dfolder	<MISSING>
rsync -ap --include=*/ --include=*.txt --exclude=* . /path/to/dest	<MISSING>
rsync -apshiv remote:directory .	<MISSING>
rsync -aq --rsync-path='mkdir -p /tmp/imaginary/ && rsync' file user@remote:/tmp/imaginary/	<MISSING>
rsync -aqz _vim/ ~/.vim	<MISSING>
rsync -aqz _vimrc ~/.vimrc	<MISSING>
rsync -auv -e ssh --progress sourcedir/ user@dest.com:/dest/dir/	<MISSING>
"rsync -auve ""ssh -p 2222"" . me@localhost:/some/path"	<MISSING>
rsync -av $myfolder .	<MISSING>
rsync -av --copy-dirlinks --delete ../htmlguide ~/src/	<MISSING>
rsync -av --delete src-dir remote-user@remote-host:dest-dir	<MISSING>
rsync -av --exclude '*.svn' user@server:/my/dir .	<MISSING>
rsync -av --exclude='path1/to/exclude' --exclude='path2/to/exclude' source destination	<MISSING>
"rsync -av --files-from=- --rsync-path=""sudo rsync"" /path/to/files user@targethost:/path"	<MISSING>
rsync -av --progress --exclude=*.vob --exclude=*.avi --exclude=*.mkv --exclude=*.ts --exclude=*.mpg --exclude=*.iso --exclude=*ar --exclude=*.vob --exclude=*.bup --exclude=*.cdi --exclude=*.iso --exclude=*.shn --exclude=*.mpg --exclude=*.avi --exclude=*.dat --exclude=*.img --exclude=*.nrg --exclude=*.cdr --exclude=*.bin --exclude=*.mov --exclude=*.goutputs* --exclude=*.flv --exclude=*.mov --exclude=*.m2ts --exclude=*.cdg --exclude=*.ifo --exclude=*.asf --exclude=*.ite /media/2tb\ data/data/music/* /media/wd/network_sync/music/	<MISSING>
rsync -av --progress sourcefolder /destinationfolder --exclude thefoldertoexclude	<MISSING>
"rsync -av --rsync-path=""sudo rsync"" /path/to/files user@targethost:/path"	<MISSING>
rsync -av . server2::sharename/b	<MISSING>
rsync -av /home/user1 wobgalaxy02:/home/user1	<MISSING>
rsync -av /home/user1/ wobgalaxy02:/home/user1/	<MISSING>
rsync -av /path/to/files user@targethost:/path	<MISSING>
rsync -av <source_dir> rsyncuser@192.168.1.110:/srv/www/prj112/myfolder	<MISSING>
rsync -av remote_host:'$(find logs -type f -ctime -1)' local_dir	<MISSING>
"rsync -ave ssh '""louis theroux""''""'""'""'""''""s la stories""'"	<MISSING>
rsync -ave ssh filetocopy ssh.myhost.net:/some/nonexisting/dirtocopyto	<MISSING>
rsync -avh /home/abc/* /mnt/windowsabc	<MISSING>
rsync -avlzp /path/to/sfolder name@remote.server:/path/to/remote/dfolder	<MISSING>
rsync -avlzp user@remotemachine:/path/to/files /path/to/this/folder	<MISSING>
rsync -avr $i /iscsi;	<MISSING>
rsync -avr foo/bar/baz.c remote:/tmp/	<MISSING>
rsync -avr somedir/./foo/bar/baz.c remote:/tmp/	<MISSING>
rsync -avv source_host:path/to/application.ini ./application.ini	<MISSING>
rsync -avz --chmod=o-rwx -p tata/ tata2/	<MISSING>
rsync -avz --chmod=ug=rwx --chmod=o=rx -e ssh src dest	<MISSING>
rsync -avz --ignore-existing /source folder/* user@remoteserver:/dstfolder/	<MISSING>
"rsync -avz --progress local/path/some_file usr@server.com:""/some/path/"""	<MISSING>
"rsync -avz --rsh=""ssh -p$2"" key.pub $1:~/.ssh/key.pub"	<MISSING>
rsync -avz --rsh='ssh -p3382' source root@remote_server_name:/opt/backups	<MISSING>
"rsync -avz -e ""ssh -p $portnumber"" user@remote.host:/path/to/copy /local/path"	<MISSING>
"rsync -avz -e ""ssh -p $portnumber"" user@remoteip:/path/to/files/ /local/path/"	<MISSING>
rsync -avz -e ssh --progress user@source-server:/somedira/ somedirb/	<MISSING>
rsync -avz foo:src/bar /data/tmp	<MISSING>
rsync -avz tata/ tata2/	<MISSING>
rsync -avzn --list-only --include 'company1/' --include 'company1/unique_folder1/***' --exclude '*' -e ssh user@server.com:/path/to/old/data/ /path/to/new/data	<MISSING>
rsync -avzru --delete-excluded /media/incoming/music/ server:/media/10001/music/	<MISSING>
rsync -avzru --delete-excluded server:/media/10001/music/ /media/incoming/music/	<MISSING>
rsync -az --delete /mnt/data/ /media/wd_disk_1/current_working_data/;	<MISSING>
"rsync -azp -e ""ssh -p 2121"" /path/to/files/source user@remoteip:/path/to/files/destination"	<MISSING>
"rsync -azp -e ""ssh -p port_number"" source destination"	<MISSING>
rsync -azvu -e ssh user@host1:/directory/ user@host2:/directory2/	<MISSING>
rsync -chavzp --stats /path/to/copy user@host.remoted.from:/path/to/local/storage	<MISSING>
rsync -chavzp --stats user@remote.host:/path/to/copy /path/to/local/storage	<MISSING>
rsync -e ssh file host:/directory/.	<MISSING>
rsync -nvral test/a test/dest --exclude=a/b/c/d	<MISSING>
rsync -nvral test/a/ test/dest --exclude=/b/c/d	<MISSING>
rsync -p -e ssh local_file user@host:remote_file	<MISSING>
rsync -pogtetvr --progress --bwlimit=2000 xxx-files different-stuff	<MISSING>
rsync -pr ./export /path/to/webroot	<MISSING>
rsync -prt --size-only original_dir copy_dir	<MISSING>
rsync -r --verbose --exclude 'exclude_pattern' ./* /to/where/	<MISSING>
rsync -r /path/to/source username@computer:/path/to/dest	<MISSING>
rsync -r src/prog.js images/icon.jpg /tmp/package	<MISSING>
rsync -r username@computer:/path/to/source /path/to/dest	<MISSING>
"rsync -rave ""ssh -i /home/test/pkey_new.pem"" /var/www/test/ ubuntu@231.210.24.48:/var/www/test"	<MISSING>
rsync -ravz /source/backup /destination	<MISSING>
"rsync -rcn --out-format=""%n"" old/ new/"	<MISSING>
rsync -rl --delete-after --safe-links pi@192.168.1.pi:/{lib,usr} $home/raspberrypi/rootfs	<MISSING>
rsync -rtuv /path/to/dir_a/* /path/to/dir_b	<MISSING>
rsync -rtuv /path/to/dir_b/* /path/to/dir_a	<MISSING>
rsync -rtvpl /source/backup /destination	<MISSING>
rsync -rv src/prog.js images/icon.jpg /tmp/package/	<MISSING>
rsync -rvc --delete --size-only --dry-run source dir target dir	<MISSING>
rsync -rvv *.txt user@remote.machine:/tmp/newdir/	<MISSING>
rsync -rvv --recursive /path/to/data/myappdata user@host:/remote/path/to/data/newdirname	<MISSING>
rsync -rvv /path/to/data/myappdata user@host:/remote/path/to/data/myappdata	<MISSING>
rsync -rvv /path/to/data/myappdata/*.txt user@host:/remote/path/to/data/myappdata/	<MISSING>
rsync -rvz --chmod=ugo=rwx -e ssh source destination	<MISSING>
rsync -rvz --progress --remove-sent-files ./dir user@host:/path	<MISSING>
rsync -rvz -e 'ssh -p 2222' --progress --remove-sent-files ./dir user@host:/path	<MISSING>
rsync -rvz -e 'ssh -p 2222' --progress ./dir user@host:/path	<MISSING>
rsync -u -r --delete dir_a dir_b	<MISSING>
rsync -u -r --delete dir_b dir_a	<MISSING>
rsync -u src dest	<MISSING>
rsync -ur dir_a dir_b && rsync -ur dir_b dir_a	<MISSING>
rsync -urv --progress dir_a dir_b && rsync -urv  --progress dir_b dir_a	<MISSING>
rsync -vaut ~/.env* ~/.bash* app1:	<MISSING>
rsync -vuar --delete-after path/subfolder/ path/	<MISSING>
"rsync -zvr --exclude=""*"" --include=""*.sh"" --include=""*/"" ""$from"" root@$host:/home/tmp/"	<MISSING>
"rsync -zvr --include=""*.sh"" --exclude=""*"" $from/*  root@$host:/home/tmp/"	<MISSING>
rsync /dev/null node:existing-dir/new-dir/	<MISSING>
rsync /path/to/local/storage user@remote.host:/path/to/copy	<MISSING>
rsync 6.3.3/6.3.3/macosx/bin/mybinary ~/work/binaries/macosx/6.3.3/	<MISSING>
rsync symdir/ symdir_output/ -a --copy-links -v	<MISSING>
rsync_src=`mktemp -d -p $mnt_dir`	<MISSING>
"ruby -e ""$(curl -fssl https://raw.github.com/homebrew/homebrew/go/install)"""	<MISSING>
ruby-script.rb | column -s $'\t' -t	<MISSING>
"run ""./configure"" with a new environment variable cc set to the full path of the command 'cc'"	
"run ""./configure"" with a new environment variable cc set to the full path of the command 'gcc'"	
"run ""command"" on server ""host"" as user ""user"""	
"run ""myprogram"" in the current directory, pausing for user input at each page."	
"run ""myprogram"", pausing for user input at each page."	
"run ""ps -elfc"" followed by ""ls"" on host ""example.com"""	
"run ""tar -xzvf ..."" as user $username"	
"run ""your_command"", letting the user page through the output and move around with the arrow keys - the q key terminates and returns to the shell prompt."	
run 'chmod 0644' on all files in the current directory tree	
run 'chmod 0755' on all directories in the current directory tree	
run 'command', pausing and waiting for user interaction after each page of output.	
run 'git pull' and, if successful, 'git status' in every git repository in the current directory	
run 'git pull' in every git repository in the current directory	
run 'git pull' in every subdirectory of the current directory	
run 'join' on file1 and file2, using a literal tab character as field separator.	
run 'join' with the number-sorted output of file1 and file2, without modifying file1 or file2: for each line with a common first field in file1 and file2, output the common field followed by the extra fields in both files.	
run 'make -e' with an environment variable 'hostname' set to the system hostname	
run 'make' with parameter k_version set to current kernel release.	
run 'otherscript.sh' script with all environment variables specified in the file 'xxxx'	
run 'somecommand' in an environment without the foo variable.	
run 'top' in batch mode (don't accept user input) with delay of 1 second between updates, and duplicate the standard output to file 'output.log' in current directory.	
run ./yourprogram without address space randomization, reporting actual machine type.	
run .makeall.sh in an empty environment.	
run /bin/true with 1 to 100000 as arguments	
run /bin/true with 1 to 99999 as arguments	
"run 10 bash processes at most 4 at a time of ""echo start n; sleep 3; echo done n"" for n ranging from 1 to 10"	
run `command' on each file from the current directory tree	
run `command' passing the files from the current directory tree as arguments	
run `fastqc' on all the fastqc files in the current directory tree	
"run a ""rm"" process to recursively remove ""cache"", making it immune to all sighup signals sent to it."	
"run a command ""dbca -silent -createdatabase -templatename general_purpose.dbc -gdbname qualidade -syspassword password -systempassword password -scriptdest /u01/app/oracle/oradata/qualidade -characterset we8iso8859p1"" with bash shell as user oracle"	
run a program in a named screen session	
run a script in 1000 seconds	
run a shell as user jenkins	
run a shell in a named screen session	
run a shell with all environment variables specified in the file 'cronenv' in the user's home directory.	
run a somebashstatement with the filename as argument, inside a for loop that iterates over a number of filenames found recursively in /path that match 'pattern'	
run an awk program on every txt file found in the current directory tree	
run bash in screen and source a file before printing the prompt	
run bash shell as user root	
run checksums recursively from the current directory, and give back the filenames of all identical checksum results	
run cmd1 and cmd2 on each file/directory under current directory with the file/directory path as a positional argument to those commands	
"run command ""$web --quiet"" in backgrounf as user  named as the value of the variable $user"	
"run command ""${objectdb_home}/bin/objectdb.sh start"" $java_user"" as user $java_user"	
"run command ""/path/to/my_daemon & echo \$! > /tmp/su.joe.$$"" as user joe"	
"run command ""/path/to/my_daemon & echo \$! > /tmp/su.joe.$$"" as user joe and redirect the output to file /tmp/su.joe.$$"	
"run command ""/path/to/my_daemon"" as user joe and redirect the output to file /some/output/file"	
"run command ""/usr/bin/psql database -c \""select 'drop table ' || .... "" as user postgres"	
"run command ""cd /home/$username/$project ; svn update"" as user named as value of the variable $username"	
"run command ""cd /home/$username/$project; svn update"" with a shell as user username2"	
"run command ""command"" as user user1 with password ""password"""	
"run command ""command"" as user username with a full login simulation"	
"run command ""createdb $dbname"" as user postgres"	
"run command ""dnf install glibc.i686"" as user root"	
"run command ""exec > >( logger -t $prg ) 2>&1 ; cd $wkd; { $bin $arg & }; echo \$! > $pid "" as user $usr"	
"run command ""program"" as the current user"	
"run command ""r -e \""install.packages('shiny', repos='http://cran.rstudio.com/')\"""" as user root with a full login simulation"	
"run command ""set -a; . /path/to/nullmailer-vars; set +a; /usr/sbin/logcheck"" with a bash as user root"	
"run command ""sh runprogram.sh"" as user jetty"	
"run command ""ssh user1@192.168.1.2 \""awk '\\\$5==1{print \\\$3}' filename.log\"""" as user1 and unify the result"	
run command './bin/elasticsearch -d --default.path.conf=/etc/elasticsearch' as user elasticsearch	
"run command 'bash --rcfile <(echo ""source ~/.bashrc; source myfile"")' as user root with a bash shell"	
run command 'bash --rcfile myfile' as user root	
run command 'ls -hal /root/ > /root/test.out' as user root	
run command 'source myfile; bash' as user root	
run command 'su whoami' on host 'remotehost'	
run command specified by $line, replace space (' ') with newline and save the output to variable 'arr'	
run command with all the file/directory path under whatever directory as arguments	
"run commands ""df -k;uname -a"" on server ""192.168.79.134"""	
run ipython nbconvert with all the file/directory paths under current directory as arguments	
run ksh shell as user apache	
run ls command on *.pl files	
run ls command on files found	
run mycommand in /tmp without changing the current shell's working directory	
run perl -v (displays informations about perl's setup) in an empty environment.	
"run programm ""/home/oracle/database/runinstaller"" as user oracle in background"	
run rsync with options specified by variable opts, copying directory(ies) specified by variable find, and to destination specified by variable backupdir.	
"run script  ""runprogram.sh"" as user jetty"	
"run script ""runprogram.sh"" as user jetty"	
run script $2 on remote host $1 using interpreter $interpreter with pseudo-terminal allocation	
run script /path/to/my_app as user user_foobar in background	
run script `deslash.sh' on all thumb.png files in the current directory tree	
run script `fixname.sh' for each regular file from the current directory tree	
run script filename.sh as root with preserved user environment	
"run sed command ""s#\(export\ path=\""\)\(.*\)#\1/home/$(whoami)/bin:~/\.local/bin:\2#"" on ""~/.zshrc"" where ""$(whoami)"" is replaced with the current user name"	
run somebashstatement with the filename as argument, for files recursively in /path that match 'pattern'	
run somecommand with as many arguments as fit on the command line at once for files recursively in /path that match 'pattern'	
run somecommand with one argument for each file recursively in /path that matches 'pattern'	
run svn checkout in every directory named 'needed_dir' under repository_dir/$f	
run the command 'true' with an empty environment variable dofirst	
run the file command on every regular file under current directory	
run the find command with all positional parameters	
run the find command with all shell positional arguments	
"run the java archive ""program.jar"" in the background and immune to sighup (hangup signals) sent to it."	
run the java archive 'start.jar' in a xterm window, immune to sighup (hangup signals) sent to it. the xterm is sent to background, so control returns immediately to the prompt on the original terminal screen/window.	
"run the node expression ""json.parse(process.argv[1]).foo"" on the contents of ""foobar.json"""	
"run the php script ""newemptyphp"" redirecting the output to ""nohup.out"" in the current directory, or in the home directory if that is not possible. the process will not receive or respond to sighup (signal 1) which are sent to it."	
run the php script 'yourscript.php', making it immune to sighup signals.	
"run the sh ""for"" construct in a subshell (runs ./myscript.sh for each file whose name ends with .fasta in mydir) - the subshell is immune to sighup signals sent to it, and the output is redirected to ""output.txt""."	
run the specified git command, paging through the output with raw characters written to the terminal, without initializing the terminal capabilities, and automatically exiting when the end of the output is reached.	
run two processes, cmd1 whose output is fed as input to cmd2: cmd1 is immune to all sighup (hangup) signals sent to it, but cmd2 is not.	
run vi with all btree*.c files under current directory	
run your_command_here for each file found under /target/path with the file path as argument	
run your_command_here with all the files under /target/path as arguments	
"running ""script"" outputs the name of a directory, go into that directory."	
running /path/to/my/script outputs the name of a directory, go into that directory.	
"running javascript program ""app"" with node outputs the name of a directory, go into that directory."	
runs 'mpv' command for each *.mpv and *.flv file in a current folder.	
runs 'tty' command in a subshell that is opened by built-in function 'true'.	
runs `file' on every file in or below the current directory.	
runs programs and prints formatted summary of system resource usage.	
same as above example with -exec , in this example with -ok it should ask for confirmation before executing the rm command . that is called user intractive command	
"save ""$n"" number of '.' characters in variable ""myvar"""	
"save ""1 4 6 9 11 17 22"" as a bash array ""arr"""	
"save ""something"" into variable ""param"" in ksh"	
"save ""xxx-"" followed by a random 4 byte unsigned integer to variable ""tempfile"""	
save $line line in history	
"save 'echo whatever you ""want your"" command to be' in history"	
save 'foo' into variable 'bar' in ksh	
save a comma separated list of all $my_directory/*/ directories to variable 'folder'	
save a comma separated list of all directories under current directory tree to variable 'folder'	
"save a line of 100 random characters either ""."" or "" "" in variable ""foo"""	
save a list of all 755 permission files/directories under $dir directory tree to the variable 'files'	
save a list of all the files/directories under current directory tree to a file named 'foo'	
"save a nginx link to ""/path/to/file"" with the current user and system fqdn host name in variable ""path"""	
"save a random 4 byte unsigned integer from ""/dev/urandom"" to variable ""rand"""	
save a space separated list of process ids of currently running jobs to variable 'bgxjobs'	
"save a unique list of the currently logged in usernames to variable ""line"""	
"save absolute path of ""$path"" that may not exist to variable ""abspath"""	
"save absolute path of ""$path"" that must exist along with all parents to variable ""abspath"""	
"save absolute path of ""$path"" whose parents exist to variable ""abspath"""	
"save absolute path of ""/home/nohsib/dvc/../bop"" in variable ""absolute_path"""	
"save absolute path of java home to variable ""java_home"""	
"save absolute path of the script filename in variable ""my_path"""	
"save absolute path of the script filename in variable ""script"""	
"save actual working directory in variable ""target_pwd"""	
save all aliases to the variable $oldalias	
"save all directories under the current directory as a comma separated list in variable ""folders"""	
save all entries that are wrapped around with opening and closing square brackets in file 'filename' to variable 'var'	
save count of lines from file $file matching with pattern $filter and not matching with pattern $nfilter in variable 'totallinecnt'	
"save directory ""../../lib"" relative to the executable ""gcc"" to variable ""libdir"""	
save first ip address of domain 'google.com' in 'address' variable	
save first one of space separated parts of each line in $lockfile file to the 'current_pid_from_lockfile' variable	
"save full path of command ""cat"" to variable ""cat"""	
"save full path of command ""mktemp"" to variable ""mktemp"""	
"save full path of command ""rm"" to variable ""rm"""	
"save full path of command ""tr"" to variable ""tr"""	
"save hexadecimal byte 10 in binary file ""file.moi"" to variable ""day"""	
"save hexadecimal byte 9 in binary file ""file.moi"" to variable ""month"""	
"save hexadecimal bytes 7 and 8 in binary file ""file.moi"" to variable ""year"""	
"save host name in variable ""thishostname"""	
save in queue_pids variable only pid numbers that stored in $new_pids variable	
"save ip address of your ssh session in variable ""workstation"""	
"save ip addresses of the host name in variable ""ip"""	
"save java home in variable ""java_home"""	
"save list of groups which user $line belongs to and not matching pattern ""_unknown|sciences|everyone|netaccounts"" in 'results' variable"	
save long listing of all files listed in file 'filenames.txt' to 'listing' variable	
save long listing of all running processes in the 'log' file, and save number of process strings that contain 'cntps' in the 'cnt' variable.	
"save maven project version to variable ""version"""	
save number of lines in '/some/big/file' to 'lines' variable	
save number of lines in 'file.txt' file in 'nblines' variable	
save number of lines with any-cased 'merge' from $commit_editmsg file in 'merge' variable	
save number of processors in system to 'np' variable	
save number of strings with $expression pattern in 'foo.txt' to 'big_lines' variable.	
"save only the digits in ""$filename"" to variable ""number"""	
save small letter short day name of the week to variable 'dayofweek'	
"save standard input to variable ""myvar"""	
save standard input to variable 'stdin' until the first character encoded as '\004' is read	
save system information appended with the current date in 'filename' variable	
"save the ""pictures"" directory in the current user's home directory on the directory stack"	
"save the 10 ping results to ""$gateway"" in variable ""pingresults"""	
"save the absolute path of ""$path"" to variable ""full_path"""	
"save the absolute path of ""$path"" to variable ""fullpath"""	
"save the absolute path of the current script to variable ""self"""	
"save the absolute path of the directory of the current script to variable ""dir"""	
"save the canonical filename of ""$bash_source"" in variable ""me"""	
"save the canonical filename of the script in variable ""me"""	
"save the canonical path of ""$dir/$file"" in variable ""path"""	
"save the canonical path of ""/usr/bin/java"" with ""/bin/java"" removed to variable ""java_home"""	
"save the contents of ""file"" in the clipboard"	
"save the contents of ""numbers.txt"" to variable ""f"""	
"save the contents of ""~/.bashrc"" to the clipboard on osx"	
save the current date to 'date' variable	
"save the current date, system host name, and ""$changes"" with newlines removed to variable ""subj"""	
"save the current time formatted according to the format string ""%y-%m-%d %h:%m:%s"" to the variable 'cdate'"	
"save the current user name and inode number of ""/home"" into bash array variable ""var"""	
"save the current user name in variable ""myvariable"""	
"save the current working directory and the directory name of the current script to variable ""dir"""	
"save the current working directory to variable ""current"""	
"save the current working directory with resolved symbolic links to variable ""real1"""	
save the date 222 days before today to the variable 'date_222days_before_todayday'	
"save the day of the year from the time string ""20131220"" to variable 'datecoming'"	
"save the directory name of the canonical path to the current script in variable ""my_dir"""	
"save the directory name of the current bash script to variable ""path"" if it is found in one of the directories specified by path."	
"save the directory of the full path to the current script in variable ""dir"""	
"save the filename and hash of the md5 sum of ""file"" to bash array ""md5"""	
"save the first ""."" separated field of the system host name to variable ""hostz"""	
save the first 3 lines output by 'yes' to 'file', and log the rest through 'more' which simply waits for user interaction at each page.	
"save the first line of ""$j"" into variable ""k"" in ksh"	
"save the first line of ""foo.txt"" to variable ""bar"""	
"save the first three octets of the current host's ip address to variable ""local"""	
"save the first three octets of the host name's ip address to variable ""subnet"""	
"save the first two letters of the system host name to variable ""dc"""	
"save the first word of the first difference in "".dir_list_2"" compared to "".dir_list_1"" into variable ""extract_dir"""	
"save the fqdn host name of the system in variable ""fhost"""	
"save the fqdn host name of the system in variable ""hnd"""	
"save the full path of command ""f"" to variable ""full_f"""	
"save the full path of command ""oracle"" to variable ""path"""	
"save the full path of command ""~/f"" to variable ""foo"""	
"save the full path of the current script into variable ""this"""	
"save the greater version number of ""$1"" and ""$2"" into variable ""ver"""	
save the last modified time of file 'file_name' to variable 'stamp'	
"save the latest modification time (in format ""%t@ %t"" of any file under ""./$dir"" to variable ""timestamp"""	
"save the line number matching ""}]"" in lines starting with ""item_1"" to ""item_2"" in ""itemlist.json"" to variable ""line_to_be_replaced"""	
save the list of *.au files in the current directory tree to file `names.txt'	
save the list of *.html files in the current directory tree to html_files.txt	
save the list of .log files in the current directory tree to sas_log_list.txt	
"save the list of all .py files under and below the current directory that contain ""something"" in their pathnames to output.txt"	
save the list of all .py files under and below the current directory to output.txt	
save the list of all regular files accessed less than 10 days ago as `march.files'	
"save the list of all subdirectories of the current directory as ""dirs_to_remove"""	
"save the list of all subdirectories of the current directory up to depth level 2 as ""dirlist"""	
"save the list of all the core files in the entire file system which belong to the group mycomp to the file ""mycompcore"" and delete them"	
save the list of all the trace files from the folder $dba/$oracle_sid/bdump/ which have been modified in the last 24 hours	
save the list of directories modified a fortnight ago to `deploy.txt' removing the leading ./ from the file names	
save the list of files containing string `extjslogin' to files.txt excluding change-app-name.sh	
save the list of files in the current directory hierarchy separting file names with zeroes	
"save the list of files in the current directory tree whose names contain ""2011"" to /tmp/allfiles"	
"save the list of files in the home directory tree whose names begin with ""foto"" to `results.txt'"	
save the list of files modified within a fortnight ago to `deploy.txt'	
save the list of files modified within a fortnight ago to `deploy.txt' removing the leading ./ from the file names	
save the list of files modified within a fortnight ago to `deploy.txt' stripping the file names of any leading directories	
"save the logical current working directory to variable ""basedir"""	
"save the md5 sum hash of ""$my_iso_file"" to variable ""md5"""	
"save the md5 sum hash of ""${my_iso_file}"" to variable ""md5"""	
save the md5 sum of $twofish to variable 'twofish'	
save the name and first line of each .txt file found in the home directory tree to `report.txt'	
save the network node hostname append with '-', the current date and '.txt' into variable 'filename'	
"save the number of bytes in ""$file"" after decompression into variable ""size"""	
"save the number of matching executables for ""$cmd"" in $path to variable ""candidates"""	
"save the number of modified files in a git repository in variable ""myvar"""	
"save the number of records in the system hostname that contain numbers in variable ""server_id"""	
"save the numerically greater value of ""$kf"" and ""$mp"" into variable ""gv"""	
"save the percentage of packets lost of the 5 packets sent to ""$host"" in variable ""packet_loss"""	
"save the physical current working directory to variable ""end_abs"""	
save the short dns lookup output of $workstation to 'workstation_ip' variable	
"save the short host name appended with "".mysqldb"" in variable ""dbprefix"""	
"save the short system host name to variable ""hostname"""	
"save the system host name in variable ""hostname"""	
"save the system host name into variable ""host"""	
"save the system host name to variable ""myhostname"""	
save the system load average for the past 1 minute of the currently logged in user to variable 'proc_load_average'	
"save the user name in all capitals of the current user to variable ""v"""	
"save the user name in upper case of the current user in variable ""v"""	
"save the user name of the current user to variable ""me"""	
"save the user name of the current user to variable ""whoami"""	
"save the user name of the current user to variable ""x"""	
save the utc date represented by time string $sting2 as the seconds since epoch to variable 'finaldate'	
save to report.txt the first line of every text file in the home directory	
"save yesterday's date into variable ""dt"" using perl"	
"saveifs=$ifs; ifs=$'\n'; for dir in $(find -depth -type d ); do [[ ! $prev =~ $dir ]] && echo ""${dir}"" ; prev=""$dir""; done; ifs=$saveifs"	<MISSING>
saves 'ls' output to 'ls_results' file and time report to 'time_results' file.	
saves 'ls' output together with time report to a file 'time.txt'.	
saves 'tmux' version in the 'tmux_version' variable.	
saves byte size of $myvar variable value in the 'var2' variable.	
saves byte size of all content of $1 folder in 'uitotalsize' variable.	
saves bytes count of the value of '$each' variable.	
saves calendar of $month, $year in the 'cal' variable.	
saves command execution output to a file 'outfile' together with time report.	
saves date of the first sunday in month $mo of year $yo in the 'do' variable.	
"saves exit statuses of piped commands in a system variable pipestatus='([0]=""0"" [1]=""0"" [2]=""1"" [3]=""0"" [4]=""1"")'"	
"saves exit statuses of piped commands in a system variable pipestatus='([0]=""0"" [1]=""1"" [2]=""0"")'"	
"saves exit statuses of piped commands in a system variable pipestatus='([0]=""1"" [1]=""2"")"	
saves file sctipt.sh size in 'size' variable.	
saves folder path where target of symbolic link $file file is located in 'base' variable.	
saves hostname that matches ${ip_address} in 'host' variable, without trailing dot.	
"saves in 'result' variable list of groups which user $line belongs to, and not matching pattern ""_unknown|sciences|everyone|netaccounts"""	
saves index number of file 'script.sh' in the 'inode' variable.	
saves invoked command 'check_script_call=$(history |tail -1|grep myscript.sh )' in variable 'check_script_call', preceeding by its number in history.	
saves list of currently logged in users in 'userlist' variable.	
saves list of logged in users in system together with 'user' header in the 'a' variable.	
saves list of logged in users in system together with 'user' header in the 'b' variable.	
saves listing of a current folder in 'output' variable.	
saves listing of a current folder in 'var' variable.	
saves location of file $1 in 'dir' variable.	
saves location of file $1 in 'dir_context' variable.	
saves logged in users names in 'tmp' variable.	
saves number of lines of current directory listing in 'n_max' variable.	
saves path to the $script file in the scriptpath variable.	
saves printed calendar for $month, $year in positional variables.	
saves printed calendar of february,1900 in positional variables.	
saves real path of the folder containing the current script	
saves space separated content of $raw_log_dir in files variable	
saves state of shell option 'nullglob' in an 'old_nullglob' variable.	
saves value '1' in the $pipestatus variable and returns 0.	
scan every file in /etc for ipv4 addresses while trying to elminate false positives.	
scan every file in /etc for ipv4 addresses.	
scp -3 user@server_b:/my_folder/my_file.xml user@server_b:/my_new_folder/	<MISSING>
scp -bpqr /tdggendska10/vig-preview-dmz-prod/docs/sbo/pdf/*ela*l1*te* dalvarado@localhost:/var/www/html/sbo/2010/teacher/ela/level1	<MISSING>
scp -c blowfish -r user@your.server.example.com:/path/to/foo /home/user/desktop/	<MISSING>
scp -c file remote:	<MISSING>
scp -i /path/to/your/.pemkey -r /copy/from/path user@server:/copy/to/path	<MISSING>
scp -o stricthostkeychecking=no root@ip:/root/k	<MISSING>
scp -p /home/reportuser/dailyreport.doc root@localhost:/root/dailyreports/20150105/	<MISSING>
scp -p 1234 user@[ip address or host name]:/var/www/mywebsite/dumps/* /var/www/mynewpathoncurrentlocalmachine	<MISSING>
scp -p 2222 /absolute_path/source-folder/some-file user@example.com:/absolute_path/destination-folder	<MISSING>
scp -qv $user@$host:$src $dest	<MISSING>
scp -r a d anotherhost:/path/to/target/directory	<MISSING>
scp -r myserver:/something	<MISSING>
scp -r prod:/path/foo /home/user/desktop	<MISSING>
scp -r user@your.server.example.com:/path/to/foo /home/user/desktop/	<MISSING>
"scp -rp ""daily_test_folder"" ""root@${ipaddress}:/home/root/"""	<MISSING>
scp -v /my_folder/my_file.xml user@server_b:/my_new_folder/	<MISSING>
scp -v user@remotehost:/location/kmst_datafile_*.kms	<MISSING>
scp -vp me@server:/location/files\*	<MISSING>
scp user@server_b:/my_folder/my_file.xml user@server_b:/my_new_folder/	<MISSING>
screen -d -m -l python test.py	<MISSING>
"screen -d -m sh -c ""while :; do ./mycommand; done;"""	<MISSING>
screen -d -m yourevilprogram	<MISSING>
screen -d -r -s test	<MISSING>
screen -d -r remote-command	<MISSING>
screen -dms title executable	<MISSING>
screen -dr 14313	<MISSING>
"screen -l bash -c '(while :; do tail ~/screenlog.0 | grep -o ""[0-9]*%"" | tail -1; done | zenity --progress --auto-close &); 7z a ""output.zip"" ""/path/to/input""'"	<MISSING>
screen -list	<MISSING>
"screen -list | awk '{print $1}' | grep -q ""$1$"""	<MISSING>
"screen -list | grep -q ""myscreen"""	<MISSING>
screen -ls	<MISSING>
screen -r	<MISSING>
screen -r 'name'	<MISSING>
screen -r -o -t mysession -s mysession -f	<MISSING>
screen -r foo	<MISSING>
"screen -r user -x stuff ""spawn daemon$(printf \\r)"""	<MISSING>
screen -rd	<MISSING>
screen -s 'name' 'application'	<MISSING>
screen -s 23536 -x quit	<MISSING>
screen -s demo -p 1 -x screen '/home/aa/scripts/outputs.sh'	<MISSING>
screen -s foo	<MISSING>
screen -s lynx lynx	<MISSING>
screen -s main	<MISSING>
"screen -s sessionname -p 0 -x title ""remote_0"""	<MISSING>
"screen -s sessionname -x at "".#"" stuff ""date """	<MISSING>
"screen -x $process -p 0 -x stuff `printf ""stop\r""`"	<MISSING>
screen -x -s screenid kill	<MISSING>
screen -x 2073 -p 0 -x title h	<MISSING>
screen -x main -p oldwindow -x title blah	<MISSING>
screen -x main -x title blah	<MISSING>
screen -x quit	<MISSING>
screen -x screen id	<MISSING>
screen -x title	<MISSING>
"screen -x title ""new title"""	<MISSING>
screen -x title mynewtitle	<MISSING>
screen -xr 14313	<MISSING>
screen /bin/bash -c 'java foo > foo.txt'	<MISSING>
screen bash --rcfile yourfile.rc	<MISSING>
"script -c ""./a"" /dev/null | tee output.txt"	<MISSING>
script -q /dev/null ./a | tee output.txt	<MISSING>
script.py $(find /stuff/* -type d)	<MISSING>
script1=`mktemp /tmp/.script.xxxxxx`;	<MISSING>
script2=`mktemp /tmp/.script.xxxxxx`;	<MISSING>
"script=""$(readlink --canonicalize-existing ""$0"")"""	<MISSING>
"script=""`readlink -f ""${bash_source[0]}""`"""	<MISSING>
script=$( readlink -m $( type -p $0 ))	<MISSING>
search  all block spacial files called backup from /usr directory downwards and print them .	
search  all directory from /usr downwards for files whose inode number is 1234 and print them .	
search  all files & directoy from root directory which  are greater then 100m and delete them .	
search  character special files called ' backup '  from  /usr directory downwards and print them .	
search  in current directory downwards all files whic  have permission 777 .	
search  in current directory downwards all files which  have not been accessed since last 7 days	
search  in current directory downwards all files which were accessed exactly 7 days back	
search  in current directory downwards all files whose owner is aa1 or whose name is myfile .	
search  in current directory downwards all files whose size is 10 blocks .	
search  in current directory downwards all files whose size is greater than 10 bytes .	
search  in current directory downwards all files whose status has changed more then 7  days ago	
search  in root  ( / ) directory downwards all files which have less than 2 links.	
search  in root ( / ) directory downwards all files which  have exactly 2 links.	
"search ""file1"" for lines matching regex patterns listed in ""file2"" and list the unique results (sorted alphabetically)"	
"search ""input.txt"" for regex patterns only matching those listed in ""ignore.txt"", list the unique lines and prefix with the number of occurrences"	
"search ""inputfile"" for lines starting with ""t:"" and group the results in files with at most 200 lines each"	
"search ""mygzfile.gz"" for ""string to be searched"""	
"search ""whatyousearchfor"" in history and print 3 lines before and 4 lines after"	
search $mygroup in /etc/group, take the 4th colon (':') separated field, replace comma (',') with newline and save the result to variable 'myusers'	
"search *.txt files under and below /directory/containing/files for ""pattern_to_search"""	
"search *.x files from the current directory tree for string ""fred"""	
"search .c and .h files in the current directory tree for ""expr"""	
search /dev/shm and /tmp for regular files not changed in two weeks	
search /etc for files modified within the last 10 minutes	
search /etc for files modified within the last day	
search /path/to/your/directory for *.avi and *.flv files	
"search /public/html/cosi for files whose name is ""wiki.phtml"""	
search /root/directory/to/search recursively for the files matching pattern 'filename.*'	
"search /some/directory for files that are owned by the user ""joebob"""	
search /tmp/ for files smaller than 100 bytes	
search /usr, /home, /tmp for *.jar files	
search /usr, /home, /tmp for *.jar files suppressing error messages	
search /usr/bin for regular files that have been modified within the last 10 days	
search /usr/bin for regular files that were last accessed more than 100 days ago	
search /usr/local for subdirectories whose names end with a number 0-9	
search /usr/local recursively for directories whose names end with a number 0-9	
"search /usr/src for filenames not ending in ""*,v"""	
search /var for files matching regular expression '.*/tmp/.*[0-9]*.file'	
search /var/log for logs larger than 10 megabytes	
search /var/tmp for files larger than 30 mb modified 31 days ago	
search a url in all regular/normal files in a folder.	
"search all *.c files from the current directory tree for ""hogehoge"""	
"search all *.txt files under ~/documents for the word ""dogs"""	
"search all .c and .h files in the current directory tree for string ""e"""	
"search all .c files from the current directory tree for ""keyword"", ignoring the case"	
"search all .java files residing in the current directory tree and modified at least 7 days ago for string ""swt"""	
"search all .pdf files  from directory tree ~/.personal/tips for ""hot"""	
"search all .py files in the current directory tree for ""some_function"""	
"search all directories starting from the root directory for ""filename"""	
"search all files and   directories either of the directory /home/oracle and  /home/databse which  contain the ""zip""  anywhere in the files or directory name ."	
"search all files called ""abc"" that reside in the current directory tree for string ""xyz"""	
"search all files from the /tmp directory tree for the string ""search string"""	
"search all files in the current directory tree for ""searchstring"", ignoring .html files and skipping .svn directories"	
"search all files in the current directory tree that are named ""whatever"" for ""whatever"""	
"search all files in the current directory tree that are named ""whatever"" for ""you_search_for_it"""	
"search all files in the current directory tree whose names contain ""."" for ""searchstring"""	
"search all files in the current directory tree whose names end in ""1"" for string ""1"""	
"search all files in the current directory tree, except *.html and *.svn*, for ""searchstring"""	
"search all files in the current directory tree, except git files, for ""string-to-search"""	
search all files in the current folder which match the regular expression	
search all files under and below /etc for ip addresses	
search all html files in the current folder and remove all the empty lines	
search all jpg files in current folder	
search all jpg images in current folder and rename them	
search all jpg,png,jpefg  files in the current folder and calculate the total size of them	
"search all mp3 files in the folder ""/home/you"" which have been modified yesterday (from the start of day 00:00 to 23:59)"	
search all non-hidden files in the current directory and all non-hidden sub-directories for the file hi.dat.	
search all of /usr for any directory named 'my files', for each directory found, copy it to /iscsi preserving full paths and attributes, then remove it.	
search all of /usr for any directory named 'my files', for each directory found, copy it to /iscsi preserving full paths and attributes.	
"search all pdfs from the current directory tree for ""keyword"", ignoring the case"	
"search all python files in the current directory tree for string ""import antigravity"""	
"search all regular files from the current directory tree for lines containing ""california"" and ""surfboard"", and save the output as surfsup.txt"	
"search all regular files in the /var/log directory tree for string ""19:26"""	
"search all regular files in the current directory for ""example"""	
"search all regular files in the current directory tree for ""example"""	
"search all regular files in the current directory tree for ""string"""	
"search all the "".sh"" files in the /usr folder and follow the symbolic links to their original file"	
search all the *.pl files in the current directory and subdirectories, and print the names of any that don't have a line starting with 'use strict'	
"search all the .c and .h files in the current directory tree for ""expr"""	
search all the files in the current folder and assign them to a variable	
search all the files in the current folder excluding those that are present in the folder test and using regex	
search all the files in the current folder using name patterns	
search all the files in the current folder using regex	
search all the files in the current folder using regex excluding those that are present in the folder test	
"search all the files in the folder ""myfiles"" which have the word ""blue"" in their name"	
search all the lines that start with the word malloc in the files ending with .c or .h or .ch	
"search all the regular files from the current directory tree for ""search string"""	
"search all the regular files in the current directory for ""example"""	
"search all the regular files in the current directory tree for ""example"""	
search all undo files(ending with .undo) in the current folder and calculate the total size of them	
"search all variables and their values for ""name"""	
"search and unzip all the "".fq.gz"" files and perform a control check on this raw sequence of data and display the output to the screen"	
"search appended data in ""logfile.log"" for ""something"" with a timeout of 3 seconds"	
search case insensitively for 'facebook', 'xing', 'linkedin', ''googleplus' in file 'access-log.txt', extract the matched part, sort them and print them by sorting them in asending order of the number of repeated lines	
search case insensitively for 'foo' in all the files with '.java' extension under current directory tree and show only the file names	
search core files in current direcory and delete .	
"search current directory for any directory named ""config"" and go to first match found."	
"search decompressed ""filename.gz"" for case-insensitive ""user-user"""	
search directories /opt, /usr, /var for regular file foo	
search directories /path/to/directory/folder{1..50} for .txt files	
search directories /path/to/directory/folder{1..50} for .txt files, outputting only the names of the matched files	
search directories /path/to/directory/folder{1..50} for .txt files, outputting only the names of the matched files stripped of the .txt suffix	
search directories /res/values-en-rus and /res/xml for xml files	
search directories called ' backup ' from /usr directory downwards and print them.	
search directory $curr_dir for regular files that were changed, accessed, or modified $ftime days ago	
search directory $dirname for regular files and save the result to $tempfile	
search directory /home/abcd recursively, starting from one level below, for regular files	
search directory /path/to/check/ for regular files	
"search directory /tmp/foo for files containing ""/tmp/foo/bar"" in their full names"	
search directory /users/david/desktop/ recursively for regular files	
search directory /users/david/desktop/ recursively for regular files with extensions .txt, .mpg, .jpg	
"search directory foo for files containing ""/tmp/foo/bar"" in their full names"	
"search directory foo for files containing ""foo/bar"" in their full names"	
search directory lpi104-6 for files with inode number 1988884	
search directory tree $dir for *.txt files	
search directory tree /srv/${x} for regular files accessed at least 10080 minutes ago, and remove those files	
search directory tree `foo' for files named `headers'	
search directory tree `myapp.app' for directories whose name is 'headers' and delete them	
search directory tree `myapp.app' for directories whose name is 'headers' and delete them in an optimized way	
search directory tree `myapp.app' for directories whose name is 'headers' and delete them suppressing error messages	
"search directory trees /tmp and /var/tmp for ""testfile.txt"""	
search directory trees /usr/local/man and /opt/local/man for files whose names begin with 'my'	
search directory trees /usr/share/doc, /usr/doc, and /usr/locale/doc for files named 'instr.txt'	
search directory trees foo and bar for .java files	
search every directory except the subdirectory excluded_path for a regular file 'myfile'	
search everywhere for a file called `httpd.conf' that is newer than /etc/apache-perl/httpd.conf	
search everywhere for directories named `root'	
search everywhere for files changed within the last minute	
search everywhere for hidden file `.profile'	
"search file /etc/logs/server.log for lines containing ""error"""	
search file aaa from current direcoty downwards and print it .	
"search files  in the file system excluding those in the paths ""10_recommended"" and ""/export/repo"""	
"search files ""file-containing-can't"" in the current directory tree for the string ""can't"""	
search files in current folder using name patterns	
search files in the folder /home which have been modified after /tmp/after and before /tmp/before	
search folder /home/abcd/ recursively for regular files	
"search for "" 000"" in the hex dump of ""file-with-nulls"""	
"search for "" 840"" in history"	
"search for ""#define"" in all files in the current directory, excluding backup files *~, *.orig, *.bak"	
"search for ""1234567890"" in every gzip file modified between 8:00 and 9:00 on 2014-04-30"	
"search for ""config_64bit"" in gzip compressed file ""/proc/config.gz"""	
"search for ""facebook\|xing\|linkedin\|googleplus"" in ""access-log.txt"" and print a count of the unique entries"	
"search for ""flac"" files in current folder using regular expressions"	
"search for ""foo"" in every file in the current directory and number the output"	
"search for ""ifconfig"" in the output of ""history"" and print 5 lines that precede and follow"	
"search for ""largecalculation"" in all processes owned by the current user"	
"search for ""log"" in jsmith's home directory tree"	
"search for ""message.txt"" in the folder .cache/bower and display its contents"	
"search for ""mpirun"" in all processes owned by the current user"	
"search for ""pattern"" in ""file"" and join each line by a space"	
"search for ""pattern"" in ""file"" and separate each line with '"" ""'"	
"search for ""pattern"" in all the .c files in the current directory tree"	
"search for ""search term"" in a sorted list of all files under current directory"	
"search for ""some_function"" in all the python files in the current directory"	
"search for ""specified string"" in all the php files in the current folder"	
"search for ""stock"" in all *.java files from the current directory tree"	
"search for ""vid=123"" in all compressed files found under ""/my_home"" matching ""*log.20140226*"""	
"search for ""whatever"" in all files under /dir directory ensuring white space safety in filenames"	
"search for ""www.athabasca"" in all files under current directory"	
"search for ""yourstring"" in all files under current directory"	
search for $group at the beginning of each line in /etc/group and print the last colon (':') separated entry with comma replaced with newlines	
search for $search in all regular files under $dir directory tree and display the number of bytes of the matched output	
search for '/usr/bin/perl' in all regular files under current dirctory tree and also show a long listing of them	
search for 'attached: yes' in all regular files under '/proc/scsi' directory tree matching the path '/proc/scsi/usb-storage' and show only the matched filenames	
search for 'birthday' (case insensitive) in all regular files under ~/documents directory tree and show only the filenames	
search for 'class pool' in all *.java (case insensitive) files under current directory	
search for 'dogs' in all files with '.txt' extension under ~/documents and also print the file names	
search for 'example' in all regular files from the current directory	
search for 'example' in all regular files from the current directory tree	
search for 'example' in all regular files under current directory tree	
search for 'example' in all regular files under current directory tree and also print the filenames	
search for 'foo' in all regular files under 'sources' directory tree and show the matched lines with filenames	
search for 'foo' in all the java files under 'dir1', 'dir2' and 'dir3' directory tree and print only the names of the matched files	
search for 'foo=' in all *.png files under current directory without descending into *.gif and *.svn directories	
search for 'invalidtemplatename' in all regular files in directories/files taken from the glob pattern './online_admin/*/utf-8/*' and show the matched lines with the filenames	
search for 'ireg' in all php files under 'project' directory tree and show only the files that match	
search for 'it took' in all $srch1* (case insensitive) files under current directory	
search for 'it took' in all $srch1* (case insensitive) files under current directory and run the sed script 'n;s/(.*)\n(.*)/\2 \1/' on the output	
search for 'it took' in all $srch1* (case insensitive) files under current directory and run the sed script 'n;s/(.*)\n(.*)/\2 \1/' on the output and redirect the final output to temp1 file	
search for 'js' in all files under current directory that match 'some string' in their names	
search for 'keyword' in all javascript files under current directory tree excluding all paths that includes the directory 'node_modules'	
search for 'magic' in all regular files under current directory tree	
search for 'mystring' in all *.txt (case insensitive) files under current directory	
search for 'mystring' in all *.txt files under current directory	
search for 'organic' in all files with '.html' extension under ~/html directory	
search for 'pattern' in all files with '.cc' extension under current directory tree and show the matched lines with line numbers and filenames	
search for 'pattern' in file 'file' and print the matched lines by separating them with spaces instead of newlines	
search for 'pattern_to_search' in all regular files with '.txt' extension under '/directory/containing/files' and show the matched lines along with filenames	
search for 'processed files' in all $srch* (case insensitive) files under current directory	
search for 'processed files' in all $srch* (case insensitive) files under current directory run the sed script 'n;s/(.*)\n(.*)/\2 \1/' on the output	
search for 'processed files' in all $srch* (case insensitive) files under current directory run the sed script 'n;s/(.*)\n(.*)/\2 \1/' on the output and redirect the final output to temp2 file	
search for 'processed files' in all dl-aster-full-20131102* (case insensitive) files under current directory and print only the 2nd field from the output with : (colon) as the delimiter	
search for 'some string' in all *.axvw files under current directory and show the matched lines with line numbers	
search for 'some string' in all *js files under current directory and show the matched lines with line numbers	
search for 'sometext' in all the files with '.txt' extension under current directory tree and also print the filenames	
search for 'specific string' in all files matching the name pattern '“*.[txt|txt]”' under current directory tree	
search for 'string' case insensitively in all files under current directory tree and show the matched lines with their filenames	
search for 'string-to-find' in all files under current directory tree and show the matched lines with their filenames	
search for 'string-to-find' in all files under current directory tree matching the regex 'filename-regex.\*\.html' in their paths and show the matched lines along with the filenames	
search for 'string-to-find' in all html files under current directory tree and show the matched lines with their filenames	
search for 'string_to_find' in all files under current directory	
search for 'stuff' in all *,txt files under current directory	
search for 'text to find' in all regular files under current directory tree and show the matched files	
search for 'text to find' in all regular files under current directory tree and show the matched files and matched lines with line numbers	
search for 'text' in all regular files under current directory tree	
search for 'whatiwanttofind' in all files under current directory	
search for '“foobar”' in all files starting with '‘' and ending with '’' and contain '.' in their names in the entire filesystem and display only the matched files	
search for *.log files starting from /	
search for *.log files starting from / (root) and only in the current file system	
search for *pattern* in and below current directory	
search for .bam files anywhere in the current directory recursively	
search for .pdf files	
search for .zip files that are larger than 100m found anywhere in the file system and delete those files.	
search for a cpp directory in current folder and display all its files	
search for a directory in a folder taking name as argument and assign the first instance of it to a variable	
"search for a file ""file"" in current folder and display all instances of this file"	
"search for a file ""file"" in current folder and if the file is found quit !"	
search for a file in a directory and pass it as an input to the script getline	
search for a file in current folder and append the file name at the starting of all the lines in the file	
search for a file in the current folder and prepend the first line	
search for a file using name patterns from the list of all the regular files in the folder project and save the output to the file include.	
"search for a files ""cart1"" in the folder junk which is in home folder and move the folder to ~/junk/a."	
search for a folder junk in the home directory and create files cart1, cart2, cart3 ... cart6 in the folder junk. discard all the errors.	
search for a function in all python files in the current folder	
search for a line starting with 'use strict' in all files with '.pl' extension under current directory tree and show the unmatched files only	
"search for a pattern ""can't"" in all the files with the name ""file-containing-can't"" in the current directory tree"	
search for a pattern in all the files in the current folder	
search for a pattern in all the python files in the current folder. and save the output to a txt file	
search for a pattern in all the python files in the current folder. and save the output to output.txt file	
search for a pattern in all the python files in the current folder. and save the output to output.txt file. print0 is used to handle files with newlines in their names	
"search for a regular/normal file ""myfile"" in the entire file system excluding the folder in excluded_path"	
"search for a regular/normal file myfile in the folder ""/home/weedly"""	
search for a shell script in the current folder and display the current folder path	
search for a shell script in the current folder and display the current folder path but search from the sub directories	
search for a specific word in all files beginning with a specific word in the current directory	
search for a string in all gzip'd files under the current directory	
search for a string in gzip'd files	
search for a word in all c files in the current folder	
search for a word in all files in a directory	
search for a word in all the .c files in the current directory	
"search for a word in all the .c files( those having the extension ""c"") in current directory"	
search for a word in all the fies in the current folder	
search for a word in all the files in the current directory	
search for a word in all the files in the current directory (case insensitive search)	
search for a word in all the files in the current directory and display the file paths relative to the current directory	
search for a word in all the files in the current directory and display the list of matched files.	
search for a word in all the files in the entire filesystem and display the matched fline along with the file name	
"search for a word in all the files with the extension ""ch"" in the current folder"	
search for a word in all the java files in the current directory	
search for a word in all the normal/regular files in the current folder	
search for a word in all the php files in the current folder and display the count of all matching lines.	
search for a word in all the php files in the current folder and display the matching lines	
search for a word in all the php files in the current folder and display the matching lines.	
search for a word in all the php files in the current folder and display the matching lines. plus at the end takes multilple files as input	
search for a word in all the regular files in the current folder without traversing the sub directories .	
search for a word in all the regular files in the current folder.	
search for a word in all the regular/normal files in the current folder and display the filename along with the matched text	
search for a word in all the regular/normal files in the entire filesystem. ( + is used to give more than one file as input to the grep command.	
search for a word in all the shell scripts in the current folder and display the matched files.	
search for a word in all the shell scripts in the current folder and display the matched files.(case insensitive search in grep commad)	
search for aaa in all files under current directory and count the number of matches	
search for al cpp files in current folder and display distinct parent directory of these files in sorted order	
search for al cpp files in current folder and display unique parent directory of these files in sorted order	
search for al cpp files in current folder and replace all expect the parent directory name of these files and display it them sorted order	
"search for all ""tif"" images in current folder"	
"search for all ""tif"" images in the entire file system"	
search for all *.conf files in entire file system	
search for all *.ogg (case insensitive) files in the $home directory that have an access time of greater than 30 days	
"search for all .html files in directory ""www"" and output only the basename (without containing path) of each."	
search for all .mp3 files in the /mnt/usb directory tree	
"search for all c, c++, header, javascript files in the folder /opt/chromium/src and exclude the search in the path ""/.svn"" and save the output list to csrc.lst"	
search for all directories named foo, foo, or any other combination of uppercase and lowercase characters beneath the current directory.	
search for all empty directories in the folder /home	
search for all files and directories named foo, foo, or any other combination of uppercase and lowercase characters beneath the current directory.	
"search for all files ending with "".mkv"" in current folder"	
search for all files in the /home directory tree that have the same inode number	
"search for all files in the current directory recursively whose names begin with ""linkin park"""	
"search for all files in the current directory recursively whose names contain ""linkin park"", ignoring the case"	
"search for all files in the current directory recursively whose names contain ""linkin"", ignoring the case"	
"search for all files in the current directory recursively whose names end with ""linkin park"""	
search for all files named foo, foo, or any other combination of uppercase and lowercase characters beneath the current directory.	
search for all files newer than file /tmp/t	
search for all files newer than file /tmp/t1 but not newer than file /tmp/t2	
search for all files not newer than file /tmp/t	
search for all files owned by user www-data that are not larger than 100kb	
"search for all files that end in "".conf"""	
"search for all files with either ""sitesearch"" or ""demo"" in their path names"	
search for all files with same inode num	
search for all files with the same inode number 41525360	
search for all html files in a folder and create a zip file of all these files	
search for all html files in current folder and replace a pattern in all the files	
search for all html files in current folder folder and create a zip file of all these files	
search for all jpg images on the system and archive them	
search for all mp3 files in the folder /home/you which have been accessed exactly 10*24 hours ago	
search for all non empty regular/normal files in the current folder and empty them ie., delete the content not the file	
search for all non-hidden files	
"search for all pdf files in the folder ""/home/pdf"" which have been accessed in the last 60*24 hours"	
search for all perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified yesterday	
search for all png files in a folder and copy them to another folder	
"search for all regular files in the current directory which have the extension ""c"" or ""asm"""	
search for all regular/normal files in current folder and display all the files which contain 16 lines	
search for all regular/normal files in the current folder and display the number of lines in the file	
search for all scala files under the current directory that contain the string null	
search for all tar.gz compress files  in the current folder	
search for all text files in current folder and delete them	
"search for all text files in the directory ""/path/to/inputfiles"" and pass them as input to the shell script in exec command and save the output to the file out.txt"	
search for all text files in the folder /home	
"search for all the "".c"" files in the folder ""/home/david"" which have been modified in the last 10 minutes"	
"search for all the "".pyc"" files inthe current folder and remove them"	
search for all the .o files in the current directory which have permisssions 664 and print them.	
search for all the c files in the current folder	
"search for all the directories ending with "".mp3"" in the file system and move them to the folder /mnt/mp3"	
search for all the directories in a folder and give them as input to the python script	
search for all the directories in a folder and limit the search to current folder and give them as input to the python script	
"search for all the directories in directories taken from the glob pattern '/path/to/folders/*' and add the extension "".mbox"" to all and create directories named 'messages' inside them"	
search for all the directories in the current directory and do not search in sub directories	
search for all the directories in the current folder and run the print command in the searched folder	
search for all the directories in the current folder and save the output to a variable	
search for all the directories in the current folder, do not search in sub folders and run the 'pwd' command in all these directories	
"search for all the directories named 'm?' under current directory tree, add the extension "".mbox"" to all, create a 'messages' directories inside them and move all files with .emlx extension to 'messages' directory"	
search for all the directories starting with the word in the current folder and give them as input to the script fixmbox	
search for all the file sin the current folder which are bigger than 10kb and display them smallest file	
"search for all the files ending with "".bak"" in current folder which have not been accessed in the last 30 days and delete the file it it exists"	
"search for all the files ending with ""fits"" in the folder ""/store/01"""	
search for all the files excluding directories ending with old or sccs or core or orig in the project folder and append the output to the file exclude	
search for all the files excluding directories ending with old or sccs or core or orig in the project folder and save the output to the file exclude	
search for all the files having spaces in the current folder and save the output to the variable founddata	
search for all the files in a directory and give the first five characters of the file	
search for all the files in current folder and display all the file names separated by space	
"search for all the files in current folder which start with ""file2015-0"" and move them to another folder"	
"search for all the files in current folder which start with ""file2015-0"" and move them to frst 400 fiiles  to another folder"	
search for all the files in man pages and return the manual page for grep	
"search for all the files in the current directory which belong to the user ""xuser1"" and change the owner ship of them to ""user2"""	
search for all the files in the current directory which have been modified in the last 24 hours.	
search for all the files in the current directory which have size greater than 10kb (approx) and less than 32kb(approx).	
search for all the files in the current directory which have the group staff and have write permission enabled to the user and display them.	
search for all the files in the current directory which have the name a.out or core or which end with .o and delete them.	
search for all the files in the current folder and sort them in the order of their depth and display the file names	
search for all the files in the current folder which are bigger than 10kb and display them biggest file	
search for all the files in the current folder which have not been modified in the last 7 days and save the output to a file	
search for all the files in the current folder which have spaces and force delete them	
search for all the files in the current folder which have spaces, save the output of a file and save the long listing of these files to a log file	
"search for all the files in the current folder which have the word ""-ghbag-"" and display the move command for replacing the word ""ghbag"" in the file names to ""stream-agg"""	
"search for all the files in the current folder which start with ""my"""	
search for all the files in the current folder which start with gen and end with bt2 and assign the output list to the variable var.	
"search for all the files in the entire file system which have either suid or sgid bit enabled and find of diff of these files with the file ""files.secure""."	
search for all the files in the folder /data/images which are modified after /tmp/foo	
search for all the files in the folder /data/images which have been modified after /tmp/start and before /tmp/end	
search for all the files in the folder /data/images which have been modified after /tmp/start and before /tmp/end and save the output list to output.txt	
search for all the files in the folder /home which have sticky bit set and have the permissions 553	
"search for all the files in the folder /home/user1 which end with "".bin"""	
search for all the files in the folder /usr/bin which have not been accessed in the last 100*24 hours	
search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the disk usage of them	
search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the total disk usage of them	
search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the total disk usage of them in mb	
"search for all the files with the name ""dummy"" in the current folder"	
"search for all the files with the name ""dummy"" in the current folder  and discard all the errors."	
search for all the foo.txt files in the current folder and move them to another location	
search for all the joomla's version.php files in various directories and display the latest versions of it.	
"search for all the jpg files in the folder ""/mnt/hda1/zdjecia/test1/"" and copy these files to the folder  /mnt/hda1/test/<same name as the found file>"	
"search for all the jpg files in the folder ""/mnt/hda1/zdjecia/test1/"" and create a directory in /mnt/hda1/test with the same name as the mp3 file"	
search for all the links in a folder and display all the broken links	
"search for all the log files in the folder ""/var/log"" and create a tar ball and compress it to bz2."	
search for all the log files in the folder /apps which have not been modified in the last 60 days and which are present in the same file system as that of /apps and delete them	
search for all the mp3 files in the current folder and change the character encoding of them to  eur-kr (korean characters)	
search for all the mp3 files in the current folder and change the character encoding of them to <source-encoding>	
search for all the mp3 files in the file system and move them to the folder /mnt/mp3	
search for all the mp3 files in the folder /home/you which have been accessed 24 ago	
search for all the non-hidden files in the current directory and do not search in the subfolders and dispaly their name and size.	
search for all the perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified 8-10 days ago.	
search for all the php files in  current directory and check for their syntax ( check for syntax errors) .	
"search for all the php files in the folder ""/home/mywebsite"" which have been changed in the last 30*24 hours"	
search for all the regular files in the current folder and display the contents	
search for all the regular files in the folder /home which have the permission 077	
search for all the regular files that have been changed in the last 48 hours and sync these to another folder	
search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours	
search for all the regular/normal files ending with sdw or sdc or sdd in the current folder and save the output to list_1 file	
search for all the regular/normal files in the current folder and display only video/image files	
"search for all the regular/normal files in the current folder which start with ""my"""	
"search for all the regular/normal files with the name ""access.log"" in the folder /var/www which are bigger than 100mb"	
search for all the regular/normal mp3 files in the file system and create a directory int /mt/mp3/ with the basename of the mp3 file	
search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3	
search for all the regular/normal mp3 files in the file system and sync them to the folder /mnt/mp3	
search for all the rpm files in the file system which reside in the same partition as that of the root	
search for all the symbolic links in a folder and delete them	
search for all the symbolic links in a folder and display all the broken/non-existent links	
search for all the text files and display the long listing of these files from that directory	
search for all the text files in the folder /foo and delete them	
search for all the text files in the folder /home/calvin/ and save the output to  /tmp/search.log	
search for all xml files in current folder and display the copy command to copy them to another folder	
search for all xml files in current folder and display them	
search for all xml files in some directory	
search for all zero-byte files and move them to the /tmp/zerobyte folder	
search for bash and rsync files in the entire file system excluding search in /usr folder and discard all the errors	
search for bash and rsync files in the entire file system excluding search in the path /usr/share folder and discard all the errors	
search for broken symlinks	
search for case insensitive pattern 'search for me' in all files that match the name pattern '*.[!r]*' under current directory tree	
"search for case-insensitive ""string"" in ""log.tar.gz"""	
search for dbmsspool.sql file in the current folder	
"search for directories in the folder ""test"" which end have 5 digits as their name"	
"search for directories in the folder ""test"" which end with 5 digits using regular expressions"	
"search for directories that contain the phrase ""foo"" but do not end in "".bar"""	
search for directory foo ignoring case	
search for empty files	
"search for environmental variables with ""hist"" in their name or contents"	
search for error in all btree*.c files under current directory	
"search for file ""file"" between level 2 and 3 of the directory tree"	
"search for file ""file"" with minimum depth set to 4"	
search for file 'secret.keys' redirecting error messages to /dev/null	
"search for file names with ""bad"" characters in the current directory and delete the files."	
"search for filenames matching ""android"" in the current directory and number the output"	
"search for files ""file1"" or ""file9"""	
search for files bigger than 10m	
search for files cart1 or cart2 or cart3 or ...cart6 in the folder junk which is in home folder and display all its details. discard all the errors and do not display them.	
search for files cart4 or cart5 or cart6 in the folder junk which is in home folder and delete it.	
"search for files containing string ""pendwidth"" and view the result using the more command"	
search for files greater than 20mb in the entire file system and display the path and file size	
search for files greater than 20mb in the entire file system, display the path and file size and discard error reporting of the find command	
search for files greater than 20mb in the entire file system, sort them according to size in ascending order and display the path and file size	
search for files greater than 20mb in the entire file system, sort them according to size in descending order and display the path and file size	
search for files greater than 20mb under your home directory (/home/user)	
search for files having python in filename	
search for files in a directory and check the validity of a command by giving the  file as input	
search for files in current folder using name patterns	
search for files in current folder using regular expressions	
"search for files in the current folder ending with "".au"""	
"search for files in the current folder ending with "".au"" and save the output to the file names.txt"	
search for files in the current folder using name patterns	
"search for files in the current folder which start with ""myfile"" ( case insensitive search )"	
search for files in the current user's home directory and below for files that have not been accessed for more than 100 days and ask the user for permission to delete each file, one by one.	
search for files in your home directory which have been modified in the last twenty-four hours	
search for files in your home directory which have been modified in the last twenty-four hours.	
"search for files named ""wsfy321.c"" in a case-insensitive manner"	
search for files only that end with .php and look for the string $test inside those files	
search for files specifying the maximum depth of the search	
search for files specifying the minimum depth of the search	
search for files starting with memo and which belong to the user ann in the folder /work	
search for files that are at least 1.1gb	
search for files that are at least 100mb	
search for files that are readable for everybody, have at least on write bit set but are not executable for anybody	
search for files that were accessed less than 5 days ago.	
search for files which are writable by both their owner and their group	
search for files which are writable by either their owner or their group	
search for files which are writable by somebody	
search for files which have read and write permission for their owner and group, and which other users can read, without regard to the presence of any extra permission bits	
search for files which have read and write permission for their owner, and group, but which other users can read but not write to.	
"search for files whose name is ""filename"" and whose permissions are 777"	
search for files whose size is between 100 kilobytes and 500 kilobytes	
"search for files with ""demo"" in their names and ""sitesearch"" in their path names"	
"search for files with ""sitesearch"" in their names and ""demo"" in their path names"	
"search for files with the name ""temp"" in the /usr folder"	
search for files/directories named 'filename.txt' under '/path/to/folder' directory tree without traversing into directories that contain the string 'ignored_directory' in their paths	
search for files/directories named 'filename.txt' under current directory tree without traversing into './ignored_directory'	
search for files/directories that are readable for everybody, have at least one write bit set but are not executable for anybody	
search for files/directories which are writable by both their owner and their group	
search for files/directories which are writable by either their owner or their group	
search for files/directories which are writable by somebody (their owner, or their group, or anybody else)	
search for files/directories which have read and write permission for their owner, and group and only read permission for others	
search for files/directories with a case insensitive .txt extension in entire file system	
search for files/directories with the case insensitive pattern anaconda* in /var/log	
search for files/directories with the case insensitive pattern anaconda.* in /var/log	
search for files/directories with the case insensitive pattern anaconda.* in /var/log directory and create an archive (file.tar) of the last file found	
search for files/directories with the case insensitive pattern anaconda.* in var/log directory	
search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found	
search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of the last file found	
search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file1.tar) of the last block of files sent to xargs	
search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (somefile.tar) of all the files found	
search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (somefile.tar) of all the files found ensuring white space safety	
search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches	
search for first match of the case insensitive regex 're' in all *.coffee files under current directory	
search for first match of the case insensitive regex 're' in all *.coffee files under current directory and print the file paths along with the matches	
search for first match of the regex 're' in all *.coffee files under current directory	
search for first match of the regex 're' in all *.coffee files under current directory and print the file names	
search for hidden files non-recursively	
"search for jpg images in folders in the path ""cam2/2013"" and convert these files to the video cam2-2013-30fps-19crf.mp4"	
"search for line 111 in file ""active_record.rb"" with 2 lines of context"	
"search for line number 111 in file ""active_record.rb"""	
"search for lines that have zero or more whitespace characters before ""http://"" and number the uniquely sorted output"	
search for mp3 files in the current folder and subfolders except in dir1 subfolder.	
search for mp3 files in the current folder and subfolders exclude dir1 and dir2	
search for mp3 files in the folder /mp3collection which are smaller than 5mb	
search for multiple files in the current folder	
search for non-empty files	
"search for occurrences of string ""main("" in the .c files from the current directory tree"	
"search for pattern matched files in the current folder and subfolders exclude ""excluded path"""	
search for perl files in the folder /users/tom	
search for php files  in current directory and search for a word in all these files	
search for regular expression 'expr' in all .c and .h files from the current directory tree	
search for regular file foo ignoring case	
"search for regular files in the current folder which path is not  ""./.*"" and not ""./*/.*"""	
search for regular files of the grooup 'users' in the file system	
search for regular files of the user bluher in the file system	
"search for regular/normal file with the name ""myfile"" in the entire file system"	
"search for regular/normal file with the name ""myfile"" in the entire file system and discard all the errors"	
search for soft links in current folder and display those links which are not pointed to files in current folder	
search for subscription.java under current directory, and go to directory containing it.	
search for swap files (.swp files) in temp folder and remove them	
search for symlinks pointing to anywhere within /mnt/oldname/	
search for text files in the current folder which do not have write access to others	
search for text files in the current folder which have write access to others	
"search for text files in the directory ""/home/user1"" and copy them to the directory /home/backup"	
search for text files in the folder /home/you which have been modified in the last 60*24 hours(case insensitive search) and display their contents	
search for text files in the folders /home/hobbes/ /home/calvin/	
search for text files in the folders /home/hobbes/ /home/calvin/ and discard all the errors	
"search for the "".git"" folder in the current folder and run the git pull request"	
search for the case insensitive pattern 'pattern' in all files under current directory tree and display the matched files	
search for the case insensitive pattern 'search for me' in all files with '.p', '.w' and '.i' extension under current directory tree without descending into '.svn' and 'pdv' directories	
search for the case insensitive regex 'string_to_search_for' in all files under current directory	
search for the case insensitive regex expanded by $2 in all files named $1 (to be expanded) under current directory	
"search for the directory ""config"" in the current folder"	
"search for the directory ""config"" in the current folder and change directory to it"	
"search for the directory ""config"" in the current folder and change directory to the first instance of the search"	
"search for the directory ""mysql"" in the /etc folder"	
"search for the directory ""mysql"" in the entire file system"	
"search for the directory ""ora10"" in the entire file system"	
"search for the directory ""uploads"" in current folder and change the permission of the folder and all the files to 755"	
"search for the directory starting with ""ora10"" in the entire file system"	
search for the directory testdir in the folder /home	
search for the directory with the name aa in the current folder	
search for the extended grep regex 'expr' in all files with '.c' and '.h' extension under current directory tree	
"search for the extended regex expanded by""$month\/$year.*get.*ad=$advertiser http\/1"" in the decompressed contents of the /var/log/apache2/access*.gz files that are newer than ./tmpoldfile and older than ./tmpnewfile"	
search for the extened regex 'expr' in all files with '.c' and '.h' extension under current directory tree	
"search for the file "".user.log"" and display its parent directory"	
"search for the file "".user.log"" in a folder"	
"search for the file ""abc"" in the current folder or display all the directories"	
"search for the file ""dok.txt"" in the kat folder and if it sis present then print the echo statement"	
"search for the file ""file"" in current folder and save the output to the same file"	
"search for the file ""file"" in the current folder excluding those in the sub directory "".git"""	
"search for the file ""file1"" in the entire file system"	
"search for the file ""file_name"" in the folder /path"	
"search for the file ""filename"" in the entire file system"	
"search for the file ""foo.txt"" in the entire file system"	
"search for the file ""foobar.txt"" in the folder ""/home/mywebsite"""	
"search for the file ""job.history"" in the folder /data/spoolln and search for multiple patterns in the file and display the count of matched lines along with the pattern"	
"search for the file ""myfile"" in the current folder and display all errors apart from permission denied error"	
"search for the file ""myletter.doc"" in the home folder"	
"search for the file ""name_to_find"" in the home folder"	
"search for the file ""process.txt"" in the current directory"	
"search for the file ""process.txt"" in the current folder (case insensitive search)"	
"search for the file ""process.txt"" in the entire file system"	
"search for the file ""process.txt"" in the entire file system (case insensitive search)"	
"search for the file ""program.c"" in the entire file system and save the errors to the file errors.txt"	
search for the file centos in /usr folder ( case insenstive search )	
search for the file chapter1 in the folder /work	
search for the file filename in the entire file system	
search for the file foo in  the current folder and display a long listing of it in sorted order of modification date	
search for the file foo.txt in the current folder and open it in vi editor	
search for the file foo.txt in the entire file system	
"search for the file in the entire file system which has the words ""filename"" in its name"	
"search for the file job.hostory in the folder ""/data/spoolln"""	
search for the file picasso in the folder /home/calvin/ (case insensitive search)	
search for the file test in the current folder	
search for the file test.txt in the folders /home and /opt	
search for the file test2 in the current folder	
search for the file, filename.txt in the current folder	
search for the file, filename.txt in the current folder ( case insensitive search )	
search for the file, filename.txt in the folder /home	
"search for the files ""foo.txt"" in the current folder"	
"search for the files ""foo.txt"" in the current folder and rename it to foo.xml"	
"search for the files in the current folder which begin with the word ""kt"" followed by a digit"	
search for the files that are owned by user rooter or by user www-data	
search for the files which contain the word start in their name excluding search in ./proc, ./sys, ./run folders	
"search for the files with the name ""temp"" and which have not been accessed in the last 7*24 hours in the /usr folder"	
search for the files/directories that were modified more than an hour ago	
"search for the folder .dummy and remove it from the folder ""test folder"""	
"search for the folder .dummy in the entire directory structure of ""test folder"" and remove it."	
"search for the host ""slc02oxm.us.oracle.com"" in all the xml files in the current folder and display the files which has the matched content"	
"search for the ip ""192.168.1.5"" in all the files in /etc folder"	
search for the literal string 'v$process' in all files under current directory	
"search for the pattern ""tgt/etc/file1"" in the files tgt/etc/file2, tgt/etc/file3"	
search for the pattern '^use strict' in all *.pl files under current directory	
search for the pattern 'search string' in all the files in the ''/tmp folder and display the matched lines along with the file names	
search for the pattern in all the regular/normal files in the entire file system	
"search for the perl regex ""[\x80-\xff]"" in *.xml files under current directory tree"	
"search for the query ""filename"" in the current directory and any subdirectories"	
"search for the regex ""+\s\+"" in file 'in.txt' and print the matches by replacing newlines with comma (',')"	
"search for the regex ""\$wp_version ="" in all the regular files that end with '/wp-includes/version.php' (case insensitive) in their paths in directories/files taken from the glob pattern '/home/*//public_html/' and show the matched lines along with the file names"	
"search for the regex ""\$wp_version ="" in all the regular files that end with '/wp-includes/version.php' (case insensitive) in their paths in directories/files taken from the glob pattern '/var/www/vhosts/*/httpdocs' and show the matched lines along with the file names"	
search for the regex $greppattern in all files with '.c' or '.h' extension under $searchpath with name pattern $filepat and show the matched line numbers, file names and matched lines	
search for the regex '->get(\|#hyphenate' in all files with '.pl' or '.pm' extension under '/users/tom' directory tree and only show the filenames	
search for the regex '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' in all files under /etc	
search for the regex '^aaa$' in all *.txt files under current directory and count the number of matches	
search for the regex '^error' in all *.log files under current directory	
search for the regex 'pattern_to_search' in all files under '/directory/containing/files' and show the matched lines as well as the file names	
search for the regex ... in the manual of the find command	
search for the regex \s1$ in all files under current directory	
search for the regex ^catalina in the first line of each file under current directory	
search for the regex expanded by the variable $search in all regular files under $dir directory tree	
search for the regex expaned by the variable $search in all regular files under $dir directory tree	
"search for the regular/normal file ""dateiname"" in the entire file system"	
"search for the regular/normal file ""foo.bar"" and force delete it"	
"search for the regular/normal file ""myfile"" in the current folder excluding search in the paths of ""work"" and ""home"" sub directories"	
"search for the regular/normal file 'myfile' in the folder /root excluding those that are present in the ""work"" directory"	
search for the regular/normal file 'myfile' in the folder /root excluding those that are present in the /root/work directory	
search for the regular/normal file firefox or thunderbird or seamonkey in the entire file system excluding search in the directories share and those starting with 10_recommended and discard all the errors	
search for the regular/normal file java in the entire file system excluding search in the directories share and those starting with 10_recommended and discard all the errors	
search for the regular/normal files iceweasel or thunderbird in the entire file system and exclude search in the paths /export and directories having the word recommeded in their name	
search for the regulars file starting with hstd which have been modified yesterday from day start and copy them to /path/tonew/dir	
"search for the string ""error"" in all xml files in the current working directory tree"	
search for the string 'device' in all regular files in the entire filesystem	
search for the string 'foo' in *.html files under /usr/src/linux directory	
search for the string 'git' in all the files under current directory tree excluding paths and names that contain the string 'git'	
search for the string 'git' in all the files under current directory tree without traversing into '.git' folder and excluding files that have 'git' in their names	
search for the string 'magic' in all regular files under current directory tree and display long listing of them	
search for the string 'nameserver' in all files under /etc	
"search for the system host name in ""/etc/hosts"" and print the ip address in the first awk field"	
"search for the text file ""file.txt"" and display its parent directory"	
"search for the word ""damian"" in all the regular/normal files in the /etc folder and display only the matched file name"	
"search for the word ""foo"" in all the regular/normal files in the directory ""/path/to/dir"""	
"search for the word ""foo"" in all the regular/normal files with the name ""file-pattern"" in the directory ""/path/to/dir"""	
"search for the word ""methodnamehere"" in all the python files in the folder ""/mycool/project/"" and display color on the matched lines in the output"	
"search for the word ""mysql"" in all the files in the current containing the word ""notes"" in their name"	
"search for the word ""mysql"" in all the files in the current containing the word ""notes"" in their name. print0 is used to handle files  with newlines in their names or those which have only spaces in their names"	
"search for the word ""nameserver"" in all the configuration files of the /etc folder"	
"search for the word ""nameserver"" in all the regular/normal files in the /etc directory and display the name of the file along with the matched line"	
"search for the word ""nutshell"" or ""nutshell"" in all the files in the folder book"	
"search for the word ""put"" in all the files in the current folder which have the word ""bills"" in their name and display the matched line along with the filename."	
"search for the word ""redeem reward"" in all the regular/normal files in the current folder"	
"search for the word ""redeem reward"" in all the regular/normal files in the current folder and discard all the errors"	
"search for the word ""search-pattern"" in all the regular/normal files in the current folder and display the matched file name"	
"search for the word ""slrn"" in all the files in the current folder"	
"search for the word ""slrn"" in all the files in the folder $home/html/andrews-corner"	
search for the word bananas in the all the regular/normal files in the entire file system	
search for the word echo all the bash files(files ending with .bash) in the current folder	
search for the word error in all the xml files in the current folder	
search for the word foo in all the js files in the current folder	
search for the word hello in all the text files in the temp folder and delete them	
search for the word log in all the files in the folder ~/jsmith	
search for the word text in all the python files in the current folder	
search for the wp-config.php file in /var/www and one level below	
"search for utility ""foo"" in path, display its file type description."	
search for version in system.info files.	
search for word linux in all the regular/normal files in the folder mail.	
search for xception in all *auth*application* files under current directory and count the number of matches	
"search history for ""part_of_the_command_i_still_remember_here"""	
search in all the directories of the folder /prod for json files and send them as input to the python file /tmp/test.py	
"search in all the regular/normal files of the current folder for the word ""word"" and display the matched file name"	
search in current directory downwards all files whose owner is aa1 and grop is grp .	
search in current directory downwards all files whose size is 10 bytes ( characters ) .	
search in current directory downwards all files whose size is less then 10 bytes	
search in the current directory and all sub-directories except ./d and any further sub-directories also named d for the file named hi.dat	
search in the current directory and all sub-directories except ./d for the file hi.dat using the extending file-globbing features of the shell.	
search in the current directory and all sub-directories except ./d for the file named hi.dat	
search in the current directory and all sub-directories except ./d for the file named hi.dat.	
search in the current directory for any file named chapter1.txt	
"search in the current folder for all the directories with the name ""test"""	
"search in the current folder for all the regular/normal file with the name ""test"""	
search in the current folder for all the text files and display their names	
"search in the current folder for the file ""myletter.doc"""	
"search in the current folder for the file with the name ""test"""	
"search in the current folder for the file with the name ""test"" ( case insensitive search )"	
"search in the current folder for the files that begin with ""myletter"""	
"search in the entire file system for the files firefox, thunderbird, seamonkey and display all the files expect those having the words ""10_recommended"" or ""repo"" (discard all the errors during search)"	
"search in the home folder for all the files with the name ""monfichier"""	
"search level 3 of the current directory tree for the directories whose pathnames contain ""new parts"""	
"search my_folder recursively for text files containing ""needle text"""	
search non-recursively directory tree `myapp.app' for directories whose name is 'headers' and delete them in an optimized way	
search normal files called ' banckup '  from /usr directory downward and print them.	
search only for directories	
search only for regular files	
"search path for utilities called ""rename"", display the type of file (script, executable, ...) for each match found."	
search recursively through /mydir, outputting only the base (leaf) name of each file, directory, symlink etc. without any containing directories, that is the part following the last slash.	
"search regular files from the /path/to/dir directory tree for lines that contain ""_start"" and are enclosed in lines ""@group"" and ""@end_group"""	
"search regular files under ~/mail for string ""linux"""	
search subdirectory `linux' in the current directory for file `teste.tex'	
"search the ""data"" directory tree for files matching pattern 'filepattern-*2009*' and save the result as 'filesofinterest.txt'"	
"search the ""katalogi"" directory tree for files named ""wzorzec"""	
"search the ""test1"" directory recursively for regular files"	
"search the ""test1"" directory recursively for regular files named ""textfile.txt"""	
"search the ""your/dir"" directory for empty subdirectories"	
search the 'tmp' directory for .mp3 files	
"search the *.c files residing in the current directory tree for string ""blash"""	
"search the *.cc files in the current directory tree for string ""xxx"""	
search the *.code files from the current directory tree for string 'pattern'	
"search the *.pdf files from directory tree pdfs/ for text ""perry sound"", ignoring the case"	
"search the *.pdf files from directory tree pdfs/ for text ""perry sound"", ignoring the case, and print the list of matched files"	
"search the *.txt files from the current directory tree for ""string"""	
"search the ./bin directory recursively for files called ""cp"""	
search the ./in_save directory for regular files and view the result using pager `more'	
"search the .c files residing in the lib/ directory tree for lines beginning with ""pyerr"""	
"search the .cs files of the current directory tree for string ""content pattern"""	
"search the .css files in the /starting/directory tree for "".exampleclass"""	
search the .java files from the /applications/ directory tree for todo lines	
search the .java files from the current directory tree for todo lines	
"search the .log files in the current directory tree for string ""the sas system"""	
"search the .py files residing in the current directory tree for ""something"""	
"search the .py files residing in the current directory tree for ""something"" and save the output to output.txt"	
"search the .sh files in the current directory tree for string ""ksh"""	
"search the .ver files from the current directory tree for perl regular expression ""model-manufacturer:.\n."""	
"search the .ver files from the current directory tree for string ""test_version='"	
search the /applications directory tree for *.app directories	
search the /dir directory tree for files whose names match regular expression '.*2015.*\(album.*\|picture.*\)'	
search the /dir directory tree for files whose names match regular expression '2015.*(album|picture)'	
search the /etc directory tree for files accessed within the last 24 hours	
search the /etc directory tree for symbolic links	
search the /etc/apache-perl directory tree for files newer than /etc/apache-perl/httpd.conf	
search the /home/bozo/projects directory tree for files modified within the last 24 hours	
search the /home/pankaj directory for regular files whose status has changed within the last 5 minutes	
"search the /home/sdt5z/tmp directory tree for files named ""accepted_hits.bam"""	
search the /home/test directory tree for directories and files called '.ssh'	
"search the /home/user1 directory tree for files whose names end in "".bin"""	
search the /home/weedly directory tree for regular files named myfile	
search the /home/www directory tree for regular files	
search the /media/shared directory recursively for mp3 and ogg files	
search the /mnt/raid/upload directory tree for files that have been modified within the last 7 days	
search the /mnt/raid/upload directory tree for files that have not been modified within the last 5 days	
search the /myfiles directory tree for files last accessed more than 30 days ago	
search the /myfiles directory tree for files last modified 2 days ago	
search the /myfiles directory tree for files that are 5 512 byte blocks in size	
"search the /myfiles directory tree for files whose names contain ""blue"""	
search the /myfiles directory tree for regular files with at least these permissions: 647	
search the /myfiles directory tree for regular files with read and write permissions set for `others'	
search the /path directory recursively for txt files	
search the /path directory tree for files having permissions 777	
search the /path directory tree for files lacking the group writable bit	
"search the /path directory tree for files matching pattern ""file_name*"""	
"search the /path directory tree for files matching pattern ""file_name*"" and containing ""bar"" in their pathnames"	
search the /path directory tree for files matching pattern '*.foo'	
search the /path directory tree for files missing g+w and o+w bits	
search the /path directory tree for files missing g+w or o+w bits	
search the /path directory tree for files that do not have a valid user or group	
"search the /path directory tree for files whose pathnames match ""/path/bar*"" or ""/path/foo*"" and whose names match pattern ""file_name*"""	
"search the /path directory tree for files whose pathnames match pattern ""/path/bar*"" and whose names match pattern ""file_name*"""	
search the /path directory tree for regular files	
search the /path tree for all executables	
"search the /path/bar* directories recursively for files matching pattern ""file_name*"""	
search the /path/to/dir directory tree for .c files	
search the /path/to/directory tree for regular files modified 61 days ago and then remove them	
"search the /root directory recursively for files named ""findcommandexamples.txt"""	
"search the /root directory recursively for the regular file named ""myfile"""	
"search the /root directory recursively for the regular file named ""myfile"" ignoring ""work"" directories"	
"search the /root directory recursively for the regular file named ""myfile"" ignoring /root/work/"	
search the /storage/sdcard0/tencent/micromsg/ directory tree for jpg files	
search the /tmp directory tree for files owned by user `ian'	
search the /tmp tree for files between 10kb and 20kb	
"search the /tmp/ directory recursively for files matching regular expression "".*file[0-9]+$"""	
search the /tmp/ directory recursively for regular files	
search the /usr/ directory tree for files newer than file /tmp/stamp	
search the /usr/bin directory tree for regular files accessed more than 100 days ago	
search the /usr/bin directory tree for regular files modified or created less than 10 days ago	
search the /usr/local/doc directory tree for .texi files	
search the /var/www/ tree for files not owned by user `apache'	
search the /var/www/ tree for files owned by root or unknown group and change their group to 'apache'	
search the `images' directory tree for regular files	
search the `research' directory and one level below for directories that are not owned by group `ian'	
search the bla directory recursively for *.so files	
search the case insensitive regex ''a.search.pattern'' in all python files and all xml files under current directory and pipe the result in a readonly vim session	
"search the css files found in the current directory tree for string ""foo"""	
search the current directory and all of its sub-directories for the file 'file1'.	
"search the current directory and all of its sub-directory for any pdf files being careful to prevent the shell from expanding ""*""  before it's passed to find."	
search the current directory and all of its sub-directory for any pdf files being careful to prevent the shell from expanding anything in '*.pdf'  before it'ss passed to find.	
search the current directory and all of its sub-directory for any pdf files.	
search the current directory and all subdirectories for files that have 777 permissions and the permissions to 755	
search the current directory and directories below for .sql files	
"search the current directory and its sub-directories for any file that has ""bsd"" somewhere in its name."	
search the current directory and two levels below for file `teste.tex'	
"search the current directory for *rc.conf files and grant ""other"" users read permission"	
search the current directory for all files with no 'read' privilege for 'others'	
search the current directory for all regular files executable by 'user', 'group', and 'others'	
"search the current directory for files whose names start with ""messages."" ignoring svn and cvs files"	
"search the current directory for files whose names start with ""messages."" ignoring svn files"	
"search the current directory for files whose names start with ""messages."" ignoring svn, git, and .anythingelseiwannaignore files"	
search the current directory for files whose names start with my	
"search the current directory for html files whose names begin with ""a"""	
search the current directory for php files	
search the current directory for regular files whose names start with my	
"search the current directory recursively for *.txt files with lines that match regular expression ""^string"""	
search the current directory recursively for .m4a files	
"search the current directory recursively for .sh files whose names begin with ""new"""	
search the current directory recursively for directories with the execute permission set for everybody	
"search the current directory recursively for files containing ""needle text"""	
"search the current directory recursively for files containing ""string"""	
search the current directory recursively for files last modified within the past 24 hours	
"search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and ""en"" and ""es"" directories"	
search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en*	
search the current directory recursively for files last modified within the past 24 hours ignoring paths ./es* and ./en*	
search the current directory recursively for files whose size is between 10 and 50 mb	
search the current directory recursively for files with the exact permissions u=rwx,g=rx,o=rx	
search the current directory recursively for files writable for `others'	
search the current directory recursively for mov files	
search the current directory recursively for mov files, following symlinks	
search the current directory recursively for regular files last accessed 2 days ago	
search the current directory recursively for regular files last accessed 2 minutes ago	
search the current directory recursively for regular files last accessed less than 2 days ago	
search the current directory recursively for regular files last accessed less than 2 minutes ago	
search the current directory recursively for regular files last accessed more than 2 days ago	
search the current directory recursively for regular files last accessed more than 2 minutes ago	
search the current directory recursively for regular files last changed 2 days ago	
search the current directory recursively for regular files last changed less than 2 days ago	
search the current directory recursively for regular files last changed more than 2 days ago	
search the current directory recursively for regular files last modified less than 2 days ago	
search the current directory recursively for regular files last modified more than 2 days ago	
search the current directory recursively for regular files modified 2 days ago	
search the current directory recursively for regular files that have been changed less than 3 days ago and print 5 of them.	
"search the current directory recursively for regular files with extensions sdw, sdc, sdd and save the search result as ""list_1"""	
search the current directory recursively for regular files with the extension given as variable $extension	
search the current directory recursively for regular files with the read permission set for everybody	
search the current directory recursively for regular files, skipping hidden files in the current directory	
search the current directory recursively for text files containing at least one character	
search the current directory recursively for the largest files	
search the current directory tree for *.c and *.asm files, ignoring the case	
search the current directory tree for *.c and *.sh files	
search the current directory tree for *.conf and *.txt files	
"search the current directory tree for *.wav files that have ""export"" in their pathnames"	
search the current directory tree for *bash* files	
search the current directory tree for *bash* files printing them on a single line	
search the current directory tree for *cache, *xml, and *html files	
search the current directory tree for .aux files	
"search the current directory tree for .log files containing the string ""the sas system"" on the first line"	
"search the current directory tree for .log files containing the string ""the sas system"", and save their names to sas_log_list.txt"	
search the current directory tree for .rb files ignoring .vendor directories	
"search the current directory tree for .rb files ignoring the ""./vendor"" subdirectory"	
search the current directory tree for .ver files	
"search the current directory tree for a regular file named ""file_name"""	
search the current directory tree for all .java files newer than the file build.xml	
search the current directory tree for all .java files that were last modified at least 7 days ago	
search the current directory tree for all files except svn ones	
"search the current directory tree for all files matching either pattern ""*.rb"" or pattern ""*.py"""	
"search the current directory tree for all files matching pattern ""*.rb"""	
"search the current directory tree for all files matching regular expression "".*\.rb$"""	
search the current directory tree for all image files	
"search the current directory tree for all regular files matching pattern ""*.rb"""	
search the current directory tree for all regular non-hidden files except *.o	
search the current directory tree for an html file having the text 'web sites' in it	
search the current directory tree for directories	
search the current directory tree for directories lacking execute permissions for user, group, or others	
search the current directory tree for directories that can be opened by noone	
search the current directory tree for executable files	
search the current directory tree for executable files and searchable directories	
search the current directory tree for executable regular files	
"search the current directory tree for file ""a.txt"""	
search the current directory tree for file `teste.tex'	
search the current directory tree for filenames matching the pattern '[mm][yy][ff][ii][ll][ee]*'	
search the current directory tree for files aaa and bbb	
"search the current directory tree for files and directories called ""test"""	
"search the current directory tree for files and directories whose names begin with ""pro"""	
"search the current directory tree for files and directories whose names do not end in "".exe"" and "".dll"""	
"search the current directory tree for files and directories whose names do not end in ""exe"" and ""dll"""	
search the current directory tree for files and directories with permissions 775	
"search the current directory tree for files containing ""album"" and ""vacations"" in their names and not containing ""2015"""	
"search the current directory tree for files containing ""bash"" in their names"	
"search the current directory tree for files containing ""needle"" in their names"	
"search the current directory tree for files containing ""sh"" in their names"	
"search the current directory tree for files containing ""string"" in their path names"	
search the current directory tree for files executable by at least someone	
search the current directory tree for files larger than 10mb but smaller than 50mb	
search the current directory tree for files last accessed more than 10 days ago	
search the current directory tree for files matching regular expression '.*myfile[0-9][0-9]?'	
search the current directory tree for files matching regular expression '^myfile[0-9][0-9]?$'	
search the current directory tree for files matching sed regular expression '.*myfile[0-9]\{1,2\}'	
search the current directory tree for files modified less than 5 days ago	
"search the current directory tree for files named ""accepted_hits.bam"""	
"search the current directory tree for files named ""somename"", case insensitive"	
search the current directory tree for files named 'subscription.java'	
search the current directory tree for files that are less than 50kb	
"search the current directory tree for files whose name is "".note"", case insensitive"	
"search the current directory tree for files whose names are not ""a.txt"""	
"search the current directory tree for files whose names begin with ""my"" and end with ""p"" followed by any character"	
"search the current directory tree for files whose names begin with ""my"" and end with ""p"" followed by any character, ignoring path names containing ""test"""	
search the current directory tree for files whose names begin with 'my'	
"search the current directory tree for files whose names contain ""bills"""	
"search the current directory tree for files whose names contain ""textforrename"""	
"search the current directory tree for files whose names do not end in "".exe"" and "".dll"""	
"search the current directory tree for files whose names do not end in ""1"" and ""2"""	
"search the current directory tree for files whose names end in ""rb"" or ""js"""	
"search the current directory tree for files whose names end in ""rb"" or ""js"" and which contain string ""matchnamehere"""	
search the current directory tree for files whose names match regular expression '.*packet.*', ignoring the case	
"search the current directory tree for files whose names start with ""f"""	
"search the current directory tree for files without ""test"" in their path names"	
search the current directory tree for hidden files	
search the current directory tree for hidden files skipping .htaccess	
search the current directory tree for php files changed less than 14 days ago	
search the current directory tree for regular .mkv files	
search the current directory tree for regular files changed less than 1 day ago	
search the current directory tree for regular files changed on the 10th of september	
search the current directory tree for regular files lacking read permissions for user, group, or others	
search the current directory tree for regular files last changed more than 14 days ago	
"search the current directory tree for regular files modified within the past 24 hours whose names do not end with "".ds_store"""	
"search the current directory tree for regular files named `doc.txt' and print ""found"" for each of them"	
search the current directory tree for regular files omitting directory `omit-directory'	
"search the current directory tree for regular files owned by user ""www"""	
search the current directory tree for regular files that can be read by noone	
"search the current directory tree for regular files that contain ""string"""	
search the current directory tree for regular files that were accessed $ftime days ago	
search the current directory tree for regular files that were changed $ftime days ago	
search the current directory tree for regular files that were modified $ftime days ago	
"search the current directory tree for regular files whose names begin with ""orapw"""	
"search the current directory tree for regular files whose names end in "".shtml"" or "".css"""	
"search the current directory tree for regular files whose names end in ""log"""	
"search the current directory tree for regular files whose names end with ""keep.${suffix}"", where $suffix is a shell variable"	
search the current directory tree for regular files whose names match pattern $x	
"search the current directory tree for regular files whose names match regular expression "".+-[0-9]+x[0-9]+\.jpg"""	
"search the current directory tree for symbolic links named ""link1"""	
search the current directory tree for symbolic links to files matching pattern '*/test*'	
search the current directory tree for symbolic links to files matching pattern '*test*'	
search the current directory tree for symlinks pointing at other symlinks	
"search the current directory tree for symlinks whose contents match pattern ""*sysdep.c"""	
"search the current directory tree for the files with extension ""trc"" and list them if they are more than three days old"	
"search the current directory tree for the files with extension ""trc"" and remove them if they are more than three days old"	
search the current directory tree for txt files skipping hidden ones	
"search the current directory tree recursively for the regular file named ""myfile"" ignoring ""work"" and ""home"" directories"	
search the current directory up to depth level 2 for files and directories	
"search the current directory, except the subdirectory tree "".svn"", for files whose name is ""foo.cpp"""	
search the current user's home directory and below for all .png files and copy those files in the directory imagesdir.	
search the current user's home directory and its sub-directories for any file that ends in .tar-gz and was modified after filename was last modified.	
search the current user's home directory and its sub-directories for any file that was modified less than 2 days ago or was modified after filename was last modified.	
search the current user's home directory and its sub-directories for any files accessed after alldata.tar was last accessed and add them to that same tar archive.	
"search the current working directory tree for files whose names start with ""filea_"" or ""fileb_"""	
search the dir_data directory and all of its sub-directories for regular files and remove the execute permission for all while adding the write permission for the user.	
"search the directories given as arguments to the bash script for files whose name is not ""ss"""	
"search the directories matching pattern ""/path/to/some/dir/*[0-9]"" for level 1 subdirectories"	
search the directories that match pattern '/path/to/directory/folder{?,[1-4]?,50}' for .txt files	
search the directory $path recursively for regular files with the given $extension	
search the directory given as variable $backuppath recursively for files that were last modified less than 10 days ago and save the list of them to file.list	
search the directory given as variable $d for empty subdirectories	
search the directory tree /tmp for regular files using zero delimiter for output	
search the directory tree given as variable $dir for regular files	
search the directory tree given as variable $root_dir for regular files	
search the entire file hierarchy for all regular files owned by olduser and change their ownership to newuser.	
search the entire file hierarchy for any file that begins with zsh and exists on the ext3 file systems.	
search the entire file hierarchy for files ending in '.old' and delete them.	
search the entire file hierarchy for files ending with '~' and print all matches except for those with '/media' in their pathnames.	
search the entire file hierarchy for files larger than 100 megabytes and delete them.	
search the entire file hierarchy for files named zsh that exist on ext3 file systems and print out detailed information about the file while sending anything printed to stderr to /dev/null.	
search the entire file hierarchy for files named zsh that exist on ext3 file systems and print out detailed information about the file.	
search the entire file system and save all the core file paths into a file	
search the entire file system for .jpg files.	
search the entire file system for any file that is writable by other.	
"search the entire file system for the file ""jan92.rpt"""	
search the entire system for suid or sgid files	
"search the file ""myfile.txt"" in home folder"	
search the file hierarchy for files larger than 100000 kb without searching any mounted removable media	
search the file myfile.txt in the current folder	
search the file system for regular files whose names are shorter than 25 characters	
search the file system for regular files whose pathnames are shorter than 25 characters	
"search the files from directory tree ""dirname"" for string ""foo"""	
"search the files from the current directory tree for ""chrome"""	
"search the files from the current directory tree for ""foo"""	
"search the files from the current directory tree for text ""documentclass"""	
"search the files in the current directory tree for lines containing string ""vds admin"""	
"search the files in the current directory tree that are named ""string to be searched"" for ""text"""	
"search the files of the current directory tree for string ""searched-string"""	
"search the files residing in the current directory tree whose names contain ""bills"" for ""put"""	
"search the files under and below /directory/containing/files for ""pattern_to_search"""	
"search the files under and below /directory/containing/files for ""text to search"""	
"search the first 300 commands in history containing ""scp"" and ending in ""important"""	
search the given $directory for files with permissions stored in $permissions	
"search the home directory for filenames starting with ""xx"" except for ""xxx"" files"	
search the home directory for files accessed more than 10 days ago	
"search the home directory for files whose names begin with ""test"""	
search the home directory for ogg and mp3 files	
"search the home directory tree for .tar.gz files newer than file ""filename"""	
search the home directory tree for all .txt files	
"search the home directory tree for files last modified less than 2 days ago or newer than file ""filename"""	
search the home directory tree for files last modified more than a year ago	
search the home directory tree for files matching pattern '*.txt'	
search the home directory tree for files modified less than 7 days ago	
search the home directory tree for files modified less than a day ago	
search the home directory tree for files owned by sam	
search the home directory tree for regular files modified yesterday	
search the home directory tree for video files	
search the local subdirectory tree of the current working directory and the /tmp directory tree for directories named mydir	
search the movies folder in the user's home directory for files larger than 1024 megabytes in size.	
search the path given as the $absolute_dir_path variable for regular files	
"search the pattern ^pyerr in all the "".c"" files in the folder lib/"	
"search the regular files from directory tree 'directory_name' for ""word"" and print the names of the matched files"	
"search the regular files from directory tree 'folder_name' for ""your_text"""	
"search the regular files of the current directory tree for string ""foo"""	
"search the regular files of the current directory tree for string ""stringyouwannafind"", ignoring the case"	
"search the regular files of the current directory tree for string ""stuff"""	
"search the regular files of the current directory tree for string ""texthere"""	
"search the regular files of the current directory tree for string ""whatever"""	
search the root directory and its subdirectories for files risiding on ntfs or vfat filesystems	
"search the specified group for the given ""filename"	
"search the specified user for the given ""filename"""	
search the src/ directory recursively for .c and .h files	
search the system for 'dead' symbolic links	
search the system for *.rpm files ignoring removable media	
search the system for a file by its content limiting the search to regular files smaller than 10kb	
"search the system for directories named ""needle"""	
"search the system for directories named ""needle"" suppressing error messages"	
search the system for files and directories owned by group `managers'	
search the system for files and directories owned by user `admin'	
"search the system for files named ""findcommandexamples.txt"", ignoring the case"	
search the system for files whose names begin with letters 'a', 'b', or 'c'	
"search the system for regular files whose names are ""filename"" ignoring the case"	
search the system for the file 'myfile' ignoring permission denied errors	
search the system for the file “testfile.txt”	
search the system for the file “testfile.txt” ignoring the case	
search the system for the regular file 'myfile' ignoring permission denied errors	
"search the word ""mysearchstr"" in all the regular/normal files in the current folder and display the line number and the file name"	
search the word needle and substitute it with replacement in all the php files of the current folder	
search the xargstest/ directory recursively for files matching pattern 'file??'	
"search the xml files from directories /res/values-en-rus and /res/xml for string ""hovering_msg"""	
search the ~ and `music' directory trees for .mp3 files	
"search the ~/books directory recursively for files named ""waldo"""	
"search the ~/books directory recursively for regular files named ""waldo"""	
"search three folders named foo, bar, and baz for all ""*.rb"" files"	
search through only the /usr and /home directories for any file named chapter1.txt	
search through the /usr directory for all files that begin with the letters chapter, followed by anything else.	
search through the /usr/local directory for files that end with the extension .html, and print the file locations.	
search user1's home directory tree for *.bin files	
"searche jsp's for ""todo"" lines and append them all to a file with a header showing what file they came from"	
searches available packages by word 'zsh'.	
searches available packages with 'mysql' and 'client' in name.	
searches for 'something' in a large file and prints the matching line	
searches manual pages which descriptions contain 'postscript', and prints name and description of only ones that contain any-cased 'png' pattern.	
searches the manual page names and descriptions	
searches the manual page names and descriptions by 'disk' keyword.	
searches the manual pages with descriptions in section 3, that name begins with lowercase letter.	
searches through the /usr directory for the regular  file named 'chapter1*'	
searches through the /usr/local directory for files that end with the extension .html	
searches through the /usr/local directory for files that end with the extension .html. when these files are found, their permission is changed to mode 644 (rw-r--r--).	
searches through the htdocs and cgi-bin directories for files that end with the extension .cgi. when these files are found, their permission is changed to mode 755 (rwxr-xr-x).	
"searches through the root filesystem (""/"") for the file named chapter1, and prints the location"	
"searches through the root filesystem (""/"") for the file named chapter1."	
searching for all files with the extension mp3	
"sed ""s/,/\t/g"" filename.csv | less"	<MISSING>
sed '/^$/d;s/ /\//g' struct.txt | xargs mkdir -p	<MISSING>
sed '/^\s*$/d' $i | wc -l ## skip blank lines	<MISSING>
sed '/^\s*$/d' foo.c | wc -l	<MISSING>
sed '/pattern to match/d' ./infile	<MISSING>
sed '/start/,+4d'	<MISSING>
sed ':a;n;$!ba;s/\n/ /g'	<MISSING>
sed ':a;n;$!ba;s/\n/ /g' file	<MISSING>
sed 's/$/ fail/' fail.txt | join -a 1 -e pass -j 1 -o 1.1,2.2 list.txt -	<MISSING>
sed 's/$/\r/g' input |od -c	<MISSING>
sed 's/$/p/' file_of_line_numbers | sed -nf - source	<MISSING>
sed 's/,,/, ,/g;s/,,/, ,/g' data.csv | column -s, -t	<MISSING>
"sed 's/.*/& bytes/' ""$tempfile"" | column -t"	<MISSING>
sed 's/.*/\l&/'	<MISSING>
sed 's/3d3d/\n&/2g' temp | split -dl1 - temp	<MISSING>
sed 's/[^x]//g' filename | tr -d '\012' | wc -c	<MISSING>
sed 's/\(.....\)\(.....\)/\1\n\2/' input_file | split -l 2000000 - out-prefix-	<MISSING>
sed 's/\([^ ]*\) /\1\n/' input | fold -w 100	<MISSING>
sed 's/\n//' file	<MISSING>
"sed 's/^,/ ,/' test2.csv | tr -d \"" | column -s, -t"	<MISSING>
sed 's/^/.+/' infile | bc | tail -1	<MISSING>
sed 's/^/./' | rev | cut -d. -f1  | rev	<MISSING>
sed 's/^/./' | rev | cut -d. -f2- | rev | cut -c2-	<MISSING>
sed 'x;g;1!h;s/\n/ /g;$!d'	<MISSING>
sed --in-place '/some string here/d' yourfile	<MISSING>
sed -e ':a' -e 'n' -e '$!ba' -e 's/\n/ /g'	<MISSING>
"sed -e 's/\t/_|/g' table.txt |  column -t -s '_' | awk '1;!(nr%1){print ""-----------------------------------------------------------------------"";}'"	<MISSING>
sed -e '{:q;n;s/\n/ /g;t q}' file	<MISSING>
sed -f commandfile file	<MISSING>
"sed -i ""15i `hostname`"" test.html"	<MISSING>
"sed -i ""s#\(export\ path=\""\)\(.*\)#\1/home/$(whoami)/bin:~/\.local/bin:\2#"" ~/.zshrc"	<MISSING>
"sed -i ""s/\\\\\n//g"" filename"	<MISSING>
sed -i '' -e 's/subdomaina/subdomainb/g' $(find /home/www/ -type f)	<MISSING>
sed -i '/pattern/d' filename	<MISSING>
sed -i ':a;n;$!ba;s/\n/,/g' test.txt	<MISSING>
sed -i 's/foo/bar/' file	<MISSING>
sed -i 's/foo/bar/g' file	<MISSING>
sed -i 's/string_to_replace/string_to_replace_it/g' index.html	<MISSING>
sed -i bak -e s/string_to_replace/replace_with/g index.html	<MISSING>
sed -i s/'dummyvalue'/$(hostname -i | head -n1 | awk '{print $1;}')/g filename	<MISSING>
"sed -i.bak ""s#https.*\.com#$pub_url#g"" myhtmlfile.html"	<MISSING>
sed -i.bak '/pattern to match/d' ./infile	<MISSING>
sed -i.bak s/string_to_replace/string_to_replace_it/g index.html	<MISSING>
sed -ibak -e s/string_to_replace/replace_with/g index.html	<MISSING>
"sed -n ""s/^$//;t;p;"""	<MISSING>
sed -n '/pattern/!p' file	<MISSING>
sed -n 's;\(http://[^/]*/\).*;\1;p'	<MISSING>
sed -n 's;\(http://[^/]*\)/.*;\1;p'	<MISSING>
sed -r 's/((:[^: \t]*){3}):[^ \t]*/\1/g' file | column -t	<MISSING>
sed -z 's/\n/ /'g	<MISSING>
sed 100q datafile | split -c 1700 -	<MISSING>
sed s/string_to_replace/string_to_replace_it/g index.html | tee index.html	<MISSING>
see all pages in section 3.	
see the word count of every *.txt file in the home directory	
see what files are executable by the file's owner and group	
select everything selected by * without descending into any directories	
selects a job from list and get it back to the foreground (iselect package is required).	
selects a job from zenity dialog list and gets it back to the foreground.	
self=$(readlink /proc/$$/fd/255)	<MISSING>
self=`readlink /proc/$$/fd/255`	<MISSING>
"send ""yes"" 4 times followed by 1 ""no"" to ""./script"""	
"send 4 ping packets of size 2 to ""www.google.com"" on a solaris machine"	
"send 4 ping requests to host ""google.comz"", displaying only the summary info after the last request completed."	
send 5 ping requests to address 12.34.56.78 and print only the last 2 lines of the summary output.	
"send 5 pings to broadcast address ""10.10.0.255"" and print the unique ips who responded"	
"send a lot of packets to ""remote.machine"" on port ""closed_port"" at 0.1 second intervals"	
"send a single ping request with a ttl of 1 to ""192.168.1.1"""	
"send an audible ping to ""10.100.3.104"""	
"send at most 3 ping requests to ""8.8.8.8"" with a timeout of 3 seconds on interface ""eth9"""	
send command to named screen session with special characters	
send content to screen session windows with a certain title	
"send contents of ""input.txt.gz"" to ""command"" on stdin"	
"send each byte in ""/home/cscape/desktop/file"" to awk script ""x.awk"""	
"send each byte in ""/home/cscape/desktop/table.sql"" to awk"	
"send email in ""mail.tmp"" from ""noreply@hostname"" with subject ""config done!"""	
"send email with subject ""backup"" and attachment ""mysqldbbackup.sql"" and message in ""message.txt"" to ""backup@email.com"""	
"send every 130 characters of ""file"" as input to ""..."""	
"send get request to ""http://testsite/api/"" with header ""authorization: token wef4fwef54te4t5teerdfgghrtgdg53"" and format as json"	
"send get request to ""https://graph.facebook.com/me/feed"" using url-encoding ""access_token=$(cat .fb_access_token)"""	
"send one ping request to host whose name or ip address is specified by variable ""ip"", using network interface eth9."	
"send one ping request to host whose name or ip address is specified by variable ""remote_machine""."	
"send one ping request to host with local address in the 10.0.0.x range, with last number specified by variable ""i"", waiting 1 second for a reply, and output only lines containing ""from"" to standard output."	
"send one ping request to host with local address in the 192.168.1.x range, with last number specified by variable ""counter"", and output only lines containing ""ms"" to standard output."	
send one ping request to local machine.	
send output from find the find command to a file	
"send ping requests to ""yourhostname.local"""	
"send ping requests to hostname specified by variable ""c"" for 1 second."	
send reverse requests to get domain name for each address in 'my_ips' list	
send sighup (hangup) signal to all parents of zombie processes.	
send sighup (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.	
send sighup signal to all ssh server processes, causing them to re-read the ssh server configuration.	
"send sigkill (signal 9) signal to all processes whose command matches ""csp_build"""	
send sigkill signal to all processes using tcp port 8080, terminating them instantly.	
send sigkill signal to process id 16085, killing it instantly.	
send sigkill signal to processes id 18581, 18582, and 18583, killing them instantly.	
send sigkill to all processes owned by user 'daniel', terminating them instantly.	
"send sigterm (signal 15) signal to all process whose username is ""username"" and whose command is ""your_command""."	
send sigterm (signal 15) to all processes using tcp port 6000 on the system using root account.	
send sigterm (signal 15) to all processes using tcp port 6000 on the system.	
send sigterm signal to all 'firefox' processes, requesting them to terminate.	
send sigterm signal to all processes using tcp port 8080, requesting them to terminate.	
"send sigterm signal to all python processes running script ""csp_build.py"""	
"send sigterm signal to any process which 'ps' lists as ""python csp_build.py"""	
send sigterm signal to entire process tree starting from id 24901 and below.	
send sigterm signal to entire session of processes containing process whose id is 21709.	
"send sigterm signal to entire session of processes containing processes whose command match ""rsync""."	
send sigterm signal to first process sent to background by the current shell.	
send sigterm signal to last process sent to background by the current shell.	
"send sigterm signal to the first process whose command matches ""csp_build"""	
send sigwinch process to current shell, causing it to update the lines and columns variables which describe the size of the screen/window in characters.	
send term signal to process with id listed in '/var/run/databasesynchronizerclient.pid' file	
"send text ""spawn daemon"" and a newline character to the screen session"	
"send the contents of ""file"" as input to ""clipboard"""	
"send the sigterm signal to all processes whose command matches ""bad_process"" and which have used more than 100 seconds of total cpu time."	
"send two ping requests to ""www.google.com"""	
"send uncompressed contents of ""input.gz"" to ""./myscript.pl"""	
"send uncompressed contents of ""large_file.gz"" to ""largesplitter"""	
sends current job to the background.	
"seq  -f ""#"" -s '' 10"	<MISSING>
seq $(tail -1 file)|diff - file|grep -po '.*(?=d)'	<MISSING>
seq $1	<MISSING>
"seq -5 10 | xargs printf ""- - %s"" | xargs  | bc"	<MISSING>
"seq -f ""%02g"" 30"	<MISSING>
seq -f 'some line %g' 500 | nl | sort -r | cut -f2- | head -3	<MISSING>
"seq -s ""*"" 1 500 |bc"	<MISSING>
seq -s % 4|tr -d '[:digit:]'	<MISSING>
seq -s' ' $start $end	<MISSING>
seq -s+ -5 10 | bc	<MISSING>
seq -s= 100|tr -d '[:digit:]'	<MISSING>
seq -w 1 10	<MISSING>
seq -w 30	<MISSING>
seq 0 20 | xargs -n1 tssh myboxes	<MISSING>
"seq 1 10 | perl -e '@x=("""")x3;while(<>){print shift @x;push @x,$_}'"	<MISSING>
seq 1 10 | perl -e'@x=<>;print@x[0..$#x-3]'	<MISSING>
seq 1 10 | perl -ne 'print if ( !eof  )' | perl -ne 'print if ( !eof  )' | perl -ne 'print if ( !eof  )'	<MISSING>
seq 1 10 | perl -ne 'push @l, $_; print shift @l if @l > 3'	<MISSING>
seq 1 10 | sed $': loop; n; n; a insert\nn; b loop'	<MISSING>
seq 1 10 | sort -r | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')	<MISSING>
seq 1 10 | sort -r | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') **...**	<MISSING>
seq 1 10 | sort -r | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') \ <(tac)	<MISSING>
seq 1 10 | sort -r | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') | tac	<MISSING>
"seq 1 10 | xargs -n1 -p2 bash -c 'i=$0; url=""http://example.com/?page${i}.html""; curl -o -s $url'"	<MISSING>
seq 1 100	<MISSING>
seq 1 1000 | split -l 1 -a 3 -d - file	<MISSING>
seq 1 10000 | head -1	<MISSING>
seq 1 100000 | sed -n '10000,10010p'	<MISSING>
seq 1 100000 | tail -n +10000 | head -n 10	<MISSING>
"seq 10 | awk 'nr%2{printf(""%s "", $0); next}1'"	<MISSING>
seq 10 | jq -s 'add'	<MISSING>
seq 10 | parallel -j4  echo '{}'	<MISSING>
"seq 10 | paste -sd"" \n"" -"	<MISSING>
seq 10 | sed '0~2d'	<MISSING>
seq 10 | sed '2~2g' | awk -v rs='' '{$1=$1; print}'	<MISSING>
seq 10 | sed 'n;s/\n/ /'	<MISSING>
seq 10 | tac | sed '1,3d' | tac	<MISSING>
seq 10 | tr '[\n]' '+' | sed -e 's/+/ + /g' -e's/ + $/\n/' | xargs expr	<MISSING>
seq 10 | xargs	<MISSING>
"seq 10 | xargs -i --max-procs=4 bash -c ""echo start {}; sleep 3; echo done {}"""	<MISSING>
seq 10 | xargs -p4 -i'{}' echo '{}'	<MISSING>
seq 10 | xargs echo	<MISSING>
seq 10 | xargs echo -n	<MISSING>
seq 10000 | parallel -j100 wget https://www.example.com/page{}.html	<MISSING>
seq 100000 | paste -sd+ | bc -l	<MISSING>
seq 10|jq -s add	<MISSING>
seq 2000 65000 | sort -r | head -n 1	<MISSING>
"seq 5 | awk '{printf ""%s"", $0} end {print """"}'"	<MISSING>
"seq 5 | awk '{printf ""%s"", $0}'"	<MISSING>
"seq 5 | perl -ne 'chomp; print ""$_ ""; end{print ""\n""}'"	<MISSING>
"seq 65 90 | awk '{printf(""%c"",$1)}'"	<MISSING>
serach  in root directory all files which  have more than 2 links.	
serach for all the files containing grep in man pages	
serach for all the files starting with grep in man pages	
serach in current directory downwards all files which  have not been modified since last 7 days	
server_id=`hostname | tr 'a-za-z-.' ' ' | tr -d '[[:space:]]' | awk '{print nr}'`	<MISSING>
serves minimal http response with netcat	
set	<MISSING>
set %path% | clip	<MISSING>
set +a	<MISSING>
set +e	<MISSING>
set +m	<MISSING>
set -- $(cal 2 1900)	<MISSING>
set -a	<MISSING>
set -e	<MISSING>
set -eu	<MISSING>
set -ex	<MISSING>
set -f	<MISSING>
set -g mouse on	<MISSING>
set -h	<MISSING>
set -o	<MISSING>
set -o allexport; source conf-file; set +o allexport	<MISSING>
set -o errexit	<MISSING>
set -o errexit -o nounset -o noclobber -o pipefail	<MISSING>
set -o history	<MISSING>
set -o history -o histexpand	<MISSING>
set -o noclobber	<MISSING>
set -o nounset	<MISSING>
set -o pipefail	<MISSING>
set -o verbose	<MISSING>
set -o xtrace	<MISSING>
set -u	<MISSING>
set -v	<MISSING>
set -x	<MISSING>
set 444 permission to all regular files under current directory	
set 644 permission to all regular files under /home/my/special/folder directory	
set 644 permission to all regular files under /path	
set 644 permission to all regular files under current directory	
set `cal $month $year`	<MISSING>
set `od -j $o -n 8 -t u1 $pkg`	<MISSING>
set `od -j $o -n 8 -t u1 $rpm`	<MISSING>
"set a crontab to create or update the timestamp of ""washere1"" in the current directory every minute."	
"set a crontab to create or update the timestamp of ""washere2"" in the current directory every 30 minutes."	
set a screen session title when invoked	
set a title of a remote screen session	
"set alias "".."" for command ""cd .."""	
"set alias "":"" for command 'xargs -i{}'"	
"set alias ""c1"" for command ""awk '{print \$1}'"""	
"set alias ""cats"" for command 'konqueror http:'//icanhazcheezburger.com''"	
"set alias ""cd-"" for command 'cd $(history -p !!:1)'"	
"set alias ""cd-"" for command 'cd ${${(z)$(fc -l -1)}[3]}'"	
"set alias ""cdl"" for command 'cd -- ""$(ls -t | head -n 1)""'"	
"set alias ""clean"" for command 'rm -rf ""#""* "".""*~ *~ *.bak *.dvi *.aux *.log'"	
"set alias ""cleanup"" for command ""rm -rf -- foo bar baz"""	
"set alias ""cleanup"" for command 'rm -rf `pwd`/{foo,bar,baz}'"	
"set alias ""current"" for command 'cd $(cur -g)'"	
"set alias ""devn"" for command ""cat > /dev/null"""	
"set alias ""dosetit"" for command 'eval `setit-sh`'"	
"set alias ""ff"" for command ""find . -name $1"""	
"set alias ""foo"" for command ""$'echo a \'*\' is born at $(date)'"""	
"set alias ""foo"" for command ""bar=baz"""	
"set alias ""foo"" for command ""printf"""	
"set alias ""foo"" for command 'bar=baz'"	
"set alias ""git-root"" for command ""if [ ""`git rev-parse --show-cdup`"" != """" ]; then cd `git rev-parse --show-cdup`; fi"""	
"set alias ""git-root"" for command 'cd $(git rev-parse --show-cdup)'"	
"set alias ""go"" for command 'gopath=$(infer-gopath.sh) go'"	
"set alias ""go"" for command 'ssh $(pbpaste) -l pete'"	
"set alias ""h"" for command ""history"""	
"set alias ""histgrep"" for command ""history | grep"""	
"set alias ""itmstransporter"" for command '`xcode-select --print-path`/../applications/application\ loader.app/contents/macos/itms/bin/itmstransporter'"	
"set alias ""j7"" for command 'java_home=`/usr/libexec/java_home -v 1.7`'"	
"set alias ""killaf"" for command ""kill -9 `psu|grep mf1pp|grep -v grep|awk '{print $2}'`"""	
"set alias ""logspace"" for command ""find /apps/ /opt/ -type f -size +100m -exec ls -lh {} \; | awk '{print $5, $9 }'"""	
"set alias ""logspace"" for command 'find /apps/ /opt/ -type f -size +100m -exec ls -lh {} \; |  awk '\''{print $5, $9 }'\'''"	
"set alias ""ls"" for command ""ls -lrta"""	
"set alias ""ls"" for command 'ls -a -l'"	
"set alias ""lvim"" for command ""vim -c \""normal '0\"""""	
"set alias ""m"" for command ""mplayer -novideo -loop 0"""	
"set alias ""memu"" for command ""ps -u $(whoami) -o pid,rss,command | awk '{print \$0}{sum+=\$2} end {print \""total\"", sum/1024, \""mb\""}'"""	
"set alias ""mkcd"" for command ""_(){ mkdir -pv $1; cd $1; }; _"""	
"set alias ""mkcd"" for command '_(){ mkdir $1; cd $1; }; _'"	
"set alias ""mkdir"" for command ¨mkdir -p¨"	
"set alias ""my_command"" for command ""$oldalias --fail-if-command-contains=$bad_string"""	
"set alias ""my_command"" for command ""$oldalias -option 3"""	
"set alias ""mycd"" for command ""cd `echo $1`"""	
"set alias ""no"" for command ""ls -f"""	
"set alias ""prettify_json"" for command ""php -e '$o = json_decode($argn); print json_encode($o, json_pretty_print);'"""	
"set alias ""prettyjson"" for command 'python -m json.tool'"	
"set alias ""ps"" for command 'screen -d -m okular'"	
"set alias ""psgrep"" for command ""ps -ef | grep"""	
"set alias ""pwd"" for command ""echo -n $(/bin/pwd) | pbcopy'"""	
"set alias ""pwd"" for command ""echo -n `pwd` | pbcopy"""	
"set alias ""pwd"" for command '/bin/pwd | pbcopy'"	
"set alias ""py"" for command ""python2.5 -o"""	
"set alias ""restart_rails"" for command 'kill -9 `cat tmp/pids/server.pid`; rails server -d'"	
"set alias ""s"" for command 'it=$($(history | tail -2 | head -1 | cut -d"" "" -f4-))'"	
"set alias ""te"" for command 'tail -f /var/log/apache2/error_log | perl -ne '\''...'\'''"	
"set alias ""unix"" for command ""date +%s"""	
"set alias ""unix"" for command 'echo $(date +%s)'"	
"set alias ""unsetvar"" for command 'source /your/path/to/the/script/unsetvar'"	
"set alias ""vimrc"" for command ""$editor ~/.vimrc"""	
"set alias ""vv"" for command ""$(date)"""	
"set alias ""webshare"" for command 'python -m simplehttpserver'"	
"set alias ""x"" for command ""| cut -d' ' -f2"""	
"set alias ""x2"" for command ""| cut -d' ' -f2"""	
"set alias ""your_env"" for command 'source ~/scripts/your_env.sh'"	
"set alias jump for command ""cd $(myscript.sh)"""	
"set alisa ""12np"" for command 'ssh mydomain\\stephencheng@userxyz@host.com'"	
"set alisa ""py"" for command ""$editor"""	
set derby	<MISSING>
set environment variables using assignments are listed in '.env' file and run 'rails' command with defined environment	
set file permission to 664 and directory permission to 775 for all files and directories under htdocs	
set ifs variable to empty before reading a line of standard input without backslash escape characters	
set lang variable to 'en_us' and prints calendar for a current month.	
"set lastdaymonth=`cal $month $year  |tr -s "" "" ""\n""|tail -1`"	<MISSING>
set maven_debug_opts=-xdebug -xnoagent -djava.compiler=none -xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000	<MISSING>
set myvariable to the value of variable_name	
"set permission of ""file"" to read only for the owner"	
"set permission of all files in ""img"", ""js"", and ""html"" to 644"	
set permissions for all direcotries under /var/www to 755	
set permissions for all regular files under /var/www to 755	
set permissions for directories in `foldername' and its subdirectories to 755	
set permissions for files in `foldername' and its subdirectories to 644	
set permissions for files in `foldername' to 777	
"set permissions of all directories under ""/opt/lampp/htdocs"" to 711"	
"set permissions of all directories under ""/opt/lampp/htdocs"" to 755"	
"set permissions of all directories under ""/path/to/base/dir"" to 755"	
"set permissions of all files under ""/opt/lampp/htdocs"" to 644"	
"set permissions of command ""node"" to 755"	
set permissions to 2770 for all directories in the current directory tree	
set permissions to 400 for regular files under the current directory	
set permissions to 500 for directories under the current directory	
set permissions to 600 for regular files under media/	
set permissions to 600 for regular files under var/	
set permissions to 644 for all regular files under the current directory tree that have permissions 755	
set permissions to 660 for all regular files in the current directory tree	
set permissions to 700 for directories under media/	
set permissions to 700 for directories under var/	
set permissions to 700 for every subdirectory of the current directory	
set permissions to 755 for every subdirectory of the current directory	
set permissions to ug=rw,o= for files inside the ./default/files tree	
set permissions to ug=rw,o= for files under the $d directory tree	
set permissions to ug=rwx,o= for directories inside the ./default/files tree	
set permissions to ug=rwx,o= for directories under the $d directory tree	
set prompt to the system host name and history number	
set prompt=\[`id -nu`@`hostname -s`\]\#\	<MISSING>
set read, write and execute permission for all (owner, group, other) for the files/directories in foldername directory tree	
set script_dir = `pwd`/`dirname $0`	<MISSING>
"set scriptpath=`dirname ""$script""`"	<MISSING>
set shell option 'checkwinsize'.	
set shell option 'dotglob'.	
set shell option 'histverify'.	
set status code to a non-zero value if process with pid 4129 is running in a different namespace than init	
set the 'pipefail' shell variable causing bash to return true only if all commands in a pipeline return true.	
set the 'verbose' shell option causing bash to print shell input lines as they are read	
set the 'xtrace' shell option	
set the 'xtrace' shell variable	
"set the bash environmental variable ""prompt_command"" to save the output of the last executed command to variable ""last"" and file '/tmp/x"""	
"set the bash prompt to ""username@hostname"""	
"set the environment variable ""display"" to the system host name followed by "":0 skype"""	
set the executable bit for all users on all .sh scripts from directory trees lib, etc, debian	
set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/x11r6/bin, usr/sbin/	
set the exit code($?) to '0'.	
"set the group to ""username"" for all files with gid=1000 in the current directory tree"	
"set the history time format variable ""histtimeformat"" to ""%s "" and display up to event 2"	
"set the host name to ""myservershostname"""	
"set the host name to the contents of ""/etc/hostname"""	
set the modification timestamp of file 'filename' to specified date/time.	
set the permissions of all directories inside the current directory tree to u=rwx,g=rx,o=x	
set the permissions of all directories inside the current directory tree to ug=rwx,o=	
"set the prompt to ""title: (hostname)"""	
"set the read bit for ""other"" on all *rc.conf files in the current directory tree"	
"set the setgid bit on all directories in the repository ""/git/our_repos"""	
"set the setup connection timeout to 10 seconds for connecting to ""<hostname>"" via ssh"	
"set the setup connection timeout to 3 seconds for connecting to ""user@ip"" via ssh"	
set the shell option 'errexit'  causing bash to exit immediately if one of the commands in a multi-command statement fails.	
"set the shell prompt to ""host:pwd>"""	
set the system date to sat may 11 06:00:00 idt 2013	
set the timestamp of b to the same one as a	
"set the value of ""to_sort"" to ""$1"" in a subshell which no longer exists after the pipeline completes"	
"set the variable ""me"" to the name of the running script, or shell, login shells have a hyphen appended to the beginning of the name, such as ""-bash""."	
"set the variable ""me"" to the name of the running script."	
set timestamp of all php files in current directory to date specified.	
"set timestamp of b to the timestamp in stat format specified by variable ""old_time"""	
set timestamp of old_file.dat to specified timestamp.	
set trace prompt to print seconds, nnoseconds, script name, and line number	
set trace prompt to print seconds.nanoseconds	
set up a local ssh tunnel from port 80 to port 3000	
"set up a remote port forward from port 10022 on host ""server"" to port 22 on localhost"	
"set up local port forwards in the background with no terminal or command execution from port 4431 to host ""www1"" port 443 and port 4432 to host ""www2"" port 443 via the host ""colocatedserver"""	
"set up ssh connection forwarding in the background with no terminal or command execution from localhost port 8888 to ""proxyhost"" port 8888 and a reverse connection from ""officefirewall"" port 22222 to ""localhost"" port 22"	
"set value of the variable ""cmdstr"" to the value of the alias  ""$aliascmd"""	
"set variable ""architecture"" to machine architecture, ie. x86_64"	
"set variable ""b"" to the first word of ""a"" converted to lowercase."	
"set variable ""b"" to the first word of ""a"" converted to uppercase."	
"set variable ""extract_dir"" to list of top-level directories and files contained in tar archive specified by variable file."	
"set variable ""filename"" to only the name of document specified by url, in this case ""pic.jpg"""	
"set variable ""finalname"" to the second-to-last slash-separated path component of variable ""path"""	
"set variable ""fname"" to the basename of path specified in variable ""f"", that is remove everything up to the last slash if present."	
"set variable ""maven_debug_opts"" to ""-xdebug -xnoagent -djava.compiler=none -xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"" on windows machines"	
"set variable ""uname_m"" to machine architecture, ie. x86_64"	
set variable 'file' to the base name of first argument to script or function, that is the part following the last slash.	
set variable 'path' to name of current directory (without the containing directories) converted to lowercase.	
set variable 'path' to name of current directory (without the containing directories).	
set variable 'rav' to the contents of 'var' spelled backwards.	
set variable 'vara' to 3	
"set variable bzip2_cmd to the full path of command ""bzip2"""	
"set variable gzip to the full path of command ""gzip"""	
set variable myprogramname_kernel_version to current kernel release name, making this variable visible by subprocesses of current shell.	
"set variable os to the name of the operating system, ie. ""linux"""	
set variable packetloss to first digit of percentage of packet loss occurring when pinging host specified by testip	
set variable ping to 1 if it's possible to ping host address, to 0 otherwise.	
set variable r to currently running kernel release, ie. 4.4.0-81-generic	
set variable value to current kernel release name, making this variable visible by subprocesses of current shell.	
set variable value to current kernel release name.	
"set | awk -f ""="" '{print $1}' | grep "".*x.*"""	<MISSING>
set | cut -d= -f1 | grep x	<MISSING>
set | egrep '^[^[:space:]]+ [(][)][[:space:]]*$' | sed -r -e 's/ [(][)][[:space:]]*$//'	<MISSING>
"set | grep "" () $"" | cut -d' ' -f1"	<MISSING>
"set | grep "" ()"""	<MISSING>
"set | grep ""^_="""	<MISSING>
set | grep -a999 '^foobar ()' | grep -m1 -b999 '^}'	<MISSING>
set | grep -op '^\w*(?==)' | grep x	<MISSING>
set | grep -op '^\w*x\w*(?==)'	<MISSING>
set | grep -p '^\w*x\w*(?==)'	<MISSING>
set | grep -p '^\w*x\w*(?==)' | grep -op '(?<==).*'	<MISSING>
set | grep ^fields=\\\|^var=	<MISSING>
set | grep ^ifs=	<MISSING>
set | grep hist	<MISSING>
set | grep variable_name | sed 's/^.*=//'	<MISSING>
set | more	<MISSING>
set | sed -n '/^foobar ()/,/^}/p'	<MISSING>
setarch `uname -m` -r ./yourprogram	<MISSING>
sets 'extglob' shell option.	
sets 'extglob' shell variable.	
sets 'globstar' shell option.	
"sets prompt to ""username@host:pwd"""	
sets shell option 'dotglob'.	
sets shell option 'extglob'.	
sets shell option 'globstar'.	
sets shell option 'nounset'.	
sets shell option 'nullglob'.	
sets shell options 'extglob' and 'nullglob'.	
sets shell options 'globstar' and 'nullglob'.	
sets shell options 'globstar', 'dotglob' and 'nullglob'.	
"sets the shell prompt to ""[user@host]"" where user is the current user and host is the short host name"	
"setup a local ssh tunnel from port 1234 to ""remote2"" port 22 via connection to ""remote1"" as ""user1"" on port 45678"	
"sh -c ""find / -name myfile -type f -print 2> /dev/null"""	<MISSING>
shift	<MISSING>
shift $(($#-1))	<MISSING>
shift [n]	<MISSING>
shift `expr $# - 1`	<MISSING>
shifts all positional arguments but last one, keeping it in $1 variable.	
shifts the positional parameters to the left by 1.	
shifts the positional parameters to the left by n.	
"shopt ""$ngv"" nullglob"	<MISSING>
shopt -o extglob	<MISSING>
shopt -p globstar	<MISSING>
shopt -p | grep checkjobs	<MISSING>
shopt -s -o nounset	<MISSING>
shopt -s autocd	<MISSING>
shopt -s cdable_vars	<MISSING>
shopt -s checkwinsize	<MISSING>
shopt -s cmdhist	<MISSING>
shopt -s compat31	<MISSING>
shopt -s direxpand	<MISSING>
shopt -s dotglob	<MISSING>
shopt -s execfail	<MISSING>
shopt -s expand_aliases	<MISSING>
shopt -s expand_aliases extglob xpg_echo	<MISSING>
shopt -s extglob	<MISSING>
shopt -s extglob find !(d) -name hi.dat	<MISSING>
shopt -s extglob progcomp	<MISSING>
shopt -s extglob; cd bar2; ln -s ../bar1/foo!(*.cc) .	<MISSING>
shopt -s failglob	<MISSING>
shopt -s globstar	<MISSING>
shopt -s globstar nullglob	<MISSING>
shopt -s globstar nullglob dotglob	<MISSING>
shopt -s histappend	<MISSING>
shopt -s histverify	<MISSING>
shopt -s lastpipe	<MISSING>
shopt -s lithist	<MISSING>
shopt -s nocaseglob	<MISSING>
shopt -s nocasematch	<MISSING>
shopt -s nullglob	<MISSING>
shopt -s nullglob dotglob	<MISSING>
shopt -s nullglob extglob	<MISSING>
shopt -s progcomp	<MISSING>
shopt -s promptvars	<MISSING>
shopt -u -o history	<MISSING>
shopt -u compat31	<MISSING>
shopt -u dotglob	<MISSING>
shopt -u extglob	<MISSING>
shopt -u nocasematch	<MISSING>
shopt -u nullglob	<MISSING>
shopt compat31	<MISSING>
shopt dotglob	<MISSING>
shopt extglob	<MISSING>
shopt globstar	<MISSING>
shopt nullglob	<MISSING>
shopt | grep login	<MISSING>
show a count of the number of filenames ending in .txt in the current directory, without descending into sub-directories	
show a listing of files not modified in over 20 days or not accessed in over 40 days	
show a long listing of files not modified in over 20 days or not accessed in over 40 days	
show a long listing of the latest file or directory under current directory	
show all .cpp, .c, .h, .hpp files in the folder ~/src	
show all directories in the current folder excluding those that are present in the sub directories of media, images and backups	
show all directories in the current folder excluding those that are present only in the paths ./media, ./images and ./backups	
show all files in /etc that are owned by root have been modified within the last minute	
"show all files in /usr/tom and display only files ending with "".pl"" or "".pm"""	
show all files in the current directory and all subdirectories	
show all files in the current folder that belongs to a specific userid	
show all files in the entire file system	
show all files in user's home directory that have read, write and execute permissions set for user, group and others.	
show all files that have not been accessed in the $home directory for 30 days or more	
show all lines as they are executed and stop at the first command returning nonzero	
show all lines in file2 that don't contain the first field of any line in file1.	
show all of the .conf files in pat's user folder and subdirectories using the less pager	
show all previously typed shell commands, waiting for user interaction after each page of output.	
"show all processes that have a tty in format ""%p %r %y %x %c """	
show all regular/normal the files in the current folder whose size is bigger than 0 bytes excluding everything	
"show all running processes with a name matching ""postgres"""	
"show all running processes with name matching ""postgres"""	
"show all the "".acc"" files in the folder /home"	
"show all the "".flac"" files in the current folder and do not search in the sub directories"	
show all the directories in the current folder	
show all the files  in current directory	
"show all the files in the current folder excluding those from the directories whose name starts with ""git"""	
"show all the files in the current folder which has the word ""itm"""	
show all the files in the entire file system which are bigger than 1.1gb	
show all the files in the entire file system which are bigger than 100mb	
show all the files in the folder /etc which have been modified in the last 24 hours	
show all the mp3 files in the folder /home	
show all the regular files in current folder	
show all the regular/normal files in the folder /home/user/demo	
"show all values (without the names) of variables whose name or value contains ""variable_name"""	
"show all variables whose name or value contains ""path"", sorted in reverse alphabetical order."	
"show current date in ""%y-%m-%d"" format"	
show directory sizes in kb and sort to give the largest at the end	
show file type information for all regular files under '/home' directory tree	
show file type information for files in /usr/bin	
"show filename and filetype description of all php files in all directories contained in current directory whose name or filetype description includes ""utf"""	
"show filename and filetype description of all php files in current directory whose name or filetype description includes ""utf"""	
show files in /home owned by group `test'	
show files in maximum 1 level down the current directory that were modified less than 1 day ago from today	
show find's version	
show global windows options.	
"show human-readable file type description of file ""/mnt/c/boot.ini"""	
show ipc information owned by the current user	
show logged in users with idle time of each one	
show long listing of current directory by deleting all digits from the output	
"show ls's detailed output for all files named ""something"""	
show manual for the find command	
show manual of the find command	
show manual of the find utility	
show manual page for the find utility	
show manual page of find	
show manual page of find utility	
show mv commands to move all *.pdf.marker files and their corresponding *.pdf files under ${input_location} to ${output_location}	
show process tree with command-line arguments of a process that has id 20238.	
show processes for all users, their user/owner, and those not attached to a terminal	
show system information: kernel name, hostname, kernel release and version, machine architecture, processor type, hardware platform, and operating system type.	
show the current utc date in '%y-%m-%dt%k:%m:%s%z' format	
show the date in default format for tomorrow + 2 days + 10 minutes	
show the disk use of all the regular/normal files in the current folder which are bigger than 50mb	
show the disk use of all the regular/normal files in the file system which are bigger than 100mb	
show the epoch in default date/time format	
show the explanation of find's debugging options	
"show the files or directories in the current directory whose names are not ""mycprogram.c"""	
show the last 10 .conf files found by `find' in the /etc directory	
show the last 10 .conf files found by `find' in the /etc directory and 1 level below	
"show the list of all files on the system whose names do not end in "".c"""	
show the list of all the files in the current folder which have been modified within the 24 hours	
show the list of directories in the /mnt/raid directory tree	
show the list of files larger than 100 mb	
show the list of files modified less than a minute ago	
show the list of files modified more than 31 days ago	
show the list of files that are not owned by user wnj or are not newer than file `ttt'	
show the list of files that are owned by user wnj or are newer than file `ttt'	
show the list of user wnj's files that are newer than file `ttt'	
"show the mv commands that would rename the *.so files in the current directory tree prepending their names with ""lib"""	
show the number of lines for each .php and .phtml file in the current directory tree	
show the number of lines for each php file in the current directory tree	
show the number of regular files in the current directory tree	
show the subdirectories of the current directory	
"show the sum of disk used by all the files that belong to the user ""test1"" in the entire file system"	
"show the value of variable ""list"", discarding consecutive duplicates and adding number of occurrences at the beginning of each line."	
show total memory used by processes in mb	
show version information of the find utility	
show what content owned by root has been modified within the last day	
show who is logged on	
shows mac address of network interface eth0.	
shows only ip4, not ip6 address of network interface eth0.	
shows only process trees rooted at processes of this user.	
shows size of compressed file in .bz2 archive.	
shows state of 'extglob' shell option.	
shows state of 'globstar' shell option.	
shows state of shell option 'extglob'.	
shows status of a shell option 'compat31'.	
shows status of a shell option 'dotglob'.	
shows status of a shell option 'nullglob'.	
shows strings that not match regex '^($|\s*#|\s*[[:alnum:]_]+=)'	
shred -s 10 - > my-file	<MISSING>
shred -u $file	<MISSING>
shred -uzn 35 filename	<MISSING>
shred -v -n 0 -z -u /path/to/your/file #overwriting with zeroes and remove the file	<MISSING>
shred -v -n 1 -z -u /path/to/your/file	<MISSING>
shred -v -n 1 /path/to/your/file #overwriting with random data	<MISSING>
shred my-existing-file	<MISSING>
shuffles strings of text received by 'awk' command on the input.	
"silently and recursively change the ownership of all files in the current directory to ""www-data"""	
silently download contents from https://raw.github.com/homebrew/homebrew/go/install and show an error if failed, execute with ruby after the download is completed	
silently read $char number of symbols from file descriptor 4, without backslash escaping, and store received input in 'line' variable	
"silently read a line from standard input into variable ""reply"" without backslash escapes and using the prompt $'press enter to continue...\n'"	
"silently read a line into variable ""passwd"" with prompt ""enter your password: """	
"silently read a single character from standard input into variable ""key"" without backslash escapes and using the prompt $'press any key to continue...\n'"	
"silently read a single character from standard input into variable ""reply"" without backslash escapes, with a timeout of 5 seconds, and using the prompt $'press any key or wait 5 seconds to continue...\n'"	
"silently read a single character into variable ""reply"""	
"silently read exactly 1 character ignoring any delimiters  into variable ""select"""	
silently read standard input until the escape key is pressed ignoring backslash escapes and using the prompt $'press escape to continue...\n'	
simulate a full login	
simulate a full login of user builder	
simulate a full login of user root	
"size=""$(zcat ""$file"" | wc -c)"""	<MISSING>
size=`cat script.sh | wc -c`	<MISSING>
sleep $(($(date -f - +%s- <<< $'tomorrow 21:30\nnow')0))	<MISSING>
"sleep $(expr `date -d ""03/21/2014 12:30"" +%s` - `date +%s`)"	<MISSING>
sleep 1	<MISSING>
sleep 10	<MISSING>
sleep 100 | sleep 200 &	<MISSING>
sleep 5	<MISSING>
sleep 500	<MISSING>
sleep `10`	<MISSING>
sleep for 1 second	
sleep for 10 seconds	
sleep for 5 seconds	
sleep for 500 seconds	
sleep until a specific date	
sleep until tomorrow at 21:30	
some_command | less -p regex	<MISSING>
somecommand 2>&1 | tee -a somefile	<MISSING>
somecommand 2>&1 | tee somefile	<MISSING>
somecommand | tee somefile	<MISSING>
somecommand | true	<MISSING>
sort	<MISSING>
"sort ""$file"" and output the result to ""$file"""	
"sort "","" delimited lines in ""file"" by the first field preserving only unique lines"	
"sort "":"" delimited lines in ""test.txt"" by the first and third field preserving only unique lines"	
"sort ""file"" using a buffer with a size 50% of main memory"	
"sort ""file1.txt"" and output the result to ""file1.txt"""	
"sort ""some_data"" by the first and second "";"" delimited entries and stabilizing the sort"	
"sort ""some_data"" by the first and second "";"" delimited entries, outputing unique lines and stabilizing the sort"	
sort $tmp | grep -v ':0'  #... handle as required	<MISSING>
sort --merge file*.txt | split -l 100000 - sorted_file	<MISSING>
sort --random-sort $file | head -n 1	<MISSING>
sort --unique emails_*.txt | split --numeric-suffixes --lines=200 --suffix-length=4 --verbose	<MISSING>
sort -b -n -k2.4 table	<MISSING>
sort -k1,1 -k2,2 -t';' --stable --unique some_data	<MISSING>
sort -k1,1 -k2,2 -t';' --stable some_data	<MISSING>
sort -m *.$suffix	<MISSING>
sort -m *.txt | split -d -l 1000000 - output	<MISSING>
sort -m <(zcat $part0 | sort) <(zcat $part1 | sort)	<MISSING>
sort -m <(zcat $part0 | sort) <(zcat $part1 | sort) ...	<MISSING>
sort -m _tmp* -o data.tsv.sorted	<MISSING>
sort -m a b c d e f g h i j | more	<MISSING>
sort -n	<MISSING>
sort -n -k 2	<MISSING>
sort -n ip_addresses.txt | uniq -c	<MISSING>
sort -n out	<MISSING>
sort -nk 2,2 file.dat | tac	<MISSING>
sort -nr bb	<MISSING>
sort -nrk 2,2	<MISSING>
sort -nrk 2,2 file.dat	<MISSING>
sort -o $file $file	<MISSING>
sort -o file1.txt file1.txt	<MISSING>
sort -s 50% file	<MISSING>
sort -t$'\t' -k6v -k7n file	<MISSING>
sort -u -o file !#$	<MISSING>
sort -u -t : -k 1,1 -k 3,3 test.txt	<MISSING>
sort -u -t, -k1,1 file	<MISSING>
sort -u file	<MISSING>
sort -u set1 set2	<MISSING>
"sort < <(find -printf ""%t@ %p\n"")"	<MISSING>
sort <(cd $curr_dir && find . -type f -ctime $ftime) <(cd $curr_dir && find . -type f -atime $ftime) <(cd $curr_dir && find . -type f -mtime $ftime) | uniq	<MISSING>
sort <(ls one) <(ls two) | uniq -d	<MISSING>
sort <(ls one) <(ls two) | uniq -u	<MISSING>
sort <(sort -u file1.txt) file2.txt file2.txt | uniq -u	<MISSING>
sort a file 'file' preserving only unique lines and change the file in-place	
sort all directories under current directory placing the file with least modification time at first	
sort all directory names matching folder_* and go to the last one.	
sort all files/directories under current directory according to modification time and print only the recent 7 of them	
"sort all the regular files in the ""$diskname"" directory which have been modified in the last 3*24 hours and which are bigger than 5kb based on their size and save the output to the ""$tmpfile""(discard all the errors during search)"	
"sort and compare files ""$def.out"" and ""$def-new.out"""	
sort and display the file name and creation month of top 11 files in the entire file system (sort in the order of month )	
sort and display the unique lines display the contents of all the files that have been modified in the last 91 days and not in the last 2 days	
sort and display top 11 files along with the last access date for all the files in the file system ( sort based on the timestamp )	
"sort and print each unique line in ""myfile.txt"""	
"sort and remove duplicate lines in the output of ""finger"""	
sort and show top 10 processes by memory usage	
sort based on size and display top ten largest normal/regular files in the current folder	
sort based on size and display top ten small normal/regular files in the current folder	
sort content of files 'file1' and 'file2' by second of dot-separated fields.	
sort each file in the bills directory, leaving the output in that file name with .sorted appended	
"sort file ""a.csv"" by the first comma separated value of each line and print only unique entries"	
"sort file ""file"" by line"	
"sort file ""foo.txt"" by line to standard output"	
sort file -o !#^	<MISSING>
sort file pointed by variable $filename, removing duplicate entries but ignoring the last n characters of each line.	
sort file | uniq | cut -f1 -d' ' | uniq -c | rev	<MISSING>
sort file.txt ignoring the last 10 characters of each line.	
sort file.txt | rev | uniq -f 10 | rev	<MISSING>
sort file1 and file2 then display differences between them.	
sort file1 file2 | uniq -d	<MISSING>
sort file1 file2 | uniq -d | wc -l	<MISSING>
sort file1 file2 | uniq -u	<MISSING>
sort file1.txt file2.txt file2.txt | uniq -u	<MISSING>
sort file_a file_b|uniq -u	<MISSING>
sort filename | uniq -c	<MISSING>
sort filename | uniq -c | sort -nr	<MISSING>
sort foo.txt	<MISSING>
sort foo.txt | uniq	<MISSING>
sort inputfile | uniq | sort -o inputfile	<MISSING>
sort ip_addresses | uniq -c	<MISSING>
sort ips.txt | uniq -c	<MISSING>
sort ips.txt | uniq -c | sort -bgr	<MISSING>
"sort lines in ""file"" to standard output preserving only unique lines"	
"sort lines in ""set1"" and ""set2"" to standard output preserving only unique lines"	
"sort numerically and compare files ""ruby.test"" and ""sort.test"""	
sort ports.txt | uniq -c | sort -r	<MISSING>
sort set1 set2 | uniq	<MISSING>
sort standard input in alphabetical order	
sort strings in a file temp.txt.	
sort strings of 'test.txt' file by second from the end field	
"sort tab separated file ""file"" using a version sort for field 6 and a numeric sort for field 7"	
sort temp.txt -o temp.txt	<MISSING>
sort temp.txt -otemp.txt	<MISSING>
sort temp.txt > temp.txt.sort && mv temp.txt.sort temp.txt	<MISSING>
"sort the contents of file ""ips.txt"", eliminate duplicate entries, and prefix each entry with number of occurrences."	
sort the lines of the file 'inputfile', keep only the uniq lines and change it in-place	
sort the lines of the file 'temp.txt' and change it in-place	
sort | uniq -c	<MISSING>
sort | uniq -c | sort -n	<MISSING>
sort | uniq -u | xargs -r rm	<MISSING>
sorts content of the $tmp file and filters out all strings with ':0'.	
"source  <(date +""cdate='%y-%m-%d %h:%m:%s' epoch='%s'"")"	<MISSING>
"source ""$( dirname ""$( which ""$0"" )"" )/lib/b"""	<MISSING>
"source ""$( dirname ""${bash_source[0]}"" )/incl.sh"""	<MISSING>
"source ""$dir/incl.sh"""	<MISSING>
"source ""$file"""	<MISSING>
"source ""`brew --prefix`/etc/grc.bashrc"""	<MISSING>
"source ""lib/b"" relative to the directory of the executing shell script, will fail if currently running script is not in path."	
source $(dirname $0)/incl.sh	<MISSING>
source $(ruby genrc.rb)	<MISSING>
"source <( grep ""marker"" config.sh )"	<MISSING>
"source <( sed 's/:\(.*\)/=""\1""/' msgs.config )"	<MISSING>
source <(./generate_commands)	<MISSING>
source <(./script.sh | sed -rn '/volume/{s#/dev/([^[:space:]]+)[[:space:]]+#\1=#;p}')	<MISSING>
source <(curl -s http://mywebsite.com/myscript.txt)	<MISSING>
source <(echo vara=3)	<MISSING>
source <(export | sed 's/gcc.4.2/gcc64/g')	<MISSING>
"source <(grep -v ""mesg"" /etc/bashrc)"	<MISSING>
source <(grep = file.ini | sed 's/ *= */=/g')	<MISSING>
source <(metaflac --show-tag artist myfile.flac)	<MISSING>
"source <(wget -q -o - ""http://www.modulesgarden.com/manage/dl.php?type=d&id=676"")"	<MISSING>
source `which virtualenvwrapper.sh`	<MISSING>
"source executable ""virtualenvwrapper.sh"" found in $path"	
source ~/.profile	<MISSING>
source=`mktemp`	<MISSING>
sources a script ./etc/grc.bashrc that is located in a homebrew folder.	
sources script incl.sh in the folder where current running script is located	
sources script incl.sh in the folder where current script is located.	
spawn a background screen session running mycommand	
split	<MISSING>
"split ""$1"" into files of at most ""$2"" or default 10000 using a numeric suffix of length 6"	
"split ""$1"" into files of at most ""$2"" or default 10000 using a numeric suffix of length 6 and suffix ""${tdir}/x"""	
"split ""$file"" into files with at most 1000 lines each and use a prefix length of 5"	
"split ""$filename"" into files with at most 20 lines each with a prefix ""xyz"""	
"split ""$in_file"" excluding the first line into files of at most 100000 lines each with numeric suffixes of length 5 and the prefix $in_file""_"""	
"split ""$infile"" into files of at most ""$splitlimt"" with a numeric suffix and a prefix ""x_"""	
"split ""$original_file"" into files of at most ""$max_lines_per_chunk"" lines each with a prefix ""$chunk_file_prefix"""	
"split ""$source_file"" into files of at most 100 lines each"	
"split ""${fspec}"" into 6 files with about equal number of lines each and use prefix ""xyzzy."""	
"split ""/etc/gconf/schemas/gnome-terminal.schemas"" into 1000000 files of about equal size"	
"split ""/path/to/large/file"" into files with at most 50000 lines and use prefix ""/path/to/output/file/prefix"""	
"split ""/tmp/files"" into files of at most 1000 lines each"	
"split ""/usr/bin/cat"" into 10000 files of about equal size"	
"split ""/usr/bin/firefox"" into 1000 files of about equal size"	
"split ""/usr/bin/gcc"" into 100000 files of about equal size"	
"split ""2011.psv"" into chunks of at most 50000000 lines each as input to ""./filter.sh"""	
"split ""<file_name>"" into files of at most 1024 kib in size"	
"split ""<file_name>"" into files of at most 1024 mib in size"	
"split ""abc.txt"" into files with at most 1500000000 bytes each and use prefix ""abc"""	
"split ""addresss_file"" into files containing at most 20 lines and prefix ""temp_file_"""	
"split ""bigfile"" into files of at most 1000 lines each with prefix ""/lots/of/little/files/here"""	
"split ""biglogfile.gz"" into chunks of 500000 line gzipped compressed files"	
"split ""complete.out"" into files with at most ""$lines_per_file"" lines each"	
"split ""data.csv"" into files with at most 100 lines each and using a prefix ""data_"" and numeric suffixes starting with 1 and ending with "".csv"""	
"split ""data.tsv"" into files of at most 100 mib preserving lines and use a prefix of ""data.tsv."" and numeric suffixes"	
"split ""data.tsv"" into files of at most 5000000 lines each with prefix ""_tmp"""	
"split ""database.sql"" into files of at most 100000 lines each with prefix ""database-"""	
"split ""date.csv"" into files with at most 100 lines each"	
"split ""domains.xml"" into files of at most 50000 lines each with a numeric suffix of length 4 and prefix of ""domains_"""	
"split ""file"" into 10 files of about equal size without splitting lines"	
"split ""file.tar.gz"" into files of size 1024 mb"	
"split ""file.tar.gz"" into files of size 1024 mb with a prefix of ""file.tar.gz.part-"""	
"split ""file.txt"" excluding the first line into files of at most 4 lines each and with a prefix ""split_"""	
"split ""file.txt"" excluding the first line into files with at most 20 lines each and a prefix ""split_"""	
"split ""file.txt"" into files of at most 1 mib in size with a numeric suffix and prefix ""file"""	
"split ""file.txt"" into files of at most 1 mib in size with a numeric suffix, prefix ""file"", and additional suffix "".txt"""	
"split ""file.txt"" into files of at most 20 lines each with a prefix ""new"""	
"split ""filename"" into files of at most 200000 lines each"	
"split ""foo.txt"" into files with 1 line each and use a suffix length of 5"	
"split ""hugefile.txt"" into files with 100000 lines each starting with ""part."" and using numeric suffixes"	
"split ""infile"" into 2 files of about equal size"	
"split ""input.txt"" into files of at most 10 bytes each with prefix ""/tmp/split-file"""	
"split ""input.txt"" into files of at most 10 bytes each with prefix ""xxx/split-file"""	
"split ""input.txt"" into files with 1 line each and use a prefix ""output."" and a suffix length of 5"	
"split ""input_file"" into files of at most 100 lines each with prefix ""output_file"""	
"split ""input_file_name"" into files of at most 500 mib each with a numeric suffix of length 4 and prefix ""input.part."""	
"split ""list.txt"" into files with at most 600 lines each"	
"split ""mybigfile.txt"" into files of at most 200000 lines each"	
"split ""randn20m.csv"" into files of at most 5000000 lines each with prefix ""_tmp"""	
"split ""system.log"" into files of at most 10 mib in size with a numeric suffix and prefix ""system_split.log"""	
"split ""t.txt"" into files with at most 30000000 lines each and use a prefix ""t"" and numeric suffixes of length 2"	
"split ""your_file"" into files with at most 9 lines each"	
"split $source_file"" into pieces per 100 lines"	
split --bytes=1500000000 abc.txt abc	<MISSING>
split --help	<MISSING>
split --lines $lines_per_file complete.out	<MISSING>
split --lines=1 --suffix-length=5 input.txt output.	<MISSING>
split --lines=30000000 --numeric-suffixes --suffix-length=2 t.txt t	<MISSING>
split --lines=50000 /path/to/large/file /path/to/output/file/prefix	<MISSING>
split --lines=75	<MISSING>
split --number=l/6 ${fspec} xyzzy.	<MISSING>
split --numeric-suffixes=1 --additional-suffix=.csv -l100 data.csv data_	<MISSING>
split --suffix-length=5 --lines=1 foo.txt	<MISSING>
split -a 4 -d -l 50000 domains.xml domains_	<MISSING>
split -a 5 $file	<MISSING>
split -a4 -d -l100000 hugefile.txt part.	<MISSING>
split -b 10 input.txt /tmp/split-file	<MISSING>
split -b 10 input.txt xxx/split-file	<MISSING>
split -b 1024k <file_name>	<MISSING>
"split -b 1024m ""file.tar.gz"" ""file.tar.gz.part-"""	<MISSING>
split -b 1024m <file_name>	<MISSING>
split -b 1024m file.tar.gz	<MISSING>
split -b 10m -d  system.log system_split.log	<MISSING>
split -b 1m -d  file.txt file	<MISSING>
split -b 1m -d  file.txt file --additional-suffix=.txt	<MISSING>
split -b 500m -d -a 4 input_file_name input.part.	<MISSING>
split -c 100m -d data.tsv data.tsv.	<MISSING>
split -d -l $splitlimt $infile x_	<MISSING>
split -l $max_lines_per_chunk $original_file $chunk_file_prefix	<MISSING>
"split -l ${2:-10000} -d -a 6 ""$1"""	<MISSING>
"split -l ${2:-10000} -d -a 6 ""$1"" ""${tdir}/x"""	<MISSING>
"split -l 100 ""$source_file"""	<MISSING>
split -l 100 date.csv	<MISSING>
split -l 100 input_file output_file	<MISSING>
split -l 100000 database.sql database-	<MISSING>
split -l 20 $filename xyz	<MISSING>
split -l 20 file.txt new	<MISSING>
split -l 200000 filename	<MISSING>
split -l 200000 mybigfile.txt	<MISSING>
split -l 3400000	<MISSING>
split -l 50000000 --filter=./filter.sh 2011.psv	<MISSING>
split -l 600 list.txt	<MISSING>
split -l20 addresss_file temp_file_	<MISSING>
split -l5000000 data.tsv '_tmp';	<MISSING>
split -l5000000 randn20m.csv '_tmp';	<MISSING>
split -l9 your_file	<MISSING>
split -n 1000 /usr/bin/firefox	<MISSING>
split -n 10000 /usr/bin/cat	<MISSING>
split -n 100000 /usr/bin/gcc	<MISSING>
split -n 1000000 /etc/gconf/schemas/gnome-terminal.schemas	<MISSING>
split -n l/10 file	<MISSING>
split -n2 infile	<MISSING>
split /tmp/files	<MISSING>
"split a file ""file.tar.gz"" into pieces named as ""file.tar.gz.part-nnn"" with size 1024 mb where nnn is a numeric suffix"	
"split a file ""file.tar.gz"" into pieces with size 1024 mb"	
"split a file ""list.txt"" into pieces per 600 lines"	
"split a file addresss_file into pieces per 20 lines named with prefix ""temp_file_ and numeric suffixes"	
"split all files in directory ""/dev/shm/split/"" into pieces per 1000 lines"	
"split all files in directory ""posns "" into pieces per 10000 lines"	
"split all files in the directory tree ""/dev/shm/split/"" into files of at most 1000 lines each and use the filename as the prefix"	
split bigfile /lots/of/little/files/here	<MISSING>
"split compressed content of the directory /home into pieces per 4000 mb named as  ""/media/drivename/backupname.tgz.nnn"""	
"split compressed content of the file www into pieces per 1073741824 bytes named as ""backup.tar.nnn"""	
split content all files file1..40000 into pieces per 1445 lines named as outputprefixnnn as digital prefix	
split content of the file file.txt started from second line into pieces per 4 lines named as split_nnn	
"split content of the file inputfile except lines started with ""^t:"" into pieces per 200 lines"	
split content of the files *.txt beginning with 1001st line into pieces per 1000 lines	
"split file ""$file into pieces named with 5 character suffix"	
"split file ""${fspec} into pieces named as ""xyzzynnn"" with numeric prefix from 1 to 6"	
"split file ""your_file"" into pieces per 9 lines"	
split file 'afile' into parts as of two lines per each and compress each part with 'bzip2'	
split file /etc/gconf/schemas/gnome-terminal.schemas into pieces per 1000000 lines	
split file /usr/bin/firefox into pieces per 1000 lines	
split file /usr/bin/gcc into pieces per 100000 lines	
"split file abc.txt into pieces per 1500000000 bytes named as ""abc.nnn"""	
split file data.csv into pieces per 100 lines	
"split file data.csv into pieces per 100 lines named with additional suffix "".csv"""	
split file input.txt into pieces per 1 line named output.nnnnn	
"split file t.txt into pieces per 30000000 lines named as ""t.nn"" with numeric suffix"	
"split listing of the current directory into pieces per 500 lines named ""outputxyznnn"""	
"split processed content of the file inout_file into pieces per 2000000 named as ""out-prefix-nnn"""	
"split processed content of the file temp into pieces per 1 line named ""tempnnn"" with numeric suffix"	
"split result of the command ""tar [your params]"" into pieces per 500 mb named as ""output_prefixnnn"""	
split standard input into files of at most 1000 lines each	
split standard input into files of at most 3400000 lines each	
split standard input into files with at most 75 lines each	
"split the contents of ""file1 file2 ... file40000"" into 1445 files in a round robin fashion with prefix ""outputprefix"" and numeric suffixes"	
"split the contents of all "".txt"" excluding the first 1000 lines into files of at most 1000 lines each"	
"split the file ""/path/to/large/file"" into pieces per 50000 lines named as /path/to/output/file/prefixnnn"	
"split the file ""file"" into pieces per 2 lines"	
"split the file 2011.psv into pieces per 50000000 lines processed with script ""filter.sh"""	
split the file data.csv into pieces per 100 mb named as data.tsv.nnn with digital prefixes	
split the file hugefile.txt into pieces per 100000 lines named as partnnn with digital prefixes	
"split the first 100 lines of ""datafile"" into files with at most 1700 bytes each preserving lines"	
"split the first 100 lines of the file ""datafile"" per lines with size 1700 bytes"	
"split the output of ""ls"" into files of at most 500 lines each with prefix ""outputxyz."""	
"split the output of ""my_program"" into files of at most 100000 bytes each and use numeric suffixes"	
"split the output of ""tar [your params]"" into files of at most 500 mib in size and use prefix ""output_prefix"""	
"split the result of command ""ping -c 25 google.com | tee "" into pieces per 100000 bytes named as ""/home/user/mylogfile.lognnn"""	
"split the sorted and unique lines in files ""emails_*.txt"" into files with at most 200 lines each with numeric suffixes of length 4"	
split uncompressed content of the file biglogfile.gz into pieces per 500000 lines	
src_dir=$(cd ..; pwd)	<MISSING>
"ssh ""$1"" -l pete"	<MISSING>
"ssh ""$user@$server"" ""$cmd_str"""	<MISSING>
"ssh $(vagrant ssh-config host | sed '/^[[:space:]]*$/d' |  awk 'nr>1 {print "" -o ""$1""=""$2}') localhost"	<MISSING>
"ssh $(vagrant ssh-config | awk 'nr>1 {print "" -o ""$1""=""$2}') localhost"	<MISSING>
"ssh $user@$server ""cd ${remote_path}; mkdir -p $i"" < /dev/null"	<MISSING>
ssh $username@localhost -l 80:localhost:3000 -n	<MISSING>
ssh -at gw ssh -a app1	<MISSING>
ssh -d1080 root@localhost -g	<MISSING>
ssh -f -n -l localhost:12345:otherhost:12345   otheruser@otherhost	<MISSING>
ssh -f mysql_access_server -l 3309:sqlmaster.example.com:3306 -n	<MISSING>
ssh -f user@gateway -l 3307:1.2.3.4:3306 -n	<MISSING>
ssh -f user@gateway -p 24222 -l 3307:1.2.3.4:3306 -n	<MISSING>
"ssh -f user@host ""echo foo; sleep 5; echo bar"""	<MISSING>
ssh -f vagrant-ssh default	<MISSING>
ssh -fl 127.0.0.1:someport:host.in.the.remote.net:22 proxy.host	<MISSING>
ssh -fnr 1234:localhost:22 root@123.123.123.123	<MISSING>
ssh -fnt -l4431:www1:443 -l4432:www2:443 colocatedserver	<MISSING>
ssh -fnt -l8888:proxyhost:8888 -r22222:localhost:22 officefirewall	<MISSING>
ssh -i ./device_id.pem -p 2222 deviceuser@middle.example.org	<MISSING>
ssh -i ./device_id.pem deviceuser@middle.example.org:2222	<MISSING>
ssh -i ./middle_id.pem -r 22:localhost:2222 middleuser@middle.example.org	<MISSING>
ssh -i /path/to/ssh/secret/key $1 $2	<MISSING>
ssh -i id_rsa host	<MISSING>
"ssh -i keyfile user@host bash -c ""\""nohup ./script arg1 arg2 > output.txt 2>&1 &\"""""	<MISSING>
ssh -i keyfile.rsa -t -n -l 16379:localhost:6379 someuser@somehost	<MISSING>
"ssh -i ~/.ssh/gitkey_rsa ""$@"""	<MISSING>
ssh -i ~/path/mykeypair.pem ubuntu@ec2-xx-xxx-xxx-xxx.us-west-2.compute.amazonaws.com	<MISSING>
"ssh -l ${username} ${hostname} ""${script}"""	<MISSING>
ssh -l 1234:remote2:22 -p 45678 user1@remote1	<MISSING>
ssh -l 4444:raptor.lan:22 genja.org	<MISSING>
ssh -l buck hostname	<MISSING>
ssh -l localhost:8000:clusternode:22 user@bridge	<MISSING>
ssh -l myname -p 22 hostname	<MISSING>
"ssh -m -f -n -o controlpath=""$sshsocket"" ""$user_at_host"""	<MISSING>
ssh -m -s my-ctrl-socket -fnnt -l 50000:localhost:3306 jm@sampledomain.com	<MISSING>
ssh -n $r_user@$r_host 'touch /home/user/file_name.txt'	<MISSING>
"ssh -n -f user@host ""sh -c 'cd /whereever; nohup ./whatever > /dev/null 2>&1 &'"""	<MISSING>
"ssh -n -i <(echo ""privatekeystuffdis88s8dsf8h8hsd8fh8d"") -r 16186:localhost:8888 hello.com"	<MISSING>
ssh -n -l 2222:remote.example.com:22 bridge.example.com&	<MISSING>
"ssh -o ""stricthostkeychecking no"" -i ${keydir}/${key}.pem ${username}@$name ""${commands}"""	<MISSING>
ssh -o check officefirewall	<MISSING>
ssh -o connecttimeout=10  <hostname>	<MISSING>
ssh -o connecttimeout=3 user@ip	<MISSING>
"ssh -o controlpath=""$mastersock"" -mnf ""$@"""	<MISSING>
ssh -o exit officefirewall	<MISSING>
ssh -o exit otherhosttunnel	<MISSING>
ssh -o serveraliveinterval=60 myname@myhost.com	<MISSING>
"ssh -o stricthostkeychecking=no -l username hostname ""pwd; ls"""	<MISSING>
ssh -o userknownhostsfile=/dev/null -o stricthostkeychecking=no -o loglevel=quiet -i identity_file machine.example.org gcc -dumpversion	<MISSING>
ssh -o userknownhostsfile=/dev/null username@hostname	<MISSING>
ssh -p 10022 localhost	<MISSING>
ssh -p 22 myname@hostname	<MISSING>
ssh -p 4444 localhost	<MISSING>
"ssh -q $host ""[[ ! -f $file_path ]] && touch $file_path"""	<MISSING>
"ssh -q $host [[ -f $file_path ]] && echo ""file exists"" || echo ""file does not exist"";"	<MISSING>
ssh -r 10022:localhost:22 device@server	<MISSING>
"ssh -s ""$sshsocket"" -o exit ""$user_at_host"""	<MISSING>
ssh -s my-ctrl-socket -o check jm@sampledomain.com	<MISSING>
ssh -s my-ctrl-socket -o exit jm@sampledomain.com	<MISSING>
"ssh -t example.com ""screen -r -x ls"""	<MISSING>
"ssh -t example.com ""screen -r"""	<MISSING>
"ssh -t example.com ""screen -r; ls"""	<MISSING>
ssh -t genja.org 'ssh raptor.lan hostname\; uptime'	<MISSING>
ssh -t me@machine ./executemyscript '&&' bash -i	<MISSING>
"ssh -t remotehost ""sudo <cmd>"""	<MISSING>
ssh -t server 'command; bash -l'	<MISSING>
ssh -t somehost ~/bashplay/f	<MISSING>
ssh -t tunneluser@111.222.333.444 <<'eoi'	<MISSING>
ssh -tt foo ./script.py	<MISSING>
ssh -v -y phil@192.168.0.14 -p 222	<MISSING>
ssh -x -c -l 5900:localhost:5900 remotehost x11vnc -localhost -display :0	<MISSING>
"ssh -x remoteserver ""cd yourremotedir; ./yourremotescript.sh </dev/null >/dev/null 2>&1 & """	<MISSING>
ssh -x user@server	<MISSING>
ssh -x whoever@whatever.com	<MISSING>
ssh -xy -t user@remote_ip 'ssh -xy -t user@remotetoremote_ip'	<MISSING>
ssh -y $ssh_user@$ssh_server	<MISSING>
ssh `vagrant ssh-config | tail -8 | perl -pe 's/^\s+/-o@/; s/\s/\=/;s/@/ /;s/\n/ /'` vagrant@localhost	<MISSING>
ssh app1	<MISSING>
"ssh askapache 'nice -n 19 sh -c ""( ( nohup chown -r ask:ask /www/askapache.com &>/dev/null ) & )""'"	<MISSING>
"ssh askapache 'nohup sh -c ""( ( chown -r ask:ask /www/askapache.com &>/dev/null ) & )""'"	<MISSING>
"ssh askapache 'sh -c ""( ( nohup chown -r ask:ask /www/askapache.com &>/dev/null ) & )""'"	<MISSING>
ssh buck@hostname	<MISSING>
"ssh example.com ""ps -elfc; ls"""	<MISSING>
"ssh host ""test -e /path/to/file"""	<MISSING>
ssh in server 'server' as user 'user' with x11 forwarding disabled	
"ssh into ""$name"" as user ""${username}"" using key file ""${keydir}/${key}.pem"", automatically add the host to list of known hosts and execute ""${commands}"""	
"ssh into ""111.222.333.444"" as user ""tunneluser"" without a pseudo-terminal and without interpreting bash variables locally"	
"ssh into ""111.222.333.444"" as user ""tunneluser"" without interpreting bash variables locally"	
"ssh into ""hostname"" as user ""buck"""	
"ssh into ""hostname"" on port 22 as user ""myname"""	
"ssh into ""localhost"" with forced pseudo-terminal allocation, execute ""$heredoc"", and save the output to variable ""rel_dir"""	
"ssh into ""myhost.com"" as user ""myname"" with a check every 60 seconds that the server is still alive"	
"ssh into ""server"" as user ""user"" and interpret commands in ""/bin/bash"" until ""eot"" is received"	
"ssh into ""ssh.myhost.net"" as user ""myusername"" and run command ""mkdir -p $2"""	
ssh into $1 with login name 'pete'	
"ssh into default vagrant host without running ""vagrant ssh"""	
"ssh into default vagrant host without running ""vagrant ssh"" and without an interactive ssh shell"	
"ssh into default vagrant host without running ""vagrant ssh"" by passing the configuration parameters vagrant uses for ssh"	
"ssh into desired vagrant host ""host"" without running ""vagrant ssh"""	
"ssh into host ""$1"" using key file ""/path/to/ssh/secret/key"" and execute command ""$2"""	
"ssh into host ""server"" as user ""user"""	
ssh into localhost on port 10022	
ssh into localhost on port 4444	
"ssh into me@machine, run ""./executemyscript"", and spawn a bash shell"	
"ssh into server ""app1"" as the current user"	
"ssh into server ""server.com"" as user ""remote_user"""	
"ssh into server, execute ""command,"" and start up a login shell when it completes"	
ssh into user@server and run command ${ssh_command}	
ssh login in 'middle.example.org' via port 2222 as user 'deviceuser' using a private key file './device_id.pem'	
"ssh myusername@ssh.myhost.net ""mkdir -p $2"""	<MISSING>
"ssh remote ""sh -c \""(nohup sleep 30; touch nohup-exit) > /dev/null &\"""""	<MISSING>
"ssh remote_host test -f ""/path/to/file"" && echo found || echo not found"	<MISSING>
ssh remote_user@server.com	<MISSING>
ssh root@something 'ls -l'	<MISSING>
"ssh someone@somehost ""cd /export/home/someone && find . -name '*' -print | parallel -j1 'sleep 10;curl -u someone:password ftp://somehost/tmp/ -vt'"	<MISSING>
"ssh someone@somehost ""cd /export/home/someone && find . -name '*' -print| xargs -n1 curl -u someone:password ftp://somehost/tmp/ -vt"""	<MISSING>
"ssh someone@somehost 'cd /export/home/someone && find . -name ""*"" -print| (while read file; do curl -u someone:password ftp://somehost/tmp/ -vt ""$file""; sleep 10; done)'"	<MISSING>
ssh tunneluser@111.222.333.444 <<\eoi	<MISSING>
ssh user@host -m -s /tmp/%r@%h:%p -n	<MISSING>
ssh user@host -s /tmp/%r@%h:%p	<MISSING>
ssh user@host -x	<MISSING>
"ssh user@remote ""cat file""|xclip -i"	<MISSING>
ssh user@remote 'bash -s' < /path/to/commands-inc.sh	<MISSING>
ssh user@server	<MISSING>
"ssh user@server ""${ssh_command}"""	<MISSING>
ssh user@server 'display=:0 nohup xeyes < /dev/null > std.out 2> std.err &'	<MISSING>
ssh user@server /bin/bash <<'eot'	<MISSING>
"ssh user@target ""cd /some/directory; nohup myprogram > /dev/null 2>&1"""	<MISSING>
"ssh user@target ""cd /some/directory; nohup myprogram > foo.out 2> foo.err < /dev/null"""	<MISSING>
"ssh using parameters in $@ in master mode in the background without executing any commands and set the controlpath to ""$mastersock"""	
ssh vagrant@127.0.0.1 -p 2222 -o compression=yes -o dsaauthentication=yes -o loglevel=fatal -o stricthostkeychecking=no -o userknownhostsfile=/dev/null -o identitiesonly=yes -i ~/.vagrant.d/less_insecure_private_key -o forwardagent=yes	<MISSING>
"ssh with parameters specified in ""$@"" using key file ""~/.ssh/gitkey_rsa"""	
"ssh with trusted x11 forwarding into ""user@remotetoremote_ip"" from ssh connection ""user@remote_ip"""	
ssh-copy-id myname@somehost	<MISSING>
ssh-keygen -b 2048 -t rsa -f key -c michael	<MISSING>
"ssh-keygen -f ""/root/.ssh/known_hosts"" -r gitlab.site.org"	<MISSING>
ssh-keygen -f outfile -n ''	<MISSING>
ssh-keygen -f ~/.ssh/apache-rsync	<MISSING>
"ssh-keygen -f ~/.ssh/id_rsa -p """""	<MISSING>
ssh-keygen -hf ~/.ssh/known_hosts	<MISSING>
ssh-keygen -l -e md5 -f /etc/ssh/ssh_host_ecdsa_key.pub	<MISSING>
ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub	<MISSING>
ssh-keygen -pf private.key	<MISSING>
ssh-keygen -t rsa	<MISSING>
"ssh-keygen -t rsa -c ""$app"" -n ""$sshkeypass"" -f ~/.ssh/id_rsa"	<MISSING>
"sshpass -p ""your_password"" ssh -o stricthostkeychecking=no your_username@some_site.com"	<MISSING>
"sshpass -p ""your_password"" ssh -o stricthostkeychecking=no your_username@some_site.com:2400"	<MISSING>
stamp=`date -r file_name`	<MISSING>
"start ""xeyes"" in the background on the remote server and exit the ssh session"	
start 'top' to monitor all processes with the default settings.	
start 2 sleep processes in the background	
start a vlc process with a dummy (headless) interface in the background, immune to sighup (hangup) signals, to play all media files in mp3_directory from the user's home directory.	
start bash in a completely empty environment, without parsing /etc/bashrc or ~/.bashrc	
start from current directory, skip the directory src/emacs and all files and directories under it, and print the names of the other files found	
start from current directory, skip the directory src/emacs and print it then skip all files and directories under it, and print the names of the other files found	
start matlab without the desktop	
start new screen session or to take over the most recent detached one	
start program 'scriptname' with an empty environment.	
starts 'chromium', storing user data in a newly created temporary folder.	
starts new detached tmux session 'vims' with new windows 'vim0' and opens file 'foo' within.	
starts new detached tmux session and runs command $cmd within.	
starts new tmux session, assuming the terminal supports 256 colours.	
starts new window named 'win0' in detached tmux session 'vims', opens file 'foo' within.	
starts tmux session 'name', forcing tmux to assume the terminal supports 256 colours, and executes defined script within.	
"stat --printf=""%y %n\n"" $(ls -tr $(find * -type f))"	<MISSING>
stat -c 'file: %n modified: %y' t* | column -t	<MISSING>
stat -f 'file: %n modified: %t%sm' t* |column -t	<MISSING>
stdbuf -o 0 ./a | tee output.txt	<MISSING>
store absolute path of executing script	
"store content of uncompressed file ""$file.fastq"" in variable ""reads"""	
store info about all mounted file systems, printing all sizes in powers of 1000	
store n symbols of input into variable 'buffer'	
stores date of last month day in the 'lastdaymonth' variable.	
stores system load average number in the 'proc_load_average' variable.	
strace -o /tmp/output.txt ln -s -f .bash_aliases test	<MISSING>
strip all '\' and newlines from $output and save the result to variable 'output'	
strips last section from the path $pathname, and prints basename of the rest part.	
strips two last sections from the path $pathname, and prints basename of the rest part.	
"su $user -c ""$web --quiet"" &"	<MISSING>
su $username -c tar xzvf ..	<MISSING>
su -	<MISSING>
su - jenkins	<MISSING>
su - jenkins -s /bin/bash	<MISSING>
su - jetty -c sh runprogram.sh	<MISSING>
su - jetty ./runprogram.sh	<MISSING>
su - jetty cp file1 file2	<MISSING>
su - jetty sh ./runprogram.sh	<MISSING>
"su - joe -c ""/path/to/my_daemon & echo \$! > /tmp/su.joe.$$"""	<MISSING>
"su - joe -c ""/path/to/my_daemon 3>&- & echo \$! 1>&3"" 3>/tmp/su.joe.$$"	<MISSING>
"su - joe -c ""/path/to/my_daemon > /some/output/file"" &"	<MISSING>
su - postgres	<MISSING>
"su - postgres -c ""/usr/bin/psql database -c \""select 'drop table ' || .... """	<MISSING>
su - user_foobar -c /path/to/my_app &	<MISSING>
su - username	<MISSING>
su - username command	<MISSING>
su - your_user	<MISSING>
"su --login postgres --command ""createdb $dbname"""	<MISSING>
"su --session-command=""${objectdb_home}/bin/objectdb.sh start"" $java_user"	<MISSING>
"su -c ""cd /home/$username/$project ; svn update"" -m ""$username"""	<MISSING>
"su -c ""dbca -silent -createdatabase -templatename general_purpose.dbc -gdbname qualidade -syspassword password -systempassword password -scriptdest /u01/app/oracle/oradata/qualidade -characterset we8iso8859p1"" -s /bin/sh oracle"	<MISSING>
su -c 'bash --rcfile myfile'	<MISSING>
su -c 'source myfile; bash'	<MISSING>
su -c dnf install glibc.i686	<MISSING>
su -cp filename.sh	<MISSING>
su -l	<MISSING>
"su -l $usr -s /bin/bash -c ""exec > >( logger -t $prg ) 2>&1 ; cd $wkd; { $bin $arg & }; echo \$! > $pid """	<MISSING>
su -l builder	<MISSING>
su -l kenneth -c 'echo $proj_path'	<MISSING>
"su -s /bin/bash -c ""set -a; \                     . /path/to/nullmailer-vars; \                     set +a; \                     /usr/sbin/logcheck"" logcheck"	<MISSING>
"su -s /bin/bash -c 'bash --rcfile <(echo ""source ~/.bashrc; source myfile"")'"	<MISSING>
su apache -s /bin/ksh	<MISSING>
su git	<MISSING>
"su oracle -c ""/home/oracle/database/runinstaller"" &"	<MISSING>
"su user1 -c ""ssh user1@192.168.1.2 \""awk '\\\$5==1{print \\\$3}' filename.log\"""" | uniq -c"	<MISSING>
su username	<MISSING>
"subj=""$(date) - $(hostname) - $(echo ""$changes"" | sed ""s/$/,/"" | tr ""\n"" "" "")"""	<MISSING>
subnet=$(hostname -i | cut -d. -f1,2,3)	<MISSING>
"subtract all columns in ""file2"" from ""file1"" except the first"	
subtract each column in file2 from matching column in file1, output the result in a similarly formatted table	
sudo  find /var/www/html/ -type d -exec chmod 775 {} \;	<MISSING>
sudo  find /var/www/html/ -type f -exec chmod 664 {} \;	<MISSING>
sudo  ln  -d  existing_dir  new_hard_link	<MISSING>
"sudo -u username2 -h sh -c ""cd /home/$username/$project; svn update"""	<MISSING>
sudo cat /sys/kernel/debug/tracing/trace_pipe | tee tracelog.txt	<MISSING>
sudo chgrp gpio /sys/class/gpio/export /sys/class/gpio/unexport	<MISSING>
sudo chmod +rx $(which node)	<MISSING>
sudo chmod +x java_ee_sdk-6u2-jdk-linux-x64.sh	<MISSING>
sudo chmod -r 777 thedirectory/	<MISSING>
sudo chmod 755 $(which node)	<MISSING>
sudo chmod 755 -r /opt/lampp/htdocs	<MISSING>
sudo chmod 755 -r /whatever/your/directory/is	<MISSING>
sudo chmod 755 .git/hooks/pre-commit	<MISSING>
sudo chmod 755 /dvtcolorconvert.rb	<MISSING>
sudo chmod 755 mksdcard	<MISSING>
sudo chmod 777 .git/hooks/prepare-commit-msg	<MISSING>
sudo chmod u+s `which xvfb`	<MISSING>
sudo chown $(whoami):$(whoami) /usr/local/rvm/gems/ruby-2.0.0-p481/ -r	<MISSING>
sudo chown -r  $user:$group /var/lib/cassandra	<MISSING>
sudo chown -r  $user:$group /var/log/cassandra	<MISSING>
sudo chown -r $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}	<MISSING>
sudo chown -r $(whoami) /usr/lib/node_modules/	<MISSING>
sudo chown -r $(whoami) ~/.npm	<MISSING>
sudo chown -r $(whoami):admin /usr/local	<MISSING>
sudo chown -r $user /usr/local/lib/node_modules	<MISSING>
sudo chown -r $user ~/tmp	<MISSING>
sudo chown -r :laravel ./bootstrap/cache	<MISSING>
sudo chown -r :laravel ./storage	<MISSING>
sudo chown -r `whoami` /usr/local	<MISSING>
sudo chown -r `whoami` /usr/local/lib	<MISSING>
sudo chown -r `whoami` /usr/local/lib/node_modules	<MISSING>
sudo chown -r `whoami` ~/.npm	<MISSING>
sudo chown -r ec2-user:apache /vol/html	<MISSING>
sudo chown -r test /home/test	<MISSING>
sudo chown -r www-data:www-data /var/www	<MISSING>
sudo chown -r xxx /users/xxx/library/developer/xcode/templates	<MISSING>
sudo chown -rf www-data *	<MISSING>
sudo chown `whoami` /data/db	<MISSING>
sudo chown `whoami` /vol	<MISSING>
sudo chown bob:sftponly /home/bob/writable	<MISSING>
sudo chown el my_test_expect.exp	<MISSING>
sudo chown el my_test_expect.exp     //make el the owner.	<MISSING>
sudo chown hduser:hadoop {directory path}	<MISSING>
sudo chown nobody /var/www/html/mysite/images/	<MISSING>
sudo chown nobody /var/www/html/mysite/tmp_file_upload/	<MISSING>
sudo chown root /home/bob	<MISSING>
sudo chown root file.sh	<MISSING>
sudo chown root process	<MISSING>
sudo chown root. /etc/udev/rules.d/51-android.rules	<MISSING>
sudo chown root:dockerroot /var/run/docker.sock	<MISSING>
sudo chown root:root testfile.txt	<MISSING>
sudo chown root:root uid_demo	<MISSING>
sudo chown root:wheel adbind.bash	<MISSING>
sudo chown root:wheel bin	<MISSING>
sudo chown root:wheel com.xxxx.adbind.plist	<MISSING>
sudo chown root:www-data /foobar/test_file	<MISSING>
sudo cp -a include/gtest /usr/include	<MISSING>
sudo cp -a libgtest_main.so libgtest.so /usr/lib/	<MISSING>
sudo cp mymodule.ko /lib/modules/$(uname -r)/kernel/drivers/	<MISSING>
sudo crontab -e -u apache	<MISSING>
sudo crontab -u wwwrun -e	<MISSING>
"sudo date --set=""sat may 11 06:00:00 idt 2013"""	<MISSING>
sudo du -hdaxd1 /var | sort -h | tail -n10	<MISSING>
"sudo echo ""deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen"" | sudo tee -a /etc/apt/sources.list.d/10gen.list"	<MISSING>
sudo env	<MISSING>
sudo env |grep user	<MISSING>
"sudo find -name ""*[!0-9][1-9].txt"" -exec chmod 744 '*' {} \; -a -exec ls -l {} \; | sort | parallel ls -l"	<MISSING>
sudo find . -name test1.h	<MISSING>
sudo find . -name test2.h	<MISSING>
sudo find . -print0	<MISSING>
sudo find . -type d -exec chmod 755 {} +	<MISSING>
sudo find . -type f -exec chmod 644 {} +	<MISSING>
sudo find . -type f -exec sed -i 's/置換前/置換後/g' {} \;	<MISSING>
"sudo find . -xdev -type f | cut -d ""/"" -f 2 | sort | uniq -c | sort -n"	<MISSING>
"sudo find . \( -name ""*.log"" -o -name ""*.trc"" \) -mtime -1 | sudo xargs ls -ltr --color | less -r"	<MISSING>
sudo find ./bootstrap/cache/ -type d -exec chown apache:laravel {} \;	<MISSING>
sudo find ./storage/ -type d -exec chown apache:laravel {} \;	<MISSING>
sudo find / ( -name firefox -o -name thunderbird -o -name seamonkey \) -type f 2>/dev/null|grep -v '(10_recommended|repo)'	<MISSING>
sudo find / -iname '*.ogg'	<MISSING>
"sudo find / -name ""orm.properties"""	<MISSING>
sudo find / -name file.txt	<MISSING>
sudo find / -name mysql -print	<MISSING>
"sudo find / -type d -name ""postgis-2.0.0"""	<MISSING>
"sudo find / -xdev -type f -size +100000 -name ""*.log"" -exec gzip -v {} \;"	<MISSING>
"sudo find / -xdev -type f -size +100000 -name ""*.log"" -exec gzip -v {} \; 2>&1 | awk '{print $6}'"	<MISSING>
"sudo find / -xdev -type f -size +100000 -name ""*.log"" -exec gzip {} \; -exec echo {} \;"	<MISSING>
sudo find /home/user/series/ -iname sample -exec rm {} \;	<MISSING>
sudo find /home/user/series/ -iname sample -print0 | sudo xargs -0 rm -r	<MISSING>
sudo find /path/to/dir -type d -print0 | xargs -0 sudo chmod 755	<MISSING>
sudo find /path/to/dir -type f -print0 | xargs -0 sudo chmod 644	<MISSING>
sudo find /path/to/somedirectory -type d -print0 | xargs -0 sudo chmod 755	<MISSING>
sudo find /path/to/somedirectory -type f -print0 | xargs -0 sudo chmod 644	<MISSING>
sudo find /var/www -nouser -exec chown root:apache {} \;	<MISSING>
sudo find /var/www -type d -print0 | xargs -0 chmod 755	<MISSING>
sudo find /var/www -type f -print0 | xargs -0 chmod 644	<MISSING>
sudo find /var/www/some/subset -print0 | xargs -0 chown www-data:www-data	<MISSING>
sudo find /var/www/some/subset -type d -print0 | xargs -0 chmod g+s	<MISSING>
"sudo find foldername -exec chmod a+rwx {} "";"""	<MISSING>
"sudo find foldername -type d -exec chmod 755 {} "";"""	<MISSING>
"sudo find foldername -type f -exec chmod 644 {} "";"""	<MISSING>
sudo kill -15 $( sudo lsof -i:6000 -t )	<MISSING>
"sudo ln --symbolic --verbose --force ""$pluginpath"" ""$pdir"""	<MISSING>
"sudo ln -f ""findpdftext"" /usr/local/bin"	<MISSING>
sudo ln -f -s $javausrlib/jdk1*/bin/* /usr/bin/	<MISSING>
"sudo ln -s ""/applications/sublime text 2.app/contents/sharedsupport/bin/subl"" /usr/local/bin/subl"	<MISSING>
"sudo ln -s -f ""/usr/local/bin/findpdftext"" ""/usr/local/bin/fpdf"""	<MISSING>
"sudo ln -s -f ""/usr/local/bin/findpdftext"" ""/usr/local/bin/fpt"""	<MISSING>
sudo ln -s /usr/bin/perl /usr/local/bin/perl`echo -e '\r'`	<MISSING>
sudo ln -s /usr/include/oracle/11.2/client $oracle_home/include	<MISSING>
sudo ln -s /usr/lib/jvm/java-7-oracle /usr/lib/jvm/default-java	<MISSING>
sudo ln -sf /usr/local/ssl/bin/openssl `which openssl`	<MISSING>
"sudo ln -stfv ""$default_java_dir"" ""/usr/lib/jvm/default-java"""	<MISSING>
"sudo ls -hal /root/ | sudo bash -c ""cat > /root/test.out"""	<MISSING>
sudo ls -hal /root/ | sudo dd of=/root/test.out	<MISSING>
sudo ls -hal /root/ | sudo tee /root/test.out > /dev/null	<MISSING>
sudo lsusb -t|less	<MISSING>
sudo lsusb -v|less	<MISSING>
sudo mkdir -p $javausrlib	<MISSING>
sudo mkdir /data/db	<MISSING>
sudo mkdir /var/svn	<MISSING>
sudo mount -a	<MISSING>
sudo mount -i -o remount,suid /home/evgeny	<MISSING>
sudo mount -o loop /dev/loop0 test	<MISSING>
sudo mount -o remount -o exec /dev/sda7	<MISSING>
sudo mount -t cifs -o username=me,password=mine //192.168.0.111/serv_share /mnt/my_share	<MISSING>
sudo mount -t vboxsf d:\share_folder_vm \share_folder	<MISSING>
sudo mount -t vboxsf myfilename ~/destination	<MISSING>
sudo mount -t vfat -o rw,auto,user,fmask=0000,dmask=0000 /dev/sda7 /mnt/my_partition	<MISSING>
sudo mount /dev/xvdf /vol -t ext4	<MISSING>
sudo mount /dev/xvdf1 /vol -t ext4	<MISSING>
sudo mount device_name mount_point	<MISSING>
sudo mv $phantom_js /usr/local/share	<MISSING>
sudo mv /usr/bin/php /usr/bin/~php	<MISSING>
sudo mv edited_blah.tmp /etc/blah	<MISSING>
sudo mv phantomjs-1.8.1-linux-x86_64.tar.bz2 /usr/local/share/.	<MISSING>
sudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node* /usr/local/lib/dtrace/node.d ~/.npm ~/.node-gyp /opt/local/bin/node opt/local/include/node /opt/local/lib/node_modules	<MISSING>
sudo rm -rf bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node	<MISSING>
sudo rm /var/lib/mongodb/mongod.lock	<MISSING>
sudo rsync -az user@10.1.1.2:/var/www/ /var/www/	<MISSING>
sudo rsync -pgodt /home/ /newhome/	<MISSING>
sudo setfacl -r -m u:www-data:rwx -m u:`whoami`:rwx app/cache app/logs	<MISSING>
sudo ssh $username@localhost -l 80:localhost:3000 -n	<MISSING>
sudo su	<MISSING>
sudo su -	<MISSING>
"sudo su - -c ""r -e \""install.packages('shiny', repos='http://cran.rstudio.com/')\"""""	<MISSING>
sudo su - jenkins	<MISSING>
sudo su -c 'ls -hal /root/ > /root/test.out'	<MISSING>
sudo su -l oracle	<MISSING>
sudo su elasticsearch -c './bin/elasticsearch -d --default.path.conf=/etc/elasticsearch'	<MISSING>
sudo tar xvf phantomjs-1.9.0-linux-x86_64.tar.bz2	<MISSING>
sudo vim `which charm`	<MISSING>
sudo yum --disablerepo epel update openssl	<MISSING>
sudo yum --releasever=2013.09 update openssl	<MISSING>
sudo yum clean all	<MISSING>
sudo yum install glibc	<MISSING>
sudo yum update --skip-broken	<MISSING>
sudo yum update openssl	<MISSING>
sudo yum update openssl --skip-broken	<MISSING>
"suffix all files and folders in the current directory with ""_suf"""	
"sum the total content size of the extracted files in ""archive.tar.gz"""	
sum=$(tree | md5sum)	<MISSING>
svn status |  grep '\!' | cut -d\  -f2-	<MISSING>
svn status | grep '\!' | cut -d' ' -f2- > removedprojs	<MISSING>
"swap ""new"" and ""old"" files or directories"	
switch to user username	
switch user to jenkins	
symlinks all of formula’s installed files into the homebrew prefix.	
symlinks all of package`s installed files into the homebrew prefix with overwrite.	
"sync --list-only --include ""*2012*.xml"" -exclude ""*.xml"" serveripaddress::pt/dir/files/ --port=111 | awk '{ $1=$2=$3=$4=""""; print substr($0,5); }' >output.txt"	<MISSING>
"synchronize ""/home/user1/"" to ""wobgalaxy02:/home/user1/"" including hidden files"	
"synchronize ""/path/to/dir_a"" with files in ""/path/to/dir_b/"" if the files are newer"	
"synchronize ""/path/to/dir_b"" with files in ""/path/to/dir_a/"" if the files are newer"	
"synchronize ""dir_a"" and ""dir_b"" to contain the latest files in both directories"	
"synchronize ""xxx-files"" to ""different-stuff/xxx-files"" recursively preserving metadata with a bandwidth limit of 2000 kib/s"	
"synchronize via ssh ""user@source-server:/somedira/"" to ""somedirb/"" with compressed data during transmission and display progress"	
"t1=$(date -u -d ""1970.01.01-$string1"" +""%s"")"	<MISSING>
t=$(tty) echo ee | tee $t | foo	<MISSING>
tac $file | grep -m 1 '.'	<MISSING>
"tac -s "","" parse.txt > newparse.txt"	<MISSING>
tac a | grep -m1 -op '(?<=tag>).*(?=</tag>)'	<MISSING>
tac a.csv | sort -u -t, -r -k1,1 |tac	<MISSING>
tac a.txt > b.txt	<MISSING>
tac a.txt | awk 'nf{print $nf; exit}'	<MISSING>
tac error.log | awk '{if(/2012/)print;else exit}'	<MISSING>
"tac file | awk '/a/ && !seen {sub(/a/, ""c""); seen=1} 1' | tac"	<MISSING>
tac file | awk '/pattern/{print;exit}1' | tac	<MISSING>
"tac file | awk '/scriptalias/ && ! seen {print ""new line""; seen=1} {print}' | tac"	<MISSING>
tac file | rev	<MISSING>
tac file | sed '/a/ {s//c/; :loop; n; b loop}' | tac	<MISSING>
tac file | sed '/pattern/q' | tac	<MISSING>
tac file | sed '2 s/,$//' | tac	<MISSING>
tac file | sed -e '/./,$!d' | tac | sed -e '/./,$!d'	<MISSING>
tac file | sed -n '0,/<tag>\(.*\)<\/tag>/s//\1/p'	<MISSING>
tac file |egrep -m 1 .	<MISSING>
tac file.log | awk '{ if ($1 >= 423) print; else exit; }' | tac	<MISSING>
"tac filename | awk '{for (i=nf; i>1; i--) printf(""%s "",$i); printf(""%s\n"",$1)}'"	<MISSING>
"tac filename | perl -lane 'print join("" "", reverse(@f))'"	<MISSING>
tac filename | sed 4,6d | tac	<MISSING>
tac files | sort -t- -k2,2 -n	<MISSING>
tac infile | sed '/string match/,$d' | tac	<MISSING>
tac infile | sed -ne '/pattern2/,/pattern1/ p' | tac -	<MISSING>
"tac infile.txt | sed ""s/a/c/; ta ; b ; :a ; n ; ba"" | tac"	<MISSING>
tac inputfile | sed '/^statistics |/q' | tac	<MISSING>
tac temp.txt | sort -k2,2 -r -u	<MISSING>
tac your.log | grep stuff	<MISSING>
tac | sed '0,/a/ s/a/c/' | tac	<MISSING>
tac | sed -n '/pattern/,+19{h;d};x;/^$/!{p;s/.*//};x' | tac	<MISSING>
tail -1 $file1 | tee -a $file2	<MISSING>
tail -1 <(sort set)	<MISSING>
tail -1000 file-with-line-too-long.txt | more	<MISSING>
"tail -f /path/to/log | perl -pne 'print scalar(localtime()), "" "";' > /path/to/log-with-timestamps"	<MISSING>
tail -f /var/log/some.log | grep --line-buffered foo | grep bar	<MISSING>
tail -f /var/log/syslog	<MISSING>
tail -f access.log | stdbuf -ol cut -d ' ' -f1 | uniq	<MISSING>
tail -f file | grep --line-buffered my_pattern	<MISSING>
tail -f file | stdbuf -o0 grep my_pattern	<MISSING>
"tail -f logfile.log | grep --line-buffered ""something"" | read -t 3"	<MISSING>
tail -f xxxx | tee -a yyyy &	<MISSING>
"tail -n ""+$(grep -n 'terminate' file | head -n 1 | cut -d "":"" -f 1)"" file"	<MISSING>
tail -n +1 file1.txt file2.txt file3.txt	<MISSING>
tail -n +1000001 huge-file.log	<MISSING>
tail -n +11 /tmp/myfile	<MISSING>
"tail -n +2 ""$file"""	<MISSING>
"tail -n +2 ""$file"" > ""$file.tmp"" && mv ""$file.tmp"" ""$file"""	<MISSING>
tail -n +2 file.txt | split -l 20 - split_	<MISSING>
tail -n +2 file.txt | split -l 4 - split_	<MISSING>
tail -n +2 foo.txt	<MISSING>
tail -n +347340107 filename | head -n 100	<MISSING>
"tail -n 1 ""$file"" | tee >(wc -c | xargs -i {} truncate ""$file"" -s -{})"	<MISSING>
"tail -n 1 ""$file"" | wc -c | xargs -i {} truncate ""$file"" -s -{}"	<MISSING>
tail -n 100 file1 | bar | wc -l	<MISSING>
tail -n 100 file1 | pv | wc -l	<MISSING>
tail -n 1000 /var/spool/cron/*	<MISSING>
tail -n `tac biglogfile | grep -vnm1 2012 | sed 's/:.*//' | xargs expr -1 +` biglogfile	<MISSING>
tail -r myfile.txt	<MISSING>
tail /var/log/syslog	<MISSING>
tail great-big-file.log	<MISSING>
take a file path from standard input and remove it.	
"take all files in the directory "" /path/to/files"" and provide them as input to the script file truncate.sh"	
take all the files in the current folder and pass them as argument to a program	
take first text field from file 'file.txt' as a domain name and get short a record for this one.	
"take the last slash-separated section of variable ""file"" and copy it to variable ""name""."	
"take the section of variable ""file"" between the last slash and the following dot, if any, and store that section in variable ""name""."	
takes first text field from file 'file.txt' as a domain name and gets short a record for this one.	
takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable.	
takes folder path from string '/path/to/copy/file/to/is/very/deep/there' and created it with all parents.	
takes path list from '.exportfiles.text' file, cuts off first two path segments and last one.	
tar --exclude={*.png,*.mp3,*.wav,.git,node_modules} -jcf ${target_tarball}  ${source_dirname}	<MISSING>
"tar --help | grep ""lbzip2\|plzip\|pigz"""	<MISSING>
tar --one-file-system -czv /home | split -b 4000m - /media/drivename/backupname.tgz	<MISSING>
tar --strip-components 1 -xvf my_directory.tar.gz	<MISSING>
tar -c --checkpoint=.1000 /var	<MISSING>
tar -c --checkpoint=1000 --checkpoint-action=dot /var	<MISSING>
tar -c --use-compress-program=pigz -f tar.file dir_to_zip	<MISSING>
tar -c -c /path/on/local/machine . | docker cp - dvc:/path/on/container	<MISSING>
tar -c foo.sh | docker exec -i thedockercontainer /bin/tar -c /tmp -x	<MISSING>
tar -c my_dir -zcvf my_dir.tar.gz .[^.]* ..?* *	<MISSING>
tar -cvf - data/* | gzip > data.tar.gz	<MISSING>
"tar -cvf file.tar `find var/log/ -iname ""anaconda.*""`"	<MISSING>
tar -cvzf filename.tar.gz folder	<MISSING>
"tar -czf /fss/fi/outfile.tar.gz `find /fss/fin -d 1 -type d -name ""*"" -print`"	<MISSING>
tar -czf backup.tar.gz --exclude-tag-all=exclude.tag /path/to/backup	<MISSING>
tar -czf backup.tar.gz --exclude=pattern1 --exclude=pattern2 ... /path/to/backup	<MISSING>
tar -czf backup.tar.gz -x /path/to/exclude.txt /path/to/backup	<MISSING>
tar -czvf my_directory.tar.gz -c my_directory .	<MISSING>
tar -i 7zhelper.sh -cf output_file.tar.7z paths_to_archive	<MISSING>
tar -i pbzip2 -cf output_file.tar.bz2 /dir_to_zip/	<MISSING>
tar -i pbzip2 -cf output_file.tar.bz2 paths_to_archive	<MISSING>
tar -n '2014-02-01 18:00:00' -jcvf archive.tar.bz2 files	<MISSING>
tar -xof tarfile fileb.gz | zless	<MISSING>
tar -xvzf passwd.tar.gz	<MISSING>
tar -xzvf backup.tar.gz	<MISSING>
tar -zcvf compressfilename.tar.gz foldertocompress	<MISSING>
tar -zxvf $1	<MISSING>
tar [your params] |split -b 500m - output_prefix	<MISSING>
tar all files in the current folder and ask for user confirmation before creating the tar ball	
tar all the regular java files to myfile.tar	
tar c dir | md5sum	<MISSING>
tar cf - $pwd|tar tvf -	<MISSING>
"tar cf - $pwd|tar tvf -|awk '{print $6}'|grep -v ""/$"""	<MISSING>
tar cfvz --exclude='<dir1>' --exclude='<dir2>' target.tgz target_dir	<MISSING>
tar cvf - `find . -mtime -1 -type f -print` > $archive.tar	<MISSING>
tar cvf - `find . -print` > backup.tar	<MISSING>
tar cz my_large_file_1 my_large_file_2 | split -b 1024mib - myfiles_split.tgz_	<MISSING>
tar czf - www|split -b 1073741824 - www-backup.tar.	<MISSING>
tar czfp backup.tar.gz /path/to/catalog	<MISSING>
tar czvf mytarfile.tgz `find . -mtime -30`	<MISSING>
tar tf nginx-1.0.0.tar.gz | xargs dirname | sort | uniq	<MISSING>
tar tzvf archive.tar.gz | sed 's/ \+/ /g' | cut -f3 -d' ' | sed '2,$s/^/+ /' | paste -sd' ' | bc	<MISSING>
tar xpvf /path/to/my_archive.tar.xz -c /path/to/extract	<MISSING>
"tar xvf ""$myarchive"" && cd ""${myarchive%.tar.gz}"""	<MISSING>
tar xzf archive.tar.gz -c /destination	<MISSING>
target_pwd=$(readlink -f .)	<MISSING>
td=$( mktemp -d )	<MISSING>
"tdir=""$(pwd)/$(mktemp -d)"""	<MISSING>
tee	<MISSING>
tee /tmp/arjhaix4	<MISSING>
tee foobar.txt	<MISSING>
tempd=`mktemp -d`	<MISSING>
"tempfile=""$(mktemp ""${tmpdir:-/tmp/}$(basename ""$0"")-xxxxx"")"""	<MISSING>
tempfile=$(mktemp $(pwd)/templatexxxxxx)	<MISSING>
tempfile=xxx-$(od -n4 -tu /dev/random | awk 'nr==1 {print $2} {}')	<MISSING>
terminate amarok immediately.	
terminates shell before 'echo foo' if 'set -e' was applied and shell behavior matches the posix standart.	
"test if ""file.tar.gz"" is corrupt"	
test if a file named 'file' in the current directory is more than 1 hour old	
test if files named 'something' were found in dir/	
test if files named 'something' were found in your_dir	
test if the 2nd column in file a is in the reverse order of the second column of file b	
"test if the tar file in ""file.tar.gz"" is corrupt"	
testvar=bbb env | fgrep testvar	<MISSING>
tfile=$(mktemp --tmpdir=/dev/shm)	<MISSING>
the  command runs all the directories (-type d) found in the $logdir directory wherein a file's data has been modified within the last 24 hours (-mtime +0) and compresses them (compress -r {}) to save disk space.	
the cpio command is a copy command designed to copy files into and out of a cpio or tar archive, automatically preserving permissions, times, and ownership of files and subdirectories.	
"the file ""files_to_find.txt"" contains a list of filenames, create each file or update its timestamp if it exists."	
this command find displays the files which are modified in the last 15 minutes. and it lists only the unhidden files. i.e hidden files that starts with a . (period) are not displayed in the find output.	
this find command ignore the case when searching for file name , to ignore the case  in this example all .py & .py file will search	
this find command substitute space with underscore in the file name replaces space in all the *.mp3 files with _	
this will recursively grep all the files, compressed or uncompressed.2 if you want to grep only the compressed files then find + zgrep would be a better option.	
this will remove all files (type f) modified longer than 14 days ago under /root/maildir/ recursively from there and deeper (mindepth 1	
"this=`readlink -f ""${bash_source[0]}"" 2>/dev/null||echo $0`"	<MISSING>
thishostname=`hostname`	<MISSING>
time cut -f50000000 -d$'\n' myfile.ascii	<MISSING>
time find . -type f -exec stat {} + > /dev/null	<MISSING>
"time find /usr/src -name ""*.html"" -exec grep -h ""foo"" {} ';' | wc -l"	<MISSING>
"time find /usr/src -name ""*.html"" | xargs /usr/bin/grep -l ""foo"" | wc -l"	<MISSING>
"time find /usr/src -name ""*.html"" | xargs grep -l ""foo"" | wc -l"	<MISSING>
time sleep 1	<MISSING>
time stamp every ping request to 8.8.8.8 in unix epoch format	
timeformat=%r && time ls -l	<MISSING>
timeout 5 ssh user@ip	<MISSING>
"timestamp=$(find ./$dir -type f -printf ""%t@ %t\\n"" | sort -nr -k 1,2 | head -n 1)"	<MISSING>
timestamp=`date --rfc-3339=seconds`	<MISSING>
timex find /tmp -print|backup -ivqf/dev/null	<MISSING>
"tmp=$(mktemp -d $(dirname ""$1"")/xxxxxx)"	<MISSING>
tmp=$(w | awk '{print $1}')	<MISSING>
"tmp_file=""$(mktemp -t)"""	<MISSING>
tmp_file=`mktemp --tmpdir=/tmp emacs-manager.xxxxxx`	<MISSING>
tmpdir=$(mktemp -d /tmp/tardir-xxxxxx)	<MISSING>
tmpdir=$(mktemp -d)	<MISSING>
tmpdir=$(mktemp -d) && cd $tmpdir	<MISSING>
tmpdir=$(mktemp -p /tmp -d .daemonxxxxxxx)	<MISSING>
tmpdir=`dirname $(mktemp -u -t tmp.xxxxxxxxxx)`	<MISSING>
"tmpfile=$(mktemp $(dirname ""$1"")/xxxxxx)"	<MISSING>
"tmpfile=$(mktemp $(dirname ""$file1"")/xxxxxx)"	<MISSING>
tmpfile=$(mktemp)	<MISSING>
tmpfile=`mktemp`	<MISSING>
"tmpps_prefix=$(mktemp ""${tmpdir:-/tmp/}${tempname}.xxxxxx"")"	<MISSING>
tmux	<MISSING>
"tmux ""$tmux_command \; attach"""	<MISSING>
tmux -2	<MISSING>
"tmux -2 new-session -s name ""another_script.sh $1"""	<MISSING>
"tmux attach -t ""$(echo stuff)"""	<MISSING>
tmux attach -t <session name>	<MISSING>
tmux attach -t test1	<MISSING>
tmux configuration to enable mouse support within tmux	
tmux list-sessions	<MISSING>
tmux ls	<MISSING>
tmux movew -r	<MISSING>
tmux movew -s 4 -t 3	<MISSING>
"tmux new -d ""bash -c '$cmd'"""	<MISSING>
"tmux new -d ""bash -c \""$cmd\"""""	<MISSING>
tmux new-session -ds cf	<MISSING>
"tmux new-session -s vims -n vim0 -d ""vim foo"""	<MISSING>
"tmux new-window -t vims -d -n ""win0"" ""vim foo"""	<MISSING>
tmux send-keys -t cf 'cd ~/server' c-m	<MISSING>
tmux set -g history-limit 10000	<MISSING>
tmux set-environment -gu rbenv_version	<MISSING>
tmux set-environment -t sessname -u rbenv_version	<MISSING>
tmux set-environment -u rbenv_version	<MISSING>
tmux set-option -g history-limit 10000	<MISSING>
tmux set-option -g renumber-windows on	<MISSING>
tmux show-environment -g | grep rbenv	<MISSING>
tmux show-environment -t sessname | grep rbenv	<MISSING>
tmux show-environment | grep rbenv	<MISSING>
tmux show-options -g	<MISSING>
"tmux_version=""$(tmux -v | cut -c 6-)"""	<MISSING>
to descend at most one levels of directories below the command line arguments pass the -maxdepth 1 option. this will avoid deleting nested directories:	
to match only hidden dot directories	
"today=$(date  -d ""$(date +%f)"" +%s)"	<MISSING>
top	<MISSING>
top -b -d 1 | grep myprocess.exe | tee output.log	<MISSING>
"top -b -d 5 -n 2 | awk '$1 == ""pid"" {block_num++; next} block_num == 2 {sum += $9;} end {print sum}'"	<MISSING>
top -b -d2 -s1 | sed -e '1,/username/d' | sed -e '1,/^$/d'	<MISSING>
top -b -n 1 -u abc | awk 'nr>7 { sum += $9; } end { print sum; }'	<MISSING>
"top -b -n 1 | mail -s ""any subject"" your_email@domain.com"	<MISSING>
top -b -n1 -c	<MISSING>
top -b -n1 -c  | awk '/pid *user/{print;getline;print}'	<MISSING>
top -b -n1 -c  | grep -a 2 '^$'	<MISSING>
top -b -n1 | grep processname	<MISSING>
"top -b -n1 | head -8 | tail -1 | awk '{ printf ""user: %s\npid: %s\ncpu usage: %s\nmem usage: %s\n"", $2,$1,$9,$10 }'"	<MISSING>
top -b -p `pidof a.out`	<MISSING>
top -b -p `pidof a.out` -n 100	<MISSING>
top -bn1 | grep zombie	<MISSING>
"top -bn1 | grep zombie | awk '{print $4"" ""$6"" ""$8"" ""$10}'"	<MISSING>
top -bn1 | sed -n '/cpu/p'	<MISSING>
top -bn1 | sed -n '/cpu/p' | awk '{print $2}' | sed 's/..,//'	<MISSING>
top -c	<MISSING>
top -c -p $(pgrep -d',' -f string_to_match_in_cmd_line)	<MISSING>
top -l 1  | grep $app_name	<MISSING>
top -l 1 -s 0 -i 1 -stats vprvt -pid $pid	<MISSING>
top -l 1 -s 0 -i 1 -stats vprvt -pid pid	<MISSING>
top -l 1 -s 0 -stats mem -pid $pid	<MISSING>
top -l 1 -s 0 -stats mem -pid pid	<MISSING>
top -l 1 -s 0 -stats vprvt -pid 8631	<MISSING>
top -n 1	<MISSING>
top -n1 | sed 's/\(.*\)$/\1__custom_line_marker/g'	<MISSING>
"top -p ""$(pgrep --newest programname)"""	<MISSING>
"top -p ""$(pgrep --oldest programname)"""	<MISSING>
"top -p ""$(pgrep -d ',' java)"""	<MISSING>
"top -p ""$(pgrep programname | head -n 1)"""	<MISSING>
top -p $(pgrep -d',' http)	<MISSING>
top -p $(ps aux | awk '/programname/ && ! /awk/ { print $2; exit; }')	<MISSING>
top -p 18884 -p 18892 -p 18919	<MISSING>
"top -p `pgrep process-name | tr ""\\n"" "","" | sed 's/,$//'`"	<MISSING>
top -u abc -d 30 -b -n 10	<MISSING>
top –p $pid	<MISSING>
"totallinecnt=$(cat ""$file"" | grep ""$filter"" | grep -v ""$nfilter"" | wc -l | grep -o '^[0-9]\+');"	<MISSING>
"touch ""$correctfilepathandname"""	<MISSING>
touch $'icon\r'	<MISSING>
touch -a uedp0{1..5}_20120821.csv	<MISSING>
"touch -d ""$(date -r ""$filename"") - 2 hours"" ""$filename"""	<MISSING>
"touch -d ""$(date -r filename) - 2 hours"" filename"	<MISSING>
touch -d '30 august 2013' *.php	<MISSING>
"touch -d""$(date --date=""@$old_time"")"" b"	<MISSING>
touch -h somesymlink	<MISSING>
"touch -m --date=""wed jun 12 14:00:00 idt 2013"" filename"	<MISSING>
touch -m 201111301200.00 $log_dir/last.check	<MISSING>
touch -r a b	<MISSING>
touch -t 200510071138 old_file.dat	<MISSING>
touch -t `date +%m%d0000` /tmp/$$	<MISSING>
touch .bash_profile	<MISSING>
touch `cat files_to_find.txt`	<MISSING>
touch filename	<MISSING>
touch filename_`/bin/date +%y%m%d%h%m%s`.txt	<MISSING>
touch index.html	<MISSING>
tr  ' ' '-'	<MISSING>
tr '.' ' ' | sort -nu -t ' ' -k 1 -k 2 -k 3 -k 4 | tr ' ' '.'	<MISSING>
tr '[:blank:]' \\t	<MISSING>
"tr -cd "";0-9"""	<MISSING>
tr -cs '[:space:]'	<MISSING>
"tr -d ""\n\r"" < yourfile.txt"	<MISSING>
tr -d ' '	<MISSING>
tr -d '\n' < yourfile.txt	<MISSING>
tr -d -c x <infile | wc -c	<MISSING>
tr -dc '1-65000' </dev/urandom | head -c n	<MISSING>
tr -s ' ' < file | cut -d' ' -f4	<MISSING>
tr -s ' ' | cut -d ' ' -f 2	<MISSING>
tr -s '\t' < thefile.txt | tr '\t' ' ' > the_modified_copy.txt	<MISSING>
tr -sc '[:punct:]' '\n'	<MISSING>
tr=`which tr`	<MISSING>
traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt.	
"treat each line of ""list-of-entries.txt"" as a value to be put in one cell of the table that ""column"" outputs"	
treat references to unset variables as errors	
tree	<MISSING>
tree $absolute/path/of/your/dir	<MISSING>
tree --du -h -l 2	<MISSING>
tree --help	<MISSING>
tree --help 2>&1 | head -n2	<MISSING>
tree --help |& head -n2	<MISSING>
tree -a .	<MISSING>
tree -af	<MISSING>
"tree -afispugd --inodes | awk '{fs=""./""; ors=""""; printf(""%-60s%s\n"",$nf,$0)}'"	<MISSING>
tree -csu	<MISSING>
tree -d	<MISSING>
tree -d -l 1 -i --noreport	<MISSING>
"tree -dfi ""$(pwd)"""	<MISSING>
"tree -dfi -l 1 ""$(pwd)"""	<MISSING>
tree -f coreutils-8.9 | sed -r 's|── (.*)/$|── dir: \1|'	<MISSING>
tree -fi	<MISSING>
tree -fi |grep -v \>	<MISSING>
tree -i '3rd*'	<MISSING>
"tree -if | grep \\.[ch]\\b | xargs -n 1 grep -h ""#include"""	<MISSING>
"tree -if | grep \\.[ch]\\b | xargs -n 1 grep -nh ""#include"""	<MISSING>
tree -ivl 1 /data/ | perl -nle 'say if /\acommand-[0-9][0-9a-z.]*-setup\z/'	<MISSING>
tree -l 2	<MISSING>
tree -l 2 -fi	<MISSING>
tree -p	<MISSING>
"tree -p ""*foo"""	<MISSING>
tree -p -d	<MISSING>
tree -p -u -g -f	<MISSING>
tree -p -u -g -f -i	<MISSING>
tree -s	<MISSING>
tree .	<MISSING>
tree /	<MISSING>
tree | tail -1	<MISSING>
trim leading and trailing whitespace from variable 'var'.	
true	<MISSING>
true | cd /	<MISSING>
"true | echo ""$ret"""	<MISSING>
true | echo `tty | sed 's:/dev/::'`	<MISSING>
true | false | true	<MISSING>
true | sleep 10	<MISSING>
true | true | false | true | false	<MISSING>
true | xargs false	<MISSING>
truncate all non-empty regular files under the current directory	
truncate all regular files under the current directory	
truncates file $file, removing last line from it and prints this file on stdout.	
truncates file $file, removing last line from it.	
"try to determine the type of contents in ""myfile"" located in user's home directory."	
"tty=$(tty) wholine=$(who | grep ""${tty#/dev/}"")"	<MISSING>
"tunnel vnc port 5900 over compressed ssh and x11 forwarded session to ""remotehost"""	
turns on network interface eth0.	
"twofish=`echo -n $twofish | md5sum | tr -d ""  -""`"	<MISSING>
type unique list of all directories contiaining each file named 'myfile' under the /home directory	
uitotalsize=$(ls -l -r $1 | grep -v ^d | awk '{total+=$5;} end {print total;}')	<MISSING>
unalias python	<MISSING>
unalias sudo	<MISSING>
uname -a	<MISSING>
uname -i	<MISSING>
uname -m	<MISSING>
uname -m | grep '64'	<MISSING>
uname -n	<MISSING>
uname -o	<MISSING>
uname -r	<MISSING>
uname -r | cut -d. -f1-2	<MISSING>
uname -r | sed 's/\([0-9]\+\.[0-9]\+\)\..*/\1/'	<MISSING>
uname -s -r -v	<MISSING>
uname -srvm	<MISSING>
uname -v | grep -o '#[0-9]\+'	<MISSING>
uname_m=`uname -m`	<MISSING>
"uncomment every entry in current user's cron job list which contains ""test.sh"""	
"uncompress ""archive.tar.gz"" and extract the archive to ""/destination"""	
"uncompress all files listed in ""list.txt"" and send to ""./a.out"""	
"uncompress and unarchive ""data.tar.gz"""	
"uncompress file ""dbdump.sql.gz"" through standard input and pass to ""mysql"""	
"ungzip and untar all files matching ""www-backup.tar.*"""	
unhide all hidden files in the current directory	
uninstalls and then installs git formula.	
uniq	<MISSING>
uniq -c | sort -n | tail -n1	<MISSING>
uniq -w12 -c file	<MISSING>
"uniq temp.txt | perl -e 'undef $/; $_ = <>; open(out,"">temp.txt""); print out;'"	<MISSING>
unpack all *.gz archives in the current directory tree	
unsafed rm all file which name start with '#'	
unset $(/usr/bin/env | /usr/bin/cut -d = -f 1 | /usr/bin/xargs)	<MISSING>
"unset $(echo ""$a"" | /usr/bin/cut -d = -f 1)"	<MISSING>
unset $(locale|cut -d= -f1)	<MISSING>
"unset $(printenv |grep g4 |awk 'begin{fs=""="";}{print $1;}')"	<MISSING>
unset (delete) all environment variables.	
unset -f ls /bin/ls	<MISSING>
unset -f z	<MISSING>
unset -v latest	<MISSING>
unset -v penultimate	<MISSING>
unset `env | awk -f= '/^\w/ {print $1}' | xargs`	<MISSING>
"unset `printenv |grep g4 |awk 'begin{fs=""="";}{printf(""%s "",$1);}'`"	<MISSING>
unset array[$random%4]	<MISSING>
unset array[2]	<MISSING>
unset array[`shuf -i 0-3 -n1`]	<MISSING>
unset array[`shuf -i 0-4 -n1`];	<MISSING>
unset display	<MISSING>
unset dualcase	<MISSING>
unset git_dir	<MISSING>
unset gnuplot_driver_dir	<MISSING>
"unset ifs and read a single character from standard input  with timeout of 0.01 seconds and save the response in variable ""keypress"""	
"unset ifs and read a single character of standard input with no echo and save the response in variable ""select"""	
"unset ifs and read standard input into variable ""file"" until a null character is found without allowing backslashes to escape characters"	
unset rbenv_version variable from within tmux session.	
unset rbenv_version variable in global environment.	
unset rbenv_version variable in tmux session 'sessname' environment.	
unset the display variable	
unset the executable bit of all regular files from directory trees arch, etc, lib, module, usr, xpic	
unset z	<MISSING>
unsets 'history' shell option.	
unsets all environment variables with 'g4' in name.	
unsets all environment variables.	
unsets all locale variables.	
unsets array member with index 2.	
unsets dualcase variable.	
unsets environment variable 'z'.	
unsets environment variable represented as var=value by $a.	
unsets git_dir variable.	
unsets gnuplot_driver_dir variable.	
unsets random one from first five array members.	
unsets random one from first four array members.	
unsets shell function 'z'.	
unsets shell functions 'ls' and '/bin/ls'.	
unsets shell option 'extglob'.	
unsets shell variable 'latest'.	
unsets shell variable 'penultimate'	
"unzip ""$ip"" as input to ""pax -r"""	
"unzip ""archive.tgz"" and extract all archives excluding ones matching ""apri/fls/filename"""	
"unzip ""bigfile.txt.gz"" to standard output, search for patterns in ""patterns.txt"", and list the unique matches"	
"unzip ""daily_backup.sql.gz"" and search for lines matching ""'x'|/x/"""	
"unzip ""doc.gz"" and gzip every 1000 lines"	
"unzip ""file.gz"" and print each line with the 2nd | separated field greater than 5"	
"unzip ""file.gz"" and print each line with the 5th "" or | separated field greater than 5"	
"unzip ""file.gz"" to standard output and execute in bash with arguments ""-n wordpress"""	
"unzip ""file.gz"" to standard output and execute in bash with arguments ""arguments"""	
"unzip ""file.gz"" to stdout"	
"unzip ""file.gz"", list the unique first comma separated field prefixed by the number of occurrences, sort from least frequent to most frequent"	
"unzip ""file.gz"", list the unique lines matching regex pattern '""searchstring"":""[^""]*""' prefixed by the number of occurrences, sort from least frequent to most frequent"	
"unzip ""large.csv.gz"" and save every 1000 lines into a file with prefix ""xxx"""	
"unzip ""mydb.sql.gz"" to standard output as input to ""pg_restore ..."""	
"unzip ""path/to/test/file.gz"" to standard output and save all lines matching ""my regex"" to files with a 1000000 limit"	
"unzip ""some.file.gz"" to standard output"	
unzip -l some-jars-and-textfiles.zip | tr '[:blank:]' \\t | cut -f 5 | grep jar	<MISSING>
"unzip all "".gz"" files in the current directory tree excluding files containing ""dvportgroups"", ""nsanity"", ""vcsupport"", ""viclient"", and ""vsantraces"""	
"unzip all "".gz"" files in the current directory tree to their respective directories"	
unzip all *.zip files below the current directory	
unzip all *.zip files under current directory	
"unzip all files matching ""/homes/ndeklein/mzml/*.gz"""	
"unzip all files matching ""file_*"" and pipe into ""agrep -deoe 'grep'"""	
"unzip all files matching ""test1/*/*.gz"""	
"unzip all files that match ""*.gz"" in the current directory and subdirectories to stdout and search for ""test"""	
unzip all zip files in current folder	
"unzip and expand tar archive ""compressfilename"""	
"unzip and extract ""*\(useragent=[^=]*\) [^ =][^ =]*=.*"" from ""input.gz"""	
"unzip and extract ""*\(useragent=[^=]*\) [^ =]\+=.*"" from ""input.gz"""	
"unzip and extract ""useragent=[^=]*'"" from ""input.gz"""	
"unzip and merge all ""small-*.gz"" files into files of 2000000 lines"	
unzip and search for a word in all the jar files in the current folder and display the matched file name	
"unzip and untar ""4.56_release.tar.gz"" to standard output"	
"unzip and untar ""file.tar.gz"""	
"unzip and untar ""myarchive.tar.gz"" and check for corruption"	
"unzip and untar ""openssl-fips-2.0.1.tar.gz"""	
"unzip and untar ""tarball.tar.gz"""	
"unzip and write ""backup.img.gz"" to ""/dev/sdb"""	
"unzip every "".gz"" file in the current directory"	
"unzip every "".gz"" file in the current directory tree"	
"unzip file ""$empty_variable"""	
"unzip files ""file1.gz"" and ""file2.gz"" as arguments to ""command -1 -2"""	
update 'openssl' package to '2013.09' version.	
update the archive '2009.tar' with the files from the data/ directory tree that match pattern 'filepattern-*2009*'	
"update the archived copy of the home directory, ""alldata.tar"""	
update the history file in the current session	
update the permission of all the files in the folder /u/netinst to 500	
update the permission of all the php files in current directory and save the output to a file	
update the permissions of the directories in the folder folder_name to 775	
update the timestamp of '/tmp/$$' to the current month and day	
update the timestamp of 'filename', or create an empty file if it doesn't exist.	
update timestamps of all files (not directories) under current directory.	
update timestamps of all files (not directories) under current directory. also works on older unix systems with obsolete 'find' command.	
update timestamps of all files and directories under current directory.	
update timestamps of all files and directories under directory /path/to/dir.	
update timestamps of all files in entire filesystem which are not newer than /tmp/timestamp	
update timestamps of all regular files (ie. excluding directories, symlinks, sockets, etc.) under /your/dir	
update-client 2>&1 | tee my.log	<MISSING>
updates 'openssl' package, skipping packages with broken dependencies.	
updates 'openssl' packages without using of 'epel' repository.	
updates all installed software.	
updates all packages in system  answering 'yes' on all questions.	
updates all packages with 'rpmfusion' in name.	
updates all software in a system, skipping packages that have a failed dependencies.	
updates all software in system, prints update log on terminal and saves to 'mylogfile'.	
updates openssl package.	
upgrades 'php-mbstring' package, enabling 'remi' repository.	
"use ""$bytes"" amount of ram for ""$seconds"" seconds with no output"	
"use ""$bytes"" amount of ram showing the current and total rate of consumption"	
"use ""$bytes"" amount of ram with no output"	
"use ""/var/log/wtmp"" and print ips and search for ""^msw.*127.0.0.1"""	
"use ""composer validate"" command on all composer.json files"	
"use ""vagrant-ssh"" as the config file and ssh into ""default"" host"	
use 'less' to nicely display control characters from the outupt of 'grep'.	
"use ansi escape codes to make ""world"" bold from input ""hello world!"""	
"use awk command 'fnr==nr { array[$1,$2]=$8; next } ($1,$2) in array { print $0 "";"" array[$1,$2] }' on compressed files ""input1.vcf.gz"" and ""input2.vcf.gz"""	
"use awk command '{ ... }' on compressed files ""input1.vcf.gz"" and ""input2.vcf.gz"""	
use find -exec with multiple commands	
use find -exec with multiple commands regardless of their success or failure	
use find command to search for .png and .jpg files	
use metaflac to extract the artist field from myfile.flac, and set the variable artist to the value of that field.	
use multiple -exec command in find . find all .txt files & grep banna in .txt files .	
use regex with find command	
"use the contents of compressed files ""input1.txt.gz"" and ""input2.txt"" as arguments to ""command"""	
use the first non-zero exit code (if any) of a set of piped commands as the exit code of the full set of commands	
"use the last 100 lines of ""file1"" as input to ""wc -l"" and monitor the pipeline with the ""bar"" command"	
"use the last 100 lines of ""file1"" as input to ""wc -l"" and monitor the pipeline with the ""pv"" command"	
use the octal form to find and print detailed information about all regular files in your home directory and below that have only the group permission set.	
"use the output of ""ping google.com"" as input to awk script ""packet_loss.awk"""	
"use the php interpreter to output an endless stream of ""a"" characters to ""nohup.out"" in the current directory, or in the home directory if that is not possible. the php process will not receive or respond to sighup (signal 1) which are sent to it."	
"use the uncompressed contents of ""blah.gz"" as input to ""some_command"""	
"use the uncompressed contents of ""data.gz"" as input to ""./complicated-perl-script-that-reads-stdin"" and print a status"	
use up to a gigabyte of ram at a rate of 1mb per second showing the current and total rate	
"userlist=$(w|awk 'begin{ors="",""}nr>2{print $1}'|sed 's/,$//' )"	<MISSING>
users=$(awk '/\/x/ {print $1}' <(w))	<MISSING>
users=$(w | awk '/\/x/ {print $1}')	<MISSING>
uses gnu tool 'time' to estimate time consumed by command 'command' and redirects output to file	
uses the time utility to report only real execution time of 'ls' command.	
using exec in find command to dispaly the searched files	
uuencode <(head -c 200 /dev/urandom | base64 | gzip)	<MISSING>
v=$(whoami | awk '{print toupper($0)}')	<MISSING>
v=$(whoami | perl -e 'print uc <>')	<MISSING>
v=$(whoami | tr 'a-z' 'a-z')	<MISSING>
v=$(whoami | tr [:lower:] [:upper:])	<MISSING>
v=5 env|less	<MISSING>
vagrant ssh-config --host default | ssh -f /dev/stdin default	<MISSING>
value=$(uname -r)	<MISSING>
var1=`echo $var1 | tr '[a-z]' '[a-z]'`	<MISSING>
var2=$(echo $myvar | wc -c)	<MISSING>
"var=""$(find . -name 'gen*.bt2')"""	<MISSING>
"var=""$(hg st -r ""$path"" | sed ""s/\(^ *\| *\$\)//g"")"""	<MISSING>
var=$(ls -l)	<MISSING>
"var=( $(whoami && stat -c %i ""/home"") )"	<MISSING>
var=`dig axfr @dc1.localdomain.com localdomain.com | grep -i lawler | awk '{ getline ; $1=substr($1,1,length($1)-1); print $1 ; exit }'`	<MISSING>
"var=`echo $var | awk '{gsub(/^ +| +$/,"""")}1'`"	<MISSING>
var=`egrep -o '\[.*\]' filename | tr -d ][`	<MISSING>
"var=`hg st -r ""$path"" | sed -e 's/  *$//'`"	<MISSING>
"var=`hg st -r ""$path"" | tr -d '\n'`"	<MISSING>
variable pid contains a process id, check if this process exists - resulting exit status from this command will be zero if it does and current user has permission to send it signals.	
variable pid contains a process id, send sigterm to this process if it exists.	
"variable=$(echo ""$variable"" | tr ' ' '\n' | nl | sort -u -k2 | sort -n | cut -f2-)"	<MISSING>
variablename=$(date -d @133986838)	<MISSING>
"ver=`echo -ne ""$1\n$2"" |sort -vr |head -n1`"	<MISSING>
"verbosely change ownership of ""$file"" to ""root"""	
verbosely compresses all files on fifth and sixth depth level keeping original files in place.	
verbosely compresses all files on fourth and fifth depth level keeping original files in place.	
verbosely compresses all files on second and third depth level keeping original files in place.	
verbosely compresses all files on seventh and eighth depth level keeping original files in place.	
verbosely compresses all files on sixth and seventh depth level keeping original files in place.	
verbosely compresses all files on third and fourth depth level keeping original files in place.	
verbosely create intermediate directoriy tmp as required and directory boostinst	
version=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -dexpression=project.version | egrep -v '^\[|downloading:' | tr -d ' \n' | sed -e 's/\[.*\]//g')	<MISSING>
version=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -dexpression=project.version | egrep -v '^\[|downloading:' | tr -d ' \n')	<MISSING>
vi $(find . -type f -name 'btree*.c')	<MISSING>
vi `which yum`	<MISSING>
view /boot/config-$(uname -r)	<MISSING>
"view contents of files matching ""/usr/share/doc/mysql-server-5.0/changelog*.gz"" in ""less"""	
view gzip's help documentation	
"view history using ""less"""	
"view history using ""more"""	
"view history using ""vim"""	
"view history using ""vim"" in read only mode"	
"view line 500 to line 1000 in gzipped file ""bigfile.z"""	
"view line 500 to line 500 + 501 in gzipped file ""bigfile.z"""	
view lines 116 through 120 of history	
view manual page of find utility	
view manual page of the find command	
"view the bash manpage, starting with the view positioned at the first occurrence of the expression ""bash_source""."	
"view the contents of ""file.txt"" with line numbers in the pager ""less"""	
view the man page of find	
view the manual page of find	
views text content of compressed fileb file in tarfile archive.	
vim <(history)	<MISSING>
w	<MISSING>
w -h  | cut -d' ' -f1 | sort | uniq	<MISSING>
w -h $euids	<MISSING>
w | awk '{print $1}'	<MISSING>
w | awk '{print $1}' | xargs -i '{}' id '{}'	<MISSING>
w | grep ssh	<MISSING>
w | sed '1,2d' | cut -f1 -d' ' | sort | uniq -c	<MISSING>
w | sort	<MISSING>
"w | tr -s "" "" | cut -d"" "" -f1,5 | tail -n+3"	<MISSING>
"wait 2 seconds and then print ""hello"""	
"wait for a change in ""target-directory"" before returning"	
"watch ""ls /proc/$pythonpid/fd | wc -l"""	<MISSING>
"watch ""tail file | grep pattern"""	<MISSING>
"watch 'echo -e ""\033[31mhello world\033[0m""'"	<MISSING>
"watch 'echo -e ""\thello world""'"	<MISSING>
watch 'ls -l'	<MISSING>
watch --color 'tput setaf 1; echo foo'	<MISSING>
"watch --interval 0.1 ""nc remote.machine closed_port"""	<MISSING>
watch --interval=10 lynx -dump http://dslrouter/stats.html	<MISSING>
watch -d 'top -n1 | grep mysql'	<MISSING>
watch -d ls -l	<MISSING>
watch -n 0.1	<MISSING>
watch -n 0.5 ls -l	<MISSING>
"watch -n 1  ""mysqladmin -u root -pxxxxx processlist | grep tablename""  | tee -a /root/plist.log"	<MISSING>
watch -n 1 'ps aux | grep php'	<MISSING>
"watch -n 1 --color 'bash -c ""python -m unittest discover |& pyrg""'"	<MISSING>
watch -n 1 --color 'python -m unittest discover 2>&1 | pyrg'	<MISSING>
watch -n 1 --color --exec bash -c 'python -m unittest discover |& pyrg'	<MISSING>
watch -n 1 date	<MISSING>
watch -n 1 ls	<MISSING>
watch -n 1 ps -c java -o pcpu,state,cputime,etimes	<MISSING>
watch -n 3 -d ./my_script.sh	<MISSING>
"watch -n 300 -t '/usr/bin/fbi -noverbose -a -t 4 -u `find -type f | egrep -i ""(jpg|bmp|png|gif)$""`'"	<MISSING>
"watch -n 300 -t `find -type f | egrep -i ""(jpg|bmp|png|gif)$""`"	<MISSING>
watch -n 300 du -s path	<MISSING>
"watch -n 5 ""wget -qo-  http://fake.link/file.txt | tail"""	<MISSING>
watch -n 5 -c 'tail -f -n 50 mylogfile.txt | ccze'	<MISSING>
watch -n 5 wget -qo-  http://fake.link/file.txt	<MISSING>
watch -n 60 killall -usr1 dd	<MISSING>
"watch -n1 'ps x -o ""%p %r %c"" | grep ""test"" '"	<MISSING>
watch -n1 dropbox-cli status	<MISSING>
watch -n10 cat /tmp/iostat.running	<MISSING>
"watch -n1200 ""xbacklight -set 0% && sleep 20 && xbacklight -set 100%"""	<MISSING>
watch -tdn0.5 ps -mo pid,tid,%cpu,psr -p \`pgrep binary-name\`	<MISSING>
watch -tdn0.5 ps -mo pid,tid,%cpu,psr -p \`pgrep firefox\`	<MISSING>
watch bash -c your_script	<MISSING>
watch elinks -dump file.html	<MISSING>
watch ls	<MISSING>
watch ls -l	<MISSING>
watch ls -l data.temp	<MISSING>
watch wc -l <filename>	<MISSING>
wc *.py	<MISSING>
"wc -l $(find . -name ""*.php"")"	<MISSING>
wc -l $(git ls-files | grep '.*\.cs')	<MISSING>
wc -l $(git ls-files)	<MISSING>
wc -l $f | tr -s ' ' | cut -d ' ' -f 1	<MISSING>
wc -l $file | awk '{print $1}';	<MISSING>
wc -l **/*.php	<MISSING>
wc -l *.c	<MISSING>
wc -l --files0-from=<(git ls-files -z)	<MISSING>
wc -l /dir/file.txt	<MISSING>
wc -l < $file	<MISSING>
"wc -l `find . -name ""*.php""`"	<MISSING>
wc -l `find . -type f -name '*.txt' `	<MISSING>
"wc -l `find . -type f \( -name ""*.cpp"" -o -name ""*.c"" -o -name ""*.h"" \) -print`"	<MISSING>
wc -l `tree -if --noreport | grep -e'\.php$'`	<MISSING>
wc -l file	<MISSING>
"wc -l file.txt | cut -f1 -d"" """	<MISSING>
wc `find . -name '*.[h|c|cpp|php|cc]'`	<MISSING>
wc `find | grep .php$`	<MISSING>
wc `find`	<MISSING>
"wget --post-data=""piip=$(hostname -i)"" http://dweet.io/dweet/for/cycy42"	<MISSING>
whatever | tee logfile.txt	<MISSING>
when a window is closed in a session, automatically renumbers the other windows in numerical order (since v1.7).	
"when using vi-insert keymap bind command ""\c-v{}\ei"" to key ""{"""	
which -a python	<MISSING>
which -a rename | xargs file -l	<MISSING>
which -a rename | xargs readlink -f | xargs file	<MISSING>
which bzip2	<MISSING>
which c++	<MISSING>
which cc	<MISSING>
which file | file -f -	<MISSING>
which file | xargs file	<MISSING>
which find	<MISSING>
which gcc	<MISSING>
which gradle	<MISSING>
which lshw	<MISSING>
which programname	<MISSING>
which python	<MISSING>
which python2.7	<MISSING>
which rails	<MISSING>
which studio | xargs ls -l	<MISSING>
"while read line ; do cp ""$line"" ~/bar ; done < <(find . | grep foo)"	<MISSING>
"while read line; do mkdir -p ""${line%/*}""; done < infile"	<MISSING>
"while true ; do nc -l -p 1500 -c 'echo -e ""http/1.1 200 ok\n\n $(date)""'; done"	<MISSING>
who	<MISSING>
who --ips /var/log/wtmp | grep '^msw.*127.0.0.1'	<MISSING>
who -b	<MISSING>
"who -b | awk '{$1=""""; $2=""""; print $0}' | date -f -"	<MISSING>
who -la	<MISSING>
who -m	<MISSING>
who -m | awk '{print $1;}'	<MISSING>
who -m | awk '{print $1}'	<MISSING>
who -su | sort | uniq | column	<MISSING>
who am i --ips|awk '{print $5}' #ubuntu 14	<MISSING>
"who am i | awk '{print $5}' | sed 's/[()]//g' | cut -f1 -d ""."" | sed 's/-/./g'"	<MISSING>
who am i|awk '{ print $5}'	<MISSING>
who | awk '{ if (nr!=1 && nr!=2) {print} }' | sed -e 's/ /, /g'	<MISSING>
who | awk '{ print $1 }'	<MISSING>
who | awk '{ print $1, $2 }'	<MISSING>
"who | awk '{ print $1; }' | sort -u | awk '{print $1; u++} end{ print ""users: "" u}'"	<MISSING>
"who | awk '{print ""the user "" $1 "" is on "" $2}'"	<MISSING>
who | awk '{print $1}' | sort | uniq -c | sort -n	<MISSING>
who | awk '{print $1}' | xargs -n 1 id	<MISSING>
"who | awk '{print $3 "" "" $4 "" ""$1}' | sort | head -1"	<MISSING>
who | awk -f '[()]' '/orschiro/{print $(nf-1)}' | grep -v orschiro | uniq	<MISSING>
who | awk -f' ' '{print $1}' | sort -u | wc -l	<MISSING>
"who | cut -d "" "" -f1,2"	<MISSING>
who | cut -d ' ' -f 1 | grep -e '^ab' -e '1$'	<MISSING>
who | cut -d' ' -f1 | sort | uniq	<MISSING>
"who | grep ""$(tty | sed 's:/dev/::')"""	<MISSING>
who | grep $user	<MISSING>
who | grep -e '^ab' -e '1$'	<MISSING>
who | grep -v localhost | wc -l	<MISSING>
who | sed -e '/orschiro/! d; /pts/! d; s/^.*\(:[0-9.]\+\).*$/\1/p;d' | head -n1	<MISSING>
who | sed -e 's/[ \t].*//g'	<MISSING>
who | sed 1d | wc -l	<MISSING>
who | wc -l	<MISSING>
who |grep -i admin |cut -c10-20	<MISSING>
whoami	<MISSING>
whoami=$(whoami)	<MISSING>
will run checksums recursively from the current directory, and give back grouped filenames of all identical checksum results.	
workstation=`who -m|awk '{print $5}'|sed 's/[()]//g'`	<MISSING>
workstation_ip=`dig +short $workstation`	<MISSING>
"wrap each line in ""file"" to fit in 80 characters and count the number of lines"	
"wrap each line in ""file.txt"" to fit in 76 characters breaking only at spaces and indent the output"	
"wrap each line in ""file.txt"" to fit in 80 characters"	
"wrap each line in ""longline"" to a maximum of 30 characters"	
"wrap each line in ""longline"" to a maximum of 30 characters breaking at spaces"	
"wrap each line in ""yourfile"" to fit in 79 characters and right pad any lines shorter with spaces"	
wrap standard input to fit in 10 characters per line	
"write ""127.0.0.1 ad.doubleclick.net"" to the console and append to ""/etc/hosts"" as root"	
"write ""2-1"" to standard output and to ""/sys/bus/usb/drivers/usb/unbind"""	
"write ""2-1.1.1"" to standard output and to file ""/sys/bus/usb/drivers/usb/unbind"""	
"write ""[some repository]"" to standard output and append to ""/etc/apt/sources.list"" as root"	
"write ""\n/usr/local/boost_1_54_0/stage/lib"" to standard output and append to ""/etc/ld.so.conf"""	
"write ""australia/adelaide"" to standard output and to ""/etc/timezone"""	
"write ""deb blah ... blah"" to standard output and append to ""/etc/apt/sources.list"" as root"	
"write ""deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen"" to standard output and append to ""/etc/apt/sources.list.d/10gen.list"" as root"	
"write ""ee"" to standard output and ""/dev/stderr"" as input to ""foo"""	
"write ""ee"" to standard output and as input to command ""foo"""	
"write ""ee"" to standard output of the current terminal and as input to command ""foo"""	
"write ""ee"" to standard output on ""/dev/pty/2"" and as input to command ""foo"""	
"write ""error"" to both the log file ""log"" and standard error"	
"write ""error"" to standard error and do not append to ""log"""	
"write ""error"" to standard output"	
"write ""fifo forever"" infinitely using the named pipe ""fifo"" by writing its contents to standard output and to ""fifo"""	
"write ""foo"" to the real path of the current command's standard input"	
"write ""foo"" to the real path of the current command's standard output"	
"write ""hello world"" to the console and print number of bytes, symbols and strings in provided input."	
"write ""hello, world"" to standard output and to ""/tmp/outfile"""	
"write ""hey hey, we're the monkees"" to standard output and as input to ""gzip --stdout > my_log.gz"""	
"write ""hey hey, we're the monkees"" to standard output and as input to to ""gzip --stdout"" saved to ""my_log.gz"""	
"write ""hey hey, we're the monkees"" to standard output and as input to to ""gzip --stdout"" saved to ""my_log.gz"" without writing to disk"	
"write ""some console and log file message"" to standard output and ""/dev/fd/3"""	
"write ""some output"" to standard output and to ""/some/path/some_file"" as user ""some_user"""	
"write ""suspend"" to standard output and to file ""/sys/bus/usb/devices/usb3/power/level"""	
"write '""myname=""test""' to the console and append to ""$config"" as root"	
"write 10 lines of ""y"" to file ""10lines.txt"""	
"write 200 lines of ""this is the text i want to add to a file"" to myfile.txt"	
write a random list of numbers to /tmp/lst and stdout.	
"write contents of ""/sys/kernel/debug/tracing/trace_pipe"" to standard output and to ""tracelog.txt"" executing as a root user"	
"write current directory listing to standard output and to ""files.txt"""	
"write differences between files ""a.txt"" and ""b.txt"" side-by-side and not outputting common lines to file ""c.txt""."	
"write differences between files ""file1"" and ""file2"" to ""file3""."	
"write every two lines in ""infile"" on a single line separated by a comma"	
"write every two lines in ""infile"" on a single line separated by a space"	
"write lines 16224 through 16482 of ""file.in"" to ""file.out"""	
"write list of files present only in dir1 to file ""difference1.txt""."	
write list of missing files in subversion repository to file removedprojs.	
write out the entire directory hierarchy from the current directory	
"write output and error of ""ant"" to the console and to ""build.log"""	
"write output and error of ""bash myscript.sh"" to standard output and to ""output.log"""	
"write output and error of ""command"" to standard output and to ""/path/to/logfile"""	
"write output and error of ""update-client"" to standard output and to ""my.log"""	
"write output of ""command"" to standard output and append to ""/path/to/logfile"""	
"write output of ""command"" to standard output and to ""/path/to/logfile"""	
"write output of ""command_that_writes_to_stdout"" to standard output and as input to ""command_that_reads_from_stdin"""	
"write output of ""foo"" to standard output and to ""output.file"""	
"write output of ""ls -a"" to standard output and to ""output.file"""	
"write output of ""ls -hal /root/"" to standard output and to ""/root/test.out"""	
"write output of ""ls -lr /"" to standard output and append to ""output.file"""	
"write output of ""ls -lr /"" to standard output and to ""output.file"""	
"write output of ""sudo ls -hal /root/"" to ""/root/test.out"""	
"write output of ""whatever"" to standard output and to ""logfile.txt"""	
"write output of ""yourcommand"" to standard output and to ""output.txt"""	
"write standard input to standard output and file ""/tmp/arjhaix4"""	
"write standard input to standard output and to ""foobar.txt"""	
"write standard output and error of ""./a.out"" to standard output and to file ""output"""	
"write standard output and error to the console and append to file ""log"""	
"write standard output of ""command"" to console and append to ""stdout.log"", and write standard error of ""command"" to console and append to ""stderr.log"""	
write summary of files present only in dir1, and which files differ between dir1 and dir2 to file 'difference1.txt'	
"write the common third space separated fields in ""file1.sorted"" and ""file2.sorted"" to ""common_values.field"""	
"write the current date and time followed by "" 0"" to the console and append to ""log.csv"""	
"write the current date and time followed by "" 1"" to the console and append to ""log.csv"""	
"write the last line of ""$file"" to standard output and remove it from ""$file"""	
"write the lines appended to ""xxxx"" as it appears to the console and append to ""yyyy"" in the background"	
"write the list of all files on the system to ""masterfilelist.out"""	
write the list of regular files in the current directory tree to files /tmp/grep1 and /tmp/grep2	
"write the output of ""./program"" to the console and ""a.txt"""	
"write the output of ""false"" to standard output and to ""/dev/null"""	
"write the output of ""input_prog"" to standard output and error on console and as input to command ""my_editor"""	
"write the output of ""proc1"" to standard output and to all commands from ""proc2"" to ""procn"""	
"write the output of ""somecommand"" to standard output and ""somefile"""	
"write the output of command ""mongo"" to the screen and to file ""somefile"""	
write the shell's input to standard error as it is read	
"write the standard output and error of ""ls"" to standard output and ""/tmp/ls.txt"""	
"write the standard output and error of ""ls"" to the console and append it to ""/tmp/ls.txt"""	
"write the standard output and error of ""program.sh"" to console and append to ""log"""	
"write the standard output and error of ""somecommand"" to the console and ""somefile"""	
"write the standard output and error of ""somecommand"" to the console and append it to ""somefile"""	
write to standard error a trace for each command after it expands the command and before it executes it	
"write unbuffered output of ""python -u client.py"" to standard output and to ""logfile"""	
"x=$(grep ""$(dirname ""$path"")"" file)"	<MISSING>
x=$(ifconfig eth0) && x=${x#*hwaddr } && echo ${x%% *}	<MISSING>
x=$(whoami)	<MISSING>
xargs -i '{}' rm '{}'	<MISSING>
xargs -i rm '{}'	<MISSING>
"xargs -n 1 -i '{}' find ""$(pwd)"" -type f -inum '{}' -delete"	<MISSING>
"xargs -n 1 -i '{}' find ""$(pwd)"" -type f -inum '{}' -print"	<MISSING>
xargs -n 1 dirname <somefile.txt | xargs mkdir -p	<MISSING>
"xargs rm -f <<< $(find . -name "".txt"")"	<MISSING>
xhost +si:localuser:`whoami`	<MISSING>
"xmllint example.xml --xpath ""/config/*/@*"" | sed ""s| key|\nkey|g"" | nl"	<MISSING>
xxd -p file | tr -d '\n'	<MISSING>
xxx |& tee /dev/null	<MISSING>
"y=$(bash -c ""read -n 1 c; echo \$c"")"	<MISSING>
year=$(od -t x2 --skip-bytes=6 --read-bytes=2 file.moi | head -1 | awk '{print $2}')	<MISSING>
yes	<MISSING>
"yes ""$optarg"" | head -$opt"	<MISSING>
"yes ""hidden"" | dd of=/dev/sdb"	<MISSING>
"yes ""hidden"" | paste -d' ' -s - | dd of=/dev/sdb"	<MISSING>
"yes ""hidden"" | tr '\n' '\0' | dd of=/dev/sdb"	<MISSING>
"yes ""this is the text i want to add to a file""|head -200>myfile.txt"	<MISSING>
yes $'a\nb' | script.py	<MISSING>
yes $'one\ntwo' | head -10 | nl | sort -r | cut -f2- | head -3	<MISSING>
yes $1 | head -$number	<MISSING>
yes ' ' | head -7 | tr -d '\n'	<MISSING>
yes '#' | head -n 10 | tr -d '\n'	<MISSING>
yes '' | nl -ba | sed -n -e 11,24p -e 24q	<MISSING>
"yes '' | ruby -e ""$(curl -fssl https://raw.github.com/homebrew/homebrew/go/install)"""	<MISSING>
yes 'c=(╱ ╲);printf ${c[random%2]}'|bash	<MISSING>
yes 'http://www.blabla.bla/forum-detail/?ft=72260&fid=34&&pgr=' | nl -ba | sed 786q | grep . | awk '{print $2$1}'	<MISSING>
yes 'printf \\u$[2571+random%2]'|bash	<MISSING>
yes 'uuuuuuuuuuuuuuuuu' | tr -d '\n' > /dev/to/overwrite	<MISSING>
yes '| country' | sed $(wc -l < file)q | paste -d ' ' file -	<MISSING>
"yes -- ""-tcp"" | head -n 2"	<MISSING>
yes -- -tcp | head -n 2	<MISSING>
yes 0 | script -c 'ispell text.txt' /dev/null	<MISSING>
yes 0 | script -c 'ispell text.txt' out.txt	<MISSING>
yes 0 | sed '1~2s/0/1/'	<MISSING>
yes 1 | command	<MISSING>
yes 1 | nl | tee /tmp/to	<MISSING>
yes 1 | script -c 'aspell check text.txt' /dev/null	<MISSING>
yes 123456789 | grep --line-buffered . | { head -n 1; head -n 1; }	<MISSING>
yes 123456789 | head -2	<MISSING>
yes 2>/dev/null | ./myscript.sh	<MISSING>
yes > backingfile &	<MISSING>
"yes a=\""20131202\"" | sed -e :a -e 's/...\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)./\1 \2 \3/'"	<MISSING>
yes image.png | head -n10 | xargs echo	<MISSING>
yes n | gunzip file*.gz	<MISSING>
yes n | rm -ir dir1 dir2 dir3	<MISSING>
yes n | rm -r *.txt	<MISSING>
yes no	<MISSING>
yes no | <command>	<MISSING>
yes ok | recalcitrant.php	<MISSING>
"yes x | head -10 | awk 'begin { rs = ""%%%%%%%"" } { split($0,a,""\n""); for (i=1; i<length(a); i+=4) print a[i], a[i+1], a[i+2], a[i+3] }'"	<MISSING>
yes x | head -n 10	<MISSING>
yes y | command-that-asks-for-input	<MISSING>
yes y | rm -ir dir1 dir2 dir3	<MISSING>
yes yes | ./ittp-update.sh	<MISSING>
yes yes | sed -e 5s/yes/no/ -e 5q	<MISSING>
yes | /bin/rm -i *	<MISSING>
"yes | awk 'fnr<4 {print >>""file""; close(""file"")}  1' | more"	<MISSING>
yes | cat -n | head -10 | awk 'nr % 4 == 1'	<MISSING>
yes | cat | more	<MISSING>
yes | command	<MISSING>
yes | command-that-asks-for-input	<MISSING>
yes | cp * /tmp	<MISSING>
yes | cp -rf /zzz/zzz/* /xxx/xxx	<MISSING>
yes | execute_command	<MISSING>
"yes | grep y | sed 100q | awk '{printf( ""%03d "", nr )}'; echo"	<MISSING>
yes | head -3	<MISSING>
"yes | head -n 10 | awk '{printf( ""%03d "", nr )}'"	<MISSING>
"yes | head -n 10 | awk '{printf( ""%03d "", nr )}'    ##for 01..10"	<MISSING>
"yes | head -n 100 | awk '{printf( ""%03d "", nr )}'"	<MISSING>
"yes | head -n 100 | awk '{printf( ""%03d "", nr )}'   ##for 001...100"	<MISSING>
yes | head -n10 > 10lines.txt	<MISSING>
yes | head -n10 | grep -n . | cut -d: -f1 | paste -sd:	<MISSING>
yes | more	<MISSING>
yes | mv ...	<MISSING>
yes | nl -ba | tr ' ' 0 | sed 100q | cut -b 4-6	<MISSING>
yes | pv --quiet --rate-limit 10	<MISSING>
yes | rm	<MISSING>
yes | rm -r *.txt	<MISSING>
yes | rm -ri foo	<MISSING>
yes | sed -n '200000000,${=;p};200000005q'	<MISSING>
yes | sudo rpm -uvh https://mirror.webtatic.com/yum/el6/latest.rpm	<MISSING>
yes | tr \\n x | head -c $((1024*1024*1024)) | pv -l $((1024*1024)) | grep n	<MISSING>
yes | tr \\n x | head -c $bytes | grep n	<MISSING>
yes | tr \\n x | head -c $bytes | pv | grep n	<MISSING>
yosemite$ echo -n 401 | md5	<MISSING>
your_command | less	<MISSING>
yourcommand | tee output.txt	<MISSING>
yum --disablerepo=sublime2 install firefox	<MISSING>
yum --enablerepo=remi install php-mbstring	<MISSING>
yum --enablerepo=remi php-mssql	<MISSING>
yum --enablerepo=remi upgrade php-mbstring	<MISSING>
yum --help	<MISSING>
yum --nogpgcheck localinstall packagename.arch.rpm	<MISSING>
yum -h	<MISSING>
yum -v repolist enabled	<MISSING>
"yum -y groupinstall ""development tools"""	<MISSING>
"yum -y groupinstall ""mysql database client"""	<MISSING>
yum -y install mono-devel	<MISSING>
yum -y update	<MISSING>
yum check-update | awk 'p; /updated packages/ {p=1}'	<MISSING>
yum check-update | awk '{if($5 ~ /updates/){print $1}}' | tr '\n' ','	<MISSING>
yum info zsh	<MISSING>
yum install --exclude='*glob*' *.rpm	<MISSING>
yum install -y devtoolset-3	<MISSING>
yum install -y nodejs	<MISSING>
yum install ffmpeg-2.6.4-1.fc22.x86_64.rpm	<MISSING>
yum install firefox	<MISSING>
yum install mysql	<MISSING>
yum install mysql mysql-server	<MISSING>
yum install packagename	<MISSING>
"yum list installed  --disablerepo=""*"" --enablerepo=""fedora*"""	<MISSING>
yum list zsh	<MISSING>
yum list | grep subversion	<MISSING>
yum provides zsh	<MISSING>
yum remove subversion	<MISSING>
yum repolist | tail -n +3 | grep -v 'repolist:' | cut -f1 -d' '	<MISSING>
yum search mysql | grep client	<MISSING>
yum search zsh	<MISSING>
yum update	<MISSING>
yum update $(find-repos-of-install | grep rpmfusion)	<MISSING>
yum update | tee mylogfile	<MISSING>
"zcat ""$file"" | awk '{print nf}' | head"	<MISSING>
"zcat ""$line"" | head -n5"	<MISSING>
zcat $(cat list.txt) | ./a.out	<MISSING>
zcat *r1*.fastq.gz | wc -l	<MISSING>
"zcat -r /some/dir/here | grep ""blah"""	<MISSING>
zcat /proc/config.gz | grep config_64bit	<MISSING>
zcat /usr/share/doc/mysql-server-5.0/changelog*.gz | less	<MISSING>
zcat /usr/share/man/man1/man.1.gz  | groff -mandoc -thtml	<MISSING>
"zcat /var/log/fail2ban.log* | gawk  '/.*ban.*/  {print $7};' | sort | uniq -c | sort | gawk '{ ""geoiplookup "" $2 ""| cut -f2 -d: "" | getline geoip; print $2 ""\t\t"" $1 "" "" geoip}'"	<MISSING>
zcat `find /my_home -name '*log.20140226*'`|grep 'vid=123'	<MISSING>
"zcat a.csv.gz | gawk '$2>5' fpat='[^""|]+'"	<MISSING>
zcat archive.tgz | tar -x --wildcards apri/fls/filename	<MISSING>
zcat bigfile.z | sed -ne '500,1000 p'	<MISSING>
zcat bigfile.z | tail -n +500 | head -501	<MISSING>
zcat biglogfile.gz | split -l500000 --filter='gzip > $file.gz'	<MISSING>
zcat compressfilename | tar xvf -	<MISSING>
"zcat daily_backup.sql.gz| grep -e ""'x'|/x/"""	<MISSING>
zcat doc.gz | split -l 1000 --filter='gzip > $file.gz'	<MISSING>
zcat file | awk '{ ...}'	<MISSING>
zcat file.gz	<MISSING>
"zcat file.gz | awk -f'[|""]' '$5>5'"	<MISSING>
zcat file.gz | awk -f, '$1 ~ /f$/'	<MISSING>
"zcat file.gz | awk -v rs=""-----------\n"" '/a=2[ ,\n]/ && /dummy=2[ ,\n]/{count++} !/dummy=2[ ,\n]/{other++} end{print ""final counter value="",count, ""; other="", other}'"	<MISSING>
"zcat file.gz | awk -v rs=""-----------\n"" '/a=2[ ,\n]/ && /dummy=2[ ,\n]/{count++} end{print ""final counter value="",count}'"	<MISSING>
zcat file.gz | cut -f1 -d, | sort | uniq -c | sort -n	<MISSING>
"zcat file.gz | grep -o '""searchstring"":""[^""]*""'| sort | uniq -c | sort -n"	<MISSING>
zcat file.tar.gz |tar x	<MISSING>
zcat filename.gz | grep -i user-user	<MISSING>
zcat input.gz | ./myscript.pl	<MISSING>
zcat input.gz | grep -o 'useragent=[^=]*' | sed 's/ [^ ]*$//'	<MISSING>
zcat input.gz | sed -n 's/.*\(useragent=[^=]*\) [^ =][^ =]*=.*/\1/p'	<MISSING>
zcat input.gz | sed -n 's/.*\(useragent=[^=]*\) [^ =]\+=.*/\1/p'	<MISSING>
zcat input.txt.gz | command -	<MISSING>
zcat input.txt.gz | cut -d , -f 1 | sort | uniq -c	<MISSING>
zcat large_file.gz | largesplitter	<MISSING>
"zcat log.tar.gz | grep -a -i ""string"""	<MISSING>
zcat number.txt.gz | { zcat xxx.txt.gz | comm -12 /dev/fd/3 - ; } 3<&0	<MISSING>
zcat sample_0001.gz | sed -e 's/lk=1&//g'	<MISSING>
zcat sample_51770bl1_r1.fastq.gz | wc -l	<MISSING>
zcat small-*.gz | split -d -l2000000 -a 3 - large_	<MISSING>
zcat tarball.tar.gz | tar x	<MISSING>
"zegrep ""xception"" `find . -name '*auth*application*'` | wc -l"	<MISSING>
zless myfile	<MISSING>
{ echo foo; cat bar; } | tee bar > /dev/null	<MISSING>
"{ find . -name '*my key phrase*'; grep -rl 'my key phrase' *; } | sed ""s/^\.\///"" | sort -u"	<MISSING>
{ find . -name '*my key phrase*'; grep -rl 'my key phrase' .; } | sort -u	<MISSING>
{ read -r -d' ' time && ifs= read -r -d '' filename; } < <(find . -type d -printf '%a@ %p\0' | sort -z -r -n)	<MISSING>
{ time find / &>/dev/null; } 2>&1 | grep real	<MISSING>
{ time find / 2>/dev/null; } 2>time.txt	<MISSING>
{ time ls -l >/dev/null; } |& grep real	<MISSING>
{ time ls; } 2>&1 |  cat > time.txt	<MISSING>
{ time sleep 1 2> sleep.stderr ; } 2> time.txt	<MISSING>
{ time sleep 1 ; } 2> time.txt	<MISSING>
{ time sleep 1; } 2>&1 | grep real	<MISSING>
{ yes yes | sed 4q; yes no | sed 1q; } | ./script	<MISSING>
~ $ . trap.sh | cat	<MISSING>
~/bin/find /non-existent/directory -name '*.plist' -print	<MISSING>
